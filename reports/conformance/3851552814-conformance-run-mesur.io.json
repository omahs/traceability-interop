{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "35c22713-da00-42eb-9185-cadf96bfd4f2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0f41a117-b3cb-44d4-82bb-b94e7fea79fe",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "99b0ec97-2e1d-4219-a3b9-df3ec26bcdf6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d83edcc9-b9cf-48cd-898e-5695f6d70468"
                }
              }
            ]
          },
          {
            "id": "773446b9-4f90-4fb4-b083-1bb04963ee61",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "131f6d93-f48a-4cb0-b153-47c84c43fd7b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a43cdc8a-aaa9-4006-88e8-80f40e07d64f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6d7a400a-e746-4f8e-b4a5-c82e07fc1d01",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b14568d5-3f5f-4658-a753-9b3581c95a9d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "53f69bc0-5646-4323-92e5-6795111a5b6a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d1571e7-2cc4-453d-b766-399840a3b3b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3037803e-d1c8-4275-b7c4-b9b4ed71946e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c9d5f8e3-c59a-410a-8f64-86cdbe0e10f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed5736dc-dde8-456e-b7fa-6f4f7fcdaf17"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f11e3a62-08dc-4e11-8249-b60182009d05",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5099ecc0-ff8c-4cec-b472-7b733574e9fa"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c703e987-9265-47b9-bdac-df617af0eb03",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8ecc1a13-1d55-46f3-8be7-576bde269349"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ee44582-4f2a-4cd9-a29c-691b28b43e39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "579f9598-74b5-46e3-b5b4-1e5f0a962a68"
            }
          }
        ]
      },
      {
        "id": "fffe426b-cc9e-4fca-913f-29ae829ac96e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6c929f5e-1204-40f6-bffe-c97a67abf2bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ab09525-d694-4656-a03e-46ab288a4775",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3c044922-a122-453c-af16-296ad826f5e5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8c53f7-dc7d-467d-b3f2-345ee5d18545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "edf8f819-78e7-4883-bb3b-4b0c51656410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2904a1-5acc-40d9-8826-d3ae54b7215d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b1575c-7632-4255-9470-3638e57b3859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73c99593-4796-41ff-aa62-ec50546fb72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076f969e-4400-430a-98de-e5b41a19b88a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3950fde1-fbf2-40cc-a400-2bae84708adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99a33cc5-2913-4790-91f5-7ea2bc67d295"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "17bcdd21-1b59-416f-b981-bfe12aa60fc7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9090d8bb-21b5-4da1-9267-2062f19229de",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702985d7-e6b2-4ca3-9757-d95e0a98f3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "052be9cb-1716-447f-997d-3fca292e2e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0b739a-0205-4c63-a184-56f90ef004ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f322f3-0fef-48f9-8365-154a420834d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48927075-e36b-4b23-8470-6a927515a094",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990f8ed1-13dc-423d-8663-edff5c90e66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "148e0478-2289-401f-a6d3-8cad2cff7847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6cc3db-1e2c-4faf-87e9-50599c81de9c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "3aaa7ecf-c209-4a27-9b54-dc88c9e19b9f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c53f172a-d9de-4ad8-931e-d621e26a518d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "56a843d7-18ac-47b5-8f49-5d1e16e60884",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e93ee2d-3d06-480d-b511-760036e27ee3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "460b00ed-faff-458b-8707-642dfc5f1bca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5392122b-7f65-4005-8926-5d8f8cea6dff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "1d89b11c-fe60-4049-b4f7-4887625c09d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "827f55f0-e840-4faa-a1eb-b187aea99196",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ecef422-49f8-4de7-b80f-b299b638156a"
            }
          }
        ]
      },
      {
        "id": "d85dd1dc-97bc-4802-a0e8-02caf1d15d63",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a4f6c2e0-996b-4c40-a5d2-7bf7b019c88b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cca22dc4-19aa-44df-9acd-e9d4cee7a07a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2dffc16d-7f02-4a26-852c-4adbfd74a221",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e2651c-aaab-4e10-90e6-fad870ad2b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c86afc-3250-42f0-80d5-99725ece8046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947ffdaa-042b-4636-990b-a99af2b54bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80d02138-b2b2-433f-8160-78367b4b573c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3de929-eca1-48c8-a325-59123e33a8eb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab230d40-e5ab-472c-a54d-cf8a9d9e99a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e75dc68-c471-44a6-83d8-c505f8ad9102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57df840b-a460-46c1-8df0-9e5b36c821fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dca07e1-d5a6-43e1-adb2-721718486ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c4b1ae-3111-4fb5-a6b1-f5b18adf2a40",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc40187-746e-42a3-b44a-4938339e7fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "298a929d-54ea-443e-9b83-d57e91a39091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f385638-d9f8-4478-ae0d-07903642d7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ae58f42-41c3-4946-9af2-9586512c353a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc7bd7b-0190-4ce0-8f19-a67a96bb51d6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040b1865-cdcb-440e-8d4e-b6ae415807c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd57ca4c-3f40-4214-a211-62b3648aef80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c945644e-7285-4489-be7a-739c2d76d8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbc46796-a636-4538-a363-67b366ac63c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee4c263-1f2e-49e1-83f3-edea7a93b4ad",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e04bb8-3632-4e29-b77e-02b7727f1b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd53216-7af9-4846-9977-9c57e646dad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385f8e98-0289-43d5-a9d2-4e0975552fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ecced8b-e6ce-4e26-a075-e7cda53a6f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00575a53-9a07-4039-a636-eb0275d4e731",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04594e71-35f3-42a4-b687-86429a099067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0e2566-36af-4412-b0e4-08d078d91cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52dbda2-1b00-404a-a1b8-cc54ee94a3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9452125c-ce32-48cd-920a-27ee757244a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d58fe1-d593-4d5c-9d0c-43f9009df4b6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "982bbfeb-a406-415d-af90-d7c2382bfd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b0521e-1018-4fa2-9019-b3f8c19a1e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ee9295-871d-4649-a06d-46bf0a8fdde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d46f749-0118-4a21-b5ba-aac93f1a7121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1da028-8365-4f1a-be1a-c96dad4006bb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05dff67-e22a-457e-81ad-a00cc47e8f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df75c46d-4a96-43a6-a415-bf8ecd1e0b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5769edc0-d244-4b38-b82a-6f52a114b885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "485ba73c-1b6f-485a-a775-de1219057af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cd7bff-d46d-4e11-b0d2-8af10821df73",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ce9a16-cbe9-4111-a047-ad570eb4700b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d14a649-de68-40bb-926b-ea4a604d3e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98642e57-1ed0-44bd-9578-d6bef73f31b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d219c431-a63f-471c-a42d-2fc2e2fea895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c07aca9-63f5-4a22-b293-3523e019835b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5ef9c9-6f76-4636-9b16-4dec7a8538fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ead32f-7b15-4cda-8743-46c1f66d55de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7f5446-2d09-4587-97f0-c9807239b874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83d220cc-dbfc-4166-ab07-efe00a456ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74aa563e-e400-4b01-a1e2-06d543a4c7eb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bea734c-9a6d-4a9a-a31a-c6feb4802f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a48ba52-5766-4f34-94d3-189f376c0721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7818784-f484-46a7-937c-34214f3ac8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2142ed92-5aaa-489d-90a4-a135f7cdf332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e074bbf-9ae7-4817-8833-ae36b99b92e4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d111867-985c-44a4-84ae-9f2b2dcba6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9955953-58d3-4b50-bddb-a4ea0ec77d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e5ff03-5714-4e19-8d30-561506311b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82c8117a-9505-47bb-af32-393dbcc6537f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ec66fc-0d19-4f54-ae36-31c07198ccb6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a104937b-a16a-47d7-bcd0-9f197806797d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0c8d56-d28a-4264-8156-eb1cd6c841ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3c48e7-b36f-4c3f-b941-e65eeb20fa85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c98280f-a4a9-4d11-aba8-ef8ca1cf05fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c5f751-2c0b-4d35-9f1f-6d0c36a9d352",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddea3a5-b933-4a7f-9a42-188f3166aa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d586de0-1a14-4c2b-8039-ea03607379b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b982c9-e63e-43d7-b1a0-76e7d13ab80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c9de378-9a5f-4fe3-bafc-e0f14837a78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dff844b-0d40-4c05-acc4-376baf646a83",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9084df3-5ff1-4bd5-9817-6f5be234fe8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21b688b-1ecf-44fb-9699-9f01d63b6b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a91959-18c8-4f52-a6ee-930ad3e71f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaad9cad-373b-41ff-8149-21d74b237750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a653cd-c796-4bc4-b59f-c4a6b31ed307",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfeb9c7a-a8b5-4129-b4f1-ced429a1d1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2308984-75bd-46ac-bd18-248fb1f21294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902e7139-ba9b-41f4-9356-8cc574051dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4c0a8f6-daf8-44c0-a42d-8b1016e6ffa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a23051-826f-4437-9cac-1c026a04e76a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ecc598-e55e-4c5b-923c-2ab37ef9ae27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2b9b25-f7b9-4b2f-b903-30cc78e39317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc1864e-41ee-41ce-b405-502be0708aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b4a7f26-3ffe-49b2-bc3c-b1d5376b842a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aefaf49-2a79-4047-853e-b7e7a1bfde86",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1242018-de8c-44e2-ae71-83b4eabf5ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bc91f6-04b1-47d4-8e2d-5a5b22403f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdceeb62-8476-4368-9c5f-d05767fa9744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2951a376-ce3f-4d30-af96-7dbd41053183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039744b2-4c7d-4f1e-9253-66738c504412",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c20ac6b-f934-41ec-950d-667d28b802d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb93e05f-4f54-492c-b149-b03ac9a04499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5e6980-5df6-4488-9a6f-d5a99989ff52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24afb3d3-aaf7-45f9-aa29-f9774f12592f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce62dd0-79ae-4dae-a346-ec1e4d23bb08",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdefccf-a92d-41fe-8b5b-efbe999932b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0544bb3-fb1e-47b4-be63-93ed4d4bda0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca22d2a1-af84-45c5-8ac6-4d944c13f23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f84f1288-dccd-4158-ad02-b10fd0ab15b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3d0aff-5e9f-4421-914a-ee76cf5c13b6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624f2677-f6d4-4f0e-8e2b-5506f24ad96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6135bdb-c966-4638-a1d1-aaf6506c04c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1773834a-fcbe-43ac-b98f-e35bc13326ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c01644-b92a-4f9e-b39e-0fb6f36ec8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a387b9-a82c-49a0-9490-c170bd158eb8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e815a77-1e31-42fb-97d4-7c7e9f6129d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12eeec89-64c2-4066-810d-bbdec8246dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48174b91-46ed-4ea5-b094-89a5155d1db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d96aef2-ccba-406c-a353-fb2c7816059c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e802c1-b6c9-4d0b-8e8c-7aa5177398fb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b5bb66-c1c5-44e7-825c-29bbd7949f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a696ed-e670-4bb0-885d-240cac65a776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae09c99-ab38-4224-9521-2cbe1e3045aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f49e7493-7f45-4d0c-8e60-dbfb1dd45175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41322da-76cb-426a-af42-5eef73f0bfe3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cfe406-37f5-4fb6-bec1-128aa90751a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6969ab8b-bdfd-4f25-b57e-25dd49af6cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45612bbe-0292-4c9a-9b26-f1473e5233af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "561059d9-2b21-4107-be36-ec177f1a1433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d72bb4-c5d2-4b7e-9bd2-101a62296643",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34dfa88-5db6-4d38-a762-d47518905e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe888d71-cc7f-4629-ba21-8bb774cb8449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafd70c2-8425-4fdd-a1d0-1b02ac36a24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e22ec27a-9725-4524-9423-3d3ee936aa46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a306db-bb07-426c-b242-ae71dab604ec",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a899c3d-f41c-49fd-a38d-fff7ad92cd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5119c450-226e-4a77-9525-542057a51cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017c3f63-dd1f-4d7e-b7d5-dec5d8e0de7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1dc5228-220d-423e-861b-33e6124379b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9215e0-3ccd-4217-9ae2-82738d246287",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13208c4b-1954-4bc2-9236-7c52677f34f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef9d542-058c-482e-aed6-2cc092ab2baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6098aca6-c839-49b4-bd97-222c2ba31db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3867f75f-08f3-4cfe-b50e-df4df915dfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aab30fe-4ac0-4bd9-bf61-3ee57532ea04",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2508dde5-dbe0-41e6-80dd-237f291417ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfe5d09-ddb3-405f-8ca4-787c4ead8a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8136340b-bdde-4fd0-88d1-8817a58b8a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7e021e-4030-44a0-a1d9-b83536738137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e339e29-440c-4f37-9757-46d21126708b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0060bb2f-76b5-4dd0-aeba-65fcd9df9832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b55ea2-b43a-4cbe-a4ea-c7618c273521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f3bbf3-1998-42ea-85e7-ab4d87794f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21ac3eb5-e9cf-48f3-8f27-0121f5bb1ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53029eb6-f3c8-4a99-ac4e-dd04c2ff7ede",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0390d45a-1de7-4691-9181-a1c7bbce8755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402a948e-44f3-4f1e-bfb3-77f6f002134c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9776ed-112c-4102-8f1f-5d9eb87ea1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "460f6b5c-7c95-4091-b900-f3e52cb1eeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedceda7-4665-4797-9599-6bc33cdf2b76",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769c8c19-6960-404c-bc83-58dd9a84e7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befecfa7-f100-4388-80ee-4127955a2c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782aa161-0cf7-4176-820b-842a1b2cbfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "afea24c3-4f67-4a76-a6a9-9a1b42283970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d3a2ff-5c84-49c2-a9d8-a1851b57c7af",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1618f1f4-ba1e-4732-922f-8f3fcc0469f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf70c9c4-28c0-4164-9471-7d45d36147b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f047f0d-c13c-42a3-9b51-726bf300b08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "66cbd39a-281d-4714-b077-3d6e3a2faef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8916e4cc-97ce-4437-97dd-999f4ed89282",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac05931-d4e9-4b7a-8a85-52d752ca14ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fd29e5-576b-41d4-9dfb-1a6c0709e7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9441f78e-8ce7-4474-86d3-08b79cc40d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd169c3-5a22-48eb-b007-34f96d9797d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea4d322-da71-489b-9db2-3076a611befd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c4852a-dc69-44f0-be7b-d00e2e5cc8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b65a411-4d56-4e6e-b973-62fcb61b30ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b68c7be-3c19-4641-9380-d20f68a9d00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e822bdf-864d-462a-9943-9e950818be41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c33e6cd-0de1-4400-95c1-89cb517498c8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e1193c-f484-45d3-a668-75843c64ad76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902e4f1b-dd97-4960-9bb0-b2596cae5488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a8d435-cfeb-49ca-a5bf-38b926766c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86330d0b-4fdf-4270-86e3-d000fe07ac5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2307c7-e986-4a13-906e-3f19da0ded4b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19491f5-3f05-4ee9-9bdd-35f9c1a9cc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427df655-e6bb-4545-b887-a827a11408d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ab1a9e-1885-4f75-9687-6870f22ad126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4969f8-4070-4525-9522-b15fef45451a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1beb034b-a51e-4943-898a-9682b1927b3c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cc3835-c105-48e5-89e3-0ac1daf83fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbcb1ef-7b35-4c9c-bfc5-f5fc64f238d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5239f16d-5d9b-4e9c-b7ee-a2781cbd3cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7d1aa8-bd92-4674-8a83-4250518abe6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e501f9a-efba-4ab4-907b-bc2f50270465",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc29dc9-ec6a-408b-be0d-37d11c2d668f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9e41654-1539-471f-a57f-33f84e3207ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48492c5b-bd2c-4192-b8b7-6eac56e1c39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9efe84c3-c915-449a-ae71-890137ac82c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7d6389-39e9-48b4-8b9d-722d2b3df429",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7a84be-7e44-40c3-bf9a-82241903d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa2f177-7e68-49a7-afb5-fb1093aeffae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b6565a-ca96-4fb6-86fd-b4ed93900bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4fc56c3-7be1-46c9-aed5-655d0698cace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064c77da-b6c0-459c-a1fe-836dd8541b14",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d4f8a1-9596-48e2-831d-e49be06ac70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c19f83f-d975-40f9-b3ad-430369702351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858ee525-e52c-420f-a277-10a8eb8da628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "67b60b88-0364-4b15-a086-0a993b0ad742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3813421-8e6a-4d85-b3ca-d3ce2d4b454e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc156fa-3df4-40d8-8395-021830c43f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68ce657-7d48-4e58-99e6-2f03e5eaca54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8310ac27-a10b-4243-854c-cc76c54c7d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "59c73685-41a9-489e-9ff3-2fcab0210bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe0d4c8-6563-4851-8e5e-c6357e6ef8cf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e728d1e6-5710-4673-ae6c-160389508308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b94570-8116-4148-b366-f170d8cadaf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0ca20d-b7e5-45e5-853e-823011f7d8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca625ee8-2231-4a0e-92b1-9af9c02a840a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfe8bae-1049-49ff-8e04-1ed82696ee24",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2929e3-3249-490c-b9b0-ba55e24e64ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d169a7ff-543b-4e5d-abaf-1b23428883f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e143e7ac-2ec6-4620-9f6a-b752ed1b84cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "339a91bc-ccb5-474a-98b9-49b10a083d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840141e8-9b12-4787-a972-a38f054f5567",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff02a7c-6057-4d56-960d-960952ecf7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d942eb-ba10-47a5-8440-67ed6f0c5568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05da01e8-f165-44a7-832d-df17ddec7802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c738e793-11ee-4530-aa21-9866ac7e6513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6636ad5f-765c-4504-bb75-e060a9f1aa99",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8d9a5f-3a2b-44d0-93f7-9eae14e0e834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5779c2ec-da48-462a-aed6-bcd598225469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad3c213-f25a-4bcb-8023-f1ce1a3bf91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eed1cc85-e6e1-4476-8676-52592b9fd33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0e694c-e99a-487d-9197-14c13bd9f778",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279462f9-8efb-4820-a5df-9dec8633df37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a826aa96-0eb4-4831-bbe1-cf4dfac7895e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d85104-569a-49b1-a3b3-b4ba0106b33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d46bb970-e425-4924-9afc-f31c8784f040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2177bc-811a-437f-844c-1e6698f30f32",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca0677b-ab2c-43b1-bb1d-fd14c5c999f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3534177c-76ea-4c7b-b134-86a3d8e149fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616246ec-480d-4971-a9d9-10f8b269422c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e71c72-aea3-4977-ba31-20bcc6055629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9e4396-1470-44d1-bf72-b0c6feec3347",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adebc33d-7d9b-4994-8398-f4a5b2345780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3890d3a4-6859-4849-99be-de33b8530314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96d922d-51c6-4fbb-8198-079110573b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37ac1c1d-d94d-4e59-9ff3-997562a89737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d325ad5b-81e4-4a79-9f22-2612f3a74b94",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e45c3fd-22db-4e90-8fae-ab41f90bcdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab3a9ca-891b-4558-a1f6-83510aafb9fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054ac78e-3f6f-4e5b-81a6-66c068fa190f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "345143a9-7fd9-44a8-a11d-483d61bf14ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5056674a-9c9a-43c2-8de9-4b5a549feac0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b402eab-5105-4e56-8313-603c1e96388d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9074eae-dcde-4c0b-a0ba-6f9dc977c89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9504228-8298-45af-be27-fdfe6981b1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a05a88e1-1859-4aa3-bfb4-8d82e9fed186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1e04f2-3183-4176-992d-b25602da6117",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10e2ad4-8378-495f-afbb-48fd859b3299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61224892-18e2-48c7-a59b-3f4e51c59426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a3be32-f828-4005-b61f-16b426b0c866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17c01066-76f9-4aa1-b757-d16592406cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adc0056-3957-469d-b0e7-61bd139ba69b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5681429-b4d9-44b1-9d7d-4ebb3a447d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf910cb-ccab-4ae6-99f6-9e6ca77012dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80506a15-d4ff-47f1-847f-da0d1fe1393c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "890f8d33-2130-477e-8d23-8f9f24de973f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791520bc-e147-4036-814d-653958ba1d71",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd213f08-4893-429a-bcf3-3b4082891089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7345258-3c1c-4241-a70a-e3790e3bde92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110ce62a-95f1-40e5-bd4c-2eb6e322c554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "46555168-c328-4ce8-9dae-9fdbd20d825d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2baf793a-5d4f-4a89-a6ba-8c0a46143efc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9065e8fa-012c-4b9c-a50c-c70c8063aab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4ddc94-7921-4b0b-93ef-4fb1afcd1c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e23fd6-9f1d-4971-b9c3-ddf65059ac04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a864438-d2ca-4f60-9eae-8cef671b8026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fad588-48b7-4120-9ff2-a2e27f157d6a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8705b5-d3e8-4ae3-b7d3-cddc4663a052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fd595b-02e1-4303-928e-7852592c53d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bf4bbe-aa43-480b-a073-c24746bebceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1003eaad-9378-4dba-83df-ed7e0cd7a6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6facb110-6615-42ae-8d67-363202b5897f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ede2f6-8f42-434f-936c-7cc91c8e3cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac908af7-ddcd-48e3-9a85-596d42dc571e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709289bf-f004-47ee-a3b0-73acbbb7bae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c541dd3-d2bb-4d7c-817e-e979f58c7ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53275ae-bdb1-45a5-94e8-ec8292fe0a39",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86b959f-6c2c-46f7-b1a1-3afdcae4091a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec46eed-7591-4a70-963c-89767eeb6ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3266504e-595c-4be5-9799-a289ff5f2966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0134ea0a-304a-4c30-a535-2c58d9a10611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bab007a-886f-4c4e-9cd3-0728e8c0de2c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db5a281-15ba-48cd-a68a-16b69ef8f9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33575cdf-8ea6-4e82-adb2-e517cf155579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e32ba00-95ba-4b54-a9ea-36fd7152619f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5da91ae4-6cbb-4089-90ff-336613588ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13db268f-76c6-4120-aa1e-6905bf0414ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fc8c16-7181-4d8d-9127-241b1cdef79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5662c822-4f9e-43a1-994b-b018b0614cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb59715-c3e9-4faf-b42e-ff071670e79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d79a0f88-ee04-4e49-95e2-4da536cc17f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef5ae41-4a0e-4193-a571-668cdf8bfde5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba4b6fd-8945-4b07-ab41-ed3b7d6bcf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768270f3-c2bc-45b5-9a96-ae9224ca62bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63578347-dd9d-4e74-b927-5f526718e9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "33d861d4-dbe4-4c95-9915-356b2ef627f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b0cbdb-c746-451f-bb1b-ef42145b90e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb74544e-b7b7-4e98-a7ed-54b2c009e24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cc1106-3eed-45d5-ba1a-3db69d4f7767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2bc7b8-123a-4cb9-9954-5fbab4204712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e377dcd-7945-48c3-9bf0-201f7d1b04ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7ca092-0db8-4fd0-8fca-dfcd0d6449c2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dce3ac-8296-4fe9-9f2f-388b3cc3d0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d148fd3a-a0a4-4cef-98ea-8d77267d07ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f82c4ca-1486-4cd5-af39-ac1acf1a32e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbaf45ef-faaf-4e31-8434-da4a21393fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4dc4f4-e37c-430f-9a8a-c9397639a0b7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d0fb57-9e04-49ed-9eec-b60a0eae4888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b523eb-3971-4963-a175-f90b0c884542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0d8d5b-0eb8-4a7d-adc9-20515cb533f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1dfb164-6052-419e-a4ca-5df63cea9f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbef018b-3cd0-40d4-ab52-bd341d26f30f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c03c783-65fc-4f3a-a79e-b1d3615ebbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de359f8f-3a82-429b-bd3c-1ac025870777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4ac64f-4cfd-4ad7-9ca5-3e0d1de4f1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef79c4e2-af64-4462-a587-7ef483280352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fde5332-a29a-4d30-8a8f-c40ffc396b9e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce57689-2de5-4655-bc8f-1c38a706d3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91db7cf-2eb3-46a5-8cbf-0f590294d9fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e8d197-7468-49b4-af43-71d0cbe319d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e8fd8d-41eb-4a97-941e-6bc82547c24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4747cc66-747c-476a-a808-3de508fb441c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c21078-460a-481b-8651-5d7f7e894fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "effc1de5-ecde-4819-a699-ab5b46609bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88440c02-a6ca-499c-8cc0-47ec0cd72a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afe24b54-4e1f-4da4-a3c1-d2e3c3877a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b514154-9035-410a-9e14-2b466a98728c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264a8e72-31ef-4ecc-bc52-1033534ced60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917c8c97-8653-4ebc-ab93-2e615d24fcee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46842172-b929-4ee4-9a61-ab053bca4fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a922e8e0-ec3c-4fc5-9b3e-340b8322d5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ba51d5-0eea-4d54-a1a1-095d7ded36d2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1576ca79-f502-4b81-b804-1a51d4b35dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39318f62-98c9-4cd6-8740-a013454db455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b222b936-2ffc-4ded-b4b7-40f6cc2d69c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c60267a-9cc2-477e-8b07-de45bf004e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0534dce-6ae0-4a79-9842-6c9afe506fba",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fae6329-1b83-4871-acbf-0edae85b5df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24258967-90d7-4d42-9d0f-c106e0fe5e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e519f005-dbdc-41d2-845d-ccbb25fce855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8c94ac-e9c6-4050-9a89-0238bcc79721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1103241-b8cb-461d-b619-f4f0da5d1902",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c247e8-1069-4e0e-a849-fd2d469f0918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc5f8ab-f11b-4992-8b27-0c324caca6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ad0a4e-6454-4c4a-a250-db1bebb6cc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cff40683-6b68-4fda-9e53-fc6d995df672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bba0a41-1cbc-46fb-8b99-b825e0aa00ce",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4704016-7650-4582-8c20-7a27ff6a11ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030a28db-f384-49db-b03e-e5601d939e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405c17c2-f943-46c9-9489-da1f85501a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c20113-27fc-4c8b-83c4-75cdd903a3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b917cca8-89b4-43b1-b443-b458ea39cd52",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd714eee-6174-43c7-93e8-45f92c06ce13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cca791de-5290-4632-8455-8462e5c38b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c819bd11-494e-4b23-bb3f-455c0c0c94b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "031212ee-b2a9-497b-98f0-43ee63b7bbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97c3242-f572-46a0-92cf-abd0348a33ff",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938e0841-c781-458f-974e-29191089f512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1443f51f-ff9d-4e06-be17-0117a90023cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdb844e-e565-4686-a7c3-ade0b5420443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc68c647-723a-49c1-971b-753b7ead0a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa09f571-0122-49d6-a569-a48b3d13630f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac925ccf-01c6-4dca-a324-6a5448c8c7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012cbe8a-b819-44c9-a0ce-a6da6a255c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbf130e-6daf-4257-97be-38ff0c7fc12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64c8a209-9e15-4f74-bad6-8ce905587e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e08e208-955e-4fc2-b16a-2c88c87836ef",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9054eb1e-3fc7-4fa2-9d66-863810c38a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b9f9f2e-c3f3-4126-b52e-1b1de0ee0846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a47e850-4aae-4f1d-9776-b97c142212b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af988632-9020-49b1-b884-43a306b3eacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baaeb8cd-c56e-4a10-876b-942d1c8d7a34",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9d6d69-385c-4fc2-9e34-35db49106e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70c116b-65ec-4f0c-a312-bfd1810c7460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26d968e-e84d-45cc-a7e4-30954255a873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4894abe-76e6-45f5-b9a5-cb01ccdbfe3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376bb7ef-ae44-4e31-a66a-2151304f1a8d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e443354-9937-46fa-a7fe-97ee972b468c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737603e1-4dc6-433e-8726-2f94921eac30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a05bf8d-8608-439d-94db-8780605fcb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "89a7daa2-1788-407d-a177-cdb2f3e6f8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6012ffec-86a0-4b69-99bf-ce25a5ad45f7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25418e0-64b9-44d7-8bfb-d9506c47af9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5448bdfc-7d2d-44e6-aff1-07276d266996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b492f8f8-8984-4935-a05a-249386c5cd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef9e06a-7e23-4e41-8777-bbaf4d88115a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19f594a-f400-439d-bcf1-d72a84ae9d17",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd773d9-a54d-4a94-86f9-fae08af94de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51f545a-6246-4c69-a63e-9a275cebd75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1caeab27-2b06-4f6e-b16d-6089b695ea07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0d2a66-ba95-446a-ac91-846a942d6663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4453e6-2a00-4a1f-8df8-10a9877fb257",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1547d6-a13b-415a-ac76-611322872f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a618db60-31be-4ebb-a245-64fbe86ce625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12d2587-30c5-4108-9fc4-17e6da28755b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "374b8585-4170-4c4d-a011-dbc90c5e5bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0b1e43-c0d6-46c9-a28d-ab01349689cf",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ebf1ed-dbdb-40b6-a6bd-35a4f8c00660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04859bd5-7a1e-45ff-b17f-b76a23c55c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b5322a-6735-49b9-a200-b7d4d3c294ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e51d27cd-d642-48fa-a7ca-bb38450de7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67bd32bd-75ee-40fe-a15d-f93febeaa990",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd852e7-69ab-4e5a-a565-5b77c7c054f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9df30cf-ac14-4903-a11e-14c16b01ed07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35255fe-a830-45aa-93f4-96beb1d4e594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4773579d-5261-4cae-afc0-446160fa973f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f2e570-ef34-4a54-b6ff-b7e8c020cff6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602165f0-6c7d-42ed-93ed-39e545d4af76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b0189d-1b0a-41e9-9d42-4333ba127d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06786848-e88a-437b-8af1-3ef15bb09d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "676db4fa-9d9a-482c-8c61-e70205dea0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ba6894-6d73-4e77-822f-5cd80acc3821",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e255b9a0-8af2-42e0-a15a-181f672ad5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21727727-fef3-409f-b34e-ae87d5416366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4a921a-5e8c-436f-be34-aae216c0013e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "79653001-2248-4291-b76a-7487f702fd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15b02c8-759a-4f58-be8d-b7f2b1d7f9da",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11df0a16-8912-413e-9db9-c6e09aed0bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022aac0c-4f1b-43ff-9419-431f79d7fdcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b72a3bc-c35b-4244-93d0-f26be1c91340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0654eb78-513e-46ad-9767-fa8187483fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0d005a-0e00-46b0-a4bd-ee9a737b95f2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b90e94-b5c3-4597-ab3b-ec74d811db96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557650ed-852b-40f8-a151-a351e32ff847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d23d58-92e5-4b98-b5a9-4541aec3df46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "abcfd844-9a6d-4181-90dc-da8cf99c7a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e3c09f-678e-447c-a359-b9ba2f5f1353",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e46939-6b26-47b0-a9ed-d744b8b9b934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c0dee7-8bc1-4497-8dda-e4765978a75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916cbeb7-0968-412a-81af-8b0954e356bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f5ffc2-4129-4d46-b603-865232f1a4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1831558-2420-4026-9f43-4beb9a6d5829",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb4568e-613a-412c-b538-727b98819a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6824e245-da00-4b70-9501-2413a5e21dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb73b914-042e-4094-89ec-22b6fc307f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86c1ed9d-daa2-477e-9292-961e8e35ec6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a79b11-6242-487b-84dc-7beacee9405a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdfbf261-ec6d-4b21-8587-d11d834bcb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77d3575-0ba6-4e62-bfcd-24f67bdebbca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fa72fa-8bc8-4efe-8029-280c08f3e97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0eba53b3-70a0-47b0-9a01-caacb8767616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8ff485-5798-4c29-8b3b-7b7059e1b31a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8959820-498e-4ac7-be5b-41be4776e765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1a383b-e55f-41d2-96d4-14823522e7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed321a3b-7b91-4a2e-be24-b8eba4540d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7020faf8-60de-4db6-9c57-b0e41a8f7281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d265c1e-c61f-4b1e-9880-752ee94ee236",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd213527-23a7-4c74-a40b-63709c47fa88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f721f3ee-9c7f-4e9e-ab05-c4b1f2822f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad21c066-a9e3-4c40-8a13-857a3463f81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c005ed5-7445-49ab-ac09-cedc5b73140e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e06c7b-bafe-4295-855b-f33e6100db1c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872deec3-fadf-45dd-a1e5-4b9eba24b6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644b1694-ef96-41b9-b2d7-184c86f4da7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01a502d-d40c-4719-b23f-68db59c9f8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "668fada3-a876-45ba-aa65-9b67aeef9fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78093825-8042-4fde-a61b-eacb081dc480",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b464854-f676-4211-aa68-c0bbb5163769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9c12f2-d993-4583-b983-0236ce1d5803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18829723-4f18-4942-866c-efe4b2d6638a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3814b8-6ef0-451a-bfad-187f733db1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0cbe78-3b41-4d63-bf6f-d8bf1e5dfa1c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4182d3ee-36ad-4eed-ad63-c349971d4235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a874a75e-7a59-40c0-9590-5b0aa6131e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912441e1-6692-420c-8a4e-4b889589025f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "32c62aa5-8eeb-42d3-bae6-79a50e8ea9d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bee420f8-f7a4-4a3b-b6ef-fa5a5d104a6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64869400-832b-4492-8343-aed24bcb8e07",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26852da4-db14-4192-bbb4-f774de51eb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18bdea21-d20d-4bc5-a24a-f6a21a67d15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0f593d-2e3b-4d60-8628-cd7500720e54",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ff4c37fb-59b4-4dc0-a6b2-d1307ee71e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dcc7c58-2e38-4e04-90ac-45c1c64c8f53",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a93947-0017-4690-9cab-ea17fc83e0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0239e555-4009-4d77-af42-f46f2aff20cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41233956-e635-421a-b2dc-1c4968317330",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b8a6f455-49f6-47cc-a199-0f1f114801cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31d62d10-1f77-4a89-9be7-59f3a00ac336",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05e50281-f252-448f-a938-aae71869a859"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87e37e67-83ce-47ca-82e6-3df02e0c0b84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02bc08a9-f822-44a4-8663-78eea0bf98f1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dc60fb55-98fc-44e4-8069-89627093bd74",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec22c8b4-0e9d-4ea0-995a-14d5fe45e80a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cc670942-15b4-42e9-a190-635fa46e5b1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "400d3efa-2e58-4502-9080-6d16421c57a3"
                }
              }
            ]
          },
          {
            "id": "a66d6caa-c42d-4baf-98b3-ca4084596479",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ed69339-45ee-478f-84de-4b165b6ff807",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a1a00ab-4fa9-4e02-a6b0-bc2e47ecfa22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc98a248-6deb-4db7-91ae-8cae67a7e698"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d93c474e-2640-441d-9869-3f90602c53f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d62f722f-6d54-4499-b5d6-8a296c4d7280"
                    }
                  }
                ]
              },
              {
                "id": "4aae5d55-41f3-42c3-98b7-434287107332",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db1c51b7-fab7-4229-9fac-44c28161972b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d3428da-f03d-4e3f-a013-5a0f1ce5d723"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1900468-089b-45be-be95-84ed0d79de4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ec0023e-23a9-4df3-bc53-c8acbb7c2832"
                    }
                  }
                ]
              },
              {
                "id": "1b6d9786-302e-4ce6-b81c-ad2cece8fb83",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7a47617-a3ea-4faf-bcda-ffa8b8469046",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3ecb0cd-6a0a-483c-81ec-468316674918"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "945e1d0b-d2d5-4018-95cd-d82265d58cba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3b6801d8-e14d-4bfe-a58b-34969f1b0f8a"
                    }
                  }
                ]
              },
              {
                "id": "ecec2400-2503-4761-846d-b4a8378282c4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "23d7d11b-66c3-4a5e-bab3-d7bab175cebf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cad36c7-bbd3-4ae1-b555-e8891fd28ceb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0eb15a46-acfe-4e29-b414-874538f52aba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a4569d04-7a8d-4c63-8136-e8fba7eca5fc"
                    }
                  }
                ]
              },
              {
                "id": "c7be186f-358e-486c-ab0e-f64bcb22e6c6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49f2046d-0bfe-4b6e-84ea-5eeb549a830c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2119d74c-0174-4513-b74c-e9faececdb8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ee9eee2-6fd9-4a31-a787-f3f6c45884bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ed50bb73-564f-4c04-82cc-8854667daf21"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "035593a3-e4bf-4bd9-81cf-06c22c94e338",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86ab1bcc-08db-4d3e-805a-7e4f6bb5d6f5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "12b78fc4-0447-47c1-8d27-63f6086167de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78113c10-64c1-41b4-98bf-49a6b93a6990"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56b86272-24d6-4cee-b065-defd57d7dafd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "29bfa5b2-6532-4d29-9b7e-7f076644fd26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "043804d4-4d2d-4f98-b1b0-2089463812e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8abeb98-ed86-4fec-9bd9-e2c38def4024"
            }
          }
        ]
      },
      {
        "id": "82124807-0d4e-4dbe-b32f-c152796f3682",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3abc594f-7859-489b-8fcf-129dfcceaa04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b8262c6-47fc-4967-ade5-444e68bed76d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9a76f20d-e357-486f-a87e-e4cfcf497987",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b64f44-472c-4d8d-897f-b45a834f5b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e428fe-71b1-4af8-9892-3d0e02ac9575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9645dc-4543-4547-bf94-70910a17d18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8d11ce-8309-45e0-beff-dd61d12febd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4291e891-43ec-4a7b-a115-e58d6ef932a6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1798aac1-64b3-4ade-a24f-93414baa168f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3273716-ef17-419c-abcf-36b01e9bfa79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d944ba8-6168-4789-a944-cf46d3051408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6a3e58-9367-4a0a-8dc7-a21cbe04088d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99cd78e-2df0-4d6f-b829-ee398d953dfb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2054ade6-8a5c-45a4-a5f6-fc3120d4e299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7fd0a5-b3be-4111-a3b2-a39939ccb0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479e925a-2028-4b28-8760-512448ff30ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "571085bf-23a1-4df8-a4d5-9655adf71dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b9bbc8-9223-4bc4-a6f3-04ffc3460b77",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4de4e9e-6c55-4d38-8cea-ca6ddef70d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca0ba7d-e47f-4bd3-917e-57b4073b99d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01fae83-a24e-40e4-bc19-513748248445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "867eab40-8522-4bda-ac18-d568b36e13ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef687870-9533-43e3-991e-4584cee08158",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb141313-78fa-4b76-a958-7d12c61c1f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e61407d-6d9b-44bf-bddf-4747d7370167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55378a1-6880-4fd3-a31d-0cd35a86f2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b38540c-339d-42e0-974d-1237a6a76409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a6b2ad-85b9-4b9f-889a-b074596fddea",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac50903-044e-447f-bb21-437b1cd73e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19dcf5bc-b171-45fe-8cd3-ff16f4e0f7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a064cded-5b78-4bd3-86bc-35d2f1d6894b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e8da03-e65d-4f3b-aaf9-d0189a456c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608fac3e-885e-4ed7-8fbe-d4c5545435f7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbaf091-8703-4f7a-a5fa-4935a718d82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5458e193-b9dc-457a-bc08-82a80ddc78c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705347ff-dde7-4ca3-a775-d007f5b9b468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0259883-e6f5-4279-a90d-8b31d20595b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4564be02-95c0-4581-96da-3f5f07e5dd93",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984f4eac-dc3b-4b78-b8b3-32fb2175b517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd221bc4-3fbc-473f-b889-8bbe39fc9720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d64d357-408e-49fd-b6f0-8f6b01b82cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c30e292b-3b25-401b-9223-2616272a065f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26dac8b-e532-4119-9cf6-16cdb0f73009",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66203bc-8587-4f0a-a103-ae2607ce2cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583cb4ff-1bc1-4838-95bc-a81cf0f231e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2130ee0b-0fac-483b-883b-ceac2bce3a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5081cef-8970-47f5-9ffa-abec38c15262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a39b384-c97e-4686-8a10-edbda4283649",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fae53f-64c7-48ce-a511-4a6b2cf63960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863bb111-2c6c-40a1-b50f-0ae3adcb9ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0538b45-0517-4173-8edc-5e81300ba9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2843ffe5-9ec8-469f-a999-cd053048de24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf7ddde-9a3e-4220-98c9-7ed6cf6542d7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d2452a-fb85-4cf8-9236-92128b915d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8315b15-4758-4c26-b0d0-97139df78391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a03c9d9-5ed2-4cda-999e-fb13ca46a785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2dada5-cdac-46bf-874a-d607fb975db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a99248c-2b4a-4c80-9120-6fd024589813",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a703f0d0-0a40-4012-9cdc-c1b05f4d37a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff4a88d-ffac-4023-a0c0-876e82e33997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f712e51c-0aab-4d36-b2d9-8912e4752b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e756cc08-0ae4-4b42-a173-b3b7a31b8910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4acdd1-7d1a-4d50-9e9d-480341d6b7c6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892ac568-df19-466d-969f-f7745aa26063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a16f6ed-0863-4654-8e3d-771575f4ae4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cef69bb-6f1b-445e-ab96-0efb970ed73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b51e1cd4-69c0-4206-9d7e-8766cb335110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c267d5-c59b-4c67-bfce-6ed232bcdd8b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a178f8-6e76-4dae-a9eb-c82b858842ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a469e0-ad23-4aeb-963e-20cecfbb542f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf056279-8fe6-412a-b882-b7a1a9a55921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e05d60-dc56-4c11-b175-bffc0e89f360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3faa86e7-80e0-44e6-8eb1-e2b3db7f90bd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4591b71-5675-424a-8203-1bf96db56b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9822835-d3b6-4a51-bb33-596d79018898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abca7e62-d4bb-4d4e-9b3b-3687ab17920a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef23f95-d104-48c9-a06b-64a8bce32edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d29bc62-f5bf-472e-9bdd-55f5105b5c0a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e251138-22a9-465c-bf35-1472c8a64c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f832fc-4000-4907-b329-1c0071145ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dafa4b-ac19-4320-a28d-03b8bbb79444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "002c4768-2503-4826-a8be-df810797e77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94d2b53-3577-487b-ac1a-f072f743ed5d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb1ff05-9a90-4de0-89f7-fb2be63bcdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c92f93-5bc9-41cc-97b5-7b90ab68b6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed73f657-85e2-44e6-b5bc-65ac01ca7237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e86c5ffa-8172-4397-83be-5ab84eb8abb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c72361-20f8-4615-bda8-6aaabd15a233",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9249bfa-99f8-41d5-93b5-a19b65fdaf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce5f46f-924a-4fc9-8ec6-69bbc62fc622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f90463f-61f3-46f4-bed1-f0c3986bbd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "87fae255-2ff0-400d-b6d8-d099598c0950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f09c6e-965a-4e1a-b056-3fd93385d21d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbb860e-214e-410b-8dcb-028abe02f075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f282e65-3fd4-44d0-bc3f-1a6f50e48b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5b53d7-2dd0-4008-bd3d-b62962b9365b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb189ec-e993-49da-9a2e-659aad2efdac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e5b88c-fcbc-4cce-a488-72882edf79dd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af52292-ef50-4955-9c9a-49dcfd8c9dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fb7bb7-d5f0-4ad7-a192-75a1524aa28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f94da0-bfc0-4f3c-8cf0-ea6d2cd3964a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eea680c6-cbbd-40f3-a031-1243c8ab54e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317cdbcc-25d4-426c-bffe-766462f768c8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8865e6c-5be8-4e3b-be68-aa92179cf610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a704a2-5cb4-47b6-af2b-e587ee18325a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e76d6d-9cf6-45ce-9bdc-555745830c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22e6d87a-57b1-448e-877c-a184eb431e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e85de31-e4b8-46ad-948b-a7ea29de57ec",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20101497-aa85-487e-bbda-d1a81fb70dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adca27b1-3cc1-43c4-b707-2c113829f66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fffd592-56f7-4fed-b8bb-099f4c3c7130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eff24df1-4239-401d-89eb-3247622f8c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385f0d0b-56a2-428d-9c45-de219cb7b59c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581e462e-6ca4-472e-a511-6390a7fe7d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41bf8e72-aaaa-44e5-9dd9-5bbe0c6bbfde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ec6f4e-0e0e-4a9b-bf5e-ee8e3521a5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7dde48-50ae-4eeb-bf64-a52f90f395d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f996b3e3-2009-408b-b8b1-554d41ffb663",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac81a30-9fa4-4b89-ad1e-04b26624f6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6e4bfb-0de9-4d91-9de0-280121a5458d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b9b30f-dab1-4ac9-a3df-efdda4a76747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2603013-a310-4510-98c2-a9aa0b84987d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbc424e-00f0-4926-8511-8ba713e16d89",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021b4afe-05c0-4a73-a95c-8cd62cfcaffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d29c3be-9c12-4e2b-adbd-5b914aa59be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b020a1e-f178-4531-aa59-8d7e0eb268ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7eb2ed-3a05-4b51-a277-aaad9ccbb357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fe3212-0c41-4102-82b3-1f0a67b22102",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7484188-f5ea-48d6-b3bb-de49d226d6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ed2e2a-c59f-4ed9-b5c1-a26e437bf24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0630d9bb-bb0a-474f-be6c-44ee13f2d7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8917f71-4d44-4a0d-ae99-cfd3ac682f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9076a652-96ff-46d0-b61a-7d6b7e089717",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7123fc2a-4a14-464a-8bec-08fa51801411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d0fb5e-8d38-4192-b7cd-b4678f1cc921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e569f5fa-c4bd-4e99-98ba-749e73b405c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6572642-82fd-4380-b33f-f432cda0ebde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec0d0fd-2dca-4e45-bed2-bbffae5734d9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5e9373-cf81-4fd9-8736-934de945e4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19071843-564e-47ca-819d-5fac9d34182b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8dad32-f8d1-4396-a93c-2415923713f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8710cb07-5b5a-4dff-8ee4-66a4e51e4df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db36e375-f5b2-441a-8c44-ca97d887adf2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8536397d-8005-4e48-acf5-bbd8ac74e58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7075c24-95ad-4c06-bf48-c2510c20ab64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978cd721-29fd-4850-b115-3a34b6955c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c9fb70-ce06-4d03-910a-5939523d4004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2342f7f-a201-447f-af42-235ae6b7b667",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae29cc2-aadf-4419-b519-ee8bb2570a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6149e7d1-afe3-48df-b594-f0eba57e0b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac25818-4bd8-4da4-ab80-275b7fae9b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2a3ad8-9011-40fb-8b12-a3940beef28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bc0644-1a4d-495e-8d1b-743522e6b657",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ec3b4e-149e-41af-a27d-36e1b86303bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0a4ba3-1fdb-4001-b033-065c1f57a83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f510a6be-89ef-49fa-b59a-a5badeabbb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2625d76a-84cf-4dc7-8f61-bc07fad5ca8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10b4491-7501-40f9-9166-9c71551d1575",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22a5085-a0ab-41ef-be48-15b35ccaac16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5db7c10-7918-4cc2-943d-0aebd945a056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eaf1c68-6ae3-49ab-8615-1000365fd903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6fece03-04f7-4268-8096-b9a50b8612dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "322a2eeb-2419-47ad-83aa-7c20df9233cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3298656f-bea3-4e4f-926c-948003ae6fc0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f45099a-8a67-4088-b877-006cd6b9a313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f01f36d-91fa-4a7f-bf5b-3bd48679aee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c74a05f-7b38-4ce7-893d-8fed99ae0425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff8779fa-ba4b-4170-9e02-d255cda82d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3228b1f7-eb1c-4e72-ba7a-c3fb86fe5276",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3428828c-9438-4b26-a214-23faf735755b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f3f68954-9622-48a6-8d1b-7ab7b421183e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1b336c-b9b5-4d7b-a0fd-1e6262c95dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cf0724e-0148-4ae0-8484-f170d5d44262"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67bda8e6-08e4-41c4-b1da-999554b80326",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c506fb4b-e3b2-4f3c-9339-7c1e4c44d4d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67674c1f-9292-4c5f-8468-75e351719633",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5947290a-8b23-45c9-8ce9-e7f50e594577"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf238bdd-62f2-4a59-8028-d8d67321bdf8",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "56238214-2c0b-4b6f-b890-6832c19171bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1fe8b37b-229b-4056-93cb-3de2bf4ff7cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46879b96-b557-4e52-9411-701929fb7701"
            }
          }
        ]
      },
      {
        "id": "5a0817bc-085c-4712-886b-096435b85152",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a32be695-f34d-45ec-bbbc-aa6064a2025b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57e8f5e0-9911-4d1c-b7b0-49d6a478b6d8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7a38265d-5812-4b79-b8f9-f08535c67f70",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4879fd-e3bf-4473-8bf0-fa53a1c351bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a532b98e-80f7-4d0d-9d86-f75bcece1956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7119cbfb-39f4-433a-8759-de99a120d8aa",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016ba11f-b2f0-4251-99ef-3de05c6bcf7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5d972e-7cbf-45a7-8375-fd0be8e4f7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb14c94d-dcf2-41ef-9e8c-e55f51f85ba0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93503735-274d-4272-b0bd-08e0b15a9b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411cc615-eafd-4156-b3ac-c81150d5782e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755f14ee-afba-43c8-9288-9d9611f34169",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b78a0a-d100-4ba2-a0de-14329e3d5aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d4c9c1-048c-4eb0-833c-6c959636d447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc7472e-6936-49be-aeb7-0e9a641a735b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d321f43-6cd6-42e4-b768-23fa3760e8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a0606a-c302-4c16-9b59-d8996e9a84ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9566157e-310a-4d11-bfa2-b1efb71c05a1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c41ce6a-43e4-4018-99c4-64d8c35abb50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1152c11b-13ff-4124-87a6-cddc3511ac37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64defc3-e4ee-49e1-9fbc-136044c3ef64",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e23709-e298-4d8e-b8c4-3a41c34de734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4533a4c3-7c9d-4bb3-8b0f-514b2e3eb4ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acc6562-a895-4e32-9c6b-343f37bff433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370c5e5e-1f1a-4b8b-8a88-695fb441d94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f37f8cc-c9e3-442c-a132-007ff7ae92fd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c5a455-59c1-4e99-8cd5-6bec816466c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abf41580-573a-4d41-b23f-c63a916f3440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2e9fcc-93a8-4051-b5a2-9896565b60a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4092be38-298d-4244-bcc4-e132b76fe590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597dd40f-2b9c-4f16-a0df-7ddf8facd1d9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79b901a-7557-4eb3-a62e-ff8c5e0fc92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fe5b1ca-1071-470b-ad18-87cc6db10042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df86883e-6cb6-48f9-aa09-40c7943e7c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e63ea6-3d34-4988-ac6a-572f2877f365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1f2f91-9edc-4e85-806a-65074800e975",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628d4be8-c27d-4edd-bcb7-207013fc1f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dac09a44-91e2-4975-a0e4-3201afc68dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfc0a1b-b62b-42b8-b780-4de27acb84b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a7c7cb-28c3-45fe-8c55-50d18ff5e693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade45763-14d1-4a25-9550-196c0d78906a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9364041e-e63d-4f55-9a74-125739e8db08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82537c49-4371-4a1a-8d41-c4e04a7913aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a94142-e025-4ff7-9a91-bfbc56d078b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f56a40-8065-4082-a2d9-2534bc34e2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d54b69b-9e83-48f1-ae9e-821fea12ca16",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d8c51e-e0fb-46f8-bff6-8e40af56b09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959fa316-467f-4c5c-8f05-73a24478e97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67204fe8-3974-42c5-a4a0-cc2970ebf4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34ef936-be48-494b-89ad-0c1584750c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0901356e-9ccf-4467-9846-81f34e57d79a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abd5e71-7913-485c-9629-a1cc174f7abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "250f7ff8-f429-4a60-97fb-b6c52e782f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2207857-1249-4a8c-8ffd-1891005fa987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a7bc46-0842-4bec-b283-5f3be0799754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bfc218-86fd-48a5-974b-fbca815719a5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91be63a-6cbc-4abc-b303-a471a111aad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb934b27-cefc-4361-8438-f9b0d0fa9dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93881e5c-cc97-4425-9d55-ac751e05f2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f7e127-640c-43a3-9239-5450cb316e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257ed687-029d-40f7-b0e7-9c5764392d46",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda6a2fc-6fe9-4596-a6bb-27b3afdcf907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c5b3db-9e41-4b9a-9671-f07f8b5753bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46640add-55d4-48f9-8437-a280a2bdf196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d05a07a-ae7c-44a4-9022-3f595b5bd30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e51e8a2-7ecd-40d0-a380-d0ef34d82218",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc88d8d7-ce5e-467d-a208-f1ee14de164d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eab91cd2-9549-4c53-b7d0-e32cff5c411f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22450e78-18d8-43c4-bfbf-ad785a55b739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6128f0-1017-4140-a0c9-62f85ffa006e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87200738-92b4-4657-aeae-679b2b3299c0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a375e3-2a39-47c8-93d3-829900cb862a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64294a54-9847-4e1e-9e17-d1f7ae4a9cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4f5e94-1765-435f-8636-daf58f760b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034c0379-a869-4d64-a3c4-f64b958bdde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec07937-48dc-44bc-8682-0d73be9b8e27",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567e129d-dccc-48b8-b1af-e7cfaae2a602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd021fe-a020-41a0-a709-43c74e63352b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4873af4-9295-4f55-9543-00c7830b5e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc7ff27-23f8-411d-a38c-f088a057b7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820b11a9-80de-4b1e-8c98-2d32d24a801f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98511ad6-6291-49a1-8362-e98148b404cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f3675e-ed80-4905-9ffe-ebfca0a020f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3dd736c-f63a-4d1c-bab7-b23d6d416d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e6672b-db80-479d-81de-aac65b062000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a844d080-3f27-4682-8d05-2676a4bf82bc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805f1a23-323d-4b4d-b8c2-1c77bba67bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6401e1-5d2c-494c-a174-faf466cfe96d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940cd4ea-c856-4c4b-b711-898aff697e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07b18f4-e7c2-458b-816e-78e2e4ed7b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016e6607-6141-4a08-af28-3793a2b58917",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25413cc7-d73d-4452-9e49-f70f1ca75722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aad9d69-c8a6-4c0e-913e-ba285259a3ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa8f41d-4392-4313-840e-0235db398d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2087b92-47c2-479c-a5bf-e667e01fe99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897b9039-b4f4-4c93-8652-35e9177dd215",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03985872-65ee-40da-8e19-a3528ec055a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3ec86c-de91-4fed-8201-f065da94c59c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6c8753-037e-4b1a-8244-2ade3a152531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04720a0-c09f-4354-80b2-f12131e75698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c63b85-286c-45d6-be7b-dddb7f42a417",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637e3c9a-5543-4e94-81f7-f0fd46290cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26015e52-6b10-4f2e-86b2-ffbb58c075cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8dd2e2-98e7-4985-942b-503ec9cd79f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef3f681-5b85-43cf-a7f3-11e1368fc403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c692f603-2737-40e2-8c40-638ba330097d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee7959c-bf16-4a05-a1c4-84d7f13c63af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b598d2d3-6fad-478a-a14a-e8677b022eb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "993c8b09-8acd-4e98-9689-3969fadeda72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1802ee42-43ed-4e1c-a726-e6de4f7f2341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283e1122-98be-4003-b657-f5eb5cc491de",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4712fc27-9281-49b8-adef-7d1ac767adf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ddc374-bb1f-4ab1-a428-3629d97a7e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0670d6f-b5c5-419a-b17a-39884cb5593c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd14bbe-ce94-42fc-8065-f21ec052a753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2833ec11-2708-4ae9-b689-a72c133650f9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86712e89-395c-4d15-ab51-d4b92bed5da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f47b722-bdce-4036-9bd8-e7a65b1c1fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461f0c09-5e41-4da6-a894-92dba64e1b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f82f0e-3f89-4ea2-b167-bb47ed03fb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a647fd30-4551-44d0-a9a0-2194cbcac7b1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a51a31a-2d0a-475b-b0bd-8e39a8177954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f39000d-40c8-40e5-9ba1-86291b1d9a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce8da43-50ba-4fa0-be7c-533b23f8397d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1314fb20-1c15-497c-82ed-d2a4d363e727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568dd655-aa62-4ceb-baec-c01050ec1668",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7340d5-69ae-4a3b-b576-d0f0df025903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55e2cdd8-6ae4-48e1-81fd-4c1d5acc0882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c769870f-4af1-4e06-8fa4-45d583d15010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb13a77-7141-4b42-a719-fdc8071c899c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f07f7a-10dd-423f-a2f2-361e864e4c4d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24492b14-8e3e-4a08-b34d-a7a3426ce056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eff704f-26f9-4253-9fc0-3735fe746ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c521b2a5-20e8-41ba-b459-c4cca79b0beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57793e1f-53b3-44da-b633-19f6f984ccaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88aa253f-e9eb-4d95-bfc0-95aa97ac8dfc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392dde32-67d1-4866-8355-7294dd22160c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0afa1e0-e69e-48ca-9f81-ce88e1e13654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7783c4-3578-4a3c-aa0b-15c47fe38fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0d18cd-1138-4c5e-b1b0-73ba9205696d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9224a5b-3bb9-461b-a4a0-fd7d5e1c8429",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2210a6-33ce-44fd-9a75-00906f0f0f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b473f65-cdcf-4206-8dc3-086a5fae46b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63643cfb-242b-440b-9f52-df76e3c375e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9fd4c8-66b4-492b-85de-612cd8b74abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd4a126-a657-431d-9e2f-05679ae1aa66",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314b15f4-4e3f-422f-86b3-0d21f7607079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c599cb6-f6d2-4918-bf9d-86546694814b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d564675e-31f6-4670-b42e-a9597adbe6ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0068db00-0507-4241-a865-7278de35ae15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b08e067-dd05-48f1-9a24-0d04f2ef1499",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0b2c73-1dd2-475e-955a-1b19d9832755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18871ca1-8c64-4267-86e3-c10f4c3742e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f333ba2-d02f-4e12-9f32-02017dde23ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a29513-d0a1-4a57-b1af-582258f9d525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c83c0b8-2ec8-406c-974e-cf9cbeaf0ced",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbe1657-c507-46fe-a79b-5a1aca7b8e68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d64b108-e3e0-480e-b7cb-14ee2ed64ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3f29cf-cac8-447b-a704-d8a05465dd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27a3ebd-c24d-45e6-9822-2c201bc2c361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5776cc7-97a5-4514-a058-11552be25dd0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8309f4d-0f20-410c-b82e-e4f2abbcf100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97a9215a-0816-4e7d-9228-7e0996deb9e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4fb592-1641-4fca-ab39-2694d30a65a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbee5f90-700e-4bae-8da8-c5940e868862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91b8914-e029-405c-b43b-d9751b55dfb7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e4b4ce-e3c6-4e2f-9dd0-1e2743b6cc4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c49097-b30f-4784-9f39-dfe48eb1b772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5d2e72-89b2-4a60-bd71-86fe805d257e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56aebc8-d86b-4de6-8421-115858ccf1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eaaab9e-7006-4e36-b0d9-ddc370c12a26",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113f70f9-ef71-4160-bcbe-e3744d61c0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85058f66-f84e-4bc7-ada9-8e157d05ad78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fdfe09-28f1-4d7e-9e60-c435a340aa5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3293c4ef-415b-4491-a8af-b11b29733615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021a8361-9979-4432-b3cb-32b449c3f17f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2336e8-3327-45f8-a91a-5cd923de857e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fec7d7-850b-4d80-8076-600c19703248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55515488-b243-45ed-91d6-a3705656391a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34ae37f-9589-43c0-885f-11b93fd27613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594e536c-607b-4532-bff1-0d0bbab838af",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d59651-0485-42fd-b13a-8f51d0379c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e83d951-d808-41df-8c21-ec27bbf045b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1317813c-160e-4f06-aaaf-a02dbba818d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbecda6a-8bea-40e0-b471-28e143b5d225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4d7007-2ed0-4ece-b7dd-0d883f50434b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6a8ad1-c339-4dbb-9ad1-1230f40cc124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c80148a-a818-44a8-ab41-3973491c799c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19425b97-09bb-4516-8e07-b62879c3e519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624647e5-7386-44b0-b3c2-9375f11b5010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913f8cea-4c42-4713-ace3-3d123c6a0bc9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b60c4e-d0c5-4ce4-a2c5-0fbb2875b02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f94650ae-676b-4138-88f5-98dc751c9753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7601ec6-c886-460e-8ff7-e9479aa1441e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2972994c-9866-48fd-a8f8-999511775336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfab8ae-cbe7-4935-a875-2b0f52b32d20",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9acf6f5-e976-4e2e-8ef2-aa94e8144330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc82e82-ed9a-435f-9b60-3c317756e078"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05629f1-ce23-4030-a9ba-2bba4e3a2ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad33f495-cda2-4dbc-8e00-ad22000f6ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a77d4c-5e93-40e3-9cbb-3a8d755fff2d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70b7c18-99a8-458a-829e-becfdea1de3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198e4f46-4224-47d5-9c11-128abc85379f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06400873-923c-4d82-8b94-8fb0183d90b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed855b6e-37a3-4a39-904e-f03b8b6028ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7c8b0b-97b5-4692-ab98-ed5c30f3403f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c289885-b657-439c-9893-6b446747fbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bef9e62-1a4a-459f-ae78-e8ffeb2b851a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69103b2-b93c-44e9-b5a9-b14f26a0b13b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b135937b-c0db-4fbf-8694-38c3bc49e28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab8563d-8c89-4626-a348-c2eb74a411ef",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6025a0e-071c-4570-bf41-20ce6c40748f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71da77c-8183-4f04-87d0-f939c59638fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7315781c-3bde-4b76-8e27-e432c3cb3d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd81950-8624-4f61-bf90-8f80f63f0d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1046373-8803-4595-80b8-d730f3d71065",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530059a7-7c1e-4b4c-9173-fd036297252b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef841ca5-624c-4208-8737-dcbd3d323119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fba555-ae67-4d46-98e5-0e5e7249ce39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377846f4-ac51-4da8-bc47-1d8994125d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573117f2-f9c7-4c0a-8dbe-c5c18ebe4617",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce32fbf-20d4-4f29-a5e0-302c9926d4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b293b03d-96ed-4b70-8e42-6f7d300b523c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7abd7c-a572-4d83-8a0e-2a6bec88530c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92b3da3-1107-4252-83c4-8f150b4202ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bf9256-a972-4b4d-97af-2fd453d216b5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5b2169-c4cd-4b65-8c0b-8711b2dd2db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043136c6-4b9a-43e2-8d7d-0741ed6d3c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397f2e08-dc43-451c-bca0-a79df9a0cc78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a857779a-a1c1-405d-b8d4-45afc1e5f15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ee4626-72a8-4157-bc63-0239c6508c34",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0dc4793-2e12-42b9-968d-19b6f9720c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f710eb4-c1ed-410b-9a6e-44adf6bc369e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "805df33d-c5d4-433e-b9fe-c0b2319983bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9695b243-8441-44a7-9a76-77d58324e7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154f440d-9d5a-4470-a2a1-ef77abc385e0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcb1ab0-06b0-4955-bcb6-21487699c6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9100dba8-77fc-4a96-b374-c90ca045224a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fbaecb-9c2b-414c-9e18-ddc1626bd7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5406d0f-29ec-48cc-a17a-e8309fadf68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5633fd-eb16-4f08-b4b5-e3ae04a99d56",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30a894a-099f-4b8c-a706-266ed70b0bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd65c947-b29f-41c3-a71c-be11c91df1ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80146800-3e32-40b5-81e4-7ac9c83a1f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a775cd3f-d085-47b2-992d-a9c86f0b15cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedfd8c3-5848-4bd5-a9e3-fd52e1a7006b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b5c07f-0a16-40b8-ae05-625cab1e4768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f1ffb8-dd5e-46b2-940f-7a5390393e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb28f50-a384-4dbc-bdba-478099806580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b3548e-5c55-46c5-8a2d-706a1ac197e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb128c2-0627-437a-84ea-07227ecf0e88",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1badf5-01eb-4195-9d0c-3ea3d6cca138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4575b0-d7e1-46de-ace2-cee35c39c615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcbd8f8-7639-4a1b-915d-c397f211bff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1287968-2858-48b2-9f59-05cc9d07c5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f327bec5-d1ba-4d90-b760-eb1cd9bb4347",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0735b32-76d4-4ec6-9449-5999e25cce9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018d9515-f930-4469-bf78-4387325440d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe146c0-169b-46f7-9eef-a436fd1c784a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c52271-018a-4a92-a117-d17cc8cb1ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ae347a-dcb0-4b1f-aa0b-9699f7029f14",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421f258e-2bf9-437d-acd3-f4696cfe4110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee974fb8-fcf7-4c36-9936-acfe2195efbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d86e67a-79cd-4a8a-9f37-2776c5ac1267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5aab2f-192d-4573-a7bb-6225f2673213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edd0ea0-36df-4659-b350-071136bebaf8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5ee63b-f1a7-41c1-9d87-badeac54c8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0727f3be-1487-4935-bb5f-e9b2678572b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb801a55-f709-4a3c-80a2-c9e346c951ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b058651-4a62-4f8a-a24a-63b8a2ab87e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb5f852-e21b-49ed-9238-5f0433d3100b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c8bf14-a459-49c8-920a-4d5ec6e98196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10605f60-e033-4b88-97e0-fcebf4e2db63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80e02dd-f787-4ef7-a96c-445a762a0c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6689cbbc-b08c-48d6-ada1-2c8becd09bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50355bc-ce97-4e68-97eb-f993e12ffedc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab1dc29-d2b2-4781-b9b9-38b773dc1486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5226d40-5412-4262-be2b-2cd8ebfbbc76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f53f183-20f8-44d0-bcee-8202fb8f837e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dea067d-daa8-4bed-8353-2ef8e29b19be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1648aed9-6f98-4da1-a0b4-06fcdca33825",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52bde9f-cbd5-4c67-93cb-92eaecb58fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ddbf06-7ddd-4115-8419-708c60997b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d00e5af-7941-467b-bd43-ef22efbf3972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036c3108-ba9c-4574-9212-573cf39df071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a400d4-62b6-4152-987e-3d2a40453850",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be343a5a-316e-4160-a432-939ab965c1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c531033c-2700-4640-9672-b8fe7cbf391e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630a6298-284d-4e66-a18a-b9dc7387dbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a487ba78-1c1f-44eb-b753-5d61d032da28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d85955-1f7c-4fdf-b8e7-f7deb679c5c3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbd85c0-3cc4-4eee-96bd-30dee5e93dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da19369b-57de-4cc1-b7ad-049011603c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8791f91-4d4a-4956-8eda-376fb0019720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a56eb8-77a7-42d7-a537-71212f0b3b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1eeabc6-3f15-4b29-bfb4-89cb2adbcaae",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b77151-cfb1-4cd8-87e7-273b1d7f15fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f714648-a9fc-4838-9549-f582c6007a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6526193-59cb-469e-a721-f87fb963010f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158280b9-e340-41f0-9dfb-588794f3bd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c8c574-14b5-4872-a54e-44219a08e9c4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b51393-c7c6-4c33-b1da-6ed0924ff46e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8973524-bfa2-452d-903f-0033f640a135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8e9904-cde1-4bbe-9de9-3b1ca80989a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e035f1b2-edc6-463c-bd99-5c3b69d50206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47d436e-25a0-4d5e-a44c-fafbf277293c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0cf038-77c7-4664-bd32-4f297a95c27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70734249-85b2-4618-8b27-c2e2186ec4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa048827-5b60-42e5-be44-5703f12a030e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74cc510e-6dc0-4a3c-936c-9928231ef661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55916eb-853f-482e-9385-efba0173a69b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7296ed67-cb06-441c-aef4-baaad4e064d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3ad7c70-4d19-4d0c-8140-b31efa5d347f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5741cc68-f5e8-43f0-83d5-43b3d5681bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5494952a-fde6-48a7-9f92-683690d80865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4716ec42-c66c-4e0a-b80e-2dc01bfbd786",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fb68c5-38b4-4209-85ed-c0e9199cb09f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d553f7-1ed5-4ccb-a720-265d4cecb14f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e440d228-55a3-4316-86e3-21627e1d788d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87df961c-c07e-4026-b98c-a510fdfcd915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7981586c-41f6-4963-bca8-6d8ad6dae421",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9fd5b9-2db6-4417-8878-dcd49a5f38e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ee1a668-bae4-4ce9-8f91-303f752f3281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fabd121-d1b2-49ea-99c8-c850a013e06d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f8f7b1-a198-4a48-ad06-49cbc556943e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857f72e0-2835-4d19-a4cb-031cb0bf7f52",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea04b227-8827-4c3d-9612-d1c6a8d60bd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "789de200-2b88-41c5-95c6-16e1d57e2103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "536d40ce-a191-4b42-9683-a6e80853e57e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1caa5e82-9047-4871-841d-0b7eaac27411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbdb76f-37e7-4602-88f5-99eddc63cbe8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8285ec-3b7d-40f9-9c8e-9efc8947d840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74072f41-f7d2-4d2f-85e9-0e6a303512cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf5929c-7730-4426-9316-c570d4241a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23788a07-4be7-4235-8e2a-17c8f51855b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422a5d0c-eeee-42e7-aebf-e775c2c06c12",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f589261e-f40a-4f0e-b6cb-a38aa5777064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2fac65b-d841-4c1f-9a5c-8ca8ce10cf07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78afdced-c88d-4586-9e3e-161461040d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382d6b1e-05b9-408a-badd-1d768e6e2df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b551e57-ded5-4297-9f48-f8e10f868463",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e520c0-a096-46a7-b80e-db8f4a3f1eac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8edd3aa9-0de0-43f0-af4f-0a47f00bf8d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ebcacd-670d-44ee-9184-3de3dea611e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aafe3d26-d2a5-4742-ad13-8811317a7f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7297c0-7886-49bf-9e92-4f2dbf61fd49",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d635c8c-fec0-4e53-81b1-23a43bf8151b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13449705-2669-42c3-a505-49cba829b4b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6eda6fb-3cc1-4cce-a6c8-91b717a1acef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34248806-7728-4841-ba27-0057d11abb5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b33054-1476-4e8e-8337-43aaf5c3db59",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f981af-9e97-4d05-881c-8b6c59ebcfc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7b4f32f-449d-4f16-a3b9-66c20e497803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38068b95-fde8-4a25-8b36-dbaff10ef3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b2a23f-47af-47a2-85b3-6dd8ead93885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53eaaaa0-53ff-4958-8cac-1ee2959377a0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5cc701-9a22-4c2b-93a2-dd02380d5709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a8c524a-68cf-4997-9660-1ab7331b81ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49312cbe-7ac5-43d7-ad59-95feb31ebbad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95548bcf-a41c-42b4-a798-469bf6626fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db42364-b31e-4281-9ddc-c0701046774f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba477a06-f448-48c9-ac28-7003bdc76cc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0196364f-5e0c-40ee-9c52-9f27473c494c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe25322-8725-4f2e-9599-df777fcbf7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec34dbdb-cdea-4867-8fd5-a10f0b95d88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bf51f0-a44f-4eef-8c57-fb8149e0e041",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cd08f1-9da3-4fef-8259-ffbeac5c33ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15b8e0cf-a0d1-48c2-b500-8d73149bcfd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa378ab-2cbe-4c58-8bc2-91cdb27ccae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b158861-12e5-4f54-9442-317732ef0a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bf229e-ba7b-475f-8a54-6e49f7849e67",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275a8cdf-e0e4-4213-b86d-ee5c9cc57d8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c070f8c-aa26-4739-acf2-2b8b0c81695c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9f746f-b887-469c-b14f-9aefb85b7943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d157501f-b2e4-43ae-a1a2-85b9c76b5053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c6909b-1c4b-4382-b25c-9da051a83f2a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12ead11-0d8f-48b1-a23f-b39060fc286b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0decd466-53bd-46ba-940a-2148b3864a6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac82150-4057-4e53-8278-21709cad28ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4ba4b4-a6f2-4593-a7a6-df271556085a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ddbe8e-07c5-457b-acf4-156e2006cddb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bec5d62-cdf3-4bee-9dd6-69620556c088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b147c7b6-9544-49fa-aaae-93c9163e971c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2531ef9-2249-4eee-a4cc-65756cef8c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d5048e-4ff2-470e-9b19-a2fa62ed1c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923f44c8-388c-4dc7-b621-32ec6d45fdd5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f065143-290a-495e-936f-974eba2390c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f16a9a07-3300-4230-aaf4-f34f067d5833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a894d80-4fa5-40af-b5e7-ceea72c37a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687b2690-7879-4a5c-a679-87b9b3fae0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b502f7-660e-448e-8d22-cd485a817c86",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcbedf4-2c31-4f4a-af2e-6a125c2639f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecf708e8-4dc1-4401-b10e-39bddc21b8cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46a4dab-8aa1-435a-bffb-ecd7fbb190de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebcafd4c-116d-4e80-9cce-8ff5c76d9dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73186f4d-854a-4e02-853a-5f6ee2450f0f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983906f2-5f97-4fb8-a5f3-72581e99f072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a7f647e-50d9-4966-b29c-a130ff241191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad1328f-45e1-42c2-a139-d4ae0990d326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c64bbb1-168a-453d-85fc-9bd2ccf64037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a36108-6596-4592-abed-3c02ca25e335",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d078f86-a357-451e-9771-c041bf56ca19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3872e297-13e5-4c64-b8b9-81c02fec32a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fe8e15-5752-4169-8895-3d3e08256e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a8b042d-5a4c-4a03-8283-1c201cbbeac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890cf743-1e8a-48e6-a76a-5b49822e80d2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87688abe-7b2a-4952-9685-004f063f804d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8de54f1c-d609-4c46-ab21-db56a43466f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa52c4b-423d-49ad-b429-1a8db19c9a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae245cf-380a-4d1e-92b9-1094405302f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c4c814-c8ec-4f39-aa36-a4006be08a8f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c98274-162d-42de-8450-2ef162e22fd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8083a8db-4b67-44ce-9bfd-b5716b8aad5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81854cfb-c83c-4e8a-9cf4-31dbc0100024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff79c3c4-1462-4d50-aee9-d6bcb42b260f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d9f2fd-be01-4b91-86eb-b164fb2b7175",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed02d02-9c37-419d-9495-7fd0d8b63d49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11d4e0d9-5c7b-4234-8984-138b8957a2b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "276766dc-184f-44fa-bb44-ce0df3136944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0170c7d-145f-4e56-9d3d-04b87fdc7489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d966da7-72c8-4252-adc6-2cb56db045cc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429500ef-6e51-4715-8159-d89684801850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40804dfc-5cf2-4525-b0d5-a4fecdb17cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91219f30-2524-483b-99c9-0c3ec48cd297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6863990c-fa75-4c59-a3ef-033d21263894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c500ac-41dd-44e7-a8ef-46c60f1dc1fe",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c42a39-9cfc-4c65-9d84-a243f2879140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dab07c4-72cb-40c0-9b57-14306e56b260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a4f553-b155-45c4-901f-777d0cfc6c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41907d32-9670-4565-bded-3b83623b5849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc838fd-d566-49ad-952f-e9bd49c739a2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d104b7-91c1-4d73-9c89-b0319df3f718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d57663c-927b-4a11-89e5-f7b55b1f2913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb846c1-79ec-48f3-85e6-840917a239e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f60acdd-198b-4627-896b-0ec03020135b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028b9cc8-1d69-4737-9ee8-0704d773f827",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54af8df7-0862-4ef4-b7b2-210b8f927203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c17335b-2e1a-45cb-b6dc-a595f67efb0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4426cbad-537e-4cac-829d-f3a3ec901137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f6eca0-00c3-4aab-8031-93e58b4eff21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b487721-081c-4db2-8498-bf4f036d73f1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685d6a51-3809-4a0d-9821-1c0a46d62bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6eab7e9-6111-4f60-99dd-546872b89c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74234e1-32b8-460f-8396-7434d6248521",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a926c0e-87a9-4bff-9f0c-389e001ab73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9ef741-d65b-4c08-8e4d-d875c8dc2b23",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02bf0b4-308d-4ba9-8966-56dfb47943a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "187c1133-a734-4612-9338-fd1cfa3bd499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3517a8-11a8-4ec7-8fee-c1dccb35d189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489fe106-51be-4b93-bf97-8b5ce61d875b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1be908-cd0b-43cc-8c6c-ccfc039e6888",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2169ec-c984-4393-8031-a331941bb687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd0cbf26-b868-4ffd-bf4d-e71e0eb3b65e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9c68b3-e9a5-4de6-80ae-86819144235c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fdada7-a741-4d5b-b82a-5e13f98468d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebc21d7-5eea-4093-9a14-9a56061325fc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29de611-8fa7-4fd2-be40-dff6c1edcd70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ac5ce91-fa91-4802-a1c1-ef1f98cc39e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97846f38-e181-441e-8152-b8afe26d4f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650f6b3f-38b9-477f-be7a-fa0532f04c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce78ea75-49cd-4a68-8736-ba8b4a557e4c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eeedf67-c2ab-4423-9cec-ffe18c1067b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35c9b509-daa5-4614-9dfe-d2e7f8364d4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0dc952-d937-4835-a444-fba7c2354926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647dd3e3-8cd1-436d-8a28-65dbea6a5831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc414125-8662-48c3-b0b2-527e36248337",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4994800e-985b-48ae-bafc-5dba7b334a7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5276183-6e5a-4878-9f46-15147311b986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2982a0-45d4-464a-90bc-0e364cff89d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5133e2-b03b-4676-ac27-4477cb76ad4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1e1f18-ac05-4b15-b771-31314166ce08",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790a227d-4db6-478b-95fd-85c3a4cbcd26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40c096ed-e16d-4ff5-9ec7-d8b0822d0357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fb8a9d-41fe-46d6-967a-920aba30ee6d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b88a34-60da-4e83-8efd-76a67d4dbfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f68992b-1a9f-4907-9b9b-c406c3844e41",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430995dc-594a-4888-8675-df227ec5b774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90809575-55e6-44bf-9387-1a1424243892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5f4ed0-1a5d-4fe6-b43d-e67b9bc5219c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dd1a80-75ec-4a20-a73a-c0aecf5880e2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e3b69c3-6c75-4cd5-8731-513a63956569",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1cdd86d-c8ed-41b8-b673-4c1d8ed662cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "017eb3cb-f158-433d-9a4f-4d19e1469026",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "597db60b-52fc-499e-8ea5-c38fbfd81656"
                    }
                  }
                ]
              },
              {
                "id": "155f2d1d-ddc8-45dd-b058-bc7a769b0c13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a52b332d-1efb-4f88-8ba4-6d51dd18d12d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0ba691-80cb-481c-826b-f891e697bc77",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6bd6bf3a-8145-48cb-b04c-0dc8b1cdbfb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8de12d9-8f56-4d5e-a8c8-c6c4bb1cd760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9851e0b8-a544-4602-88de-c4c622541704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f18a0cc-f152-47e4-9ba3-c2833a446783",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b45260-5450-49be-98bf-49d21bcb4647",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9b1bf1f4-f417-4d5c-9872-5c84667e8022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9ef01a-7a23-46f6-bf1f-75d55655b8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ca2abc9-f9c1-45d5-80dd-45ae14cf674a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea158a72-231f-44ca-b12f-50094852c7a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b5b9dfe-de44-4aea-be6c-7ef514879919"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0a9130c-cfe1-4f4b-be6b-8b0fa6e6dee9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "551b4bc1-5f52-41d4-bf65-b80c3d0121c2"
                    }
                  }
                ]
              },
              {
                "id": "66667d16-bbb8-4cf7-b685-b8c3c3a81663",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9ee567ed-5dc8-4347-9b25-4e5460cc0164",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce18ede-7a56-4bde-9828-bdb04864ec0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6d59cf86-0550-4fa5-adcb-5ed0ee67f588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5400d3e6-a480-4e16-8d68-a61b0e10a7d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e06db6e-f776-42f6-963e-704373ff6ef2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "115735b1-5373-47b0-8291-0127386096ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5c4aba7f-2921-4a29-a0c8-87889171eec2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f42365b8-6190-4cf1-8abb-cd343bed206c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e2c1428c-6d21-4ea3-8bf3-63c2f32b94c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eec52804-b489-473a-bc2a-74786899bfe8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ddbd9f1-83be-43fa-ae74-23871024d22d"
                    }
                  }
                ]
              },
              {
                "id": "000e22ed-3d97-4efa-a04f-e7f3d9a91a0e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a4eda78-6f91-49f1-9c81-9f2f5e8681e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9bc39177-413b-4682-bcba-84e826fad635"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d998fdd3-01c1-4e17-b825-0b473a106373",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb743d16-affa-484f-a631-9330447cf595"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "788eb8c7-cf40-4020-befd-b2afb60b8ea4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "73db71e7-8281-4f75-850a-0cef20ca4e36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24aaba79-b21c-499b-8f17-636e64f50e15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "241f5cf2-3472-443a-81aa-34b71697d677"
            }
          }
        ]
      },
      {
        "id": "d59d7bfa-7e78-459b-ae55-ca8a238005df",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5a2b9fd2-a5ed-47b6-9c89-063e31a32c81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "874f966f-38e0-4dbb-ba50-7977bfb519d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12f8c76e-1faa-48db-becb-93d7fb50a3d4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88eab4d5-2ed9-4f8c-9528-4aaae397632f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "84bc1bb4-32b3-4df1-b217-c5a195cf5010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464e5acc-ba52-4353-8939-4b893b1154c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aab61dd2-9559-43ef-a868-4dde9353c5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb91d56-585b-420e-8cd3-265dd47f8e8f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56b663c-a1c4-4b79-b962-97ecab9878b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "78d49603-b362-480e-9aa2-4218a2697dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "409ff8fb-3a7f-4271-9985-5b92f09e2bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f43353e3-012e-4cad-8911-bdfd9a5a596b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f565d384-4fb0-4870-a120-b19e5501cb68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bedae7f4-f4d9-4be5-b257-0e0598e85578"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74f44954-bf1e-497f-83c4-f376484a9b5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebe75936-5f83-4914-b30d-96b7b935e4cb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1eb319ff-ee3f-4e42-9073-3be828470a07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0d4dc5f3-bc56-483b-8321-feff9d3d1543"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d72d5c44-cbe0-4940-adfb-1c35636a2b4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e88d7337-fa47-4a7a-a765-a8ee0d897282"
            }
          }
        ]
      },
      {
        "id": "25c3c5d7-ff11-4d2b-a33c-5f455c127c46",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "818c1df1-eec8-4c6a-876d-45caa43f72b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bdf0d11f-3d61-45a0-8db1-48b6975e8719",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02115b50-f59c-42f8-b454-82a369f787d2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272a6615-8e16-4ac1-8639-1dad1ca77054",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "518a592d-8968-4b44-8b05-6905a58435b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffcbcde-9cab-4382-8926-23697724c172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "938b1e66-b1d5-461f-bb00-6b50565f568d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16b52be-30e7-4dae-b3f0-3806ea3935a3",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e68f3b-1949-4593-abe2-de9b6dda7d79",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a0468344-a790-40c6-8ff8-b1736db1fe42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639b1e52-c572-4fbd-8f4d-911ed6738c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ea73524-85df-42b8-a963-2147558edeb3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62e44776-d41d-417c-999f-127f1732b17c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e0dccb3-ffeb-408a-9b25-7551477d17e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdb383a9-ff29-4a15-8f6c-014892efe39d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12a52e5b-2a73-4bfa-b496-5057affffad0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "016f500e-163a-4563-9424-135ab85c283f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ece92f61-b8ca-4bed-900d-5466fddf845b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85f1164b-3daf-4f13-8605-29ca4820fff5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65aad34c-a60f-4c29-acda-3f96d980edc4"
            }
          }
        ]
      },
      {
        "id": "5c698b69-b8dc-4f0b-9c2c-5c03522f8e5f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5fd02cb8-4337-4a59-baba-a06dd567223e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "591ad519-38b6-4383-96e9-06b41c2cc781",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7102e6f5-ec02-43a5-8758-5b63faeb17b6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677c9fdf-545d-42f1-a6f5-e6c9bc55c6c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "86df79ce-9ca4-45e5-9f0e-95193a4f2abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "838abd54-7fe8-44ac-83ab-1632d3c59c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e009949-6adc-4e53-a0b8-154b418d928d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d898db1c-e78f-45bf-984e-15ed53df2b12",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3b9e23-d317-4bb5-b076-b75aa181317b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "130ced2d-9839-48de-ac15-592f1dd05d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffee4fea-11aa-48cc-81dc-a5189ef00d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7fe50d3-c0cf-4d3a-b107-7f92cafa2dc0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e68682b-e486-4222-a0de-523da5abe044",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdee852e-4bc8-4018-91ef-59a3f548245e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2e3759f-824c-4ca7-9fb0-371bf93465f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "039f529c-8734-4c45-a05e-ddef6cb272d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cf390c7-18a1-4154-931e-c792dacfefe1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "266aef26-41d9-41ca-9f7b-fecd3bc64ac4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d12df489-47be-47cc-84a0-47523989fff3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24114c44-126e-4dea-85c9-35692681b8c2"
            }
          }
        ]
      },
      {
        "id": "78b6d309-47ca-44de-8163-9301de7c431f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b406ff7-a4b1-44dd-bc79-49f276fd4fc9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07113f93-3784-42f5-a696-752d5c89f1f2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cea68aa6-44f1-4e7a-9ccb-88110560fafd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e19bacd4-9d36-470b-857e-2d85e4f8bbdc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58e86d1c-240b-4d25-9088-24191365c8e8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 500
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 358.8702290076335,
      "responseMin": 8,
      "responseMax": 1453,
      "responseSd": 374.3798311456556,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672965594987,
      "completed": 1672965703361
    },
    "executions": [
      {
        "id": "0f41a117-b3cb-44d4-82bb-b94e7fea79fe",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1722d31f-ef4a-4d32-a699-73fb1c7cb1e5",
          "httpRequestId": "64bad24d-c840-4566-8b5a-324dd5b45edc"
        },
        "item": {
          "id": "0f41a117-b3cb-44d4-82bb-b94e7fea79fe",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "195295bc-cd2d-44a8-8d87-2bc92e5b8248",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "773446b9-4f90-4fb4-b083-1bb04963ee61",
        "cursor": {
          "ref": "d5f58568-c3ef-465b-99ae-beb2482120b8",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "911e70d8-faa8-4fd1-b3e0-aa5e854847f8"
        },
        "item": {
          "id": "773446b9-4f90-4fb4-b083-1bb04963ee61",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9ed78982-7060-4ed2-832c-7decbb53f80e",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "53f69bc0-5646-4323-92e5-6795111a5b6a",
        "cursor": {
          "ref": "727c41d2-1bbf-4a5b-bc71-7d98cb2467b8",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4d15f8ac-c900-43f1-b6e8-614805d15c82"
        },
        "item": {
          "id": "53f69bc0-5646-4323-92e5-6795111a5b6a",
          "name": "did_json"
        },
        "response": {
          "id": "af020358-5605-4ad5-9202-defd3d8097fa",
          "status": "OK",
          "code": 200,
          "responseTime": 222,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "3c044922-a122-453c-af16-296ad826f5e5",
        "cursor": {
          "ref": "5b7d09f5-c0d8-4a9c-9b36-f2f72300ad51",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e8220483-70ae-4cbf-b6b3-3101015668a1"
        },
        "item": {
          "id": "3c044922-a122-453c-af16-296ad826f5e5",
          "name": "did:invalid"
        },
        "response": {
          "id": "68b3ce72-205b-42ef-83b0-a206ab4e9b69",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3c044922-a122-453c-af16-296ad826f5e5",
        "cursor": {
          "ref": "5b7d09f5-c0d8-4a9c-9b36-f2f72300ad51",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e8220483-70ae-4cbf-b6b3-3101015668a1"
        },
        "item": {
          "id": "3c044922-a122-453c-af16-296ad826f5e5",
          "name": "did:invalid"
        },
        "response": {
          "id": "68b3ce72-205b-42ef-83b0-a206ab4e9b69",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cd2904a1-5acc-40d9-8826-d3ae54b7215d",
        "cursor": {
          "ref": "0fd2c5fd-0242-4ad9-8676-980007c2902d",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "09e42fed-5f9a-4fe9-a6c8-855177ab32a7"
        },
        "item": {
          "id": "cd2904a1-5acc-40d9-8826-d3ae54b7215d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0571cbfc-e433-4bf3-aa1d-b3edc5bb79eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 220,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "076f969e-4400-430a-98de-e5b41a19b88a",
        "cursor": {
          "ref": "778ed62c-8592-4801-87a1-ecace2fb0f81",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4068391a-e285-4324-b75b-3c0c9437cad1"
        },
        "item": {
          "id": "076f969e-4400-430a-98de-e5b41a19b88a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b1d18607-dbed-4503-9af2-4f442304f828",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "9090d8bb-21b5-4da1-9267-2062f19229de",
        "cursor": {
          "ref": "cc188cbc-19ca-4f86-956e-81983a169b0b",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5190c607-7789-402b-8d64-51cc691159e2"
        },
        "item": {
          "id": "9090d8bb-21b5-4da1-9267-2062f19229de",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7d107af3-4b95-4700-a124-978adaa1c46d",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "48927075-e36b-4b23-8470-6a927515a094",
        "cursor": {
          "ref": "5d1f9b54-d850-4bbe-8887-16e49bf149c2",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "94ec6ab9-97bc-4e21-a5a3-1ad1e5568097"
        },
        "item": {
          "id": "48927075-e36b-4b23-8470-6a927515a094",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9ef86801-b336-49fe-ab37-eb3d0e11da2a",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "48927075-e36b-4b23-8470-6a927515a094",
        "cursor": {
          "ref": "5d1f9b54-d850-4bbe-8887-16e49bf149c2",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "94ec6ab9-97bc-4e21-a5a3-1ad1e5568097"
        },
        "item": {
          "id": "48927075-e36b-4b23-8470-6a927515a094",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9ef86801-b336-49fe-ab37-eb3d0e11da2a",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "56a843d7-18ac-47b5-8f49-5d1e16e60884",
        "cursor": {
          "ref": "d1299f57-d269-4051-81ed-303d2ca20bda",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "64113dbc-feb7-4c65-82f1-e503848765c6"
        },
        "item": {
          "id": "56a843d7-18ac-47b5-8f49-5d1e16e60884",
          "name": "identifiers"
        },
        "response": {
          "id": "94221e11-1c9b-40e3-86c0-e6e95514b5af",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dffc16d-7f02-4a26-852c-4adbfd74a221",
        "cursor": {
          "ref": "96c8f5e7-b978-41a3-b67a-29e1b3afe638",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9db0748-94cf-4951-856e-0360dfa0be9b"
        },
        "item": {
          "id": "2dffc16d-7f02-4a26-852c-4adbfd74a221",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "926926bd-42be-4880-bbae-61252d7a5ca2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 285,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "2dffc16d-7f02-4a26-852c-4adbfd74a221",
        "cursor": {
          "ref": "96c8f5e7-b978-41a3-b67a-29e1b3afe638",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9db0748-94cf-4951-856e-0360dfa0be9b"
        },
        "item": {
          "id": "2dffc16d-7f02-4a26-852c-4adbfd74a221",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "926926bd-42be-4880-bbae-61252d7a5ca2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 285,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "9b3de929-eca1-48c8-a325-59123e33a8eb",
        "cursor": {
          "ref": "d763ef98-11c1-49e6-825c-a61c01b525b6",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "269acbb6-a610-40cb-b39d-be7478182584"
        },
        "item": {
          "id": "9b3de929-eca1-48c8-a325-59123e33a8eb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9e106ffb-4888-4788-abcd-ae661839386b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "56c4b1ae-3111-4fb5-a6b1-f5b18adf2a40",
        "cursor": {
          "ref": "688a95fb-968f-49b9-a370-03b6dafa5633",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b5be5af9-9b36-4f25-8574-6b3d099b40e6"
        },
        "item": {
          "id": "56c4b1ae-3111-4fb5-a6b1-f5b18adf2a40",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "56df12df-0ed4-4f59-b172-083725dc483f",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "edc7bd7b-0190-4ce0-8f19-a67a96bb51d6",
        "cursor": {
          "ref": "ba9470c5-4a04-4779-81d0-779ae8aa29a1",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "846fb7b4-0564-4cbb-a7ab-65ac76287499"
        },
        "item": {
          "id": "edc7bd7b-0190-4ce0-8f19-a67a96bb51d6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9bf33730-7e7d-499c-abc4-b9317e38c016",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "5ee4c263-1f2e-49e1-83f3-edea7a93b4ad",
        "cursor": {
          "ref": "a2abb764-9257-4ff3-a320-5e724323a1b7",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "be2944b8-4678-431b-922b-a77bec1884bf"
        },
        "item": {
          "id": "5ee4c263-1f2e-49e1-83f3-edea7a93b4ad",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ce33b689-ce02-4242-90e0-a2b6786e900c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "00575a53-9a07-4039-a636-eb0275d4e731",
        "cursor": {
          "ref": "36135322-d24b-47fd-b3fe-71693c3d55c6",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d5a87c7e-2171-4571-a392-d1da4fba0fe8"
        },
        "item": {
          "id": "00575a53-9a07-4039-a636-eb0275d4e731",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "03ed872a-1821-4778-8026-550a827e3498",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "e4d58fe1-d593-4d5c-9d0c-43f9009df4b6",
        "cursor": {
          "ref": "3acf3098-13db-4083-83f1-400b41b43dbc",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c2b3875f-25f9-4be2-ad2e-e252a9bf491e"
        },
        "item": {
          "id": "e4d58fe1-d593-4d5c-9d0c-43f9009df4b6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4be8f5b7-a1ae-4a5e-9e11-4eb09ad4ccc4",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 666
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "fd1da028-8365-4f1a-be1a-c96dad4006bb",
        "cursor": {
          "ref": "6dff9935-4fab-4f75-8fd5-a105879ea0ca",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "639c7368-4a5a-4ebd-a047-e55c9d587154"
        },
        "item": {
          "id": "fd1da028-8365-4f1a-be1a-c96dad4006bb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f2f0d52c-7c73-43c4-9104-3f70f4982507",
          "status": "Created",
          "code": 201,
          "responseTime": 93,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "c1cd7bff-d46d-4e11-b0d2-8af10821df73",
        "cursor": {
          "ref": "ea4a274d-ffea-4d30-9b89-cff4034c6954",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "004b8c71-bcb4-498d-b016-59f86e95960e"
        },
        "item": {
          "id": "c1cd7bff-d46d-4e11-b0d2-8af10821df73",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4193b74b-8d66-489d-b365-095dbb8321e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "7c07aca9-63f5-4a22-b293-3523e019835b",
        "cursor": {
          "ref": "2840314f-89d7-4724-a24b-496bf03a60d3",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3d484fa1-6f74-4612-a292-f23fe6b33f0c"
        },
        "item": {
          "id": "7c07aca9-63f5-4a22-b293-3523e019835b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "60c0eb13-206a-4aac-a150-13fc793dbfcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "74aa563e-e400-4b01-a1e2-06d543a4c7eb",
        "cursor": {
          "ref": "e1684d81-ccea-4da5-b4c1-0a27c1e973fe",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5c479a0f-13eb-44e6-8ba8-4355ba6bea5d"
        },
        "item": {
          "id": "74aa563e-e400-4b01-a1e2-06d543a4c7eb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c486bb1d-cd72-40db-a547-5412b071f451",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "1e074bbf-9ae7-4817-8833-ae36b99b92e4",
        "cursor": {
          "ref": "dc2e76cc-2665-4f91-8244-712d4b875b01",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cdf2263d-e8fa-4961-85a1-a76c5bd5f79c"
        },
        "item": {
          "id": "1e074bbf-9ae7-4817-8833-ae36b99b92e4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3d76370f-aecc-4a4b-ac4a-f4d7e1e3db92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "30ec66fc-0d19-4f54-ae36-31c07198ccb6",
        "cursor": {
          "ref": "7d632cda-e9b5-451a-890f-bdbdc120d3fe",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0870abad-7bdb-4378-addf-1a30e4d8bd88"
        },
        "item": {
          "id": "30ec66fc-0d19-4f54-ae36-31c07198ccb6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "87c0ff09-cb09-4db2-84ea-e70f2db055d9",
          "status": "Created",
          "code": 201,
          "responseTime": 85,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "66c5f751-2c0b-4d35-9f1f-6d0c36a9d352",
        "cursor": {
          "ref": "1a673d9a-bd20-4571-8047-c4a0108c47f3",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "241192c9-9b23-486f-826e-e8f6481a9636"
        },
        "item": {
          "id": "66c5f751-2c0b-4d35-9f1f-6d0c36a9d352",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "5b54178e-fb9a-4922-99a5-180e66cbbe9e",
          "status": "Created",
          "code": 201,
          "responseTime": 1191,
          "responseSize": 639
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5dff844b-0d40-4c05-acc4-376baf646a83",
        "cursor": {
          "ref": "ae8a7ed3-d4f6-4a8a-8cc5-d1f5eea88d25",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "498c05fc-39da-4fe5-bfee-43bfa80aabd3"
        },
        "item": {
          "id": "5dff844b-0d40-4c05-acc4-376baf646a83",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c8a75e19-f6d5-4bce-9e82-561f0fba48f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 537,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "45a653cd-c796-4bc4-b59f-c4a6b31ed307",
        "cursor": {
          "ref": "7b17c382-d68c-4ed5-a17c-6241b467efb6",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9d06b07f-b601-48ab-a5ec-5793e4a32690"
        },
        "item": {
          "id": "45a653cd-c796-4bc4-b59f-c4a6b31ed307",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2cac23d9-df3e-40b7-99c1-16c0c0f49153",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 307,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b7a23051-826f-4437-9cac-1c026a04e76a",
        "cursor": {
          "ref": "6bcbdd89-3d09-41a0-bacb-7522bba7fbfb",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ac370898-845e-4f5e-8403-07fddaa3207e"
        },
        "item": {
          "id": "b7a23051-826f-4437-9cac-1c026a04e76a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "21cf9080-ce2e-4bf8-8711-ab2abcd146fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 303,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "7aefaf49-2a79-4047-853e-b7e7a1bfde86",
        "cursor": {
          "ref": "cffd2b80-2bf0-43a0-8814-f8756c2031c5",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e9d405af-91de-42f3-879f-371e71ed449e"
        },
        "item": {
          "id": "7aefaf49-2a79-4047-853e-b7e7a1bfde86",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ec224aa6-ab8b-4101-9cee-358e1bfdbb74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 294,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "039744b2-4c7d-4f1e-9253-66738c504412",
        "cursor": {
          "ref": "b15bbd3f-3f46-4b2e-8760-ab1ca83c9365",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1e4f4a70-ce94-4ca8-a656-b83589dfd7f4"
        },
        "item": {
          "id": "039744b2-4c7d-4f1e-9253-66738c504412",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "de674b67-0bee-495c-92aa-52070707e8b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 296,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "cce62dd0-79ae-4dae-a346-ec1e4d23bb08",
        "cursor": {
          "ref": "39eb5bc4-e118-4db9-a76a-d2f4b8f10ebb",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2c96af3d-a6e5-40c3-88f6-10cee1aa3a2c"
        },
        "item": {
          "id": "cce62dd0-79ae-4dae-a346-ec1e4d23bb08",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bb77c4fc-0178-4c83-afec-621a7ee05c71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 509,
          "responseSize": 44
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "5a3d0aff-5e9f-4421-914a-ee76cf5c13b6",
        "cursor": {
          "ref": "5e5b56f1-007f-4063-b347-48da0a6055e6",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e535f3a3-855d-4d5f-aec9-dc3a2e9437f9"
        },
        "item": {
          "id": "5a3d0aff-5e9f-4421-914a-ee76cf5c13b6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c1067d04-90b2-48f6-bcaf-3fe49c1a5006",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 276,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d3a387b9-a82c-49a0-9490-c170bd158eb8",
        "cursor": {
          "ref": "fa0d8961-ea4c-48db-b9c0-2a3b1587aff1",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c8ce92ac-5b24-40e1-8792-e4286fb2e77d"
        },
        "item": {
          "id": "d3a387b9-a82c-49a0-9490-c170bd158eb8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1574cc4a-0b70-4f68-a5b3-65625e1b4fb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 295,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "66e802c1-b6c9-4d0b-8e8c-7aa5177398fb",
        "cursor": {
          "ref": "fbc6b6c0-de5a-4e9c-bcd0-28f2019f922e",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4d7dce8b-efa6-4546-97aa-29f2eb30e020"
        },
        "item": {
          "id": "66e802c1-b6c9-4d0b-8e8c-7aa5177398fb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1c0fe045-eb51-4eba-81fe-6762ba309cce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 309,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "c41322da-76cb-426a-af42-5eef73f0bfe3",
        "cursor": {
          "ref": "cbd17cbf-65a5-45b5-a927-34dcd56f0a08",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "63fda979-bea4-4599-ab3c-88c856db366e"
        },
        "item": {
          "id": "c41322da-76cb-426a-af42-5eef73f0bfe3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c81ce5d1-5b10-41b9-82dc-3f44b7b3a705",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 309,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "64d72bb4-c5d2-4b7e-9bd2-101a62296643",
        "cursor": {
          "ref": "18505366-5b63-4201-88cf-6cfa813a3fd0",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c6972e5c-9fa4-4045-a160-bfa32d391a97"
        },
        "item": {
          "id": "64d72bb4-c5d2-4b7e-9bd2-101a62296643",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2ce37f9b-3856-448e-89ea-13afa8f137d8",
          "status": "Created",
          "code": 201,
          "responseTime": 1025,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "28a306db-bb07-426c-b242-ae71dab604ec",
        "cursor": {
          "ref": "21cd786d-d55c-4620-9678-327c1d981804",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "12c814f7-332c-4f68-9766-267eddd19a1a"
        },
        "item": {
          "id": "28a306db-bb07-426c-b242-ae71dab604ec",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c882ad44-96a9-4efa-beef-d20ac178d6bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 516,
          "responseSize": 59
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "bd9215e0-3ccd-4217-9ae2-82738d246287",
        "cursor": {
          "ref": "f73ed279-0b77-41f8-a12a-2bc3311a9d4a",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "eedbd9f4-b0cd-4c5c-a8a6-d09de4497619"
        },
        "item": {
          "id": "bd9215e0-3ccd-4217-9ae2-82738d246287",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3f07aca6-d7bc-4a88-96bf-93f17e20528a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 277,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "2aab30fe-4ac0-4bd9-bf61-3ee57532ea04",
        "cursor": {
          "ref": "69707a17-93d1-4dbb-bb71-6eae16e6194f",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0aa11510-0cf1-4758-872f-f3f112c0913a"
        },
        "item": {
          "id": "2aab30fe-4ac0-4bd9-bf61-3ee57532ea04",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "af5ce0ca-aff8-46fd-8fde-48b338c9eb26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 300,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6e339e29-440c-4f37-9757-46d21126708b",
        "cursor": {
          "ref": "e1e0ad12-c99c-491e-8450-0f2e57d86d7d",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9a1b86d3-1307-4af2-aff4-cccd0f8b4136"
        },
        "item": {
          "id": "6e339e29-440c-4f37-9757-46d21126708b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6c6f5a6e-e2a8-4e3d-b77c-31fd01c36af3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 275,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "53029eb6-f3c8-4a99-ac4e-dd04c2ff7ede",
        "cursor": {
          "ref": "416bc28a-4f8c-4720-bd77-d88c1dc6d445",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6181552b-c413-4f0e-bd4e-d5f777a5738a"
        },
        "item": {
          "id": "53029eb6-f3c8-4a99-ac4e-dd04c2ff7ede",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "acf15406-c6bc-4c0e-b563-c7994acd1cdc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 294,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "dedceda7-4665-4797-9599-6bc33cdf2b76",
        "cursor": {
          "ref": "0e400368-80ab-47b5-8ccb-cd941674b680",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "77b65abf-1e04-4fb4-a62d-4417462b190c"
        },
        "item": {
          "id": "dedceda7-4665-4797-9599-6bc33cdf2b76",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2503280d-70ad-406e-8f2b-d61d04c939da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 282,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "36d3a2ff-5c84-49c2-a9d8-a1851b57c7af",
        "cursor": {
          "ref": "2bfa2aee-5380-4b49-bec6-6a0275c4bfc7",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8ab83fbb-c6b9-489f-b2f2-e445d6f6ace5"
        },
        "item": {
          "id": "36d3a2ff-5c84-49c2-a9d8-a1851b57c7af",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e3cf2591-d947-45e6-8171-95d302766c30",
          "status": "Created",
          "code": 201,
          "responseTime": 1033,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8916e4cc-97ce-4437-97dd-999f4ed89282",
        "cursor": {
          "ref": "8190a2db-b502-4f36-b1fd-8b3b62d24cc6",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "74b93103-3b05-40ec-805c-b848b09d2106"
        },
        "item": {
          "id": "8916e4cc-97ce-4437-97dd-999f4ed89282",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "07f4ca88-4a26-4a7d-bd77-73f91f9fa1c5",
          "status": "Created",
          "code": 201,
          "responseTime": 944,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "aea4d322-da71-489b-9db2-3076a611befd",
        "cursor": {
          "ref": "a6454f1f-e20e-4080-b56b-b0eb99eefccd",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "520a74b1-3e77-4c0e-9970-61ffe73c0219"
        },
        "item": {
          "id": "aea4d322-da71-489b-9db2-3076a611befd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0bd034b3-a7eb-4828-8191-e9691ca6cab9",
          "status": "Created",
          "code": 201,
          "responseTime": 970,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1c33e6cd-0de1-4400-95c1-89cb517498c8",
        "cursor": {
          "ref": "4b67c145-3876-44db-bf0c-2c138da6ad5a",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a02cc01d-cc06-4853-837b-0b73ff9f53c0"
        },
        "item": {
          "id": "1c33e6cd-0de1-4400-95c1-89cb517498c8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8dc348ee-c316-42cb-913b-8a953331fa0d",
          "status": "Created",
          "code": 201,
          "responseTime": 928,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4f2307c7-e986-4a13-906e-3f19da0ded4b",
        "cursor": {
          "ref": "b9f43ff8-71f9-47e9-bdf3-3629ad33b1fe",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fac31123-8fcb-4c1d-bcee-d0f21ecf4c66"
        },
        "item": {
          "id": "4f2307c7-e986-4a13-906e-3f19da0ded4b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b79cac31-0c56-4929-bfa4-2ec65e0c80be",
          "status": "Created",
          "code": 201,
          "responseTime": 964,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1beb034b-a51e-4943-898a-9682b1927b3c",
        "cursor": {
          "ref": "8b91e822-7d19-4e3a-9f45-e76e6b186626",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a71a0f7a-4a5b-4ad3-a291-d568970ab6bc"
        },
        "item": {
          "id": "1beb034b-a51e-4943-898a-9682b1927b3c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "99a886e9-4fd2-4ed9-b42d-cde6f2159761",
          "status": "Created",
          "code": 201,
          "responseTime": 925,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7e501f9a-efba-4ab4-907b-bc2f50270465",
        "cursor": {
          "ref": "a32e6a5b-31a8-4f48-ba43-eae4e3edfc8c",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "edcca48e-2cd2-4415-9dcc-865a6c8adcd9"
        },
        "item": {
          "id": "7e501f9a-efba-4ab4-907b-bc2f50270465",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6d43ab7b-f63d-48c0-a044-688e03bb471d",
          "status": "Created",
          "code": 201,
          "responseTime": 977,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2a7d6389-39e9-48b4-8b9d-722d2b3df429",
        "cursor": {
          "ref": "34981c50-96b4-47b4-9a0f-dbade02f2e53",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6cfaa2ab-9004-4a7c-8fd1-3a9113e70c2a"
        },
        "item": {
          "id": "2a7d6389-39e9-48b4-8b9d-722d2b3df429",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "63bfffb8-a7cb-4209-b2bc-a87d5f54e8ea",
          "status": "Created",
          "code": 201,
          "responseTime": 935,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "064c77da-b6c0-459c-a1fe-836dd8541b14",
        "cursor": {
          "ref": "9b8072f8-9610-4e7c-bbf2-4d409974cdbd",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1fdeb5f7-7a03-4c9b-943a-6179208cb31c"
        },
        "item": {
          "id": "064c77da-b6c0-459c-a1fe-836dd8541b14",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ba2948c6-13c5-4fa0-bbc2-1c7e4074333d",
          "status": "Created",
          "code": 201,
          "responseTime": 946,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f3813421-8e6a-4d85-b3ca-d3ce2d4b454e",
        "cursor": {
          "ref": "08c39c6f-6a5e-4884-8ee4-b10059bb3065",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "410ec798-a717-451d-8058-40b0314ca57a"
        },
        "item": {
          "id": "f3813421-8e6a-4d85-b3ca-d3ce2d4b454e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1cbcdfc3-1c60-47a2-9fcf-8192c70a4202",
          "status": "Created",
          "code": 201,
          "responseTime": 977,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cfe0d4c8-6563-4851-8e5e-c6357e6ef8cf",
        "cursor": {
          "ref": "85893297-1793-4091-b129-03e68e664387",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4b5bb0a4-bcf9-4f61-8d08-7dda59072d36"
        },
        "item": {
          "id": "cfe0d4c8-6563-4851-8e5e-c6357e6ef8cf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "93f3a521-0d47-40c7-888d-d7f026f8fcb2",
          "status": "Created",
          "code": 201,
          "responseTime": 995,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "abfe8bae-1049-49ff-8e04-1ed82696ee24",
        "cursor": {
          "ref": "17241f92-ddeb-41f9-8298-0204b2f81f34",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "703403ef-c458-45a3-969b-47708b7ea5de"
        },
        "item": {
          "id": "abfe8bae-1049-49ff-8e04-1ed82696ee24",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6408c7ac-1340-458a-b106-041fddecaa8c",
          "status": "Created",
          "code": 201,
          "responseTime": 974,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "840141e8-9b12-4787-a972-a38f054f5567",
        "cursor": {
          "ref": "962c3cfc-1494-473e-8d6a-5af8e234930f",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "083a0032-01c2-403c-82f2-ba5b8b691d12"
        },
        "item": {
          "id": "840141e8-9b12-4787-a972-a38f054f5567",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "255ab9d0-63a1-4dd2-b906-a92519115683",
          "status": "Created",
          "code": 201,
          "responseTime": 993,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "6636ad5f-765c-4504-bb75-e060a9f1aa99",
        "cursor": {
          "ref": "d55c98c2-32a6-4690-ac2f-c6d6ce2a1463",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "37247c49-f3f9-4596-8d64-436a51a83c7d"
        },
        "item": {
          "id": "6636ad5f-765c-4504-bb75-e060a9f1aa99",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "797dfb70-9d49-4322-90ac-923066b5c63e",
          "status": "Created",
          "code": 201,
          "responseTime": 974,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "ea0e694c-e99a-487d-9197-14c13bd9f778",
        "cursor": {
          "ref": "bc499f2b-fe11-4b2f-a783-c6deb96f448a",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d4763364-c374-4f6c-a4cc-b9b7f50b92b2"
        },
        "item": {
          "id": "ea0e694c-e99a-487d-9197-14c13bd9f778",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a2761174-4910-46e9-ad86-576cc171d2b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 524,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "cf2177bc-811a-437f-844c-1e6698f30f32",
        "cursor": {
          "ref": "b5ae7d23-e78b-4672-8456-66eda661dc80",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b9569e0d-963c-459a-bc6b-a15aa132ca7d"
        },
        "item": {
          "id": "cf2177bc-811a-437f-844c-1e6698f30f32",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "907311c9-347b-4cfe-9cb5-c28892574be6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 496,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "1c9e4396-1470-44d1-bf72-b0c6feec3347",
        "cursor": {
          "ref": "8aada434-19c3-4733-bf58-d6d45e4ca394",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c69f45da-d8e7-46ec-a7b8-2dce554f01a6"
        },
        "item": {
          "id": "1c9e4396-1470-44d1-bf72-b0c6feec3347",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3938d8ec-6cae-431d-b996-8733d141eca9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 501,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "d325ad5b-81e4-4a79-9f22-2612f3a74b94",
        "cursor": {
          "ref": "d29cea46-9bd3-42d3-8955-9fef078697f3",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9abd603e-3311-49ed-9d56-91417faa0fa9"
        },
        "item": {
          "id": "d325ad5b-81e4-4a79-9f22-2612f3a74b94",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e1565016-d051-4db4-8302-904c6269bd5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 492,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "5056674a-9c9a-43c2-8de9-4b5a549feac0",
        "cursor": {
          "ref": "b3e11023-14fd-4285-adbe-b33784ab8eb6",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "56894d44-3175-453d-a879-709626b3c4a9"
        },
        "item": {
          "id": "5056674a-9c9a-43c2-8de9-4b5a549feac0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "36bf29ee-5baa-48c4-8e4a-2c481a61345e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 526,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "6e1e04f2-3183-4176-992d-b25602da6117",
        "cursor": {
          "ref": "ad5ab053-06a4-4a93-9605-5881d7b42c16",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4a0c9184-3cc0-4493-88e7-16a4c80f68a6"
        },
        "item": {
          "id": "6e1e04f2-3183-4176-992d-b25602da6117",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "14300591-3734-46da-8b86-afc5108e6a5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 505,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "0adc0056-3957-469d-b0e7-61bd139ba69b",
        "cursor": {
          "ref": "1c74e113-104d-4cbe-9127-bc5ab5d6420c",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "04ef5aa9-87f1-4c46-a9b2-113bd037adb3"
        },
        "item": {
          "id": "0adc0056-3957-469d-b0e7-61bd139ba69b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "171bd656-a94b-4256-bfe5-7dd5e06c02cc",
          "status": "Created",
          "code": 201,
          "responseTime": 918,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "791520bc-e147-4036-814d-653958ba1d71",
        "cursor": {
          "ref": "c16edae9-017a-488d-9c0e-10774d3821fc",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f12621eb-0eba-484b-a886-2fafda290246"
        },
        "item": {
          "id": "791520bc-e147-4036-814d-653958ba1d71",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0a110119-f708-4e6b-8a5c-751ac95c246f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 498,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "2baf793a-5d4f-4a89-a6ba-8c0a46143efc",
        "cursor": {
          "ref": "287f04eb-f3a5-442b-a229-d379f6de0226",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2c3b565b-932e-4596-bc59-793e142a7bab"
        },
        "item": {
          "id": "2baf793a-5d4f-4a89-a6ba-8c0a46143efc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1f7d8285-f9ee-4376-b79a-a9b2c191328e",
          "status": "Created",
          "code": 201,
          "responseTime": 948,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "54fad588-48b7-4120-9ff2-a2e27f157d6a",
        "cursor": {
          "ref": "ed98a294-7fcb-4e72-b763-ecb1ce57117d",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a4e7ae54-8a6b-4db2-9f7a-b014c6105042"
        },
        "item": {
          "id": "54fad588-48b7-4120-9ff2-a2e27f157d6a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "94a6925f-f91e-49f8-97aa-7efe49e12624",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 495,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "6facb110-6615-42ae-8d67-363202b5897f",
        "cursor": {
          "ref": "7e2797b8-9018-483a-be32-d331f45bd8d4",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cad024b5-8042-454d-8b08-0ca3b7cefa06"
        },
        "item": {
          "id": "6facb110-6615-42ae-8d67-363202b5897f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2972dfe2-97a6-4fe4-868b-76c2e0bffd70",
          "status": "Created",
          "code": 201,
          "responseTime": 1021,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a53275ae-bdb1-45a5-94e8-ec8292fe0a39",
        "cursor": {
          "ref": "a6bcc713-fc7b-4741-acf3-d97d31074114",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a0e7f6fc-2971-4475-8b11-ee98e0fa153a"
        },
        "item": {
          "id": "a53275ae-bdb1-45a5-94e8-ec8292fe0a39",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "38816640-80f0-4c6a-9053-3d2bb586454b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 512,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1bab007a-886f-4c4e-9cd3-0728e8c0de2c",
        "cursor": {
          "ref": "15cb3329-525d-4386-92e6-df716675a3f7",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "237688a9-41d8-4005-a8f2-59ca86c65d42"
        },
        "item": {
          "id": "1bab007a-886f-4c4e-9cd3-0728e8c0de2c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e90bf235-e381-43c5-ac57-bfd0fb010948",
          "status": "Created",
          "code": 201,
          "responseTime": 1070,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "13db268f-76c6-4120-aa1e-6905bf0414ac",
        "cursor": {
          "ref": "0cb8df7e-f2f0-4d86-997f-e7971b79bb4a",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "939149cd-d7c0-413d-8872-31e970a025d7"
        },
        "item": {
          "id": "13db268f-76c6-4120-aa1e-6905bf0414ac",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c092ab62-4264-4508-987b-a9f70fe19103",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 285,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "aef5ae41-4a0e-4193-a571-668cdf8bfde5",
        "cursor": {
          "ref": "8de12e10-a0d4-475e-a664-76dd5fd39be5",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6c7a0b65-fabd-44af-908e-c55686c3ca75"
        },
        "item": {
          "id": "aef5ae41-4a0e-4193-a571-668cdf8bfde5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8b014621-f116-4496-b426-7601ea03cf96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 276,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d4b0cbdb-c746-451f-bb1b-ef42145b90e7",
        "cursor": {
          "ref": "cfcc06b7-8d8c-491d-a61f-65b3f4c3b3b6",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "92788b9d-bf7f-4a42-95a3-77a74fe943fa"
        },
        "item": {
          "id": "d4b0cbdb-c746-451f-bb1b-ef42145b90e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "36460d1e-5654-4096-9db0-6e47fc62fdfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 279,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "fc7ca092-0db8-4fd0-8fca-dfcd0d6449c2",
        "cursor": {
          "ref": "d3c94ea4-546b-4479-bba7-4d0d48227a5a",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2a674cfc-c432-46e1-b5da-8ab28fc32672"
        },
        "item": {
          "id": "fc7ca092-0db8-4fd0-8fca-dfcd0d6449c2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e55a26d6-cb43-48c3-83aa-25354ae61025",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 291,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "eb4dc4f4-e37c-430f-9a8a-c9397639a0b7",
        "cursor": {
          "ref": "7e87e376-0df2-4a07-9740-1964a7d0b804",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2ae93bf0-3c85-46b9-bec8-7035c54cbf2f"
        },
        "item": {
          "id": "eb4dc4f4-e37c-430f-9a8a-c9397639a0b7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1f6f3cc7-efc3-40b0-9231-cea6035d8be1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 279,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "dbef018b-3cd0-40d4-ab52-bd341d26f30f",
        "cursor": {
          "ref": "1d727c59-c72e-4bbd-aa91-86add1c60a9b",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "86974736-c9ba-4a02-a6cb-a8e6b17712e7"
        },
        "item": {
          "id": "dbef018b-3cd0-40d4-ab52-bd341d26f30f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f029222d-bb89-4dda-a9f6-1f8d7230a948",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "2fde5332-a29a-4d30-8a8f-c40ffc396b9e",
        "cursor": {
          "ref": "12094e28-aad9-4487-ade2-9731cb9124f9",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8a0c3096-a62a-49f2-8605-6e248bc18f46"
        },
        "item": {
          "id": "2fde5332-a29a-4d30-8a8f-c40ffc396b9e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c2c3aa87-3318-4578-87c5-bf9a496e838a",
          "status": "Created",
          "code": 201,
          "responseTime": 955,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "4747cc66-747c-476a-a808-3de508fb441c",
        "cursor": {
          "ref": "44b14db8-4b33-47eb-b110-7c7ba6e452cd",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "63b39cc1-ebdd-4dad-a04d-e44cd0467acc"
        },
        "item": {
          "id": "4747cc66-747c-476a-a808-3de508fb441c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ee18456d-596f-4daf-9ff2-c51e1f92e291",
          "status": "Created",
          "code": 201,
          "responseTime": 962,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "4b514154-9035-410a-9e14-2b466a98728c",
        "cursor": {
          "ref": "ec8425e3-75c8-42cb-9f7e-08604060ec85",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eae7ffa9-2cf4-4d82-9dda-5953e3ad8cde"
        },
        "item": {
          "id": "4b514154-9035-410a-9e14-2b466a98728c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7fdec9cb-f7c0-450e-90e3-91ef7c00520a",
          "status": "Created",
          "code": 201,
          "responseTime": 929,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "39ba51d5-0eea-4d54-a1a1-095d7ded36d2",
        "cursor": {
          "ref": "84dbab9e-e4f2-45ad-9b1e-6e9e91f06f64",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b6d13dae-9de6-41d8-a335-8fb60a9dd522"
        },
        "item": {
          "id": "39ba51d5-0eea-4d54-a1a1-095d7ded36d2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4cbeba5e-717a-4c21-a091-40542a0daf6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "d0534dce-6ae0-4a79-9842-6c9afe506fba",
        "cursor": {
          "ref": "200b6d43-65f7-4579-bf40-82ce888808e5",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "80a602ed-9949-41af-ae3b-4beb0dcf7f5f"
        },
        "item": {
          "id": "d0534dce-6ae0-4a79-9842-6c9afe506fba",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b05e0d3b-fa6e-49a2-8afb-46618aa02668",
          "status": "Created",
          "code": 201,
          "responseTime": 920,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "e1103241-b8cb-461d-b619-f4f0da5d1902",
        "cursor": {
          "ref": "b4320e37-0704-4cfc-ab5c-04d63817f553",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e22859e5-0d72-4278-b4ec-962cfa6b040c"
        },
        "item": {
          "id": "e1103241-b8cb-461d-b619-f4f0da5d1902",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "14be7303-31f7-46a0-9882-352fde767d8d",
          "status": "Created",
          "code": 201,
          "responseTime": 990,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "9bba0a41-1cbc-46fb-8b99-b825e0aa00ce",
        "cursor": {
          "ref": "469252ea-9abe-40a2-b93a-817158b6d456",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fb81628b-12d2-4f9c-b617-7a63e05c83a5"
        },
        "item": {
          "id": "9bba0a41-1cbc-46fb-8b99-b825e0aa00ce",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0ac77394-c347-407c-a490-253ca8a36693",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 58
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "b917cca8-89b4-43b1-b443-b458ea39cd52",
        "cursor": {
          "ref": "8b4f0d5a-e526-44fb-b050-617a021f8e9c",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "21690c8a-db0e-4381-b1e6-695fb3fbaf27"
        },
        "item": {
          "id": "b917cca8-89b4-43b1-b443-b458ea39cd52",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "fbbe40f2-418f-4cdb-b424-4a0d4187aa17",
          "status": "Created",
          "code": 201,
          "responseTime": 932,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "d97c3242-f572-46a0-92cf-abd0348a33ff",
        "cursor": {
          "ref": "2c408f99-b422-48bd-882a-479562ba30b4",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c47a659a-e12d-4492-a06e-625809305df6"
        },
        "item": {
          "id": "d97c3242-f572-46a0-92cf-abd0348a33ff",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c096c6f2-0cd3-4447-aeb5-69a2d786687d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "aa09f571-0122-49d6-a569-a48b3d13630f",
        "cursor": {
          "ref": "7915ffdf-af05-42cc-806d-a976a14bab5d",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c3fce875-e604-416d-86f0-6549c2dea2d6"
        },
        "item": {
          "id": "aa09f571-0122-49d6-a569-a48b3d13630f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "605068fc-dac1-47aa-a651-4678b176fde0",
          "status": "Created",
          "code": 201,
          "responseTime": 924,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "6e08e208-955e-4fc2-b16a-2c88c87836ef",
        "cursor": {
          "ref": "70a11b08-def4-43d1-8e6a-fdae8bdd574b",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3ecb0795-43aa-40a5-94b8-54db21b4638c"
        },
        "item": {
          "id": "6e08e208-955e-4fc2-b16a-2c88c87836ef",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1b523e4d-e7f6-46e8-aced-5e6dcd6aacaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "baaeb8cd-c56e-4a10-876b-942d1c8d7a34",
        "cursor": {
          "ref": "9a3bce6e-d86d-4659-afc9-b1e693789daa",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "76ae742c-4fe2-463a-9744-d1aa8deffb9d"
        },
        "item": {
          "id": "baaeb8cd-c56e-4a10-876b-942d1c8d7a34",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6e29f974-973e-4b0b-b4c0-033b91cfa15f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "376bb7ef-ae44-4e31-a66a-2151304f1a8d",
        "cursor": {
          "ref": "9a0205b2-a670-420f-9582-acde678bf0e9",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2ed3c73f-ac8e-4152-b51c-561bdeb5f225"
        },
        "item": {
          "id": "376bb7ef-ae44-4e31-a66a-2151304f1a8d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d79be642-ff48-4936-99b4-1318791f1d32",
          "status": "Created",
          "code": 201,
          "responseTime": 949,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "6012ffec-86a0-4b69-99bf-ce25a5ad45f7",
        "cursor": {
          "ref": "84e649f3-a4c0-42c5-b70b-7173ab677287",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9823d179-d458-46a9-8189-695a6fc5aaae"
        },
        "item": {
          "id": "6012ffec-86a0-4b69-99bf-ce25a5ad45f7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7f462810-f062-43c4-936b-f17573347cdf",
          "status": "Created",
          "code": 201,
          "responseTime": 954,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "b19f594a-f400-439d-bcf1-d72a84ae9d17",
        "cursor": {
          "ref": "dd623e65-4a8c-432a-a3f1-3e91ebea74f0",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9223210e-8296-46ff-81a9-e1929155c914"
        },
        "item": {
          "id": "b19f594a-f400-439d-bcf1-d72a84ae9d17",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "23f8d1c2-b7df-4e83-98ec-0865f30a1144",
          "status": "Created",
          "code": 201,
          "responseTime": 958,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "7f4453e6-2a00-4a1f-8df8-10a9877fb257",
        "cursor": {
          "ref": "196c0724-4a60-4430-b927-1cadb82c07c7",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "07b0cbcd-d218-44bb-87a5-a9673f86e455"
        },
        "item": {
          "id": "7f4453e6-2a00-4a1f-8df8-10a9877fb257",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "04446d32-5842-43b3-bf8d-987bfad93d6d",
          "status": "Created",
          "code": 201,
          "responseTime": 928,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "db0b1e43-c0d6-46c9-a28d-ab01349689cf",
        "cursor": {
          "ref": "8af396e3-4830-4026-a6a7-c38d10702e37",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "75ed6ef4-5b25-46af-ab6a-ac331cccfd98"
        },
        "item": {
          "id": "db0b1e43-c0d6-46c9-a28d-ab01349689cf",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "06239b38-6ea8-4ab4-aa3e-10e0e68d2c2b",
          "status": "Created",
          "code": 201,
          "responseTime": 944,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "67bd32bd-75ee-40fe-a15d-f93febeaa990",
        "cursor": {
          "ref": "7b972ed9-affa-44e9-a7e7-54a9e9102f59",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b5a57fcf-3efc-4e38-a4c9-32975ef75b01"
        },
        "item": {
          "id": "67bd32bd-75ee-40fe-a15d-f93febeaa990",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "66e8df80-cb0a-4ef6-9a42-e2c213e2931a",
          "status": "Created",
          "code": 201,
          "responseTime": 982,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "b5f2e570-ef34-4a54-b6ff-b7e8c020cff6",
        "cursor": {
          "ref": "e751fa4e-4902-4964-97a7-c11db0ea2446",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1f08b2b7-878f-41cd-8363-8ebe9ba7a111"
        },
        "item": {
          "id": "b5f2e570-ef34-4a54-b6ff-b7e8c020cff6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2c0747eb-6687-4f70-a3ec-6e22c2e12802",
          "status": "Created",
          "code": 201,
          "responseTime": 971,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "c2ba6894-6d73-4e77-822f-5cd80acc3821",
        "cursor": {
          "ref": "f12c3716-c583-47d2-9a57-c18c675dc8b1",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1d97488e-946a-4abd-93d4-974f464af088"
        },
        "item": {
          "id": "c2ba6894-6d73-4e77-822f-5cd80acc3821",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4519dca4-ef69-423e-8066-4340d84a88ee",
          "status": "Created",
          "code": 201,
          "responseTime": 960,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "f15b02c8-759a-4f58-be8d-b7f2b1d7f9da",
        "cursor": {
          "ref": "e2c60211-0b54-4e1c-b842-c99f90acdf8c",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d9b2b5a8-7de9-4305-9b84-0c61fba2c901"
        },
        "item": {
          "id": "f15b02c8-759a-4f58-be8d-b7f2b1d7f9da",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4e0d454b-b175-40e1-aee1-ac2f5f3870cc",
          "status": "Created",
          "code": 201,
          "responseTime": 949,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "2e0d005a-0e00-46b0-a4bd-ee9a737b95f2",
        "cursor": {
          "ref": "8cde7ff0-ea77-495a-b005-ed3266f47a8d",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5221d4e2-301d-454d-a688-dbd507bd148b"
        },
        "item": {
          "id": "2e0d005a-0e00-46b0-a4bd-ee9a737b95f2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0d9e091e-9190-4eb0-8426-b3babc3fdc76",
          "status": "Created",
          "code": 201,
          "responseTime": 960,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "96e3c09f-678e-447c-a359-b9ba2f5f1353",
        "cursor": {
          "ref": "f5d969f8-e5b0-4969-8759-02a5e429f2ab",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "564d5812-cab0-4ea2-b2d5-9d3e2b219bbc"
        },
        "item": {
          "id": "96e3c09f-678e-447c-a359-b9ba2f5f1353",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "47b4fec7-bca3-4e1e-9325-0aaae52c51d8",
          "status": "Created",
          "code": 201,
          "responseTime": 941,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "f1831558-2420-4026-9f43-4beb9a6d5829",
        "cursor": {
          "ref": "ef519d66-bae8-43a9-8ce0-e0f7087bc670",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a33f36b2-c592-4b78-9931-673108a54cec"
        },
        "item": {
          "id": "f1831558-2420-4026-9f43-4beb9a6d5829",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "07c845cc-5da6-4317-b752-58e9534b44ec",
          "status": "Created",
          "code": 201,
          "responseTime": 946,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "d6a79b11-6242-487b-84dc-7beacee9405a",
        "cursor": {
          "ref": "9a716e93-9b6f-4023-ab86-0442480f73f3",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "44c41e4a-a222-49c1-98a8-319c90935938"
        },
        "item": {
          "id": "d6a79b11-6242-487b-84dc-7beacee9405a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "56d853ea-6769-4a3b-864a-0912b2c428b0",
          "status": "Created",
          "code": 201,
          "responseTime": 938,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "2a8ff485-5798-4c29-8b3b-7b7059e1b31a",
        "cursor": {
          "ref": "f7ebf8ba-44d0-4652-afa7-b9ada5c371a2",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "15c91fb8-2a6d-4912-89fb-50034357ee7d"
        },
        "item": {
          "id": "2a8ff485-5798-4c29-8b3b-7b7059e1b31a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ac3cbb87-2cdd-4305-9d73-817872972425",
          "status": "Created",
          "code": 201,
          "responseTime": 1006,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "5d265c1e-c61f-4b1e-9880-752ee94ee236",
        "cursor": {
          "ref": "00cab1d8-e127-4040-8f78-27a9a6148674",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a754a639-2b7e-4de3-b36f-8bfb1743fe89"
        },
        "item": {
          "id": "5d265c1e-c61f-4b1e-9880-752ee94ee236",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1f217a88-dcd8-4705-a6d3-4329c6bf1460",
          "status": "Created",
          "code": 201,
          "responseTime": 952,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "e2e06c7b-bafe-4295-855b-f33e6100db1c",
        "cursor": {
          "ref": "90b3e1d4-2dea-42cf-b45e-2caa85abceff",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d488b193-54d3-4647-a117-e2dca14bcb9f"
        },
        "item": {
          "id": "e2e06c7b-bafe-4295-855b-f33e6100db1c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3e804443-6be7-49f4-885f-815f071cfd97",
          "status": "Created",
          "code": 201,
          "responseTime": 939,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "78093825-8042-4fde-a61b-eacb081dc480",
        "cursor": {
          "ref": "9884c115-9025-4f03-8b40-252736bd5619",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "72d2e9ac-7a68-479f-9239-3d758782b487"
        },
        "item": {
          "id": "78093825-8042-4fde-a61b-eacb081dc480",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f8510baa-14b2-4e11-bac0-dddb117e453b",
          "status": "Created",
          "code": 201,
          "responseTime": 978,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "2f0cbe78-3b41-4d63-bf6f-d8bf1e5dfa1c",
        "cursor": {
          "ref": "d089cf87-6b11-4333-b6d9-553040803906",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "13516dcd-6e9d-4f63-b0d6-e15b5708b96c"
        },
        "item": {
          "id": "2f0cbe78-3b41-4d63-bf6f-d8bf1e5dfa1c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3df27c62-9286-4f56-a1f9-8e5b43ce2894",
          "status": "Created",
          "code": 201,
          "responseTime": 1116,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "64869400-832b-4492-8343-aed24bcb8e07",
        "cursor": {
          "ref": "6d5d2772-89bd-42fe-bf7e-3ad41ae2365b",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e761e55e-5a92-4f3e-9eae-0812ff29d16c"
        },
        "item": {
          "id": "64869400-832b-4492-8343-aed24bcb8e07",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1fc98106-1207-430c-bc4e-270522dd01ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "1dcc7c58-2e38-4e04-90ac-45c1c64c8f53",
        "cursor": {
          "ref": "37628551-877e-4f6d-928b-3b7bde23754c",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4a6775e7-38fe-4992-874a-e0e6bacaa6d6"
        },
        "item": {
          "id": "1dcc7c58-2e38-4e04-90ac-45c1c64c8f53",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d88cf64f-8626-4b4f-ad84-3710278ebd29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "8ed69339-45ee-478f-84de-4b165b6ff807",
        "cursor": {
          "ref": "877935ce-1faa-421b-8505-627f1a024b9c",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ec74bb07-64a7-4327-a737-4dc0152fdeeb"
        },
        "item": {
          "id": "8ed69339-45ee-478f-84de-4b165b6ff807",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6388a609-dac9-42b2-b96d-026ec1a7abb7",
          "status": "Created",
          "code": 201,
          "responseTime": 1453,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "4aae5d55-41f3-42c3-98b7-434287107332",
        "cursor": {
          "ref": "37e6a903-3238-47f1-838e-4ccb02c5e7ac",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "06b4cae3-3378-40f9-b48d-e5a8019e8d89"
        },
        "item": {
          "id": "4aae5d55-41f3-42c3-98b7-434287107332",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "99d25690-80ed-4220-bc8d-1564447f3600",
          "status": "Created",
          "code": 201,
          "responseTime": 1199,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "1b6d9786-302e-4ce6-b81c-ad2cece8fb83",
        "cursor": {
          "ref": "2bf5faa3-1bcf-45d7-ae9d-5454a4606136",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2b767195-a8c5-45ed-9472-4a9c3196ebc0"
        },
        "item": {
          "id": "1b6d9786-302e-4ce6-b81c-ad2cece8fb83",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1854c339-acfb-44e8-92af-19c39b865c08",
          "status": "Created",
          "code": 201,
          "responseTime": 991,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "ecec2400-2503-4761-846d-b4a8378282c4",
        "cursor": {
          "ref": "8e956339-3cd2-4348-a61b-6d95fe380355",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ce372dc1-3d3e-4bc6-8218-3a9ef9169a6a"
        },
        "item": {
          "id": "ecec2400-2503-4761-846d-b4a8378282c4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e0db6b3a-b2c9-4fd7-b571-4b92efa76e80",
          "status": "Created",
          "code": 201,
          "responseTime": 959,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "c7be186f-358e-486c-ab0e-f64bcb22e6c6",
        "cursor": {
          "ref": "bf27691c-62f8-4a65-b500-e9795c89b68f",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a0d948c8-e1de-443a-a0d5-7215b754c02d"
        },
        "item": {
          "id": "c7be186f-358e-486c-ab0e-f64bcb22e6c6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9507239b-7d0d-4df4-9ad6-cea82cae9d2c",
          "status": "Created",
          "code": 201,
          "responseTime": 963,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "9a76f20d-e357-486f-a87e-e4cfcf497987",
        "cursor": {
          "ref": "2076d389-3590-4728-b00e-416dfac1e6dd",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "299564e4-72c7-4e45-8c9d-174913ba7f5b"
        },
        "item": {
          "id": "9a76f20d-e357-486f-a87e-e4cfcf497987",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b4c11d8c-dc9e-4cb4-a5b3-1b4a7d88be00",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9a76f20d-e357-486f-a87e-e4cfcf497987",
        "cursor": {
          "ref": "2076d389-3590-4728-b00e-416dfac1e6dd",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "299564e4-72c7-4e45-8c9d-174913ba7f5b"
        },
        "item": {
          "id": "9a76f20d-e357-486f-a87e-e4cfcf497987",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b4c11d8c-dc9e-4cb4-a5b3-1b4a7d88be00",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4291e891-43ec-4a7b-a115-e58d6ef932a6",
        "cursor": {
          "ref": "935d535e-c541-42f0-8f1a-ad766c1f1ded",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "01d01cc1-95dc-4533-949d-54ddd0a10fc7"
        },
        "item": {
          "id": "4291e891-43ec-4a7b-a115-e58d6ef932a6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "43509b2b-8819-442f-b6ad-bb5dde3125ee",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a99cd78e-2df0-4d6f-b829-ee398d953dfb",
        "cursor": {
          "ref": "4a6aa3e2-81a2-4dac-ac95-0785882b58b9",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2ccddd59-79ab-46b4-b40c-0075091b3cb8"
        },
        "item": {
          "id": "a99cd78e-2df0-4d6f-b829-ee398d953dfb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bc09b4b7-52f3-4d40-bbbd-3ec9628ec0bc",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "01b9bbc8-9223-4bc4-a6f3-04ffc3460b77",
        "cursor": {
          "ref": "892ea0a1-4da0-4551-879f-a1f3e5f9a952",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f47ea2c4-c13d-4efe-b1b2-ab599482c7d4"
        },
        "item": {
          "id": "01b9bbc8-9223-4bc4-a6f3-04ffc3460b77",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "47328f22-fd31-4493-b1f6-4a0bb0957ef7",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ef687870-9533-43e3-991e-4584cee08158",
        "cursor": {
          "ref": "65119e66-9b0c-466c-b8e4-28dadf3a48b2",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "86fe9f3d-b5bd-4ec7-a3a3-d95b5d77998d"
        },
        "item": {
          "id": "ef687870-9533-43e3-991e-4584cee08158",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "06527a19-5153-4431-a824-55662ea9911c",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "18a6b2ad-85b9-4b9f-889a-b074596fddea",
        "cursor": {
          "ref": "7f4caadd-6e62-4cd6-ad56-5277af5d442b",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "02daba47-2d31-4b7a-a262-643ebd14147b"
        },
        "item": {
          "id": "18a6b2ad-85b9-4b9f-889a-b074596fddea",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d9fce928-88b0-4c86-985b-7830fd7fa2e0",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "608fac3e-885e-4ed7-8fbe-d4c5545435f7",
        "cursor": {
          "ref": "5449b175-c8e6-4e7d-8bc1-daf23608b34e",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b2d9ee30-acd3-48ec-b4ab-cab74674e81f"
        },
        "item": {
          "id": "608fac3e-885e-4ed7-8fbe-d4c5545435f7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "360807c9-ff91-4e53-971f-7a31beb5bd41",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "4564be02-95c0-4581-96da-3f5f07e5dd93",
        "cursor": {
          "ref": "c5abf5d6-0f09-4f02-a6ca-fdfd3e50a8de",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7f3536f8-9824-4a1b-8dbd-241ce2c6c14d"
        },
        "item": {
          "id": "4564be02-95c0-4581-96da-3f5f07e5dd93",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e13017f0-9382-437e-9ab2-cb01fd9fbd43",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "b26dac8b-e532-4119-9cf6-16cdb0f73009",
        "cursor": {
          "ref": "77ad41c8-9f31-4797-96a6-30282d7f0b8f",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6b824660-4f7c-49a8-8139-a7bf802846bb"
        },
        "item": {
          "id": "b26dac8b-e532-4119-9cf6-16cdb0f73009",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "568cda4d-3a4b-49cd-8906-e745cb140457",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8a39b384-c97e-4686-8a10-edbda4283649",
        "cursor": {
          "ref": "8b6e8803-0a0d-42ea-b215-24267647af86",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e5a40e4f-8a5b-4094-b9ac-846b092559ce"
        },
        "item": {
          "id": "8a39b384-c97e-4686-8a10-edbda4283649",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3cf6a4f5-2699-4894-a40a-4dccbb35caff",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "abf7ddde-9a3e-4220-98c9-7ed6cf6542d7",
        "cursor": {
          "ref": "99ffd692-86e4-4a27-948e-043cf7d5affc",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "23972ce2-93ab-4b1a-90a1-d8b6b7443721"
        },
        "item": {
          "id": "abf7ddde-9a3e-4220-98c9-7ed6cf6542d7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a4878968-c62d-44b3-b7e2-b52a3b73ead6",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 67,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6a99248c-2b4a-4c80-9120-6fd024589813",
        "cursor": {
          "ref": "413d6f6e-ccea-49fe-9d1e-ae3726b2dab5",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7ebbb12e-7093-447c-b5aa-4c66b5e9003f"
        },
        "item": {
          "id": "6a99248c-2b4a-4c80-9120-6fd024589813",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f0548da7-bdbb-45d5-8259-fefd0987a355",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "da4acdd1-7d1a-4d50-9e9d-480341d6b7c6",
        "cursor": {
          "ref": "9028890a-3822-467e-936e-707a30e1fe70",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "74f4a57b-cdf5-4805-a6be-5bfc6046a0c7"
        },
        "item": {
          "id": "da4acdd1-7d1a-4d50-9e9d-480341d6b7c6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0a4e2b7e-05ec-427a-9a12-ff20b2d22b6b",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "37c267d5-c59b-4c67-bfce-6ed232bcdd8b",
        "cursor": {
          "ref": "f08bbc57-3c40-4dfa-859b-7c24b9f77201",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cce7741c-1129-424e-8a5d-1aca4f154d97"
        },
        "item": {
          "id": "37c267d5-c59b-4c67-bfce-6ed232bcdd8b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "69167981-8fae-4b86-ba84-636b2a674a1d",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3faa86e7-80e0-44e6-8eb1-e2b3db7f90bd",
        "cursor": {
          "ref": "24333061-1f32-4234-a8b1-07a4ec068658",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "22683abf-27a3-418d-b977-7ee0feffbb2a"
        },
        "item": {
          "id": "3faa86e7-80e0-44e6-8eb1-e2b3db7f90bd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c6c76d1e-d474-4827-9e78-dd4d037d38fc",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "5d29bc62-f5bf-472e-9bdd-55f5105b5c0a",
        "cursor": {
          "ref": "a51856f6-382b-4674-8813-87810c9c433d",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "eae8dfe4-dc3f-4059-b36b-994d25ae7e78"
        },
        "item": {
          "id": "5d29bc62-f5bf-472e-9bdd-55f5105b5c0a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "304046ad-8c90-41ca-9c77-2f8768717288",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f94d2b53-3577-487b-ac1a-f072f743ed5d",
        "cursor": {
          "ref": "608f0c8a-4479-4888-af7d-bf89c3546cc9",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b1529a6d-0148-4496-ab45-52f15eb8ff5a"
        },
        "item": {
          "id": "f94d2b53-3577-487b-ac1a-f072f743ed5d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2e44faa1-25ac-4bbf-976b-0dbd076d7bc6",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 67,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "62c72361-20f8-4615-bda8-6aaabd15a233",
        "cursor": {
          "ref": "9350cfed-bd58-41a4-a72e-90067eed9719",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e351ea39-cfad-4718-805c-9a6071b957ef"
        },
        "item": {
          "id": "62c72361-20f8-4615-bda8-6aaabd15a233",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "12644c8c-6a86-4dbd-81fc-7992a3421969",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "92f09c6e-965a-4e1a-b056-3fd93385d21d",
        "cursor": {
          "ref": "b7312a72-4094-46a1-a77e-57e60caecd4f",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f5439d0e-c92e-4949-ab7f-4da256affcfc"
        },
        "item": {
          "id": "92f09c6e-965a-4e1a-b056-3fd93385d21d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ada634e5-2c2e-4f46-b6b7-7f11d8fa9210",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "01e5b88c-fcbc-4cce-a488-72882edf79dd",
        "cursor": {
          "ref": "e478ab0b-86c3-49bf-be22-f31342831bf1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "40e330f3-7049-4e53-866b-c805b0b25305"
        },
        "item": {
          "id": "01e5b88c-fcbc-4cce-a488-72882edf79dd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "82dadabf-7fc2-4d2f-8b60-01824f471f9e",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "317cdbcc-25d4-426c-bffe-766462f768c8",
        "cursor": {
          "ref": "f9158174-d717-4313-b247-cc85e37fc7a8",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d10146fa-0e7f-4683-88f2-6cf0b1ad8311"
        },
        "item": {
          "id": "317cdbcc-25d4-426c-bffe-766462f768c8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5301f023-9a66-414d-91d7-0695194bc1e3",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "8e85de31-e4b8-46ad-948b-a7ea29de57ec",
        "cursor": {
          "ref": "3068acee-f1f2-4fd1-bbe2-581d5990931c",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "09d0327c-27e8-4bb0-9c9d-f0d4ea91581b"
        },
        "item": {
          "id": "8e85de31-e4b8-46ad-948b-a7ea29de57ec",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8db8b1c1-9163-4af3-af09-66cfc6236113",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "385f0d0b-56a2-428d-9c45-de219cb7b59c",
        "cursor": {
          "ref": "4ab67773-5ee1-4c62-bdfc-17ccf0673e4f",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "37f9aa57-a694-482c-819e-3637b14ebbfa"
        },
        "item": {
          "id": "385f0d0b-56a2-428d-9c45-de219cb7b59c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "eac3dd9f-70d7-47b6-b387-3a0b4e490c8d",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 71,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "f996b3e3-2009-408b-b8b1-554d41ffb663",
        "cursor": {
          "ref": "df6b00e5-269f-4f3e-a70a-45d1a1b2bf60",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "427bd1aa-df79-490e-82fe-1a0ae499b535"
        },
        "item": {
          "id": "f996b3e3-2009-408b-b8b1-554d41ffb663",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6e75e9ea-5adf-49b8-a684-539bb6cbf81d",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "cdbc424e-00f0-4926-8511-8ba713e16d89",
        "cursor": {
          "ref": "fb2d785a-1e96-49e3-9a64-2ccc756913d1",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b9dadf1d-963a-4e4b-939b-a92fd71d240d"
        },
        "item": {
          "id": "cdbc424e-00f0-4926-8511-8ba713e16d89",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5b3466b6-a8a7-49da-b15c-4cfa7e48bcfe",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "e1fe3212-0c41-4102-82b3-1f0a67b22102",
        "cursor": {
          "ref": "f6949b6d-bc73-4980-aa20-ff3c3caf5d71",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1823f7f2-9f48-4f1d-bc97-2de8baf1cb69"
        },
        "item": {
          "id": "e1fe3212-0c41-4102-82b3-1f0a67b22102",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "11250892-2e9f-4a2f-92d6-e5924ed23b29",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9076a652-96ff-46d0-b61a-7d6b7e089717",
        "cursor": {
          "ref": "3c3de29d-499d-40dd-9b96-0cb249bbfc8b",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7f7c89a5-4fbb-40a1-8c9c-a2cee7414a19"
        },
        "item": {
          "id": "9076a652-96ff-46d0-b61a-7d6b7e089717",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8503d251-62e3-4aa3-ad75-3f1b0a411973",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "aec0d0fd-2dca-4e45-bed2-bbffae5734d9",
        "cursor": {
          "ref": "88da326f-69d1-429c-bfbb-a1a0ada8b2b6",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b9f1e888-64b3-4743-a25f-2de6fce1d603"
        },
        "item": {
          "id": "aec0d0fd-2dca-4e45-bed2-bbffae5734d9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a1122b10-b71f-495a-a0ba-c03a2e71a7ca",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "db36e375-f5b2-441a-8c44-ca97d887adf2",
        "cursor": {
          "ref": "6852788e-fba6-4fff-9f92-61aceb6d966f",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2e597a03-7ed9-4ff6-bef2-b6c00c6dc876"
        },
        "item": {
          "id": "db36e375-f5b2-441a-8c44-ca97d887adf2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "51de201b-a1d8-4a86-9788-c45485762bda",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "f2342f7f-a201-447f-af42-235ae6b7b667",
        "cursor": {
          "ref": "99bd9c72-edd3-45bf-8504-1a65b8b715b3",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "127679e2-6d02-4ff2-97ec-039ff6eaac8a"
        },
        "item": {
          "id": "f2342f7f-a201-447f-af42-235ae6b7b667",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e342567f-73ac-4e8a-8493-ff41feaeee6c",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "48bc0644-1a4d-495e-8d1b-743522e6b657",
        "cursor": {
          "ref": "15e3d9e8-460e-495e-a907-6a5fad9245ab",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "07f0bf73-6fef-4e6e-8b03-b858a05a71b2"
        },
        "item": {
          "id": "48bc0644-1a4d-495e-8d1b-743522e6b657",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6ff2cab5-ecba-4e0d-ba40-94ceb2e39757",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f10b4491-7501-40f9-9166-9c71551d1575",
        "cursor": {
          "ref": "92c7cd00-d2f0-4cff-927c-8869bc5d7098",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9e8ed519-0b85-4cf0-a42e-3bda9cd0dd22"
        },
        "item": {
          "id": "f10b4491-7501-40f9-9166-9c71551d1575",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "67343f99-aa37-4fe8-aa5b-404277b4a812",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 67,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3298656f-bea3-4e4f-926c-948003ae6fc0",
        "cursor": {
          "ref": "1587a4ce-31a2-4529-9087-58476b605243",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2d5063db-bba3-4133-ae00-a6b5b0c1b0ce"
        },
        "item": {
          "id": "3298656f-bea3-4e4f-926c-948003ae6fc0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8e50124f-3910-4ec7-b45a-ca62879d60b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "3228b1f7-eb1c-4e72-ba7a-c3fb86fe5276",
        "cursor": {
          "ref": "5181cf9c-fcc6-4d24-ad6a-23dc9663bbae",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3688c67a-f1ee-4319-be3e-f1b17fb15431"
        },
        "item": {
          "id": "3228b1f7-eb1c-4e72-ba7a-c3fb86fe5276",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "65027dd9-19b0-4e9f-8151-c44654a64404",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "7a38265d-5812-4b79-b8f9-f08535c67f70",
        "cursor": {
          "ref": "b269ecf6-ff89-4f44-96eb-145c45ff2d11",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "20836919-8e35-425e-8d67-576e3e8abcfe"
        },
        "item": {
          "id": "7a38265d-5812-4b79-b8f9-f08535c67f70",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ce7c10b0-41ca-4b5d-a5d6-2206fd95c06e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "7a38265d-5812-4b79-b8f9-f08535c67f70",
        "cursor": {
          "ref": "b269ecf6-ff89-4f44-96eb-145c45ff2d11",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "20836919-8e35-425e-8d67-576e3e8abcfe"
        },
        "item": {
          "id": "7a38265d-5812-4b79-b8f9-f08535c67f70",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ce7c10b0-41ca-4b5d-a5d6-2206fd95c06e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "7119cbfb-39f4-433a-8759-de99a120d8aa",
        "cursor": {
          "ref": "cf3a53a3-1d97-412b-96dd-054c13c47046",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1aeee863-10bf-4811-9da6-8936dda21d29"
        },
        "item": {
          "id": "7119cbfb-39f4-433a-8759-de99a120d8aa",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "12048e01-eb7b-4d26-8f11-2ddc725a9aae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "eb14c94d-dcf2-41ef-9e8c-e55f51f85ba0",
        "cursor": {
          "ref": "c7974a78-9679-4e6a-a221-a1c4ae719299",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "68c16b20-6341-483c-87ff-c6aafca99b60"
        },
        "item": {
          "id": "eb14c94d-dcf2-41ef-9e8c-e55f51f85ba0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ae34591a-9836-4ad4-bcf6-806c15ae1b37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "755f14ee-afba-43c8-9288-9d9611f34169",
        "cursor": {
          "ref": "18080d45-1212-4d54-a465-c27d9989748f",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "24f31044-e245-41a1-98ce-235a25b0765a"
        },
        "item": {
          "id": "755f14ee-afba-43c8-9288-9d9611f34169",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1948fa23-dbf7-4722-bcc8-94b12bb67a85",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "5fc7472e-6936-49be-aeb7-0e9a641a735b",
        "cursor": {
          "ref": "ae0f7d03-8743-4afe-8326-08e10066ef7a",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5f436a7b-5d31-4070-9269-918f74eb2024"
        },
        "item": {
          "id": "5fc7472e-6936-49be-aeb7-0e9a641a735b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d5c53a7f-175b-4358-8eaa-df3643505463",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "9566157e-310a-4d11-bfa2-b1efb71c05a1",
        "cursor": {
          "ref": "e34174ca-3aae-41fa-9500-730e08727607",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1e045069-4d27-4484-93a0-51ca605b6c44"
        },
        "item": {
          "id": "9566157e-310a-4d11-bfa2-b1efb71c05a1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3689210c-efec-47f7-8255-010cae588404",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "c64defc3-e4ee-49e1-9fbc-136044c3ef64",
        "cursor": {
          "ref": "cacefff7-93b6-460a-be14-dd4c67a02328",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "73792c9b-f435-4eea-906d-138f81729436"
        },
        "item": {
          "id": "c64defc3-e4ee-49e1-9fbc-136044c3ef64",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b7120060-dc3b-45ba-a879-5d04f2d31fce",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "9f37f8cc-c9e3-442c-a132-007ff7ae92fd",
        "cursor": {
          "ref": "ad1a6cfe-b2ae-436d-bbc5-7d8323abe348",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "82ff8b6e-db05-4365-b0a1-a21dd089e05c"
        },
        "item": {
          "id": "9f37f8cc-c9e3-442c-a132-007ff7ae92fd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e371fcb7-4cbf-4631-88e3-2bb1f561600a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "597dd40f-2b9c-4f16-a0df-7ddf8facd1d9",
        "cursor": {
          "ref": "7955a207-722d-4626-abe0-18682cebcff4",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e2ae2dd9-01d3-40a1-acc2-a26f234648ee"
        },
        "item": {
          "id": "597dd40f-2b9c-4f16-a0df-7ddf8facd1d9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "303ae055-a1dc-4aa8-852f-b0bdad7aeee2",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "9e1f2f91-9edc-4e85-806a-65074800e975",
        "cursor": {
          "ref": "800eb69a-e52c-4e32-9382-dac5be2c14c0",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "89d28a80-c13a-4af7-b668-04c3cfc83717"
        },
        "item": {
          "id": "9e1f2f91-9edc-4e85-806a-65074800e975",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d2b99085-f157-4079-ae33-622608daf4d0",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "ade45763-14d1-4a25-9550-196c0d78906a",
        "cursor": {
          "ref": "4442272c-7d33-4dcf-9462-fa01b0fe2db8",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9eb9c598-f05b-495d-9e67-83d21d202f3d"
        },
        "item": {
          "id": "ade45763-14d1-4a25-9550-196c0d78906a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "32a27708-5c43-4483-885e-0887342dc740",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "2d54b69b-9e83-48f1-ae9e-821fea12ca16",
        "cursor": {
          "ref": "792eb7dc-8e13-42aa-954d-fc6c5ffc2d3a",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7bc9ab38-cd01-4438-8ebe-c56f7245c1a6"
        },
        "item": {
          "id": "2d54b69b-9e83-48f1-ae9e-821fea12ca16",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "827a8504-c61e-4934-bd7b-b8d7c17bc33c",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "0901356e-9ccf-4467-9846-81f34e57d79a",
        "cursor": {
          "ref": "b07419c4-e7eb-4d2f-b9b7-ed63664b7c18",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d52ba105-367a-4134-b624-94fcd660d567"
        },
        "item": {
          "id": "0901356e-9ccf-4467-9846-81f34e57d79a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "08f03dfa-6a20-4a05-8030-bba8ade0cc74",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "10bfc218-86fd-48a5-974b-fbca815719a5",
        "cursor": {
          "ref": "380e438c-fce0-4a22-95ea-3d87360d4787",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bb808751-9848-4f32-9b54-b325515c67fd"
        },
        "item": {
          "id": "10bfc218-86fd-48a5-974b-fbca815719a5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "47b2b88e-d0a7-4bc4-9a5e-8bc427d6154c",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "257ed687-029d-40f7-b0e7-9c5764392d46",
        "cursor": {
          "ref": "43812585-a0ae-4d0b-a2fa-68886eaa9966",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9ce3b6b1-2706-4ff9-a34a-7eaaa74dfc80"
        },
        "item": {
          "id": "257ed687-029d-40f7-b0e7-9c5764392d46",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9ab8bc02-a45b-4536-ba75-41954633926b",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "1e51e8a2-7ecd-40d0-a380-d0ef34d82218",
        "cursor": {
          "ref": "74af6998-4751-4a9a-8e20-1a32925479ee",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4a199978-3f4c-4ac5-9877-32c164d0ac3c"
        },
        "item": {
          "id": "1e51e8a2-7ecd-40d0-a380-d0ef34d82218",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f27170a8-3a6e-463c-adb0-60a5b0410f21",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "87200738-92b4-4657-aeae-679b2b3299c0",
        "cursor": {
          "ref": "1d6d274c-cef7-4324-92ab-2c4285614b72",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "11a98d10-2d1c-4717-a010-4da578c891be"
        },
        "item": {
          "id": "87200738-92b4-4657-aeae-679b2b3299c0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "28c6e6b3-fe2e-4b89-863f-be22ca610382",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "9ec07937-48dc-44bc-8682-0d73be9b8e27",
        "cursor": {
          "ref": "28789ae0-0d48-4815-bfb1-581b7c9bb35b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3ac78ac4-cb06-4316-82e2-6cdcf742dbb2"
        },
        "item": {
          "id": "9ec07937-48dc-44bc-8682-0d73be9b8e27",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "5733f858-2365-4e6f-888d-d2836e7d6454",
          "status": "OK",
          "code": 200,
          "responseTime": 937,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "820b11a9-80de-4b1e-8c98-2d32d24a801f",
        "cursor": {
          "ref": "df02074e-6e74-4ecf-8a1a-ae2eb7664bd1",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "35f9d5ce-c01a-42f6-a971-987f8514ed3b"
        },
        "item": {
          "id": "820b11a9-80de-4b1e-8c98-2d32d24a801f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8d588b39-39de-40f1-9a67-fa751a72cd29",
          "status": "OK",
          "code": 200,
          "responseTime": 277,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "a844d080-3f27-4682-8d05-2676a4bf82bc",
        "cursor": {
          "ref": "48e708fe-feb2-4a81-9867-b91475b27530",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6aacf44f-2389-4972-804c-5d2d5868366d"
        },
        "item": {
          "id": "a844d080-3f27-4682-8d05-2676a4bf82bc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "58ee7695-7b41-4a3c-b98b-3e976eaee996",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "016e6607-6141-4a08-af28-3793a2b58917",
        "cursor": {
          "ref": "5a544cdc-fb5f-4ec2-b6db-6ded12a9b815",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e14a3244-46eb-45d7-9c8f-ba2cf4c6b6bc"
        },
        "item": {
          "id": "016e6607-6141-4a08-af28-3793a2b58917",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "29b99c5a-2f06-43bf-9d90-cb88c235d980",
          "status": "OK",
          "code": 200,
          "responseTime": 274,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "897b9039-b4f4-4c93-8652-35e9177dd215",
        "cursor": {
          "ref": "88d86ed7-598e-4024-b25f-2c9452798191",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7ef88e24-951c-4dd3-a61c-028f427568f1"
        },
        "item": {
          "id": "897b9039-b4f4-4c93-8652-35e9177dd215",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "da1b25a7-4dbe-4f79-8314-45d51ae165d2",
          "status": "OK",
          "code": 200,
          "responseTime": 297,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f2c63b85-286c-45d6-be7b-dddb7f42a417",
        "cursor": {
          "ref": "266e9b32-5c0c-492d-82d2-1689faee655d",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a9cd775a-1e44-4f91-b6f6-e2fccd1a37fe"
        },
        "item": {
          "id": "f2c63b85-286c-45d6-be7b-dddb7f42a417",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "915fee13-0d9a-4c4b-998c-56b8daee1672",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "c692f603-2737-40e2-8c40-638ba330097d",
        "cursor": {
          "ref": "9d6e576b-ee7c-4bcd-9a1c-dfbaa020cae3",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a5c9f50d-05eb-4f84-8ba0-2e0d101827eb"
        },
        "item": {
          "id": "c692f603-2737-40e2-8c40-638ba330097d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3d6b450b-2d8a-414e-b0eb-b7ebfb4e676f",
          "status": "OK",
          "code": 200,
          "responseTime": 537,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "283e1122-98be-4003-b657-f5eb5cc491de",
        "cursor": {
          "ref": "ab7814b1-6c0c-4001-b8e2-4d39f6816f96",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6a14f758-8841-4a9b-b3f5-0ef929e36196"
        },
        "item": {
          "id": "283e1122-98be-4003-b657-f5eb5cc491de",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e02ea96d-c11d-4ee7-834b-6ecb13a3450c",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "2833ec11-2708-4ae9-b689-a72c133650f9",
        "cursor": {
          "ref": "25f0b1b5-9df7-4f24-8e5e-a19d394a469c",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6ff4a3f6-c157-4f80-8fa3-2e7e75350b9e"
        },
        "item": {
          "id": "2833ec11-2708-4ae9-b689-a72c133650f9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "24b967d2-7377-4b16-a1b3-de5fd5408c57",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "a647fd30-4551-44d0-a9a0-2194cbcac7b1",
        "cursor": {
          "ref": "9e063777-2c53-480e-8716-075992416e07",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bf21601c-84fb-4391-ad0d-30cfdbacc81d"
        },
        "item": {
          "id": "a647fd30-4551-44d0-a9a0-2194cbcac7b1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2ded4265-0ad0-4578-97c3-9a45e3e6b955",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "568dd655-aa62-4ceb-baec-c01050ec1668",
        "cursor": {
          "ref": "274c43f7-486d-4569-8236-c41d74c74106",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a0e8dc53-29e8-4e6c-ad32-3a8af061c08d"
        },
        "item": {
          "id": "568dd655-aa62-4ceb-baec-c01050ec1668",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3481b014-669e-46db-9102-7137ca98a2d9",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "08f07f7a-10dd-423f-a2f2-361e864e4c4d",
        "cursor": {
          "ref": "89952369-cc60-47b2-9ac1-d16a94ffe679",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f3568470-9342-40fc-a31e-e7016802f701"
        },
        "item": {
          "id": "08f07f7a-10dd-423f-a2f2-361e864e4c4d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "43c1c8a0-6a8a-4f50-af09-4844d26f501e",
          "status": "OK",
          "code": 200,
          "responseTime": 967,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "88aa253f-e9eb-4d95-bfc0-95aa97ac8dfc",
        "cursor": {
          "ref": "404466cd-459b-4415-86dd-c6a79a5f3c16",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8300bed4-c210-4d71-a63c-5062d6374abc"
        },
        "item": {
          "id": "88aa253f-e9eb-4d95-bfc0-95aa97ac8dfc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b5b0f02b-945e-4ac3-a42d-7e6ce9e1a4e5",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e9224a5b-3bb9-461b-a4a0-fd7d5e1c8429",
        "cursor": {
          "ref": "a63e8ec6-44a0-42b3-93fc-f688d66ceabf",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "68722eba-2ead-41cc-af97-7d88e8711c16"
        },
        "item": {
          "id": "e9224a5b-3bb9-461b-a4a0-fd7d5e1c8429",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5ff5329b-a383-43e7-9449-c60e9281c90d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "dfd4a126-a657-431d-9e2f-05679ae1aa66",
        "cursor": {
          "ref": "2a4bb69a-e100-4cd0-8449-025c86b1e0cd",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "260baa14-1673-446a-bef4-7d8eb58d0f3a"
        },
        "item": {
          "id": "dfd4a126-a657-431d-9e2f-05679ae1aa66",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d64ca283-2de2-46e4-aa44-6cbe2b765662",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "0b08e067-dd05-48f1-9a24-0d04f2ef1499",
        "cursor": {
          "ref": "e25c3cad-0c30-455a-a9fd-ef251f44d9d1",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "389fc0f3-7cfb-44bb-9dc2-9fca031eb45f"
        },
        "item": {
          "id": "0b08e067-dd05-48f1-9a24-0d04f2ef1499",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6515af58-8d9b-4228-8e62-cdd41fd44bdf",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "6c83c0b8-2ec8-406c-974e-cf9cbeaf0ced",
        "cursor": {
          "ref": "180d6adf-64ae-4d2c-8ca5-ff49bcf92718",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "aaa41e32-da4f-4791-8e31-91012b80aeee"
        },
        "item": {
          "id": "6c83c0b8-2ec8-406c-974e-cf9cbeaf0ced",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "643239b1-4aab-4ed8-9abf-9ad79d6ddeb1",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f5776cc7-97a5-4514-a058-11552be25dd0",
        "cursor": {
          "ref": "f9fe423b-9d86-4d2f-8a5f-59c66323ce37",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f8e21274-c394-4cf0-8221-c50d1ba03192"
        },
        "item": {
          "id": "f5776cc7-97a5-4514-a058-11552be25dd0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4f9760d3-7b48-4e8e-8b46-0a6acf40057f",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "a91b8914-e029-405c-b43b-d9751b55dfb7",
        "cursor": {
          "ref": "098d2bae-c923-47ec-9b3a-e9e08b02b8a0",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7ff1d3eb-1ce3-443e-bc8f-693611e37308"
        },
        "item": {
          "id": "a91b8914-e029-405c-b43b-d9751b55dfb7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6412f109-ab0b-4238-9c8e-d30274c1557f",
          "status": "OK",
          "code": 200,
          "responseTime": 513,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "9eaaab9e-7006-4e36-b0d9-ddc370c12a26",
        "cursor": {
          "ref": "333be553-52be-47d5-aff7-eb89e86db3b1",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "968fa56c-9df1-4ec0-800a-bcfa6a4b86bc"
        },
        "item": {
          "id": "9eaaab9e-7006-4e36-b0d9-ddc370c12a26",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dd6300db-0c79-4e29-b84d-b5d175ace0bd",
          "status": "OK",
          "code": 200,
          "responseTime": 560,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "021a8361-9979-4432-b3cb-32b449c3f17f",
        "cursor": {
          "ref": "a653a3a9-c2e0-4ae2-80c5-8328a84f226c",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0c7a96ca-1d5d-436b-8358-51c5deba00da"
        },
        "item": {
          "id": "021a8361-9979-4432-b3cb-32b449c3f17f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6223c936-8e67-49ff-a2d7-005e7aec1e53",
          "status": "OK",
          "code": 200,
          "responseTime": 498,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "594e536c-607b-4532-bff1-0d0bbab838af",
        "cursor": {
          "ref": "619c3d17-68e9-4277-83e2-a1e0dc2d9f9b",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b4357381-a6fb-4166-ba91-b85c2907769b"
        },
        "item": {
          "id": "594e536c-607b-4532-bff1-0d0bbab838af",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ad906489-5e47-47af-bdeb-b876a0308232",
          "status": "OK",
          "code": 200,
          "responseTime": 504,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "dc4d7007-2ed0-4ece-b7dd-0d883f50434b",
        "cursor": {
          "ref": "6c9de5c5-a241-473a-a4fa-4a94a3bdfdf9",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "42027bb2-af61-48dc-a2d4-7c7fc7dafd3c"
        },
        "item": {
          "id": "dc4d7007-2ed0-4ece-b7dd-0d883f50434b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ef26fe56-22cf-4833-b883-13bb299a06fd",
          "status": "OK",
          "code": 200,
          "responseTime": 535,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "913f8cea-4c42-4713-ace3-3d123c6a0bc9",
        "cursor": {
          "ref": "b93bc141-a320-4158-8124-73f78b6dc55b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a8b84773-af4a-4222-9946-9a299824228e"
        },
        "item": {
          "id": "913f8cea-4c42-4713-ace3-3d123c6a0bc9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0ecc0f1a-d1fd-485b-aa30-2aa56fac6f42",
          "status": "OK",
          "code": 200,
          "responseTime": 532,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "ddfab8ae-cbe7-4935-a875-2b0f52b32d20",
        "cursor": {
          "ref": "59a5292f-fc6e-4393-9097-8834c35d2e50",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4f293d36-6054-4af5-8902-86cba2561939"
        },
        "item": {
          "id": "ddfab8ae-cbe7-4935-a875-2b0f52b32d20",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e63cc72f-8198-48f2-b2b0-777ed2729aa8",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "33a77d4c-5e93-40e3-9cbb-3a8d755fff2d",
        "cursor": {
          "ref": "1f38b948-da7e-4e78-968f-68a78b10dcad",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "070b2127-40ab-45e3-bf6d-797fedbc10f4"
        },
        "item": {
          "id": "33a77d4c-5e93-40e3-9cbb-3a8d755fff2d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "430643ba-0234-44a2-ace5-bce5ec0c3015",
          "status": "OK",
          "code": 200,
          "responseTime": 269,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2c7c8b0b-97b5-4692-ab98-ed5c30f3403f",
        "cursor": {
          "ref": "416afc5c-a0b2-44d9-aa81-353007115ab9",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "68b340f1-6d28-408c-8034-3076a1092bfa"
        },
        "item": {
          "id": "2c7c8b0b-97b5-4692-ab98-ed5c30f3403f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "099ffb16-2d76-4af5-af4d-eb1e7041c595",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "8ab8563d-8c89-4626-a348-c2eb74a411ef",
        "cursor": {
          "ref": "b9ee8e0d-eb00-44cb-a8bd-348732df70b2",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9ebd6d6a-6e81-46b1-bea5-da4847f76ab8"
        },
        "item": {
          "id": "8ab8563d-8c89-4626-a348-c2eb74a411ef",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "783b13fa-3bf5-4ecd-9c19-c878b7f8dc16",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b1046373-8803-4595-80b8-d730f3d71065",
        "cursor": {
          "ref": "e06d1e6f-28f6-4baa-ac1c-15ab930711ba",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3125b031-672f-473d-9666-d41ed2148548"
        },
        "item": {
          "id": "b1046373-8803-4595-80b8-d730f3d71065",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "95c75e8f-21db-4bea-b886-634b70d11141",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "573117f2-f9c7-4c0a-8dbe-c5c18ebe4617",
        "cursor": {
          "ref": "509fc425-d0b6-4dd2-a85e-45e5800a91f8",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0bf9cfc5-94b9-407c-b547-348e52defd0f"
        },
        "item": {
          "id": "573117f2-f9c7-4c0a-8dbe-c5c18ebe4617",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "74bfcc47-599e-4286-9b9b-767e01e61bc5",
          "status": "OK",
          "code": 200,
          "responseTime": 548,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "19bf9256-a972-4b4d-97af-2fd453d216b5",
        "cursor": {
          "ref": "fc5a284c-6d3c-4e85-a3d1-cc3ba5fab3da",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c3e8c07c-508c-4bef-9de0-e5c4cb473f74"
        },
        "item": {
          "id": "19bf9256-a972-4b4d-97af-2fd453d216b5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e8603fb5-9eac-4253-bd06-0ec147f7bdfd",
          "status": "OK",
          "code": 200,
          "responseTime": 944,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "19ee4626-72a8-4157-bc63-0239c6508c34",
        "cursor": {
          "ref": "97edc34f-ff29-474c-9612-cc1994fec02f",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5687e65a-a391-40b8-a633-6d66bcc4096b"
        },
        "item": {
          "id": "19ee4626-72a8-4157-bc63-0239c6508c34",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2b820fc5-c017-4007-a829-26ebd0cd756b",
          "status": "OK",
          "code": 200,
          "responseTime": 505,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "154f440d-9d5a-4470-a2a1-ef77abc385e0",
        "cursor": {
          "ref": "9062e95a-a66e-408c-9631-15d8105dc57a",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bafcf9a9-9a6b-467f-a960-acf71b16e98c"
        },
        "item": {
          "id": "154f440d-9d5a-4470-a2a1-ef77abc385e0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "25f4a56f-dc30-4806-a200-ab80bb3af417",
          "status": "OK",
          "code": 200,
          "responseTime": 960,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "7a5633fd-eb16-4f08-b4b5-e3ae04a99d56",
        "cursor": {
          "ref": "0582b58d-e7e4-4d14-b91f-e43e984742e9",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bad7ccdd-e748-4db1-a5a2-0ae1c80f9d5a"
        },
        "item": {
          "id": "7a5633fd-eb16-4f08-b4b5-e3ae04a99d56",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "776b9539-dc22-4108-8a3c-51de730e09f8",
          "status": "OK",
          "code": 200,
          "responseTime": 512,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "eedfd8c3-5848-4bd5-a9e3-fd52e1a7006b",
        "cursor": {
          "ref": "2ab586ac-429c-484e-a783-c363015387f4",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "494422bd-8244-46f4-aadf-3ee31a3d2102"
        },
        "item": {
          "id": "eedfd8c3-5848-4bd5-a9e3-fd52e1a7006b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "38b7a29c-4ba9-488c-b936-aec7f5c4909b",
          "status": "OK",
          "code": 200,
          "responseTime": 951,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "feb128c2-0627-437a-84ea-07227ecf0e88",
        "cursor": {
          "ref": "2aab6d8a-88ad-4921-b416-f071baee898b",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3ce73150-4aa4-4a6e-ac40-527070ed26f2"
        },
        "item": {
          "id": "feb128c2-0627-437a-84ea-07227ecf0e88",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5db4a655-5065-411a-8e3e-0fb858e60c68",
          "status": "OK",
          "code": 200,
          "responseTime": 1012,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "f327bec5-d1ba-4d90-b760-eb1cd9bb4347",
        "cursor": {
          "ref": "0009473d-951d-4bcb-9217-e01ca7ac7b20",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "af9f2698-7402-4102-b6ae-d3601826b0be"
        },
        "item": {
          "id": "f327bec5-d1ba-4d90-b760-eb1cd9bb4347",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4605de67-fbb6-48cb-8fd4-dccc0fdcb220",
          "status": "OK",
          "code": 200,
          "responseTime": 535,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "b5ae347a-dcb0-4b1f-aa0b-9699f7029f14",
        "cursor": {
          "ref": "bbaf30f5-a9ab-4c4f-951e-541b5eb60cbe",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "43bb4ba4-cb72-4fc3-bd8f-de7ecb092c1a"
        },
        "item": {
          "id": "b5ae347a-dcb0-4b1f-aa0b-9699f7029f14",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "811e2066-96af-41a8-b56e-b4e54dc32bf0",
          "status": "OK",
          "code": 200,
          "responseTime": 946,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "0edd0ea0-36df-4659-b350-071136bebaf8",
        "cursor": {
          "ref": "eaff2b20-ba32-45b2-9eb2-67353a5e217b",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9a6af6bb-27c6-4b06-a972-17dc9ebb850a"
        },
        "item": {
          "id": "0edd0ea0-36df-4659-b350-071136bebaf8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ec41e329-42e1-4b96-a240-cdeed30d5f04",
          "status": "OK",
          "code": 200,
          "responseTime": 530,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "ffb5f852-e21b-49ed-9238-5f0433d3100b",
        "cursor": {
          "ref": "babb139b-0894-485b-9979-39ce76744bf8",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b9889432-09d9-4107-9f03-0ebe009811af"
        },
        "item": {
          "id": "ffb5f852-e21b-49ed-9238-5f0433d3100b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b1368887-6d0e-4acb-b509-3bc76354d8d6",
          "status": "OK",
          "code": 200,
          "responseTime": 1063,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "c50355bc-ce97-4e68-97eb-f993e12ffedc",
        "cursor": {
          "ref": "0ecc4319-21d8-4e2f-b9b7-4bbcb583b1be",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8b76d090-bc15-454b-9896-634223bcfb17"
        },
        "item": {
          "id": "c50355bc-ce97-4e68-97eb-f993e12ffedc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "877712c0-bac6-4946-8d5e-97a9ce900b0a",
          "status": "OK",
          "code": 200,
          "responseTime": 747,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "1648aed9-6f98-4da1-a0b4-06fcdca33825",
        "cursor": {
          "ref": "e8423387-7c5b-4d0b-9144-457801372a50",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "778de253-2cbf-4345-8088-df07db9124cc"
        },
        "item": {
          "id": "1648aed9-6f98-4da1-a0b4-06fcdca33825",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4b1517d1-720f-452c-860f-3549ed3898cf",
          "status": "OK",
          "code": 200,
          "responseTime": 1131,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "c2a400d4-62b6-4152-987e-3d2a40453850",
        "cursor": {
          "ref": "6e90aaa4-faff-447c-a29b-72c64eb6b169",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "890c0ba6-cba2-42c3-8057-bf34245ef982"
        },
        "item": {
          "id": "c2a400d4-62b6-4152-987e-3d2a40453850",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d120ee23-b95e-44af-a82c-ac6e7185b27a",
          "status": "OK",
          "code": 200,
          "responseTime": 307,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "b6d85955-1f7c-4fdf-b8e7-f7deb679c5c3",
        "cursor": {
          "ref": "7634dd3d-86c6-44c4-b6c4-cb17fa74b37b",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4482f94f-7839-41c4-951b-da6c2099004f"
        },
        "item": {
          "id": "b6d85955-1f7c-4fdf-b8e7-f7deb679c5c3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3abb83d2-f60a-4d82-b8fb-a54abc8faa52",
          "status": "OK",
          "code": 200,
          "responseTime": 263,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "e1eeabc6-3f15-4b29-bfb4-89cb2adbcaae",
        "cursor": {
          "ref": "ee97f1f7-839f-4f9e-98ca-6e252cd4da0d",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b227489c-8c39-4e03-9dfb-4c6c5c95b0f1"
        },
        "item": {
          "id": "e1eeabc6-3f15-4b29-bfb4-89cb2adbcaae",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3f248567-3fdc-4ebc-b9d8-72f11fee1df4",
          "status": "OK",
          "code": 200,
          "responseTime": 279,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "17c8c574-14b5-4872-a54e-44219a08e9c4",
        "cursor": {
          "ref": "30d4f707-369e-4a0a-9340-0fa80391d77d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f02113be-177a-4180-b4fa-e9d2aed68a80"
        },
        "item": {
          "id": "17c8c574-14b5-4872-a54e-44219a08e9c4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "47556ea3-dfb1-4bdf-8207-c01212b05cd8",
          "status": "OK",
          "code": 200,
          "responseTime": 284,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c47d436e-25a0-4d5e-a44c-fafbf277293c",
        "cursor": {
          "ref": "8ef864e3-560c-48f5-9b13-0ba1d6010ac9",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0cb2c10d-04c3-494f-9542-5470bf151948"
        },
        "item": {
          "id": "c47d436e-25a0-4d5e-a44c-fafbf277293c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d13de963-c86f-4889-86f8-b16c86224dc1",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d55916eb-853f-482e-9385-efba0173a69b",
        "cursor": {
          "ref": "b8a3bb83-826d-4f76-abfd-dad971ceb50b",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c67375b0-34bf-426b-9da1-20ae19d185a0"
        },
        "item": {
          "id": "d55916eb-853f-482e-9385-efba0173a69b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f3af9676-2c36-40ae-bcfe-7dc43707f98e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4716ec42-c66c-4e0a-b80e-2dc01bfbd786",
        "cursor": {
          "ref": "d92b5f49-006a-4d29-a441-24ff84b70910",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f292c040-f398-4417-ba85-a44004ab0c9d"
        },
        "item": {
          "id": "4716ec42-c66c-4e0a-b80e-2dc01bfbd786",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d7623e22-b937-4c23-96a2-7f234d86c36e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "7981586c-41f6-4963-bca8-6d8ad6dae421",
        "cursor": {
          "ref": "04676d06-e46c-4ff1-a6d4-e6bb19822554",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "15613f59-140c-4595-9562-e7af48b5d2be"
        },
        "item": {
          "id": "7981586c-41f6-4963-bca8-6d8ad6dae421",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1b3d34c4-6a11-410c-94ee-6fb5ba12c314",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "857f72e0-2835-4d19-a4cb-031cb0bf7f52",
        "cursor": {
          "ref": "1e87ad2b-f666-4888-b7de-e6195ce6c505",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5b1723d3-1a34-486a-8a3f-79c436649f38"
        },
        "item": {
          "id": "857f72e0-2835-4d19-a4cb-031cb0bf7f52",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0fcc50e0-aac2-4f3c-91a0-fe328e3cbfa8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "dbbdb76f-37e7-4602-88f5-99eddc63cbe8",
        "cursor": {
          "ref": "649c39d9-2900-4a39-acaf-70d83696df7b",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4a42a193-4d1b-4cb5-b6c5-8b1f1cf88085"
        },
        "item": {
          "id": "dbbdb76f-37e7-4602-88f5-99eddc63cbe8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6319318b-4329-4148-995b-94d6a6ed28db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "422a5d0c-eeee-42e7-aebf-e775c2c06c12",
        "cursor": {
          "ref": "b512b885-1ba1-4b2c-99e3-2e17366986cb",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a1f5a6ef-6d30-4c9a-84a2-6a05b38a2326"
        },
        "item": {
          "id": "422a5d0c-eeee-42e7-aebf-e775c2c06c12",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2f5fd459-d7fe-42e6-9724-f50eb5c8918c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "4b551e57-ded5-4297-9f48-f8e10f868463",
        "cursor": {
          "ref": "37f0f1fb-687c-4021-aa87-f1bfe8cb5815",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "57dc730b-aec6-4081-9146-06c03f098be9"
        },
        "item": {
          "id": "4b551e57-ded5-4297-9f48-f8e10f868463",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1e176f62-3c64-4991-a8c7-7c36eedca134",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4f7297c0-7886-49bf-9e92-4f2dbf61fd49",
        "cursor": {
          "ref": "ee751aed-bd65-41cc-9cf0-f881ff233d12",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0d740254-2fc2-49b0-b1d5-7f9cc9a8787f"
        },
        "item": {
          "id": "4f7297c0-7886-49bf-9e92-4f2dbf61fd49",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e3c5cbf4-09c1-4d28-ae4b-228e1ed56855",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "66b33054-1476-4e8e-8337-43aaf5c3db59",
        "cursor": {
          "ref": "16bb49f3-e401-44b9-b804-48cce56becb8",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e3fc4592-2a33-4d99-9daf-3e80da049310"
        },
        "item": {
          "id": "66b33054-1476-4e8e-8337-43aaf5c3db59",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c6fd2cb4-43c2-4f9d-b538-3149531a66af",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "53eaaaa0-53ff-4958-8cac-1ee2959377a0",
        "cursor": {
          "ref": "bc3a5f93-688d-4ea0-a35e-5f72f85a9b17",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "28f95832-79ba-425c-a692-7a3895fabf30"
        },
        "item": {
          "id": "53eaaaa0-53ff-4958-8cac-1ee2959377a0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "276524a3-bad0-4ad0-9326-aa312cfe7963",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "4db42364-b31e-4281-9ddc-c0701046774f",
        "cursor": {
          "ref": "1fcec5e5-b0a8-4dd6-b1a7-bd02bef96e02",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a1dbf3b6-eef0-4810-87c7-e1aaef8889fb"
        },
        "item": {
          "id": "4db42364-b31e-4281-9ddc-c0701046774f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bdd5d93e-f2cc-41c3-bee5-eec314c67fc5",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "08bf51f0-a44f-4eef-8c57-fb8149e0e041",
        "cursor": {
          "ref": "bdf7ba63-5185-4edb-8003-0f9070f55fe9",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3f258e94-e209-4fcc-a725-298d0f191462"
        },
        "item": {
          "id": "08bf51f0-a44f-4eef-8c57-fb8149e0e041",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2ceb7e03-3f4c-4117-a91c-5ec359f22c36",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b2bf229e-ba7b-475f-8a54-6e49f7849e67",
        "cursor": {
          "ref": "60dc6f5c-d8e9-4aa6-ac32-25cd8e9b48cd",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8d28622f-4e55-4d11-83dd-866e521bfe8e"
        },
        "item": {
          "id": "b2bf229e-ba7b-475f-8a54-6e49f7849e67",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f9a0f848-52be-4cf6-afbd-59a189b642bd",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "51c6909b-1c4b-4382-b25c-9da051a83f2a",
        "cursor": {
          "ref": "c38d1ff7-5ff4-4d47-b6b2-72119397fb3d",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c45efdf1-cddf-4347-a38a-4dcc1f02622e"
        },
        "item": {
          "id": "51c6909b-1c4b-4382-b25c-9da051a83f2a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e29a7cb9-4372-4fbd-a796-09dff014cd46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "31ddbe8e-07c5-457b-acf4-156e2006cddb",
        "cursor": {
          "ref": "860a508d-f6ed-449d-a857-6c74b427a699",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "babddeea-89cc-4739-bd26-a1f511d1656a"
        },
        "item": {
          "id": "31ddbe8e-07c5-457b-acf4-156e2006cddb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "90dfa37f-5d57-4034-b4fd-389f8e70800e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "923f44c8-388c-4dc7-b621-32ec6d45fdd5",
        "cursor": {
          "ref": "0f228d66-4f49-4705-bc2a-978ce4b2d476",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6d4726f6-fb2f-4212-bf06-e08f5128e757"
        },
        "item": {
          "id": "923f44c8-388c-4dc7-b621-32ec6d45fdd5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "58f3b088-d30d-46d5-8d30-2d1e10cd135b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "97b502f7-660e-448e-8d22-cd485a817c86",
        "cursor": {
          "ref": "3dff2e47-ee0c-4b96-a3a4-2fad24dbf8ed",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "53711061-71c9-46e7-8bef-4c0cbf6141df"
        },
        "item": {
          "id": "97b502f7-660e-448e-8d22-cd485a817c86",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6a4c33e9-0247-4617-9458-a83fe0351a78",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "73186f4d-854a-4e02-853a-5f6ee2450f0f",
        "cursor": {
          "ref": "81469fde-fbc9-4a3b-a40a-950c8451204e",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "283499c9-434f-4b5f-b662-312f272e379b"
        },
        "item": {
          "id": "73186f4d-854a-4e02-853a-5f6ee2450f0f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2bfdc6d5-3beb-4916-8a06-57d3b2990268",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "83a36108-6596-4592-abed-3c02ca25e335",
        "cursor": {
          "ref": "36e3d531-7ec4-40eb-a9bd-4b54ce714451",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "70ba1643-5049-428c-b76a-08d57af5ef8d"
        },
        "item": {
          "id": "83a36108-6596-4592-abed-3c02ca25e335",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "21df0c47-ce5c-4720-afc6-015eaceeb47a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "890cf743-1e8a-48e6-a76a-5b49822e80d2",
        "cursor": {
          "ref": "127847d4-15d3-4113-ab35-e617bb0945de",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "94957129-f70b-42ed-a831-01f0f8dac3c4"
        },
        "item": {
          "id": "890cf743-1e8a-48e6-a76a-5b49822e80d2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "68e0d359-54f3-4a4d-b01a-3602e90775f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "f8c4c814-c8ec-4f39-aa36-a4006be08a8f",
        "cursor": {
          "ref": "8b815fb6-b5f6-41c5-8d2f-c16acbd1a380",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2d0811bc-6a6c-4985-ac07-4ab0b8b16c4a"
        },
        "item": {
          "id": "f8c4c814-c8ec-4f39-aa36-a4006be08a8f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fb2daa33-f5d5-4c86-827b-34613f7c5653",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b5d9f2fd-be01-4b91-86eb-b164fb2b7175",
        "cursor": {
          "ref": "18921e13-6d1e-41f8-a895-296bc467e42d",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3b6f60e2-b04f-44a3-b3fe-4fc855a73165"
        },
        "item": {
          "id": "b5d9f2fd-be01-4b91-86eb-b164fb2b7175",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7ea37320-09b0-4f36-89a5-3e5ed3e65bcb",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "7d966da7-72c8-4252-adc6-2cb56db045cc",
        "cursor": {
          "ref": "268e2c57-3f47-4868-8d67-e1004848a7f6",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fd38b951-ef77-4a6c-ab7d-1d84e97002f5"
        },
        "item": {
          "id": "7d966da7-72c8-4252-adc6-2cb56db045cc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "023fabf6-521d-4550-8899-72b7a87d3f05",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "15c500ac-41dd-44e7-a8ef-46c60f1dc1fe",
        "cursor": {
          "ref": "6e964ce2-7cac-42d1-a5d3-32016ea5c754",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3635e427-e769-4e84-8c3c-6416b6cb34d8"
        },
        "item": {
          "id": "15c500ac-41dd-44e7-a8ef-46c60f1dc1fe",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a37ae55f-5dab-4c81-91a1-0279465c611a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "ebc838fd-d566-49ad-952f-e9bd49c739a2",
        "cursor": {
          "ref": "fab5c0b0-94d3-4942-8cbc-7edbaff83877",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e1e61c01-9ddd-4c82-8f07-6ac7812a5b53"
        },
        "item": {
          "id": "ebc838fd-d566-49ad-952f-e9bd49c739a2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "352a3e86-7d28-4f40-9c14-959f95f13072",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "028b9cc8-1d69-4737-9ee8-0704d773f827",
        "cursor": {
          "ref": "a030c7ab-1185-4803-a231-8c179f29a8e2",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2ba106ef-66be-4e4f-aa4d-c610c2e819e3"
        },
        "item": {
          "id": "028b9cc8-1d69-4737-9ee8-0704d773f827",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "94ec98dd-dd8a-42c0-baff-b46d9ffcd854",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "2b487721-081c-4db2-8498-bf4f036d73f1",
        "cursor": {
          "ref": "97b87ef0-8a0d-4422-a699-da312cda6fd2",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a026f117-269e-4aa3-8c7b-ed1e5e2b6f7d"
        },
        "item": {
          "id": "2b487721-081c-4db2-8498-bf4f036d73f1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c747128d-de9d-47a7-a665-62d793ac0129",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "4b9ef741-d65b-4c08-8e4d-d875c8dc2b23",
        "cursor": {
          "ref": "ef67e136-13f1-4413-a4f2-b4b60ba1703b",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2d0b1096-a6d4-443a-af0f-4d0324908585"
        },
        "item": {
          "id": "4b9ef741-d65b-4c08-8e4d-d875c8dc2b23",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1f7993b8-f0ac-405e-b5ad-7cb8d090467f",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "8e1be908-cd0b-43cc-8c6c-ccfc039e6888",
        "cursor": {
          "ref": "4be7188d-5014-4954-b86c-148380fc2ae5",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c0df8a91-ed38-4347-a0b4-2fd3e54a4782"
        },
        "item": {
          "id": "8e1be908-cd0b-43cc-8c6c-ccfc039e6888",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2a342d66-8308-41e9-852e-a4854e17068f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "cebc21d7-5eea-4093-9a14-9a56061325fc",
        "cursor": {
          "ref": "92cae0fd-f3bc-4257-ba30-43c1fb0c89de",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3b8fd516-eb90-4cc6-bf0b-fe2ff7b14ab9"
        },
        "item": {
          "id": "cebc21d7-5eea-4093-9a14-9a56061325fc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fdbb4b27-7924-4f2d-9c67-556ace18100c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ce78ea75-49cd-4a68-8736-ba8b4a557e4c",
        "cursor": {
          "ref": "39a77cc6-69f1-4eac-a9b4-5d688f70fb3e",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1c4b2628-f061-4fd5-881d-2f8500c99d9d"
        },
        "item": {
          "id": "ce78ea75-49cd-4a68-8736-ba8b4a557e4c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d60acb86-e97b-4b9d-854c-181948c2f6c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "fc414125-8662-48c3-b0b2-527e36248337",
        "cursor": {
          "ref": "79021de0-3244-423c-a8b8-805575a5044b",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "39d33347-dafb-4ff3-9351-a74e333aa258"
        },
        "item": {
          "id": "fc414125-8662-48c3-b0b2-527e36248337",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1ebc1b04-10e0-4003-8ff7-5c86b488c7cd",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0a1e1f18-ac05-4b15-b771-31314166ce08",
        "cursor": {
          "ref": "439fcb8f-8fc8-49e1-873f-89ec64e3061e",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9f839b92-7422-431e-9e72-0d6ef3f84083"
        },
        "item": {
          "id": "0a1e1f18-ac05-4b15-b771-31314166ce08",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2fca43ec-85de-4a97-b123-58eb7d37be00",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4f68992b-1a9f-4907-9b9b-c406c3844e41",
        "cursor": {
          "ref": "7d1c0e9d-e132-4546-85fa-8f0272c55be9",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "68e72b77-6c69-4d6f-8db1-0954d0f0eab1"
        },
        "item": {
          "id": "4f68992b-1a9f-4907-9b9b-c406c3844e41",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "872fee38-91a7-4e9f-8548-81d435718c6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a52b332d-1efb-4f88-8ba4-6d51dd18d12d",
        "cursor": {
          "ref": "a21adc59-13d8-4086-9f7c-2470d29a55bd",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "97d83e01-9a52-4952-99f3-11673e8d9692"
        },
        "item": {
          "id": "a52b332d-1efb-4f88-8ba4-6d51dd18d12d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "700deb0e-eea8-475a-b148-b4c576365a34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "7f18a0cc-f152-47e4-9ba3-c2833a446783",
        "cursor": {
          "ref": "f6d9c739-44e2-4b83-912c-674bf0afde29",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "461f3217-c789-4fd3-8f2a-49150149bdfa"
        },
        "item": {
          "id": "7f18a0cc-f152-47e4-9ba3-c2833a446783",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a5ea9332-b891-487a-a0f8-7477217bdc12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "9ee567ed-5dc8-4347-9b25-4e5460cc0164",
        "cursor": {
          "ref": "6c8d7cac-9247-46df-8d06-2a3c44db3484",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e48e2db6-8988-4b4a-a2ec-e239658e0ac5"
        },
        "item": {
          "id": "9ee567ed-5dc8-4347-9b25-4e5460cc0164",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "69953220-9eb0-442f-aa59-cf7a5e95859c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "5c4aba7f-2921-4a29-a0c8-87889171eec2",
        "cursor": {
          "ref": "6221ac3b-031f-4701-9830-7d6a1ef5970c",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6f5f8a1a-19dc-4781-8e9b-40f90974ec73"
        },
        "item": {
          "id": "5c4aba7f-2921-4a29-a0c8-87889171eec2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0df1037b-dc10-42ed-941c-c650dcbd1ecd",
          "status": "OK",
          "code": 200,
          "responseTime": 964,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "000e22ed-3d97-4efa-a04f-e7f3d9a91a0e",
        "cursor": {
          "ref": "356cf651-b5d0-4f76-abdd-259c7be37b53",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5b63f885-b4ef-4ab2-ae36-832a4724079f"
        },
        "item": {
          "id": "000e22ed-3d97-4efa-a04f-e7f3d9a91a0e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "060b77e6-002d-4d44-9879-7a533db8cdf3",
          "status": "OK",
          "code": 200,
          "responseTime": 970,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f8c76e-1faa-48db-becb-93d7fb50a3d4",
        "cursor": {
          "ref": "0cac1a4d-24d5-488b-a37d-3f549ef6dbae",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a71b9b21-c4af-4c52-a3ca-b08cafd53527"
        },
        "item": {
          "id": "12f8c76e-1faa-48db-becb-93d7fb50a3d4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "611b5048-0663-4d05-8c6a-2d63ecd173da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "12f8c76e-1faa-48db-becb-93d7fb50a3d4",
        "cursor": {
          "ref": "0cac1a4d-24d5-488b-a37d-3f549ef6dbae",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a71b9b21-c4af-4c52-a3ca-b08cafd53527"
        },
        "item": {
          "id": "12f8c76e-1faa-48db-becb-93d7fb50a3d4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "611b5048-0663-4d05-8c6a-2d63ecd173da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "12f8c76e-1faa-48db-becb-93d7fb50a3d4",
        "cursor": {
          "ref": "0cac1a4d-24d5-488b-a37d-3f549ef6dbae",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a71b9b21-c4af-4c52-a3ca-b08cafd53527"
        },
        "item": {
          "id": "12f8c76e-1faa-48db-becb-93d7fb50a3d4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "611b5048-0663-4d05-8c6a-2d63ecd173da",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8fb91d56-585b-420e-8cd3-265dd47f8e8f",
        "cursor": {
          "ref": "7fec76c9-acb9-47aa-90da-18504c23d55f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b64402a5-06fb-4131-ad2b-86851fd2858e"
        },
        "item": {
          "id": "8fb91d56-585b-420e-8cd3-265dd47f8e8f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a88b07ad-6dd9-41d3-a646-32f23cb280e1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "02115b50-f59c-42f8-b454-82a369f787d2",
        "cursor": {
          "ref": "9f57c7bb-37be-4e7f-982c-d2f60098649b",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d5cea21-4291-4916-b95f-6debfa741066"
        },
        "item": {
          "id": "02115b50-f59c-42f8-b454-82a369f787d2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5469b487-5b9e-4308-b5fc-91f0d611aa3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "02115b50-f59c-42f8-b454-82a369f787d2",
        "cursor": {
          "ref": "9f57c7bb-37be-4e7f-982c-d2f60098649b",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d5cea21-4291-4916-b95f-6debfa741066"
        },
        "item": {
          "id": "02115b50-f59c-42f8-b454-82a369f787d2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5469b487-5b9e-4308-b5fc-91f0d611aa3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c16b52be-30e7-4dae-b3f0-3806ea3935a3",
        "cursor": {
          "ref": "803b5e4c-4edf-4c03-a122-b24536ecbb26",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "79bf4bc3-28b8-47ca-98a7-0bd97aa59a36"
        },
        "item": {
          "id": "c16b52be-30e7-4dae-b3f0-3806ea3935a3",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c2aba0ba-65e1-4fc4-953a-0ced005fc5ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "7102e6f5-ec02-43a5-8758-5b63faeb17b6",
        "cursor": {
          "ref": "9f90f029-4909-421d-8fbf-5669f76721e0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b2f44e45-2a19-4ab8-b466-4457c2f9579b"
        },
        "item": {
          "id": "7102e6f5-ec02-43a5-8758-5b63faeb17b6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "58fe04f0-d992-4b3f-9dbe-015888fcedc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "7102e6f5-ec02-43a5-8758-5b63faeb17b6",
        "cursor": {
          "ref": "9f90f029-4909-421d-8fbf-5669f76721e0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b2f44e45-2a19-4ab8-b466-4457c2f9579b"
        },
        "item": {
          "id": "7102e6f5-ec02-43a5-8758-5b63faeb17b6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "58fe04f0-d992-4b3f-9dbe-015888fcedc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d898db1c-e78f-45bf-984e-15ed53df2b12",
        "cursor": {
          "ref": "33ed6bf7-f8b0-4135-ab43-fe70b7a42d93",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3c1981b7-ba34-438e-a2e9-50e764c8c617"
        },
        "item": {
          "id": "d898db1c-e78f-45bf-984e-15ed53df2b12",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6293f874-c778-4635-a533-f92e1ab5fde9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}