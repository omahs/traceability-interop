{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "23695635-a0ba-44b4-bc4b-ce612105082b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ff63eb96-c7c8-4747-8928-714b2fddda31",
            "name": "Positive Testing",
            "item": [
              {
                "id": "671fc8a1-b641-4bd7-bc90-901abb596d01",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8e47ca8-d9fa-4f06-aa37-7cab7d69dddc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dae86afe-a54c-4bda-add9-289670924ef0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "f86e38ee-7b82-4de9-bbce-73131f03d6c5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "04befb6b-50f5-4f03-90c4-ec0585f279c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a2e15fc-2bc7-4a6e-ba0c-4bce2dfb3b3f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "149b7ac1-0f55-4503-9281-58280b976e8f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8facb0-b85e-4472-9dcf-88b05783e8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a60a536-cbe5-4743-a023-eb492a9afc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f469b8ae-ddb6-40fc-b05e-4addba7a6007",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288cac27-3ef1-4004-9d5f-b1c04ac9f787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdc835d6-e0ac-49ac-b559-028270006521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db250bf-084b-444b-a87f-b6566edfc471",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b286aabe-43de-4015-8e28-825190557edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e212d48d-d835-445a-ba5d-c03ce5bdeaa7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f01a61f3-d476-4f46-84b5-785f7aeae7b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "754d5271-db94-4d52-865c-7386bab3be52",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b6e4b5-5aa2-4f0e-8817-4034bc5302cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a209ad8-7633-46f2-b3ac-25049b46392c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374d825f-8caf-4021-9bc4-b283364d4943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8adf41e-4282-455b-9f03-72e27214efba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08883282-4f88-4ee6-9a52-c8f5439ad749",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5122f9-2237-4b92-b74e-2cf75e37bea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15157c35-e941-461c-a2ef-55cffcc97fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55493146-68de-4ea4-b515-2d02a1ec490c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "379633f7-5f8d-4012-b432-7be041b450bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "86cd01fc-ab02-4fee-9971-086ffeaebc81",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f4505cc-9e31-4356-8f66-101e18fa99b4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b44461d6-98ec-4bbe-8fdc-0528cb97af2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cf506a0a-4b4a-455e-b753-f3b7e911f6b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "223b5be4-8c92-46cc-a34c-1253b048f927",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c0072430-cd76-4eb1-8801-e4238b5c6604"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb59caab-47ad-405b-aef4-7d81711ed086",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ec4b79e-1cc6-4e59-b222-54ecd1bc5105"
            }
          }
        ]
      },
      {
        "id": "94c26c6e-400a-4428-8620-21f6b961e217",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "713a0b70-0216-4087-bb02-380ecb312e36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3fc56a44-6952-4902-89de-37a42e79a421",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6eda0453-0361-4336-8482-fbc7753489bd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf34496-ccc1-4965-b805-af3984096ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59aedbd0-4d2f-4a7d-9255-81f669c5b8a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a9be34-9a32-45ea-9e44-79358a19f26a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6f0b09d-db40-4b53-9959-b55470c6daf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a33335-b055-4c3d-8bd8-59224539ef96",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2a29e8-0cc3-4faf-9d0e-6dd2d1d6416e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87902b0-8429-442b-ac2f-dc19a663590a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410f3f4d-6b22-4e12-baeb-4230fff97089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2150345a-79c7-4bd6-a37b-05a5e002f2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e1eeb0-c441-45a0-aa21-58038888c264",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98838f74-7922-4caf-aa69-94233f811640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71fb85b-a7ed-4bee-a1d1-dc8614c6fb17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52283f86-991d-4ab6-82c4-b48c47138c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c81c40aa-1364-489e-b6c2-53ed2a4b6da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c444cedf-37dd-4c95-8540-26aa53d6eed6",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e894a6f6-2fd1-4289-994c-9f92802a9ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22bfb193-aab3-4928-a452-df04cbec6742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ee5b55-0a66-4150-a905-31a7882bde91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75aef96f-6cdb-4b2c-9a3d-14802d39e3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b5d776-7b7b-4a47-825d-7558ae8b2dc8",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044846f5-85ed-4ed3-8321-c1d02294b86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bacce236-1a8c-4344-83cf-5f0da5b6143a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bc11ed-6fad-48ad-b104-ffaf23304eeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd7c48ab-ef6c-40b0-8e84-5a6c66f89e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f3adc3-3efe-4590-8cb4-5d168687d3b4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9399d4c-db41-4b55-b5db-cfd5a11a40d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d199a2-cd88-49e6-9367-3d7ea9e44f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417f3e23-3af3-490e-b3ef-c6d568bf9599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d875cacb-8f5f-445a-964d-66f967dc0c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977ae4f2-f8ad-46d3-b635-54c79e3974db",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acb26bb-8a54-41da-929c-465066041c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba31ae6-3316-40c0-932e-b25bc3462c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6029369a-c0f2-40a1-85fa-0e636621a591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "519b90ca-12c7-4c29-a9c3-c2a108c4db6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5447899-b906-46d9-8cd6-51d6049bab2a",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba44df89-281f-4b94-8011-19e08f60b990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8702cffe-433f-404f-9411-76822170237b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b730b44a-b964-46f7-a495-c132ef760742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb0ad6e-2834-45fa-be8a-6143b8640be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746973c5-5194-456a-9c80-ccfdead629f8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88b083f-13fa-47e2-bd7d-aa58d97d1ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e086d126-5d94-4eba-b4b7-211a66a993b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fdab14-8469-484b-aa42-68f8f6a7c38f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be8be2fc-7be6-46eb-b01e-f56b837c1b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ebb4fe-febc-4262-aa9e-2ef85a0fe14a",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72df4733-1ff1-44cf-8846-79a658709f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762ef433-5948-4b8e-a44f-77fe82ceaebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df346c2f-fb1a-4bc8-9c35-224f2a095167",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87248b4d-6978-481e-bc22-da9fbc7a9393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea618ff-044d-49c1-a640-6d7efbe32a62",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e897be8f-37d6-4fc2-b2d7-8e8f786bc6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab0f20e-ac00-4c50-85a4-ff28523f780c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a262ec47-0f7c-4e95-adf2-a63bb7aa620a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "f220aee3-fdc1-44d5-8821-1b607e55f023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0660d376-0a3e-46d7-b460-6da4431a64d3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa609f3-e768-41d3-bee6-fa5d6e6f4a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9408da99-e6f6-4942-ae60-03dae509e3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc77f53b-1b1b-4d21-b7e0-7834fd53b3c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "33dc95fe-e65f-4fe1-ac8a-27e6a5d82206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0ac262-96ba-414f-89aa-4f2d027fbc1e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae6d92d-a8ea-4b7b-a524-e532c5a488b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91edbead-1be9-420d-b383-8ba20dc81b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b65e52-3459-4931-aabc-409209de6ec8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26f938db-9397-4684-8691-7bdf7550df02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63c507f-774e-42d8-b56f-720ae85a3f75",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6396a7c1-fd84-43de-a549-9ccc459534e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f061edbc-ec30-402a-8dfc-eeb6225dd78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7621e3-d931-4278-abfd-04bc43e72478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96591611-8dcd-4c1e-9481-f9776633d9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28b9006-1f3f-42b8-a4db-063ec7d9c613",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686fcc29-ee15-486c-81ae-55f58abe82bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e09ba0-e243-4687-b5e0-3d9cdaa6e7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d65e0d-e097-488b-850d-e38d1df8858d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "291d5406-98a0-4e50-ab6c-82e279007099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f185be03-792d-43ff-83fd-d5ded07c11a9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5021189-658c-4d22-bbcc-d92ce431cddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da4d922-19ea-45ad-befe-91598769468c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2731ad49-14bb-4379-b152-29bb9ee60ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "9142f061-0848-4c79-889a-714c0af573ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac129314-3f73-4893-9113-806f3b79bb11",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df566ed-763b-41f6-9c27-4ba683129e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9a9952-9d1b-424f-a394-cb1a03a21fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e780ead-cf89-4b34-a363-56bb737c8a76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "849d758d-f061-4408-acf2-4977710a87b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e7981c-59e5-4f43-8930-bf754e38825c",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c57cee3-f268-4921-afb0-e8798a1dd0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ad146b-3a3c-4479-b090-00872ba11caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807ef162-c4d0-475a-b6a8-8ddd074131c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af2b812e-459a-44b8-9ecb-d7be9d504ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2994cb-ad7c-4ecf-801f-d7fe99fc6d30",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053fbf12-8e92-4e4e-a76d-1aa5691a6b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7346adce-725b-45d0-90c8-2926d3375e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48973f6d-5101-412f-acda-959ae004ccc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9017c84-0d73-49fe-a281-8c63384e7249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0573781e-f943-4ab4-94e6-ade397666202",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb83ceb-31a8-485c-89b0-e5bfd0a74f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb4ad13-38ea-4b0f-8a8e-c330e1c21684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3224803a-381a-4f01-bfbf-35d57bb0b06c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea29746d-d4b6-4a62-add2-4d41c39b01f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a902b479-cfb6-4eda-b959-74d4f6bd1370",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a733dd8-c745-485c-8e0a-20179926dd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236a636c-9726-428e-9817-a705078d7a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6089045e-a68b-47bb-8871-02436f65bf34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d92e93cc-5f51-4e22-a080-f788ca79d488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfdbe96-7260-44e0-8cce-c65f3d8220cf",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e6a5b9-2e6d-4947-9416-858a4ce42ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33bf5c5-9bba-4937-bb30-0d73af391dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc9ea06-6f30-489e-8139-6db9500620b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85647c8b-a617-43c7-978c-8dc81400c924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f05cd3-3fdd-45dc-becf-6a86a6724e09",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5250b847-fe1d-42a1-b0b0-b3c828e79303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d0bfb7-70ee-4135-8420-4f5df9c7d0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90172dff-19ed-46d2-91c9-a9390d64818c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b22a740-05db-4c82-8450-6a60cd4d1291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5e3fed-17e2-47d0-95ae-cdaea5ea8706",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf729f8-7468-4b9f-bd9c-a709872fc29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522eb8ba-b84d-4716-b40a-f27a1ccbaab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840293dc-60cb-4fa8-ad6c-33fefbb39f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62de9959-2be0-4bb5-ab8c-0b76f9575d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737a6c16-b0c7-4c4c-a364-b62726a3b3e3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fefeadb-59b9-4640-93c8-632a73768fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f79cea3-dc37-4852-b5cb-9db8f97eb6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4dc640d-834e-4c88-ae87-6254e9a80d91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4974a8d-19dd-4b37-8986-32e6962d9af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21459c29-3cb3-46da-8258-17c4a625e5c3",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1827ec-d90a-4252-805a-8d85a97e31a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7998c0d-d090-4817-ad6e-0d1f1fc62078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba13804-1776-438d-ba3f-929e9198ad1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "821e3974-f307-45a1-b200-9e250221b135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d310efab-271f-407d-aff9-67b4c4beb5ba",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198c71ba-9cd7-4834-bb80-e9c1cb83e9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb27f46-6247-4c77-9496-40f4fa5d96f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d404457e-6a64-43c7-aa51-2eb37fa038ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05021c0c-d8b0-4d2b-aa28-df850deba729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d264cb92-8dbb-4e82-8d11-1456d1017f34",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60594a7e-afb5-4869-ae09-b9085872be54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f410c67c-4c9d-428e-9def-9e98745a4a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f3b3b5-78ea-467d-aefd-1c3b833e862b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6729ce6-52ee-4719-86ce-ed68451bb85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ce3e92-099a-4537-9634-bd1d0fd2a1d6",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75170175-1069-4538-9d28-6df82bf735f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a952009e-2054-42ac-af39-a5fa1beb19d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ad6c06-5f45-4f90-a3b3-8681db185c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8377ec22-3899-4f3f-8fbd-ac78d682269f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64b2457-aa96-45f7-a1f4-626e1e9acb86",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282df492-28e4-43b8-b348-df4067b5705f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d48682-3420-4965-8d31-9fc2ddb1ac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9169cbcf-8165-4357-bb1a-2214f69f89a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f166042-327e-41c6-924b-919e538d34d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a04ed1-1c91-4157-bfb4-b387ae9efea0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00795203-1dec-41dd-8155-bbc764007748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f7abb28a-41c5-4627-bc0d-67e078eda6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82865be-bcc4-4b07-8633-37ce86545163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bb2db59-4135-4080-8e47-c347d278a25e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb7b25f5-54c5-4e01-a1c3-3fe8b16c303e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4531eb1f-6605-4624-9e22-724f5b189f82",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0fd06b-cb1d-49f5-a035-414cad0d7ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed15586c-fc30-4c43-b7b2-b2460dcd5b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc95fc9-b2ab-4a7d-9cf8-33574c53f016",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f5d7dbab-424b-4119-a9c0-f292221ec608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d141f8-4a49-485f-a0a5-ead9930b7964",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2b0bcc-1c8a-4d3e-863e-ef22a28c6f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "468a676b-44a3-432d-9466-1b0fdbc1c76b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66ea265-4db4-45e1-869a-e9a8b8da4148",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "79667885-7fbc-4ee5-b1a5-111aeb2aa501"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30a3127c-5ebf-4487-adeb-8ccac01f44c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "816ae71a-3d99-4c63-a8a6-e9d2e88f252e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1e31d93-9eab-411e-b4f3-462a5418a2ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc8be364-9d5f-46e1-87bf-dc3f3e4cbb73"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0387b815-df5d-4f21-b43c-35a7e0f01b9f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09b9b94b-2ae0-4b71-bee9-12509f7fc771"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a8cb1603-160a-415c-8315-814df179070b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc4ab29e-b4cd-41c8-9c43-420dbe987f25"
                }
              }
            ]
          },
          {
            "id": "c4052590-0c39-48cf-91eb-6c77ede6b600",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c790cb67-6cbd-432a-8a50-86074e916c69",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf4cace8-431a-46c9-a614-deb4a52bd596",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "305e59d0-65ae-4a9f-9a3d-32e2c3a8ec90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6463180e-be26-411d-88d6-6a15f1d19b58",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2da4789d-691b-4cac-95a6-16e580b3f6f9"
                    }
                  }
                ]
              },
              {
                "id": "5e154682-fe95-42c1-8b73-b978d20151ed",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44f7b17c-c5c4-4997-a1e8-751339a4ec00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a218e4a3-6478-4aff-9464-e2ee6d0217ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc9a7a95-6ed0-459e-b561-7329e38d94f0",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "93b2ae4e-f20a-4039-b677-e73605009123"
                    }
                  }
                ]
              },
              {
                "id": "6b9ca545-704c-4c3a-9ca0-ba0dc2a4a9f0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ee17782-9855-4f9d-9db7-306199fb826b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cb25eef-7bfa-4508-b8d3-85b6675d62ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7be7c57-7dc0-43ac-85b0-1d4b134b1bbc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f6859e1d-aebf-4930-b886-6ddecd38a24d"
                    }
                  }
                ]
              },
              {
                "id": "54cd550f-cdf9-4a02-be57-89e05eab1588",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69800467-5865-4353-bafc-3f135b8c40b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f65ed238-183c-4bd9-9827-dde0c80801d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e7dfdce-6775-45f4-a91b-b2a52499774c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b0bc5269-1c6f-4620-b0b5-7cec4b692207"
                    }
                  }
                ]
              },
              {
                "id": "bfa1f2a4-c873-410e-b3a4-1ee674b370c1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8443f3c2-07de-45ba-99ed-b79a83de0227",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "cb2d684c-4acd-42c5-820b-60b1ceb2ffc3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd95431f-f09a-43b8-8490-b2c940269ad5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "36e3c3d8-cbca-43e0-b06a-23971a32423c"
                    }
                  }
                ]
              },
              {
                "id": "98b8a2da-644b-4b09-a5c0-3a1f3ebf993c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6a0dcde-af36-4109-b9f2-e4fe0b4a6342",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eecf41d9-f8dd-49d4-a3eb-318e33adbd9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa4923e8-a27b-4207-a30b-cbc5f36809ec",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d69a2a50-e051-48f0-91c2-111e2c3e14b2"
                    }
                  }
                ]
              },
              {
                "id": "5e15f9f6-8f8e-4036-93e8-49481e22820f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd232580-a82c-4bd0-a3bb-09496101706b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b0a80d35-f770-4946-812d-bbe20d41d86c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "030221f9-43bf-4bdc-8bf7-558c632b8219",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6572182f-0e87-4e56-a65c-4b7ef6488798"
                    }
                  }
                ]
              },
              {
                "id": "b33382ba-c4f4-4043-8c71-db39c5a841ed",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1516325-bb96-474e-b0ef-98aac17fc686",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2444a27f-b571-4a6e-ad56-80a8b1515bfc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d780b2b-da1e-49a6-8c49-8efb0daedc75",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "07636f96-26ba-41e7-be1d-007766e84d0d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3b085f61-4b1d-4fb3-92ce-0069d4c25fe8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a703622-cf8a-4fe9-ae2d-8625d6ed4ce0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1dbf675d-366a-47d1-b8f9-aa2f2769ef8c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0deb6f79-5935-475d-9a61-d74ed7174d8a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afaaa79a-931d-451d-8cb8-b16b32f6755c",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "bce4ea50-da3e-4fb7-9ea7-263535a5b0b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6111ce7-3c24-4929-bcfa-bc2c4a3623cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5835332-bf9a-4d76-ae4b-20ad318285e1"
            }
          }
        ]
      },
      {
        "id": "f4699a15-3290-4132-8fab-fb9c3ffc450a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fbf9bfd6-cc35-4b58-a3b7-cc7a95da345b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7b23f21-3417-4034-b8e9-2f548ae113aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9e31b12-680a-4329-ab14-a8a6643ad1f0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a78263-6949-4447-a15e-53cf143124a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b88fe4-bdec-403d-ba77-14529a81358e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aeccf1f-a1eb-4c6f-9b87-34098edfa1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0ebcd1d-38ca-4074-a44c-5986f5c8a413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b34f97d-f62f-4dca-8701-547504b32a9a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4690eca0-b589-4935-a3eb-41107b7009b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0222d8ef-12bb-4ea1-9b39-eb85e0fb41c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27795168-b9be-4198-9499-0838dc32857d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49340d6b-36dc-43ea-8b41-c79b37306cec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b07e1078-3b76-4582-86d0-dcb7467ff96d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72facf2d-7ac6-42fd-89a0-cd3ab52ecf7a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9fcc768-6d7a-40e5-9b01-f698b81e5d29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcbaa45c-3e0c-4f2e-85e8-2d9a52e7d914"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16f5f96e-8db7-49b1-9d19-e5fe37870a24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "40df67d5-9def-4832-8496-57e9bdb37fcb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd0a49a1-48a1-4ced-a6d1-353b0c6f3ba2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd17ea45-3c23-4962-b3a7-1d032151cf39"
            }
          }
        ]
      },
      {
        "id": "bad6ea55-688a-4d4d-bcd5-0c5eafe55b3b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b94818d3-d30e-4725-837d-fe1929f7ef07",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee6e4440-c526-4e48-af7f-d296c20ed164",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43cbf6d4-7c31-44b9-81d0-0de9ef016b53",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09231d6d-5ad4-447a-912a-2ff497c9f8d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "483f7365-0c86-4e56-85c0-75fdb6905378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c875436-dd91-4d51-ac5d-d5437a8ad4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0d49a37-6ad3-48ca-867a-42031142b000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577962e5-de80-485f-afb3-2a74f6539ab2",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034960c6-0b36-40c5-a2b5-970ca92227e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "24a45dcd-5fc2-4a91-b1b1-6e34b12aa115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e811fb-e66f-4d12-b3c1-5b06af2b3347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c62ee0fb-ef5c-40f7-8992-080578b534a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b1f352f-b7be-4551-9d16-ffb492a9d788",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27cfda8a-d71a-4398-b1ed-5127c7212f68"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af72ffb2-b012-4fa8-a956-44f6eeec7c77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe249989-00ab-461c-8b9d-b899f5879d09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37d2083f-7df4-4ef5-92f0-8bff4ae327af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0ce2730a-5d4c-413b-8786-911baf4c3124"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46fdb981-6200-4a44-9a35-a561705ecdf6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd6e30f5-268b-4fdc-b9b8-0b9ac756c3c0"
            }
          }
        ]
      },
      {
        "id": "a6a6405f-c3ae-47b0-b451-f97e1a7ce2a7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3cd305cd-a903-4da0-8d5e-cc62146e4c3c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3b4fc1d-bb44-4e43-a60b-7a09ea3a4574",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82801bdc-64a8-4bf2-a62d-4cffc9752492",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6af5f39-4959-4b11-b435-095640727e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab34b03-1782-4704-b5e5-e6d4fb3561af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c299ec9-ef6a-4926-b3ac-1d5139cfc388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "859d0b79-a056-480e-9ac1-ab6505ac016a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502bf902-1664-47b8-b0d2-b54b9115f943",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43458ee8-e33a-413f-b4d3-87553b1d9216",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9c5fe260-7ceb-4e62-8e69-01bd38ae58ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "349690eb-9a46-42f3-814a-a860888abd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b8f9666-6605-4438-ba34-46af4d659b67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f6d64cd-8763-4c4b-aacf-2d2f3cf7a365",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57d4e21b-b227-4535-b652-df1a5da53f4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "271bab29-30de-4745-9349-20a4dda26ca1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd4a6acd-6208-4563-ae82-7b3c2981c0da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adcc9e68-f8f5-4827-82a1-c9a0af2c1d43",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "ff00c999-d9fd-4c3f-8242-a609c11d0808"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccf3025d-e15e-47f5-8e6b-c2ea705d6297",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a10ccbf1-ddb5-4c0f-a344-367d7fba60c1"
            }
          }
        ]
      },
      {
        "id": "f3021290-a43c-469a-abc6-a0fe7440e16b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c8fdc0cf-86f9-4feb-b783-3c5f7340bba6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4f9a964-e34c-4fe2-8c6c-abb3cf1e0287",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6423e126-d98b-4242-9e8f-7b8a660c4d0b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81b9099-d0b1-442e-9510-3357ad1efd25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463ea0a3-9705-4e81-a412-0d267e6f535e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61106a92-c9c6-42e6-b416-71d51ff95491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d88bfd09-bbdd-4733-bb8d-73d136f7faeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e506488-e16d-4d97-8686-d3c3e9f26d0c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93510d30-acaa-43b5-b458-db119c4d5eb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "39a63a93-24c7-48a0-b326-4f6c1d17c2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a60e7b-5e1a-4135-9f91-580d7406bcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d177fe7-1b71-4d6b-ae02-8d974bfc0cc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e85ac272-e44b-463e-9867-3b010ed1d654",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "156a0279-abcb-4ff2-952e-88261d4333a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8c64a1c-0909-4229-9c34-9f39990d73f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70281319-5c3d-4167-a4f4-90eb51cd83d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b603386-a83e-4a8b-89d0-f56acab59b99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "3a1d7878-4ee0-489a-a098-fc7c65023108"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b823c8b7-5260-4d50-a085-a19526ec5d74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c90c1c0b-7279-4a13-a582-2b6473ddfffa"
            }
          }
        ]
      },
      {
        "id": "b6e86af9-db77-47d2-8403-dc9a8bdc296b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c69c2722-9a40-4c6d-bdac-b513a9f94c00",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9bb39ab7-7627-4926-95c8-2b1664935ec1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5163b817-accb-4c5e-8abd-1487fd55761c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36452cdc-e50c-4619-bbc5-3c893195dac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9003767-565a-4c38-a40c-015f4f3ed3cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2573e04-f26c-46af-a434-d8a1b02521f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43a7302c-035d-4fa5-aea9-7d89cef220cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed29c71-4614-431e-a2e2-6945fc18103c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989b56c9-9b95-4687-a9cc-0a6fd4b1b105",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "db88361b-0c95-4cc2-9b78-94cf8c8a0db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4739997a-8de3-400d-8bf9-0edc3542fef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08381b07-e8e7-4719-968a-972df9f3c7ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3aa4577b-ca81-44bd-937d-516250ce1073",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f92c546-b81c-4dcb-9630-4061fed89865"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adea6f73-b932-48cf-9be4-55e1866a7373",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7063b97-4b63-4ab4-af7e-a0a589ccc57f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "954ee6fe-61c2-4c5c-aa44-2453a96eb919",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "e2480148-50ba-4853-bf82-b2899c34bdb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "472d2eb5-57e0-44f1-a2c9-ba75e36cb8af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc232167-f114-416f-ad94-768d33f877b2"
            }
          }
        ]
      },
      {
        "id": "f5b56b76-4255-4d76-8ac6-f00583955083",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "3fe1ecc5-2632-417b-8904-7b747547e4f3",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 98
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 83.42990654205605,
      "responseMin": 36,
      "responseMax": 602,
      "responseSd": 91.68792174244773,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1660697323544,
      "completed": 1660697335541
    },
    "executions": [
      {
        "id": "671fc8a1-b641-4bd7-bc90-901abb596d01",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "eae37096-7fec-4c5f-822f-b1ab5cac7e57",
          "httpRequestId": "703f6022-f5ce-46ef-90fa-03ad9cdd7e39"
        },
        "item": {
          "id": "671fc8a1-b641-4bd7-bc90-901abb596d01",
          "name": "did_json"
        },
        "response": {
          "id": "47b49feb-9a32-40b6-98e8-007f6736c52a",
          "status": "OK",
          "code": 200,
          "responseTime": 289,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149b7ac1-0f55-4503-9281-58280b976e8f",
        "cursor": {
          "ref": "f2f891b7-3b39-4b07-abd6-8b3712cee37d",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6045b015-2687-494a-89c1-c70f65375cbe"
        },
        "item": {
          "id": "149b7ac1-0f55-4503-9281-58280b976e8f",
          "name": "did:invalid"
        },
        "response": {
          "id": "b1c0a9a8-b4bb-45e2-95a2-d0508f7c147f",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149b7ac1-0f55-4503-9281-58280b976e8f",
        "cursor": {
          "ref": "f2f891b7-3b39-4b07-abd6-8b3712cee37d",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6045b015-2687-494a-89c1-c70f65375cbe"
        },
        "item": {
          "id": "149b7ac1-0f55-4503-9281-58280b976e8f",
          "name": "did:invalid"
        },
        "response": {
          "id": "b1c0a9a8-b4bb-45e2-95a2-d0508f7c147f",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f469b8ae-ddb6-40fc-b05e-4addba7a6007",
        "cursor": {
          "ref": "79cac611-b270-495d-9bf0-293b0d00f4e9",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a23072d7-2c11-445c-b7d5-b2de84a476e4"
        },
        "item": {
          "id": "f469b8ae-ddb6-40fc-b05e-4addba7a6007",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5ead4d96-59c6-467b-a572-5c4db601df72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 249,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "5db250bf-084b-444b-a87f-b6566edfc471",
        "cursor": {
          "ref": "08215e57-e42e-42e5-a29a-330387c58e9a",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "36c62a0f-db73-4a5b-bc2c-7c6f960a1490"
        },
        "item": {
          "id": "5db250bf-084b-444b-a87f-b6566edfc471",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "17aeba87-59a3-4e84-9c80-8a6746c44908",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "754d5271-db94-4d52-865c-7386bab3be52",
        "cursor": {
          "ref": "48cbf4a0-c501-479b-afe9-d871a4b478d8",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c4ef0cee-a4a6-424f-9d24-bacd301d23de"
        },
        "item": {
          "id": "754d5271-db94-4d52-865c-7386bab3be52",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3bfb2106-fad1-44b0-a251-e6d573cea659",
          "status": "OK",
          "code": 200,
          "responseTime": 234,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "08883282-4f88-4ee6-9a52-c8f5439ad749",
        "cursor": {
          "ref": "678bd376-85af-432a-9a28-63916edc70a4",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "20575c76-5684-4c2f-aeac-4326f63e1159"
        },
        "item": {
          "id": "08883282-4f88-4ee6-9a52-c8f5439ad749",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "75592c4b-93e9-48d8-9b97-1950dc9a55a6",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "08883282-4f88-4ee6-9a52-c8f5439ad749",
        "cursor": {
          "ref": "678bd376-85af-432a-9a28-63916edc70a4",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "20575c76-5684-4c2f-aeac-4326f63e1159"
        },
        "item": {
          "id": "08883282-4f88-4ee6-9a52-c8f5439ad749",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "75592c4b-93e9-48d8-9b97-1950dc9a55a6",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "3f4505cc-9e31-4356-8f66-101e18fa99b4",
        "cursor": {
          "ref": "3eecf2d5-f1d4-4c03-a5bf-d10d17541208",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f89c730b-6888-4ef6-a718-25d697d95d5c"
        },
        "item": {
          "id": "3f4505cc-9e31-4356-8f66-101e18fa99b4",
          "name": "identifiers"
        },
        "response": {
          "id": "f70f2b55-0e3d-4863-903e-e596b127fbb6",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eda0453-0361-4336-8482-fbc7753489bd",
        "cursor": {
          "ref": "f3ada460-f305-4b4f-9ec7-f20a4348d626",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "48d1fce4-8223-4685-8bde-df392c7d0c04"
        },
        "item": {
          "id": "6eda0453-0361-4336-8482-fbc7753489bd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "edf0d9e4-996b-4b18-9552-d0f661679b09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 602,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6eda0453-0361-4336-8482-fbc7753489bd",
        "cursor": {
          "ref": "f3ada460-f305-4b4f-9ec7-f20a4348d626",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "48d1fce4-8223-4685-8bde-df392c7d0c04"
        },
        "item": {
          "id": "6eda0453-0361-4336-8482-fbc7753489bd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "edf0d9e4-996b-4b18-9552-d0f661679b09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 602,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6eda0453-0361-4336-8482-fbc7753489bd",
        "cursor": {
          "ref": "f3ada460-f305-4b4f-9ec7-f20a4348d626",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "48d1fce4-8223-4685-8bde-df392c7d0c04"
        },
        "item": {
          "id": "6eda0453-0361-4336-8482-fbc7753489bd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "edf0d9e4-996b-4b18-9552-d0f661679b09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 602,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "91a33335-b055-4c3d-8bd8-59224539ef96",
        "cursor": {
          "ref": "9e32e6bf-e20e-4f6e-88ad-259285af19aa",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "137fa459-8e27-4523-859f-f222a86304c2"
        },
        "item": {
          "id": "91a33335-b055-4c3d-8bd8-59224539ef96",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b591494a-edbf-4ec9-b64d-36ee80eef169",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "91a33335-b055-4c3d-8bd8-59224539ef96",
        "cursor": {
          "ref": "9e32e6bf-e20e-4f6e-88ad-259285af19aa",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "137fa459-8e27-4523-859f-f222a86304c2"
        },
        "item": {
          "id": "91a33335-b055-4c3d-8bd8-59224539ef96",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b591494a-edbf-4ec9-b64d-36ee80eef169",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "d2e1eeb0-c441-45a0-aa21-58038888c264",
        "cursor": {
          "ref": "c8502206-61b9-4baf-bc06-801352e2b540",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2999d07e-4ab5-49bd-a3e5-14fb099e867d"
        },
        "item": {
          "id": "d2e1eeb0-c441-45a0-aa21-58038888c264",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "0cc36109-00a4-44ce-b675-4d3d5f3d7485",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "d2e1eeb0-c441-45a0-aa21-58038888c264",
        "cursor": {
          "ref": "c8502206-61b9-4baf-bc06-801352e2b540",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2999d07e-4ab5-49bd-a3e5-14fb099e867d"
        },
        "item": {
          "id": "d2e1eeb0-c441-45a0-aa21-58038888c264",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "0cc36109-00a4-44ce-b675-4d3d5f3d7485",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c444cedf-37dd-4c95-8540-26aa53d6eed6",
        "cursor": {
          "ref": "4c99939e-f4ba-4a3f-bac2-19acfdd0ba76",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0d54c1b2-f216-4e65-879a-b7acd11acd31"
        },
        "item": {
          "id": "c444cedf-37dd-4c95-8540-26aa53d6eed6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "2902aedc-5d2f-4787-b17e-993b6977a65a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c444cedf-37dd-4c95-8540-26aa53d6eed6",
        "cursor": {
          "ref": "4c99939e-f4ba-4a3f-bac2-19acfdd0ba76",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0d54c1b2-f216-4e65-879a-b7acd11acd31"
        },
        "item": {
          "id": "c444cedf-37dd-4c95-8540-26aa53d6eed6",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "2902aedc-5d2f-4787-b17e-993b6977a65a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "c0b5d776-7b7b-4a47-825d-7558ae8b2dc8",
        "cursor": {
          "ref": "c5354397-e6c6-436a-b86f-aaae39a69246",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ac035534-f885-4625-b0cc-43b02748a0d2"
        },
        "item": {
          "id": "c0b5d776-7b7b-4a47-825d-7558ae8b2dc8",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "2922054e-5298-4801-9475-f657749838c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "c0b5d776-7b7b-4a47-825d-7558ae8b2dc8",
        "cursor": {
          "ref": "c5354397-e6c6-436a-b86f-aaae39a69246",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ac035534-f885-4625-b0cc-43b02748a0d2"
        },
        "item": {
          "id": "c0b5d776-7b7b-4a47-825d-7558ae8b2dc8",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "2922054e-5298-4801-9475-f657749838c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "02f3adc3-3efe-4590-8cb4-5d168687d3b4",
        "cursor": {
          "ref": "7c0eac80-839d-4cb3-936a-4ebc75a4dec2",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ddd26c65-fda0-4aca-ab46-0c0cff0a9848"
        },
        "item": {
          "id": "02f3adc3-3efe-4590-8cb4-5d168687d3b4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "206036bb-842b-4632-9bdc-b5fe75cc1fdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "02f3adc3-3efe-4590-8cb4-5d168687d3b4",
        "cursor": {
          "ref": "7c0eac80-839d-4cb3-936a-4ebc75a4dec2",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ddd26c65-fda0-4aca-ab46-0c0cff0a9848"
        },
        "item": {
          "id": "02f3adc3-3efe-4590-8cb4-5d168687d3b4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "206036bb-842b-4632-9bdc-b5fe75cc1fdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "977ae4f2-f8ad-46d3-b635-54c79e3974db",
        "cursor": {
          "ref": "db06606f-27f6-4351-a7bd-233590057cc5",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fc8deb25-d720-4bbb-9570-bea0d42d7fed"
        },
        "item": {
          "id": "977ae4f2-f8ad-46d3-b635-54c79e3974db",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "3c4eb78a-cd96-45c0-96c6-f0aa0dc369bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "977ae4f2-f8ad-46d3-b635-54c79e3974db",
        "cursor": {
          "ref": "db06606f-27f6-4351-a7bd-233590057cc5",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fc8deb25-d720-4bbb-9570-bea0d42d7fed"
        },
        "item": {
          "id": "977ae4f2-f8ad-46d3-b635-54c79e3974db",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "3c4eb78a-cd96-45c0-96c6-f0aa0dc369bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b5447899-b906-46d9-8cd6-51d6049bab2a",
        "cursor": {
          "ref": "89906cc9-5e88-41f3-a1d3-a5ae87e8ddcf",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "74b3633e-d793-4cfc-835f-f54f1468451f"
        },
        "item": {
          "id": "b5447899-b906-46d9-8cd6-51d6049bab2a",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ee6bf3af-376c-4b4f-9996-95b34dffef27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "b5447899-b906-46d9-8cd6-51d6049bab2a",
        "cursor": {
          "ref": "89906cc9-5e88-41f3-a1d3-a5ae87e8ddcf",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "74b3633e-d793-4cfc-835f-f54f1468451f"
        },
        "item": {
          "id": "b5447899-b906-46d9-8cd6-51d6049bab2a",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "ee6bf3af-376c-4b4f-9996-95b34dffef27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "746973c5-5194-456a-9c80-ccfdead629f8",
        "cursor": {
          "ref": "3ed9895b-7108-47b4-9388-b9b2fcc6309e",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "16bd6501-523d-4afa-8627-2c0210cb36b1"
        },
        "item": {
          "id": "746973c5-5194-456a-9c80-ccfdead629f8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4dc41c01-f97a-4599-acb9-9f79d43e7b50",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "746973c5-5194-456a-9c80-ccfdead629f8",
        "cursor": {
          "ref": "3ed9895b-7108-47b4-9388-b9b2fcc6309e",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "16bd6501-523d-4afa-8627-2c0210cb36b1"
        },
        "item": {
          "id": "746973c5-5194-456a-9c80-ccfdead629f8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4dc41c01-f97a-4599-acb9-9f79d43e7b50",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "13ebb4fe-febc-4262-aa9e-2ef85a0fe14a",
        "cursor": {
          "ref": "63ed5231-4b5a-4794-83b0-4807bdd27287",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f742aacd-c865-456c-90c6-7a74396fe406"
        },
        "item": {
          "id": "13ebb4fe-febc-4262-aa9e-2ef85a0fe14a",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "c358e55b-3371-4b9e-9666-0b0867641be2",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "13ebb4fe-febc-4262-aa9e-2ef85a0fe14a",
        "cursor": {
          "ref": "63ed5231-4b5a-4794-83b0-4807bdd27287",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f742aacd-c865-456c-90c6-7a74396fe406"
        },
        "item": {
          "id": "13ebb4fe-febc-4262-aa9e-2ef85a0fe14a",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "c358e55b-3371-4b9e-9666-0b0867641be2",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "fea618ff-044d-49c1-a640-6d7efbe32a62",
        "cursor": {
          "ref": "33a6d8e9-d93c-4795-9bcb-87e97ebc643d",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "481c3419-015d-4a7a-83d2-f4d9f5201f36"
        },
        "item": {
          "id": "fea618ff-044d-49c1-a640-6d7efbe32a62",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "1d104644-a52a-4cfb-be24-a5af158d7afe",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "fea618ff-044d-49c1-a640-6d7efbe32a62",
        "cursor": {
          "ref": "33a6d8e9-d93c-4795-9bcb-87e97ebc643d",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "481c3419-015d-4a7a-83d2-f4d9f5201f36"
        },
        "item": {
          "id": "fea618ff-044d-49c1-a640-6d7efbe32a62",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "1d104644-a52a-4cfb-be24-a5af158d7afe",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "0660d376-0a3e-46d7-b460-6da4431a64d3",
        "cursor": {
          "ref": "25308292-fd60-45d2-8e48-4cff5b7322c5",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7cf027ea-447b-4480-8c49-f8b1caedf547"
        },
        "item": {
          "id": "0660d376-0a3e-46d7-b460-6da4431a64d3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ec251782-600e-42fe-b648-317be8f151a4",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "0660d376-0a3e-46d7-b460-6da4431a64d3",
        "cursor": {
          "ref": "25308292-fd60-45d2-8e48-4cff5b7322c5",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7cf027ea-447b-4480-8c49-f8b1caedf547"
        },
        "item": {
          "id": "0660d376-0a3e-46d7-b460-6da4431a64d3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ec251782-600e-42fe-b648-317be8f151a4",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "dd0ac262-96ba-414f-89aa-4f2d027fbc1e",
        "cursor": {
          "ref": "73e038ab-72aa-4ac1-aad6-32d56700a2be",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cba76004-5287-48af-a88c-bb38a39812cd"
        },
        "item": {
          "id": "dd0ac262-96ba-414f-89aa-4f2d027fbc1e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "96f1c430-9fb1-4be3-9300-af7af7364ea9",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "dd0ac262-96ba-414f-89aa-4f2d027fbc1e",
        "cursor": {
          "ref": "73e038ab-72aa-4ac1-aad6-32d56700a2be",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cba76004-5287-48af-a88c-bb38a39812cd"
        },
        "item": {
          "id": "dd0ac262-96ba-414f-89aa-4f2d027fbc1e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "96f1c430-9fb1-4be3-9300-af7af7364ea9",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b63c507f-774e-42d8-b56f-720ae85a3f75",
        "cursor": {
          "ref": "5e5a50fe-5a2a-40c9-aaee-4f10bb3589e6",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "905f1752-1812-40b1-910e-94b1709e8c57"
        },
        "item": {
          "id": "b63c507f-774e-42d8-b56f-720ae85a3f75",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "a7f98ebc-5e82-424a-9495-fb5da9386125",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b63c507f-774e-42d8-b56f-720ae85a3f75",
        "cursor": {
          "ref": "5e5a50fe-5a2a-40c9-aaee-4f10bb3589e6",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "905f1752-1812-40b1-910e-94b1709e8c57"
        },
        "item": {
          "id": "b63c507f-774e-42d8-b56f-720ae85a3f75",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "a7f98ebc-5e82-424a-9495-fb5da9386125",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a28b9006-1f3f-42b8-a4db-063ec7d9c613",
        "cursor": {
          "ref": "2585e6db-557d-473b-b535-e9c28a5dd35c",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "41ef15b5-d0f6-418b-beb0-6f0705481fe2"
        },
        "item": {
          "id": "a28b9006-1f3f-42b8-a4db-063ec7d9c613",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "bc5e1cf3-0bfa-4779-b6d9-e31da05b49af",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a28b9006-1f3f-42b8-a4db-063ec7d9c613",
        "cursor": {
          "ref": "2585e6db-557d-473b-b535-e9c28a5dd35c",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "41ef15b5-d0f6-418b-beb0-6f0705481fe2"
        },
        "item": {
          "id": "a28b9006-1f3f-42b8-a4db-063ec7d9c613",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "bc5e1cf3-0bfa-4779-b6d9-e31da05b49af",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f185be03-792d-43ff-83fd-d5ded07c11a9",
        "cursor": {
          "ref": "2c86b781-45c6-4813-bf53-a35d8087784f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "71e4201a-74a0-4d0f-ad17-f025dbdbaa74"
        },
        "item": {
          "id": "f185be03-792d-43ff-83fd-d5ded07c11a9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4cc5b6ea-e41e-411a-873f-ec0b11c04222",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f185be03-792d-43ff-83fd-d5ded07c11a9",
        "cursor": {
          "ref": "2c86b781-45c6-4813-bf53-a35d8087784f",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "71e4201a-74a0-4d0f-ad17-f025dbdbaa74"
        },
        "item": {
          "id": "f185be03-792d-43ff-83fd-d5ded07c11a9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4cc5b6ea-e41e-411a-873f-ec0b11c04222",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "ac129314-3f73-4893-9113-806f3b79bb11",
        "cursor": {
          "ref": "acce88b1-d464-4e06-b435-415a5abb00b3",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ff64aa11-d961-4f7e-863b-888d902ed9e3"
        },
        "item": {
          "id": "ac129314-3f73-4893-9113-806f3b79bb11",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9eb8b616-8625-4027-8900-c0716dda3e90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ac129314-3f73-4893-9113-806f3b79bb11",
        "cursor": {
          "ref": "acce88b1-d464-4e06-b435-415a5abb00b3",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ff64aa11-d961-4f7e-863b-888d902ed9e3"
        },
        "item": {
          "id": "ac129314-3f73-4893-9113-806f3b79bb11",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9eb8b616-8625-4027-8900-c0716dda3e90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "d7e7981c-59e5-4f43-8930-bf754e38825c",
        "cursor": {
          "ref": "5b6f94cc-262d-4d87-a10b-746985b9a227",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "076d4f13-c742-4af2-bb74-1a139b1e3068"
        },
        "item": {
          "id": "d7e7981c-59e5-4f43-8930-bf754e38825c",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "e3f46f04-ced8-4558-aa19-3c2c610f654b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "d7e7981c-59e5-4f43-8930-bf754e38825c",
        "cursor": {
          "ref": "5b6f94cc-262d-4d87-a10b-746985b9a227",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "076d4f13-c742-4af2-bb74-1a139b1e3068"
        },
        "item": {
          "id": "d7e7981c-59e5-4f43-8930-bf754e38825c",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "e3f46f04-ced8-4558-aa19-3c2c610f654b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "eb2994cb-ad7c-4ecf-801f-d7fe99fc6d30",
        "cursor": {
          "ref": "2a6f3708-7595-41cd-aa38-a64ce8cde4f9",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fc0273c8-7ee6-4cf4-99cc-8bcb9139ba67"
        },
        "item": {
          "id": "eb2994cb-ad7c-4ecf-801f-d7fe99fc6d30",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1cb01b96-cfda-4899-b77b-a70b89706ff2",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "eb2994cb-ad7c-4ecf-801f-d7fe99fc6d30",
        "cursor": {
          "ref": "2a6f3708-7595-41cd-aa38-a64ce8cde4f9",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fc0273c8-7ee6-4cf4-99cc-8bcb9139ba67"
        },
        "item": {
          "id": "eb2994cb-ad7c-4ecf-801f-d7fe99fc6d30",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1cb01b96-cfda-4899-b77b-a70b89706ff2",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "0573781e-f943-4ab4-94e6-ade397666202",
        "cursor": {
          "ref": "dec244ff-489d-4877-9a4c-dd119c2512fc",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "86d8ce45-fe5f-41f3-86fd-612d73212924"
        },
        "item": {
          "id": "0573781e-f943-4ab4-94e6-ade397666202",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1c2b55d4-7ec1-4a90-8b77-8a53a2316365",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "0573781e-f943-4ab4-94e6-ade397666202",
        "cursor": {
          "ref": "dec244ff-489d-4877-9a4c-dd119c2512fc",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "86d8ce45-fe5f-41f3-86fd-612d73212924"
        },
        "item": {
          "id": "0573781e-f943-4ab4-94e6-ade397666202",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1c2b55d4-7ec1-4a90-8b77-8a53a2316365",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "a902b479-cfb6-4eda-b959-74d4f6bd1370",
        "cursor": {
          "ref": "a3cb6af4-980a-4ebe-b294-3e76cdde61ef",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "db586467-983d-4ef5-b9fe-b4ec839f7531"
        },
        "item": {
          "id": "a902b479-cfb6-4eda-b959-74d4f6bd1370",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "93da2c8f-5c19-41ec-9742-2c19d2a3e32a",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "a902b479-cfb6-4eda-b959-74d4f6bd1370",
        "cursor": {
          "ref": "a3cb6af4-980a-4ebe-b294-3e76cdde61ef",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "db586467-983d-4ef5-b9fe-b4ec839f7531"
        },
        "item": {
          "id": "a902b479-cfb6-4eda-b959-74d4f6bd1370",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "93da2c8f-5c19-41ec-9742-2c19d2a3e32a",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "adfdbe96-7260-44e0-8cce-c65f3d8220cf",
        "cursor": {
          "ref": "c24ebe02-b507-4f89-b10e-b6412326bb78",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6f90c86c-2834-4883-a10b-b38ff5e03906"
        },
        "item": {
          "id": "adfdbe96-7260-44e0-8cce-c65f3d8220cf",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "b39f6e71-2fe7-44b7-a429-91c9f3c8772c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "adfdbe96-7260-44e0-8cce-c65f3d8220cf",
        "cursor": {
          "ref": "c24ebe02-b507-4f89-b10e-b6412326bb78",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6f90c86c-2834-4883-a10b-b38ff5e03906"
        },
        "item": {
          "id": "adfdbe96-7260-44e0-8cce-c65f3d8220cf",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "b39f6e71-2fe7-44b7-a429-91c9f3c8772c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "c6f05cd3-3fdd-45dc-becf-6a86a6724e09",
        "cursor": {
          "ref": "b23894a6-2c98-432a-b148-edac55867fee",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "29697a25-2d6d-4ada-bbb7-3424aef26ed9"
        },
        "item": {
          "id": "c6f05cd3-3fdd-45dc-becf-6a86a6724e09",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c3792e89-4803-482a-8369-97aa6ec6b76f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c6f05cd3-3fdd-45dc-becf-6a86a6724e09",
        "cursor": {
          "ref": "b23894a6-2c98-432a-b148-edac55867fee",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "29697a25-2d6d-4ada-bbb7-3424aef26ed9"
        },
        "item": {
          "id": "c6f05cd3-3fdd-45dc-becf-6a86a6724e09",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c3792e89-4803-482a-8369-97aa6ec6b76f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "ff5e3fed-17e2-47d0-95ae-cdaea5ea8706",
        "cursor": {
          "ref": "e272583d-a84e-42ed-9152-d6ab2bcfc014",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "df61dc4e-e003-45b3-a780-361f44c0412d"
        },
        "item": {
          "id": "ff5e3fed-17e2-47d0-95ae-cdaea5ea8706",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "90aeeee1-ae9f-4a4e-a771-e85fd0d4d060",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "ff5e3fed-17e2-47d0-95ae-cdaea5ea8706",
        "cursor": {
          "ref": "e272583d-a84e-42ed-9152-d6ab2bcfc014",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "df61dc4e-e003-45b3-a780-361f44c0412d"
        },
        "item": {
          "id": "ff5e3fed-17e2-47d0-95ae-cdaea5ea8706",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "90aeeee1-ae9f-4a4e-a771-e85fd0d4d060",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "737a6c16-b0c7-4c4c-a364-b62726a3b3e3",
        "cursor": {
          "ref": "54649a85-9c97-4318-a3fe-52f69ef4bca6",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f0e6c0b4-2a15-4487-a7d7-9a75ecede1e7"
        },
        "item": {
          "id": "737a6c16-b0c7-4c4c-a364-b62726a3b3e3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4e441e6d-d5a5-4aef-8ac2-14ef6fc7dbb3",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "737a6c16-b0c7-4c4c-a364-b62726a3b3e3",
        "cursor": {
          "ref": "54649a85-9c97-4318-a3fe-52f69ef4bca6",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f0e6c0b4-2a15-4487-a7d7-9a75ecede1e7"
        },
        "item": {
          "id": "737a6c16-b0c7-4c4c-a364-b62726a3b3e3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4e441e6d-d5a5-4aef-8ac2-14ef6fc7dbb3",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "21459c29-3cb3-46da-8258-17c4a625e5c3",
        "cursor": {
          "ref": "433da28c-787a-45b6-ab5f-3e92e36e6eda",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "42d5f2a9-12a3-4fbd-a449-8dec80603c59"
        },
        "item": {
          "id": "21459c29-3cb3-46da-8258-17c4a625e5c3",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "f4607de4-102f-4891-8c9f-42d78f5f2e23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "21459c29-3cb3-46da-8258-17c4a625e5c3",
        "cursor": {
          "ref": "433da28c-787a-45b6-ab5f-3e92e36e6eda",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "42d5f2a9-12a3-4fbd-a449-8dec80603c59"
        },
        "item": {
          "id": "21459c29-3cb3-46da-8258-17c4a625e5c3",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "f4607de4-102f-4891-8c9f-42d78f5f2e23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "d310efab-271f-407d-aff9-67b4c4beb5ba",
        "cursor": {
          "ref": "e19bc4a4-353e-4eda-8d2f-a1966765d835",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5903ccfd-385b-4e19-aa86-9a137944858e"
        },
        "item": {
          "id": "d310efab-271f-407d-aff9-67b4c4beb5ba",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "215aa77e-aa6a-4ff8-aa88-e502b88d2aaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d310efab-271f-407d-aff9-67b4c4beb5ba",
        "cursor": {
          "ref": "e19bc4a4-353e-4eda-8d2f-a1966765d835",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5903ccfd-385b-4e19-aa86-9a137944858e"
        },
        "item": {
          "id": "d310efab-271f-407d-aff9-67b4c4beb5ba",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "215aa77e-aa6a-4ff8-aa88-e502b88d2aaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d264cb92-8dbb-4e82-8d11-1456d1017f34",
        "cursor": {
          "ref": "5f45004a-4888-4fcb-84ee-c80299f92f53",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b9d5ad81-69da-4649-bea7-ac9da8e32a18"
        },
        "item": {
          "id": "d264cb92-8dbb-4e82-8d11-1456d1017f34",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "3bcf1ccf-a57a-4a87-b0a6-f5c172893f3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d264cb92-8dbb-4e82-8d11-1456d1017f34",
        "cursor": {
          "ref": "5f45004a-4888-4fcb-84ee-c80299f92f53",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b9d5ad81-69da-4649-bea7-ac9da8e32a18"
        },
        "item": {
          "id": "d264cb92-8dbb-4e82-8d11-1456d1017f34",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "3bcf1ccf-a57a-4a87-b0a6-f5c172893f3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "73ce3e92-099a-4537-9634-bd1d0fd2a1d6",
        "cursor": {
          "ref": "8fb1653b-5106-496b-bb57-87556d467cd9",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f1d15f8d-90bf-44c5-a43e-44124e55a737"
        },
        "item": {
          "id": "73ce3e92-099a-4537-9634-bd1d0fd2a1d6",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "0b468b5b-30f5-4c83-8769-ba1fa7c218db",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "73ce3e92-099a-4537-9634-bd1d0fd2a1d6",
        "cursor": {
          "ref": "8fb1653b-5106-496b-bb57-87556d467cd9",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f1d15f8d-90bf-44c5-a43e-44124e55a737"
        },
        "item": {
          "id": "73ce3e92-099a-4537-9634-bd1d0fd2a1d6",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "0b468b5b-30f5-4c83-8769-ba1fa7c218db",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f64b2457-aa96-45f7-a1f4-626e1e9acb86",
        "cursor": {
          "ref": "17ad9cf4-ff05-4a48-9440-69cc195c24f1",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bfcb15ac-4a64-4691-ae48-19956fa56cdb"
        },
        "item": {
          "id": "f64b2457-aa96-45f7-a1f4-626e1e9acb86",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c3c835d4-a1c4-435a-b3cd-282918456838",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f64b2457-aa96-45f7-a1f4-626e1e9acb86",
        "cursor": {
          "ref": "17ad9cf4-ff05-4a48-9440-69cc195c24f1",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bfcb15ac-4a64-4691-ae48-19956fa56cdb"
        },
        "item": {
          "id": "f64b2457-aa96-45f7-a1f4-626e1e9acb86",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "c3c835d4-a1c4-435a-b3cd-282918456838",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "78a04ed1-1c91-4157-bfb4-b387ae9efea0",
        "cursor": {
          "ref": "5cbe6acd-96e9-42cc-bc99-4dcc67359b6a",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "700c0e32-2017-48de-9d10-ccfecc439f6d"
        },
        "item": {
          "id": "78a04ed1-1c91-4157-bfb4-b387ae9efea0",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "44c443a4-defe-4ad2-888a-5112084c7b7e",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "78a04ed1-1c91-4157-bfb4-b387ae9efea0",
        "cursor": {
          "ref": "5cbe6acd-96e9-42cc-bc99-4dcc67359b6a",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "700c0e32-2017-48de-9d10-ccfecc439f6d"
        },
        "item": {
          "id": "78a04ed1-1c91-4157-bfb4-b387ae9efea0",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "44c443a4-defe-4ad2-888a-5112084c7b7e",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "4531eb1f-6605-4624-9e22-724f5b189f82",
        "cursor": {
          "ref": "f8bdce9a-9659-473a-9861-818b64b354be",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "17e552d8-63b7-43f2-8d9f-8cf9da40c1f3"
        },
        "item": {
          "id": "4531eb1f-6605-4624-9e22-724f5b189f82",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "55e94a2b-fb14-4976-a9e6-49ae3477eec7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4531eb1f-6605-4624-9e22-724f5b189f82",
        "cursor": {
          "ref": "f8bdce9a-9659-473a-9861-818b64b354be",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "17e552d8-63b7-43f2-8d9f-8cf9da40c1f3"
        },
        "item": {
          "id": "4531eb1f-6605-4624-9e22-724f5b189f82",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "55e94a2b-fb14-4976-a9e6-49ae3477eec7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "33d141f8-4a49-485f-a0a5-ead9930b7964",
        "cursor": {
          "ref": "562fdb01-c81e-46a6-8b5a-77a25b18693d",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2e226942-a9b9-4cea-8e5d-37972a9bfb63"
        },
        "item": {
          "id": "33d141f8-4a49-485f-a0a5-ead9930b7964",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e7c0fc67-6b4e-492c-a3c3-57d1cf5320a5",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "33d141f8-4a49-485f-a0a5-ead9930b7964",
        "cursor": {
          "ref": "562fdb01-c81e-46a6-8b5a-77a25b18693d",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2e226942-a9b9-4cea-8e5d-37972a9bfb63"
        },
        "item": {
          "id": "33d141f8-4a49-485f-a0a5-ead9930b7964",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e7c0fc67-6b4e-492c-a3c3-57d1cf5320a5",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c790cb67-6cbd-432a-8a50-86074e916c69",
        "cursor": {
          "ref": "22d97a97-e245-4a63-87a0-55859e9111f0",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "caa0be4c-4c92-4cd6-8743-8bde2ffabf1d"
        },
        "item": {
          "id": "c790cb67-6cbd-432a-8a50-86074e916c69",
          "name": "credentials_issue"
        },
        "response": {
          "id": "197a1973-eaaf-4cf8-946b-2a56f78de696",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "c790cb67-6cbd-432a-8a50-86074e916c69",
        "cursor": {
          "ref": "22d97a97-e245-4a63-87a0-55859e9111f0",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "caa0be4c-4c92-4cd6-8743-8bde2ffabf1d"
        },
        "item": {
          "id": "c790cb67-6cbd-432a-8a50-86074e916c69",
          "name": "credentials_issue"
        },
        "response": {
          "id": "197a1973-eaaf-4cf8-946b-2a56f78de696",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e154682-fe95-42c1-8b73-b978d20151ed",
        "cursor": {
          "ref": "933ab70a-9524-4edd-9af2-bf52766c7896",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ae82fbbb-42fd-4c0f-bdc9-cc83862bba74"
        },
        "item": {
          "id": "5e154682-fe95-42c1-8b73-b978d20151ed",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "151ed298-f56c-4ce6-8e80-66c97679a008",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "5e154682-fe95-42c1-8b73-b978d20151ed",
        "cursor": {
          "ref": "933ab70a-9524-4edd-9af2-bf52766c7896",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ae82fbbb-42fd-4c0f-bdc9-cc83862bba74"
        },
        "item": {
          "id": "5e154682-fe95-42c1-8b73-b978d20151ed",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "151ed298-f56c-4ce6-8e80-66c97679a008",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "6b9ca545-704c-4c3a-9ca0-ba0dc2a4a9f0",
        "cursor": {
          "ref": "aab7758e-9ba9-4817-8e5e-6ba5b9f66475",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "49487f9d-6b37-4903-9be1-2e2d49e99c50"
        },
        "item": {
          "id": "6b9ca545-704c-4c3a-9ca0-ba0dc2a4a9f0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a16adb03-6410-4b85-b2d7-de21ba342197",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9ca545-704c-4c3a-9ca0-ba0dc2a4a9f0",
        "cursor": {
          "ref": "aab7758e-9ba9-4817-8e5e-6ba5b9f66475",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "49487f9d-6b37-4903-9be1-2e2d49e99c50"
        },
        "item": {
          "id": "6b9ca545-704c-4c3a-9ca0-ba0dc2a4a9f0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a16adb03-6410-4b85-b2d7-de21ba342197",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cd550f-cdf9-4a02-be57-89e05eab1588",
        "cursor": {
          "ref": "d0e31ea8-4926-481b-8dd3-336696a3da6b",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bd273417-9df9-4e9a-a3ca-df9e7c343023"
        },
        "item": {
          "id": "54cd550f-cdf9-4a02-be57-89e05eab1588",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "14afe398-a124-427f-a865-1a308826c4c7",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "54cd550f-cdf9-4a02-be57-89e05eab1588",
        "cursor": {
          "ref": "d0e31ea8-4926-481b-8dd3-336696a3da6b",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bd273417-9df9-4e9a-a3ca-df9e7c343023"
        },
        "item": {
          "id": "54cd550f-cdf9-4a02-be57-89e05eab1588",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "14afe398-a124-427f-a865-1a308826c4c7",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bfa1f2a4-c873-410e-b3a4-1ee674b370c1",
        "cursor": {
          "ref": "f8fa9d9e-30f6-441e-9145-0d95178dc020",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e29e2cc4-84a9-4e26-8bc6-b6fddb76de1e"
        },
        "item": {
          "id": "bfa1f2a4-c873-410e-b3a4-1ee674b370c1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b77865fe-9334-455f-9c7a-c4e078836d62",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa1f2a4-c873-410e-b3a4-1ee674b370c1",
        "cursor": {
          "ref": "f8fa9d9e-30f6-441e-9145-0d95178dc020",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e29e2cc4-84a9-4e26-8bc6-b6fddb76de1e"
        },
        "item": {
          "id": "bfa1f2a4-c873-410e-b3a4-1ee674b370c1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b77865fe-9334-455f-9c7a-c4e078836d62",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b8a2da-644b-4b09-a5c0-3a1f3ebf993c",
        "cursor": {
          "ref": "d3eec882-0069-4181-bc35-ea137f806389",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f4f3f7b2-af59-4346-9dbb-7b82cc30d671"
        },
        "item": {
          "id": "98b8a2da-644b-4b09-a5c0-3a1f3ebf993c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "58e289fd-4bda-4958-ac21-70f72246134c",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "98b8a2da-644b-4b09-a5c0-3a1f3ebf993c",
        "cursor": {
          "ref": "d3eec882-0069-4181-bc35-ea137f806389",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f4f3f7b2-af59-4346-9dbb-7b82cc30d671"
        },
        "item": {
          "id": "98b8a2da-644b-4b09-a5c0-3a1f3ebf993c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "58e289fd-4bda-4958-ac21-70f72246134c",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5e15f9f6-8f8e-4036-93e8-49481e22820f",
        "cursor": {
          "ref": "642a1130-37be-43ba-a315-0015cc7e4fd6",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "25c55d3a-96e5-4c88-b502-38e4fe8e554d"
        },
        "item": {
          "id": "5e15f9f6-8f8e-4036-93e8-49481e22820f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "908373d3-1a91-4af2-8271-b986516c7037",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5e15f9f6-8f8e-4036-93e8-49481e22820f",
        "cursor": {
          "ref": "642a1130-37be-43ba-a315-0015cc7e4fd6",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "25c55d3a-96e5-4c88-b502-38e4fe8e554d"
        },
        "item": {
          "id": "5e15f9f6-8f8e-4036-93e8-49481e22820f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "908373d3-1a91-4af2-8271-b986516c7037",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b33382ba-c4f4-4043-8c71-db39c5a841ed",
        "cursor": {
          "ref": "557e675b-17dd-4ab7-98fe-b4829a6b951d",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0998bb61-d4bc-405a-b789-5ed44db96a40"
        },
        "item": {
          "id": "b33382ba-c4f4-4043-8c71-db39c5a841ed",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "eebfc0fd-f8ae-4c91-9bf4-9f45bd655e3b",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b33382ba-c4f4-4043-8c71-db39c5a841ed",
        "cursor": {
          "ref": "557e675b-17dd-4ab7-98fe-b4829a6b951d",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0998bb61-d4bc-405a-b789-5ed44db96a40"
        },
        "item": {
          "id": "b33382ba-c4f4-4043-8c71-db39c5a841ed",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "eebfc0fd-f8ae-4c91-9bf4-9f45bd655e3b",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a9e31b12-680a-4329-ab14-a8a6643ad1f0",
        "cursor": {
          "ref": "5292670a-a988-475a-8107-4befbf23a991",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9d3c78ac-be20-4bb0-ae43-ec17bc9a10c0"
        },
        "item": {
          "id": "a9e31b12-680a-4329-ab14-a8a6643ad1f0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a9e39571-ea31-444e-85fa-969a8acdc875",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a9e31b12-680a-4329-ab14-a8a6643ad1f0",
        "cursor": {
          "ref": "5292670a-a988-475a-8107-4befbf23a991",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9d3c78ac-be20-4bb0-ae43-ec17bc9a10c0"
        },
        "item": {
          "id": "a9e31b12-680a-4329-ab14-a8a6643ad1f0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a9e39571-ea31-444e-85fa-969a8acdc875",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6b34f97d-f62f-4dca-8701-547504b32a9a",
        "cursor": {
          "ref": "3dfb8603-f95c-42f7-b20d-18a404d97db6",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fe059970-31a8-4aaf-84d4-a812fb8ecbd8"
        },
        "item": {
          "id": "6b34f97d-f62f-4dca-8701-547504b32a9a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "8e6f2074-63d7-49ec-ac7a-5fae7f7b481f",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 45,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "43cbf6d4-7c31-44b9-81d0-0de9ef016b53",
        "cursor": {
          "ref": "eed6682a-3e01-4ee1-a6c6-8f4a418591d8",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e0fae52c-ebf4-4791-847a-8b17e58f69d8"
        },
        "item": {
          "id": "43cbf6d4-7c31-44b9-81d0-0de9ef016b53",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "077c4122-eb12-45a4-bd07-f0bb9ccd987e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "43cbf6d4-7c31-44b9-81d0-0de9ef016b53",
        "cursor": {
          "ref": "eed6682a-3e01-4ee1-a6c6-8f4a418591d8",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e0fae52c-ebf4-4791-847a-8b17e58f69d8"
        },
        "item": {
          "id": "43cbf6d4-7c31-44b9-81d0-0de9ef016b53",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "077c4122-eb12-45a4-bd07-f0bb9ccd987e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "577962e5-de80-485f-afb3-2a74f6539ab2",
        "cursor": {
          "ref": "35a27cd1-bc1d-4479-a8a6-f24b805fdbfc",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "df744f1f-9573-4283-8daa-4afcc7e99753"
        },
        "item": {
          "id": "577962e5-de80-485f-afb3-2a74f6539ab2",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f23fa678-a827-47c8-81f9-cdd01e8a68e3",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "82801bdc-64a8-4bf2-a62d-4cffc9752492",
        "cursor": {
          "ref": "52f623fb-00de-41aa-9d5e-72e1b13e20c6",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c0ced291-71b6-4d2d-bc26-77badf441dcf"
        },
        "item": {
          "id": "82801bdc-64a8-4bf2-a62d-4cffc9752492",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "434f5d7c-4f3c-429a-86d7-d6938762c134",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "82801bdc-64a8-4bf2-a62d-4cffc9752492",
        "cursor": {
          "ref": "52f623fb-00de-41aa-9d5e-72e1b13e20c6",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c0ced291-71b6-4d2d-bc26-77badf441dcf"
        },
        "item": {
          "id": "82801bdc-64a8-4bf2-a62d-4cffc9752492",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "434f5d7c-4f3c-429a-86d7-d6938762c134",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "502bf902-1664-47b8-b0d2-b54b9115f943",
        "cursor": {
          "ref": "89870993-1697-4d14-ab81-41dbd1777599",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6d871f9e-7dec-4d7b-b9d6-e40053b12510"
        },
        "item": {
          "id": "502bf902-1664-47b8-b0d2-b54b9115f943",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7d19eb11-3e11-4d27-b66e-40ef0e6e926e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "6423e126-d98b-4242-9e8f-7b8a660c4d0b",
        "cursor": {
          "ref": "28464b08-a2ed-4e6e-9025-750952b3bc1e",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "322d3164-eb63-43a4-b743-101a60fbd890"
        },
        "item": {
          "id": "6423e126-d98b-4242-9e8f-7b8a660c4d0b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5252cdbd-7dc1-4777-984f-0d31033ab235",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "6423e126-d98b-4242-9e8f-7b8a660c4d0b",
        "cursor": {
          "ref": "28464b08-a2ed-4e6e-9025-750952b3bc1e",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "322d3164-eb63-43a4-b743-101a60fbd890"
        },
        "item": {
          "id": "6423e126-d98b-4242-9e8f-7b8a660c4d0b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5252cdbd-7dc1-4777-984f-0d31033ab235",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0e506488-e16d-4d97-8686-d3c3e9f26d0c",
        "cursor": {
          "ref": "89d9b8c6-3ed5-4f82-936d-5cca36e48fdf",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c16291d5-0af4-4a65-b3b6-53ae1649edf0"
        },
        "item": {
          "id": "0e506488-e16d-4d97-8686-d3c3e9f26d0c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "32e7c607-f9de-4c78-a089-39696ddc94e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "5163b817-accb-4c5e-8abd-1487fd55761c",
        "cursor": {
          "ref": "ef18e7e0-1b82-4c63-8519-49f23257edc2",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8ba042d4-71d7-436f-8014-af83744d181a"
        },
        "item": {
          "id": "5163b817-accb-4c5e-8abd-1487fd55761c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fe2ab77b-6566-4204-a4da-7d4ea513d471",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "5163b817-accb-4c5e-8abd-1487fd55761c",
        "cursor": {
          "ref": "ef18e7e0-1b82-4c63-8519-49f23257edc2",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8ba042d4-71d7-436f-8014-af83744d181a"
        },
        "item": {
          "id": "5163b817-accb-4c5e-8abd-1487fd55761c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fe2ab77b-6566-4204-a4da-7d4ea513d471",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "fed29c71-4614-431e-a2e2-6945fc18103c",
        "cursor": {
          "ref": "16fd23d1-4427-4111-8e0f-ca3efc710352",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6fd65be4-1b4f-46f4-930f-0f945e61546e"
        },
        "item": {
          "id": "fed29c71-4614-431e-a2e2-6945fc18103c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2d6cd1ec-2f6d-4c12-a0ab-9e47b80e4461",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      }
    ]
  }
}