{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e80ccabe-7d72-4570-8477-e7d4b6ec9816",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2eed2685-8b49-4098-bbb5-a321684d6f2a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d739e86a-0191-4f31-92d1-2580c468369c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cc3703aa-fd1a-4826-a9f2-496e30687185"
                }
              }
            ]
          },
          {
            "id": "828e9dd3-0869-4f93-94e7-e6791b44db98",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1985161e-d0d7-43f4-a276-b0886277c4ec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "67e8097b-b810-48b5-94da-e5ec2925d19a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "da3f8e23-3f7a-4ff4-8433-4f49dbb9c763",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3eec7118-3254-46b1-9844-5a3b93517738",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5947e061-c575-4952-a9a3-5d0d8362963d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "217c6a7e-7f2b-4950-b019-b2581be44286",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e1e29ab-9e73-4058-b228-dad00ce29ca2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7fcc08c5-8de6-49d3-b11a-f04d4beed73f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9bac993a-954e-417e-9b94-b601113c30cb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61602376-06b4-4f59-aae3-9b5b7d9a9d78",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77e3fdd0-12b8-412d-aa76-114ca9f068c7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "257d8887-c175-494d-b88b-dcd50b80c5c4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6d247b79-8b56-476f-ad3c-3d9d88614778"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad0b65b4-40e0-4075-b9ab-3ead2fcd2cd1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3921f1c5-beb9-40d2-8ffd-bfb3bca7cd33"
            }
          }
        ]
      },
      {
        "id": "96ac6c38-774c-4372-b256-baa249cf0cfc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9eedf37e-08b8-4aba-9878-981a539f7447",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25134500-c77e-4605-af43-a5cc32b7decd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c464aedc-6f5c-403f-97b6-d339bb5313fa",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b89ad27-8adf-49de-9709-61f78f55eb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b7eec22-6383-4ad6-9405-eea65293fbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f9b048-1415-4a7f-a55f-5fd6ba675b38",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a7483d-c11c-4b83-a198-b4461c59f81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c5c7ab3-0e6c-490d-8f82-46631b3bd096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1492be9e-85a1-43ad-af0a-e95ec48eb7a2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6b7779-f90e-4d68-b121-05a8ec81b2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3e860f7-5c75-4a20-abcc-07eebc00feb5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e4e7fea8-bc44-476e-9de6-8a5c967bb510",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf9f4509-8264-4ec1-8281-ff948c5c9d92",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4128b8ef-a386-4c5d-b1e1-bf3de117b6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb841a5c-d3d1-4f83-9957-7aeec86fd975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65ac986-02e1-45c4-8382-22a59c19f2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d3d157-a1ef-457e-a600-421b189b2712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec86d435-5ba6-4c99-a294-728a3d548ffc",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20027261-b9bd-4480-b1fa-f97026b56c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0fe90a7-5f68-4f4d-9fc1-dc4362203cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78b8313-a84c-4ca3-980f-36267af90b37",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "dc8eb902-3552-49cb-af23-0faf4cff618d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1d6ba6d6-dfc1-4b37-ae57-0c579eb08f9c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49a2b350-59cb-412b-bbe8-667932f7f3f4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71824b14-9979-4e33-96c4-2534c496374e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5adc4403-3107-444f-918c-8cd4f713c45e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "283e1b1e-69b8-4d2a-a724-86a282e2505c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "82f43d35-4d70-44e1-bfc5-228550bac0c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bec4571-7c2d-4fe5-9302-21722b8b20a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "365ff795-16f1-4430-9f88-200cd3d54e6b"
            }
          }
        ]
      },
      {
        "id": "3c858856-52c8-40da-bc99-7bff243aea46",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "da3b0dad-2410-494f-935c-ff467d26719e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4e8f75a-444d-483f-aefd-9b7f8084d66e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "72eac9a7-4766-469c-9cf8-e99de0381e47",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff077195-68f8-488b-8668-373d41bde050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e95d5b-00f4-46b4-88e3-59a91964377d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0347bbed-31f5-40ee-b9ab-bc141d1a622a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d62031f-a216-4b21-a7a0-1e78bd57e151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdff66ae-9f22-442c-ac20-af0f7d0b18ca",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f445bbe2-289f-4f5f-8ad1-3083bdc4da3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a840c90-96f9-4de0-ba01-4bb858a7f2a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8f875a-2dec-47c3-8813-5294d28917fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96642331-6c61-4d18-aed0-689bd68dd77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242f1673-b614-4d9c-b43b-ef16f6c2fe73",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc3db95-4e7f-40de-bb9e-997a87e2ead2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6fbdf1-26b8-4862-9c3e-1672088df321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e05aeb-e6c9-444c-8808-0e7d9ef95b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9719a7e1-1593-4daf-92ac-52abf816f1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c342c8c4-b91b-481d-9a29-f8f27ad1b1a9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42bff68-097b-4ccb-a56b-9a77fc6d1208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728e2b9a-24cf-4427-bb40-4f9b8e594660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167e49d3-50e9-4608-9c77-eab709ca4293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63c15066-0163-4ff9-969b-a2a67aa8e45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d909f92-b4a4-4906-8c4c-59c9309f6d51",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6039c19-934b-4b6d-8b2d-4439bcf9e352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49391c58-39d7-4c51-b924-2f34b499b737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7d9474-d668-446d-910f-cd1954ccf3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "586c1485-63a7-42b5-86c7-219e930eec3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b9c0c1-9fbc-471b-82bd-c14a2414acb2",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12737de-2aa3-479e-b21d-3eaebed568b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0914f1-dc91-4bfd-b8e7-f6e545d35df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3107d11-d6e0-4cfe-8a38-b8f5f2828cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01e2f673-2c3d-4684-9e32-fc01a046f9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55172223-8c85-47cc-952b-5ddb56cd7b0d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce1ce80-85d5-415a-b003-ec1e1cbd0a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd00d5e5-e6d1-4e7e-8921-c9f44897880f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d184fc83-d3ce-4532-9d1a-73f3edccca72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41e87231-57d5-40ca-802d-27a95c32e373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a100d25-1784-4a16-89fa-3e6511be3c9c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccc9688-45d1-4bd1-917a-4cde57158b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93158b1c-e06e-4f63-8700-641c0dd3443a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a258b2be-0ec5-414f-bf59-3798939cd7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5287786-6873-4a8a-99ca-b827b949bd52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3e1800-10f5-48ae-bb9f-197af3c755ff",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9519345-0131-4776-b39b-dcdc027d0e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac64897b-04d3-4eca-9216-5be2012baa29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b166b1a0-c68e-4b98-a672-36f5c579df54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f999d4c-28ef-439b-8156-e4a6c5f3432c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e7ec97-2886-4a63-bb20-4943f5102bc6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f2d94a-d7e0-48e5-8c3d-b12aa72fff79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcae8432-43ef-4759-8d65-880ed8c162ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8478db4d-10f3-4dbf-96c6-c2c6b51dae3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5a07b6d-fe41-4551-968c-0697fe5b29c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0512052f-1044-4719-a058-b2f3741fabb9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1714cd84-c3fb-4171-8218-852513583ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17887c98-42f7-48c9-93b5-c090b15b8b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1530d4-0ac8-40c0-9a65-632e535761ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03b80768-d074-47a4-b227-37cef1739d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebcd2fe-d8e8-4595-a5f8-84ea8fc66e12",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6dce09-2111-4caf-991d-a7cb9f5f7774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c84e41f8-c015-446e-b9c2-03ca031e49fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1c8c7f-2b59-4243-b18c-d24e7063c20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "075f2ea1-b567-48c0-a1d0-b2733e7cca2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756d4700-0b12-462f-84aa-a5a6599a8988",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6337c13b-d7cd-440c-8ef1-9e5952fd9278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90ee54a-a8f1-4ca7-8981-ad095218e040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ab8a76-76fc-46a2-aa3e-575f49266642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7814570-713f-4bcf-b221-21a357d530f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0713cd-a012-40f1-9824-5b349cd6f14d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0d5ee1-61d4-4a9e-9dca-88f5fa535ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4547d8-61a7-46a0-87e4-e57c9273eb79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8ee9d8-6a01-4d90-af30-cbb0e9996059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0b236b6-1a2c-4229-a62a-eb1541ef9835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8db7a02-02ab-4dff-b130-61b81ced5c07",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05892b13-20c7-408b-a091-5267565ef74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7fbf89-e6aa-446b-8447-3d166fc80aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bd5e48-c7f3-434b-a0d3-ca9c05135e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c8ac527-c49b-493d-ab56-b7e87ed91c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa27f14-1977-42ad-9fe0-ce42d985f7ce",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2273f2b1-d4b4-4212-a0c6-897a663ad44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a778df2-4e95-4ca7-bde9-4c37eb7c97b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295c8929-8e67-4cd0-ad4d-a7d7e6b22175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5b065b2-b329-4a70-aae8-09256b8d4d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedad612-8152-4eb9-9897-22107ca7aa83",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fcf6069-7c19-4f8a-afae-5fa6d43d32f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595b9268-dd4d-4ef4-876f-7d6f3a804a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc286d7-6411-494c-9d7f-79eabb023ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38d28f5d-dfd9-4f28-970b-4bbc2a859848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a1cea2-3906-447c-a5de-3071b21f9a6b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff8f530-dc01-40b0-9424-901c81da6589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c9dbd6-0419-468d-a709-e9dd55a3f0e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b223ae-7631-4797-9e3b-2214a7bdee4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0864dc82-91fb-4304-9b95-d4c437ef9706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a4babf-589d-4aa3-8b03-3d5c3b096a98",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f520009-6122-48c7-aaff-bc2166d20b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a254513e-dabe-4401-a88d-4f00ccd78abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbafba27-a5ad-46bf-88c7-18e1f4ad5da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29a16cee-83f4-4736-8efd-d657bfd6efe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786ed597-144c-4361-909c-9598600f79d6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cca489-b150-470c-a86b-370824ac02fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3424a8-5496-4220-bb98-724d84ada9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae963a8-5344-49b7-be05-e3d64b1721bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a30fabc-8723-46fa-9233-3d904d031e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b292e78-f074-4008-bdd1-fe076067f7cb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671f818e-6f6d-4f13-be20-0f02ddaeea7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeffbb08-b70e-4672-a62b-c0c33bcdba38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89105a09-efaf-446d-b39b-c3c5602d4690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "65c6d91b-841d-4584-b357-ad6daff70f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5506e8d1-9dbc-4472-aef0-a609eff744de",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b806cad-4dda-4c6f-aa19-e8bd6743ce32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "095ea322-423b-460c-986d-eaf100984989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302feda2-1d34-485a-a9d4-7b2ee78c7e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88009427-86ce-4f7c-a99d-75e6c571b269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a7a828-3b68-4154-9ee3-d635aa7891d8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4488944-02c7-4e31-8458-332940bda749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8427f2f1-4864-4285-bdb6-f092b6cb531a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd704cb-6bf2-4d43-96d6-c816bca8f796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77eb3104-8635-42b8-af12-81b143f851c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817cfc0b-6f61-4af3-bd4b-7235dfa46586",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f667de-176a-42e4-8050-f55f2d29d475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2215fa2d-cbaf-4f73-9a26-3b89373f9772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d67338b-174f-4dc7-b5d2-e07b4a6555b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b56372e5-831a-4a0f-8393-245c9f803332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea62b321-d9ae-4a86-b533-359e1bf47da1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b3f052-014a-4a77-b3ba-ca5ef65bde4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e0bb97-59f2-44cc-969e-3f8a3c27ddf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d93f62-0333-468c-94a5-3bfdea908db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad047b72-c949-449f-ab42-5617bb97fcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad26367-5863-4218-8150-da79dbd33098",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ea41f1-f504-41aa-96ad-9d5aa3972b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e04388-8b0d-4163-9f05-d58eb2d0b322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e258ee44-f43e-40ac-a30c-6b91630e7326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84a0143d-f697-4ce1-ac75-6eda214a341a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670a5fc9-30d3-4f9f-b11f-648b0ef08b24",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bf557a-e582-4d76-b0f4-f9a994009e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faca384b-c8f8-4701-a9ca-e277bf9214c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921fa49b-f0d8-4687-a65d-847165fa36ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1c58f2-269a-422a-a635-ee356305e8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b11fe4-9b2a-46f7-b52f-2a656718f35a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb58d1bb-8b01-41da-ab43-59eab55a6635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9daf89b-9e44-4c9a-be06-201877672cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4074b5-29b3-4af9-8908-0281d274d37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fdacd76-eaf9-4efc-9325-2100fb7941f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa32d81-2bb5-4f8f-8f68-9ded1cee4c74",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fdaaa5-631a-4259-be01-fe55d36701fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a36e771-af32-4f70-abd9-536448d57831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1026a65-bf0c-4cb0-9a40-cbb85866a49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a16f70d-df45-4943-a83e-c221520ad06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8beb513-eaa2-4b49-b8ae-4cc90c0646f1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e265ba-0c1a-4217-ae82-9f9b72b513f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7663c0-28a5-4f5c-ae7c-5a40f85828f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365277bc-5929-4ac7-955f-a1700057f733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7436302-6c31-4331-ad66-9ae130fd7263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd72c0e8-b3c8-485d-b236-19873e3bd5ce",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1879ab5f-f1a2-480d-bdbd-04c92cdb9d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883d26d3-38ad-4357-8603-1e9928502de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3b18ea-e91b-4c7e-8629-6e0f43b912fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1301c656-1efe-4198-8677-dc194c96c65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6236ae99-01b7-4d8a-964c-6166eb15bbca",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc993813-3769-41b3-a772-a96d8f2d5ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4120ab-bd0b-41d3-b1a8-1d03588a22dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354833ac-c329-425d-adda-56e1e43aec40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51c9dbf1-8b36-460c-b54e-8fd752546022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb005fc-2ecd-4aca-ab8b-e856ed07389c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33e5318-76be-43b1-99d8-1b1790c81451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ec06e9-6e40-4115-9b65-2bfd9bdf30dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770cf593-7829-4ffb-b80e-174fffda52ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9e7749-d4b0-49d2-923e-be4e0740c6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b438987-68d5-443d-a23d-e3c854d70a3e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6578858c-468a-4513-8b08-ece15687f359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da09b632-f2f8-439c-bebf-397ad09d65d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e938bfe-25a9-4ec4-88ae-517e5043a69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73e7520c-d450-4413-96e6-be096c97b176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d08030-966e-4c20-b3da-ed6ece0f5621",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af472f3-6d66-4d3f-8130-df44642bb254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1356d97b-e284-4663-b46c-8e1881787d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab71bdef-9fe2-4002-8719-85ed5253d4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7c13cebd-7189-4f20-a376-ca5481ea8f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e0f87e-dc6d-4469-b9f0-6a3978ab5ea2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5d45e2-6b7d-4cda-8495-42ce64be07eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45f8a077-4d20-496b-a0c2-be5c6a6f7eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7fc83b-7ece-425b-9130-68250c3126f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26e1c419-dbab-43ec-8430-51da6ca46c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4945f73f-f553-45d2-8720-6edd43897a94",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c1a982-7660-4616-a070-877200c44eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9a698f-0493-4579-aff8-b5b328cbb55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6729d7-34a7-4cbf-9a4c-82976edd62d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "acc67c57-d093-4b4b-b6b7-a7f2d4c602b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa00fc4-1cd4-435a-aed5-9e43e57ba3f4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8e1c43-7267-46f5-b610-fb8e126fab92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e182f9-6053-46b9-a459-b68e6059bcd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1171e1ec-fdd9-4213-a53f-81c4003cc1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6316bb-a13d-4207-b758-20fc60bfaa8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efe5bca-279f-4f13-919d-0d7a988a61d0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43fdddd-0ba1-4dba-a20c-cb4a18ae84bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bc1faf-565f-424c-9086-de0805ffd534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f47efa-9d2a-4cb2-b4c0-99f82eabd213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4f4b01-77fb-4122-b53b-e813708af11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66672ec-d09c-461b-aaac-e2d10d98def9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1858d0be-6373-4d88-adda-57745dbf5ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f956f2-5eff-464d-b3c2-ebd50bfa5bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c3e0fb-348d-4ba4-8480-faddfb0ba9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e66ca542-7836-444f-953a-1e32e5de58b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b0b4be-9916-4259-8701-26dceed7ae9c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd332c15-7418-4928-81f0-9c13f908710c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e8d0ff-5ba4-4f5d-9008-24ab63d48439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691c4898-c5c1-4eaa-881a-76584b026a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f69d7397-a637-4ee9-b08b-49c9ee8fc468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb9567a-0883-427a-b6c3-c12c50836f2d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9118364-93d6-4329-a10d-5d3c00cb3252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0ba101-186e-42a4-9872-5ff4d87dce1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238e9982-7aa6-4ddd-ad15-498323ceab3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "930c3b17-ffbe-4505-8aba-3e871fa92d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a34da4d-f173-4d24-a006-ae1b933d9834",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d78b296-9ce3-4261-a61b-6d570dc75e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97072eb8-a27b-4b41-a9ec-daf2212a351e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52870def-fb25-4d60-8257-b6c16dea65a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca79c16e-e87b-4003-b43c-c3ec95084823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82ac0eb-a4d2-4a90-91f7-3d24a1ec91eb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27101d76-892c-4e16-84ad-f0a4913f1ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30888db-feec-4568-8a48-0533cf16ced3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e67262-2f0e-4eac-b373-f86f4a680a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2720ae26-5c97-4520-87d5-049f8162f57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8689ab71-d817-4e15-a1e1-e54ce57d1b02",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6272a43-6b37-4f5b-9913-4738955a77c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87e5e06-20a4-42a1-891a-30fe53806f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6039627-4f66-4727-b7c4-c353222fce0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "89ff102d-8498-495a-b41d-7c07939610bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37a46ea-5c24-4bd8-9ff5-ff01b53a9696",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf332ff8-6baa-4c4e-8656-c15faf3340b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54cfad0c-a9a3-42d2-9137-06b8f875b6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a1cacb-8231-4b96-a1c5-2632dac20777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9809bbac-58c9-4aed-9e91-77ec3d320b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fcb7a4-567c-40a9-8cf9-f529a57d7adf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475b75c6-bbd8-46ab-8ba2-b4529ddd58cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e0932a-4fd9-42a5-a8e3-3c180311b59e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed2d0db-a660-44ce-944e-bd72332e2d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "688226b6-fef0-4a20-abbc-7d2eeaae6ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5236512-12f3-4498-89e8-b8d3a9508eb6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23c9caa-dc04-4789-bc15-07726b2841d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a760c570-8ee3-4f02-a5e7-c74c6960384b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293ac868-8a39-43d7-b7ce-ff02b348ced0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07f76df1-b178-48e9-86f8-13abe6fef104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1f669e-ef26-46b0-93fa-93a843a57ae7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2059183-13dc-445f-b1c5-6f55a5a01b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24ce658-fed8-4e60-8c86-1eef28696992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2175e264-2926-4f7b-979e-6745dfdf1c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e680f99-3189-4ce8-907a-c0d97ea10bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3f7e7d-45e7-493f-9199-73a59b0080b4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f8078d-de02-47a9-9d7f-b17d77af3596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88131b45-aba5-4c1e-8148-0134c164b738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbe8b54-f435-4bde-b88c-8cccca6f50df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1e47cc-a819-489d-8f3b-1ddacd008491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824c9738-4719-4cd4-b236-762ae56c9a64",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cde7e1-7f4c-4848-9364-f824fa3d74ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f63ed7-d232-4403-89e6-6a10764869ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce1ab41-caa0-4400-b0b1-0eb83472fd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "48e44c67-841a-4a25-bff5-8b0813d93891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864e12fe-8d7b-401f-9394-daf37ce5086c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606dbdd2-cead-4fda-b9ca-7a2eb8ac960a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c062d65-da7c-40f0-ba3a-358401874853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ee10a6-7051-4c5d-aab7-ec9933a92467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf1cffe-e80a-4215-906b-b30f9c333a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77aaf47d-151e-43bd-8b30-d92a592823a7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d95a65c-20ca-4980-a848-7a10efad5653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ab94e2-362c-4791-9f02-93cbcfc0a9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b13400-989e-41c7-9224-6dabc51bc6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef0e2ec-dc60-404b-b7bd-da325bd8778c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4111da-2fa0-4a05-a926-0ee6e1e5c800",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bebabdc-8dac-42d5-9d58-f63d99f366ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09880b9-b224-4b12-be6f-e0ad2be2718c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1387ecdf-08bf-4167-8871-6169a73dd290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3f42eb-e423-447b-86d7-860ced106d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36639dec-7a6f-4155-91d2-423783b35b68",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6a60c9-bfb5-45d6-a4be-cc9db0bbee62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0809473c-de37-4b28-bddf-aecd5e058383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d36dff-f8a5-476f-bcda-d0b995bf11e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d02aa18-9df2-4116-a66b-2290341e65b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610c4bd8-dcd4-4cd1-90dc-6f3c3f0c8393",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702aaa81-6b7d-4a4b-b62c-48bac825df95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69843858-83a7-46c9-90fa-2300a6dd5cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f36abd-5b79-4a31-b07a-ebd34f7341c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "87f2eced-cfa9-469f-a09e-cdad1688cbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fcb491-9a48-4cf1-b256-41cb2651eab5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4858665b-5004-459a-88ea-82643955ccee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e7e1aa7-6cfa-41c6-8f75-94c7520d8bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a42b82-3829-40c8-9603-08a357a7ed55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d53b6dd5-f6df-4a65-868e-84878eba9e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62c4ebf-0eaf-41c7-bd8f-c07cee0059f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7420d17-0646-4921-9807-b0b9eead6be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b9e862-78ab-467e-ae14-60a9bcec8c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85d0020-bfef-4b15-bc58-782f1f59c722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d2bdd8-0856-44f0-92b0-c2edee26bb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09f5395-e3dc-4cbe-b2e6-e350d7ddafbd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d4219f-9d7c-48e9-93d9-2526348d9926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dbfcffd-4171-48b0-85b2-caeec76503f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b7fc51-2eff-433b-b0c0-ee2717601a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9e89cd-a63f-4c47-b569-0aaebc33afca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39aa48ab-078c-4dbd-a3fe-fcd7051eeb64",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa875a35-69bb-4696-80b3-99a9d822bae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98ebf1d-4add-4c77-b146-69b880c440bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9c3291-8ab1-4135-ac10-508560100f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5e1a4c-8052-47c1-9860-546fc46d405d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25380c98-1dfd-4898-9e6e-d15820475df3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d951e6-6207-4c1e-9c1e-3dc16e0c9a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1c27c1-f121-4200-96e0-dd69a7a17f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a2baa2-937e-4999-ae21-6e3375071853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c083b1f-ab8c-4ca2-8a80-189594bc48ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3caa58b8-d23f-4810-b182-5db2cd313981",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e898c86-b9a6-49f0-abc6-5a2f116250b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b4f14f-bc91-4a7e-a800-1c2bd7832f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb6f949-505d-4146-8b17-92323e8932ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8566cb0-d755-425a-98de-3a51a0f8673d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cd2f97-1afa-4bc0-81af-414b38913a67",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71a7f55-7c1d-43a2-9c87-364791c382f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af9f52e-df6b-4cf5-8d4c-f2d8976a3e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b0defb-83cc-49dc-b229-255c1ae94146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e74a39fd-2125-4fbe-bb6b-8fcebbaaebd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f53634-6e6a-4759-a7b1-61acfa4cd92a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb53fdd-285f-4dc8-a572-8fda4edd2f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb835b1-4bb7-43bd-8bd8-c2485f485856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315a45e6-0ad5-4df8-bed6-2817c7aaf1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00e04df7-72ea-4529-aeb2-c3c632bfdc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8e4ff1-7f57-4b42-831d-68d4a24b62ef",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1390d6-fae9-43b1-99d9-06cc10dc6eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53315f1-3d89-436e-980b-ed9eeb238cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a9b05a-8acb-4fe3-9eaa-9a1f2c569105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1896123-c953-452a-b510-1ec534ef06cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096d1dd8-7155-4882-8b69-d9ab929eec51",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd94039-b69f-45e6-8ed9-d68223f989e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2a69b3-1b5e-45de-95b7-15587dcc9d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d093fc-5ae3-4eee-8e17-f7691249f3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2cea23-0e81-4636-ba5e-ddd1315bd36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27242234-7c32-4475-8761-9e5d3496ae42",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16886ea1-a64a-45c1-924c-6c0ed70f7579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f3a633-4805-4630-9492-ea4d053a6f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a139b8b-5e0e-4dd8-b42e-99597263b188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0686e76-af27-43da-ade8-6240656d42b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4dc9b0-70c7-4d74-828b-85cf05a34175",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b303cf19-5a92-4547-8bba-ea5bc01414c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc8a0d2-8165-4d20-9188-2f7cb0ba1a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e357d4-4b28-4cfc-85d1-a1812fd0e4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "08240fc7-eec9-4b65-91d7-b500622c29b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acffb59f-e67d-43c8-93fb-931b4f946e14",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c44c1fc-bf77-4856-8eb7-b7f245a615f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1c435f-601f-4159-9480-9b3ee208d20b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f47a863-05b5-4ad2-9c01-c3335704a171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "096d462f-78b6-4e58-babc-4db404309c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d06529d-a2e8-45c7-bcee-eb5859ef8700",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7352f1b0-3398-46ba-828f-4ea06b1387ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7dee8a8-3cd4-47dc-b820-c8ea89e00097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a46a95-2d28-46a1-970b-ba94d187c7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1419e17d-9516-4319-9453-69e0e4eefa40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10765f9d-9c9c-4cca-88fb-e50af8645017",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da0bcd0-6c77-47fa-9132-24ce300c65c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ac7f68-c52a-48d9-87e2-f47dc822f86f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0428f977-6499-45ab-a5e8-60978dacca84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0df8a6-11b1-4ffb-b64f-68cbe58e4f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403c864b-03b9-4970-9c46-02473f679088",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fa0503-df5c-4a35-a076-d94067cacbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76105ea-909e-40a7-b316-517a69438104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b945fb2a-228f-4379-a653-e78b22335de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3be62667-8661-4c26-b34f-8bd1e6d29d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14cee18b-6447-46b2-927b-d1607d20cdc1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5a16b3-1f6c-4268-9705-cd1c297b0c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ae569e-587b-4002-9003-820727c52c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ae27d6-1b4a-4db5-a41f-5f4e038085f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21a88c64-7ee8-4a00-8b6a-62959c0ad78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc12fa4-008c-4054-81fd-2c434cfb05f9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c369de-1c2f-4215-b89f-21f89a20b030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac3e529-cd9f-427d-9b2c-1dbeaf92dbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6010367-635f-4470-8e8d-39d91e41227a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2cce3c1e-adbd-4abb-bdc4-624e1b862c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9acb280-3d94-45fa-9165-ed651db3d9c4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03065f9-cde8-4166-ae07-5d3c47fb468f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69af82ab-a90e-4588-91e6-bdd2a3f7ed17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a946649-509a-43ab-a3cd-e9333f8fc46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c301fe2-2c13-4718-bea0-92028143e141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73360582-86b2-4069-b8a1-7651d280138c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e80fe4-8793-4139-95a3-515950846c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80a00f6-82ef-490f-91f2-f0010d76159c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5bbac0-23ab-49d9-a81a-ba168e297a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "509f90d5-a40f-436e-b75f-7ebaf27d6682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53879df-07f7-4dc6-81f5-2c304daa6df7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37278d08-1d2b-4617-b676-edd4f2f6881b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f70281-f491-4133-bbe8-231a353732fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e1919c-565e-4e75-aabe-bbdd5ee1aa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3edc693-8df5-4b3a-836b-3d9d03639eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd7f4f9-713a-4ada-969a-b04744cac98e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75f7296-9bed-493d-8388-94114591312c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f3dd99-08fc-400c-953b-bea6c1f12f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5a8a12-8a81-45e0-ba90-a35063beb77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1242ae5d-1aa7-4c0a-a170-1598f1db2e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc36c3e5-f060-4ca0-9c8b-d0424b8e280d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93696619-3d15-4ff3-b113-fbadc0b09a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c3eb30-d9cc-440e-838c-ee1b885740a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b180f6d-3e00-4972-a5ff-89e862275707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24099986-3021-4fb2-930c-7604bfb760b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48caef8-28ae-4bb9-94c1-228e3a7033db",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630a59b1-2f5e-450d-9ce2-af19a2ec95be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e99a70-df9e-44f2-8fad-468bcd9dd81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024ef83a-ff14-48bb-900f-7fb57152ead6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e19583-58a3-4e0c-98e8-f21dd6789e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a836201c-19a3-4352-8ae6-f9564caa1b6b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4331d919-6985-4206-95e4-5e1124de0475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8336d0a-2d7c-4d6b-9a9e-dca931cff0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf9931a-0698-4e5f-ba7a-b33ad4cb3237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e790a012-7523-4bcc-b6f7-401432a5837c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35573943-af9d-4df9-acc9-ae64c6b79cf8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8fb2f8-1d19-4560-a2e8-2d5b582a6b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442b2778-9951-41f5-a1fb-a14da25fc153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b845e3-a9ef-487e-9530-9d77c18605a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c0e05f-f032-4bb1-bc31-697d59c0b084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfff5694-1836-47ff-b253-ccfe80ef80a8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa5f9b7-065b-4f75-a60d-a580f205dbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d646e9-6a51-4d2a-adfe-98b1190f04d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd466d46-b3aa-4ab6-9b67-8a0fcfb82c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a13554c-6b5e-4d24-957e-57f3ef449fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845aaaf0-dab3-49fe-8960-755854105f76",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3a2414-8fdf-405b-a5bb-38de6d63d253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1668a73c-98fb-4ddb-b3f1-0ac9b67cc372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ea1b3c-6db9-42ce-a7cf-dabdc3447d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c34648-ffaa-43b4-ae85-adec5e4f08a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f05bcc-af8c-4f51-aefa-651b849fc0b7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9a931d-3d9e-40fb-bdae-44bad7df5e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c989c57f-e7d8-42da-bb30-393d7fba98fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adce986-f890-46ea-bca9-ff0e251800d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9f6fe0-d0f1-4eb1-8b9f-ab45697284e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6704f0d-e928-4b7a-9446-9be75e2d3913",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08c5a3d-433a-4ce6-b494-18a57e9ec7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8f583d-3afe-4f86-8582-07a339b3c3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5567d9-ebda-4f50-abd5-e986a11cd51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab17b29a-d937-4fe4-83dd-644bc4e2682e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5890e1-a794-4864-b433-ac4aea18f304",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb9ec02-2f43-4527-9f6d-af89c63e40bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26008094-d023-403c-bd9d-813a68bbc77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f4f6cd-68ce-449a-b1b3-7c19503dfb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5ed264-0361-4ec1-b869-f483deea939d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f517825-4aef-437b-9211-49aa966a5d1e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6e8ef9-403c-47a1-9a79-a43fe09e854c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b67045-95fb-40fb-8c7d-70c6573d8ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f0b87d-9103-489d-a572-06061da5df4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e37c5b1-d34b-443f-9383-999cd06aa53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa86240b-7b27-4566-a7e7-96ffa1c565b7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24312968-515c-42bd-a9ae-44a798d99daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca3ffb8-ffb5-4fb1-a2f5-3b103d0da293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575b7150-af55-49d5-9126-1a836ef5651b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f059ee2b-fa0a-4526-8629-d4140b6e430a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7be99c-f0c2-4542-8ae0-70248cf245f9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e216d86e-2d21-41a7-a68c-e18bc91595b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd8a043-a0bd-4c82-8106-4ef436c8dad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abacffdf-eb23-45ae-84fe-892888c93d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "58ebb8e6-b84b-4937-8625-dd3876eeb2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da766db5-15c5-4d31-b8d0-acaac35e99dc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547fc5bd-cb1c-47f5-83c2-947fed076fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d96130-2532-4a70-8c29-d0ad09eb16ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7416e3-a086-4c2a-868d-08019edd5fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4b4fc3-b6ae-4785-b92a-c3d8d587ec18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c98d15-2ca0-4f6a-a066-5e02ba3312f7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abb7cd0-43b6-40c2-8631-610ff5a996b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "59f59aa2-ccf8-4867-b5c8-b0146b1f9597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad8442f-bd43-4012-8584-940618636c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f159d28-a16e-4c87-bef5-1fef95b01a44"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "037f2869-a438-4854-9a81-2e522d91ea49",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5bf4b621-5160-4828-868f-e82c0c0d91f3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a349f0ec-9020-4dca-8715-d392d3fabb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f566ce33-8f04-4402-ab20-67ad1ca96408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19602771-f4e6-4cfe-b82d-c145395c0224",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "291614c5-53d0-4ca0-b66b-9b68b089711a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4644d6-3af6-4d02-90e6-1e9f9465c13e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6d392b-e3b6-4bae-9533-b8b1daed9c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b94c4a0-3321-4759-8930-3fa8ea04c418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbfa028-feaf-47e6-abfe-dcc1d5a0a918",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "cb5b2776-69aa-4698-a903-89abd7dc1e1d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2b0d841-3be6-4438-9cfa-4283c19952d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adbce12e-dfe1-4f15-abad-e8ebcd84ca49"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9f68bde-fef3-4e42-a1e7-8f39d5cc1a16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14ccc829-b61a-4734-a86a-7788e22f123e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d51d171-f36d-475b-b1a4-efb3fa77ea82",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d92b828-3e68-472e-98a2-b2b78c33c5b6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6f0900e8-7804-465d-8134-7f14cfa49a32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16a7c670-ee78-4208-bbb1-a52c3faf7e69"
                }
              }
            ]
          },
          {
            "id": "f60d01a3-25fa-42bb-b637-4e9c97517b57",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3797b80-7b65-418e-95df-195584498d32",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e2e05cb-d490-4062-bd98-bcc69bb2c0eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "724f24a9-5503-4653-b791-068dc65d59eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "310251c4-25b1-4521-82a8-29cc15402753",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "df86a49c-2291-49bc-a04d-73c3c02b63d9"
                    }
                  }
                ]
              },
              {
                "id": "00967bd7-be41-4683-85c0-be5f8cded3b7",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30d4c540-aa78-4fea-9b5e-0b2c43334626",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ee55f5e-4bca-45b2-ba4c-b470c50b35cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7acfb4c-f619-45be-9acf-e371abab6e8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd72e9d3-9dc9-454d-a70f-830adb7eac72"
                    }
                  }
                ]
              },
              {
                "id": "cda8191c-5cf3-4771-ac2a-7822a573d373",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "071323a2-1c0a-4cad-bc3c-fc3a7bf4dc45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d6feb3e-ecfb-4b68-a072-a078f99b0c7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7c8c6a2-7d58-4c4f-a0a4-11a5cb4f92ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64b8f41c-8378-46f6-81b6-84130b2bba76"
                    }
                  }
                ]
              },
              {
                "id": "d15032a3-827b-49d7-acf9-92ed0f4c1682",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "762a6ff8-2692-4348-bcd1-972accf0f966",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a8cd60e-231e-4431-8e6d-1e8ec2c15e86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c22e40a0-e57c-4391-9c12-0a5a53343dac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e6d1dc36-1ed3-4ed1-89de-ef901f60d5e0"
                    }
                  }
                ]
              },
              {
                "id": "30dbb2d4-aef0-43f9-a646-bd4c73444d15",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfc890ac-ec77-47fa-a823-fdbc18981b4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b7a800c-531e-42bc-aeab-f963bb5d51a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de0c63af-5a8c-4c59-b011-2af71ff55024",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5adad554-78d8-46d6-9a33-8cf316d7fdaf"
                    }
                  }
                ]
              },
              {
                "id": "ebf3037e-aed8-4ef7-b9cd-825ac60aa2c6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "652effa7-6e2b-409c-b75e-c650b6591db1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "28e26be6-99b3-4729-9c65-6fb153ba6a1b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f1a9ba8-e324-4711-aaba-2ed941b1405d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35aa0538-9ef6-43d8-96b7-9f0cc38116b0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96632d4e-8ba2-4a32-a9df-2929935113d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e18bd9d-dd82-4c40-b312-c6d8f8200ba9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4263777d-7b8d-4a07-a178-3396808a976f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67b70d0d-9a8b-456b-b8f2-7b41ce694274"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86f9b1e4-51ac-4f69-b8a2-71879c41cc82",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "633580d7-7c8a-4886-af2e-cc5bb225e73b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e4d5bb2-24ef-45fe-bc60-f020aac11214",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a6b25337-0bfa-4678-8c0c-f1fd68368993"
            }
          }
        ]
      },
      {
        "id": "052bb72e-92e9-4181-b365-e60359e32c50",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "faa21516-7a40-4f04-a42e-5fdd29409307",
            "name": "Negative Testing",
            "item": [
              {
                "id": "998feb94-a3a9-4e4e-9b6f-e3f927cb9ed4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04ff415d-6a27-4d48-9d9d-63f9005d465f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5c61db-0544-4346-9459-041d767c309a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efebaeba-ab3d-486e-a107-710b6a476efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfb9cc7-88db-42c3-8893-e6e8ee86885d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "715011ca-85dc-41ca-b0ab-25f70d9ed949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5224c5c9-6696-4ebf-a26a-094792943bc3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9859b34-e59c-4b7b-bdc7-a81ac6b07edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704bdcfd-626a-48cc-a119-e02f1e5572a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22d9242-5c6f-4077-8808-5e0e8d4bea8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "335c17e9-cde9-489d-8737-e45d723811e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaa8757-2663-48e5-8215-1baef550eeb2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79823373-bb2b-40c5-b269-90f5ed994caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52c83b3-8ea0-45cb-b3bd-be7d89e4f572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0523d5c4-082c-4a87-98fe-2b552515fff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a2e43e-e950-4c16-b6d4-deec04c0f13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1aa83d-6e1f-4fdd-8f71-a185003ca56a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f56646-9953-408d-bc40-2d673c246449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d389d9-8026-483e-aeba-2fcfd445699e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722ac095-7324-4a76-b695-4bbcf1acd0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7434631-285b-4b6e-b2b9-1e497a12cf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e02c21c-f4b9-4ad5-860b-8afbb2d945c2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03556a5b-1070-48a4-9593-4f6247eb5a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb43e54f-a2f2-419f-b25e-6456034b493e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91ca02c-22cd-4fb0-b032-3cb273a3635c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b458f14a-9913-4294-b061-6454d6cb7868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f83616-26d0-4c40-80ef-8c384251d30d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4434cd2-f9d4-4bb2-a7de-24f8887258c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362d19c7-a84f-4d53-a97f-941fdcaa5126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d697dd90-4eae-4c1c-a96f-d4a697e8e0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "475d3c8a-8afc-44cf-98fb-0f6c25082519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ae8a79-4d60-48f6-8323-97a94c9f1b0b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9340986f-b79e-43e9-8589-1aaa1d58d1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26cd2550-1417-4711-8bcb-b5e6ce7935f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc9bdcb-a738-4a7c-9b8e-052dd3aa408b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "df568344-6e7c-405f-929c-160f406ac87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329206dc-ad85-44be-940c-41a9c430e5ab",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d646bb-9e74-4edb-aac6-c7e9cfa3e269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc28ecc-4177-44a9-8ab0-19a7d5db18bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c610ecf7-0cef-464e-99eb-fd173de7f095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c92c6d-ebc8-4db6-98ba-df7543a30758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5d96c3-67c6-446a-ac20-dbe28ec5fa0b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1160f264-b51d-46f8-95b3-1b493180dc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895e372b-feb3-4782-8a74-c042bc252e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ab0c70-c13a-4d6c-ab30-35ac9ef765e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "498da073-add2-454f-a9a8-e450e257676e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543d2034-d445-4943-be37-99b905946e39",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583a395c-90ad-4225-b0f7-44d630e0d27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7ffe05-8534-417a-bd1f-bc531805c211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672a6906-aaf6-423b-b84a-3ce93b35ba81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2105bee7-7384-4eb9-b677-ceef14c763f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a8571c-9777-4ebf-b9c9-b41d493b00fc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff37b81a-6a6e-4ea4-a52e-da042bdc5db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8c9a60-56bd-45ad-adcf-7b2bdf7e3a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8730f48d-00df-4c00-beaf-8a7fd4de805b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3706c019-932d-4952-963f-d0e81bcc74d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c5019c-c595-406b-84a2-3f3160288d3b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a380cfae-ef8e-445c-8d5a-d57df3cb55c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efcb79b-508f-4cd5-8baa-2314d3550144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbcde22-2081-4a56-8f2d-a0b03b11e6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49134cd7-378f-4c0d-8112-df7f7915af2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ee35ee-fc02-4302-b9df-90ab964e44b9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6431bc-d5f0-4d5a-8ba4-72881b853dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2bb819f-0acc-4dbb-9b34-f6e175f521ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3a8929-e9d1-45c2-ace8-daf6b37f60a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cad14119-315c-42b5-9af8-394ce085357a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdaf250b-9284-4e84-9aee-1607ce11b935",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17241c9-c8c7-46b4-a0d2-c7082a621a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1513d1-9d33-43c9-85b3-f87c8a29270b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105cad0d-a35f-4d67-88ed-ef84303fbb70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc93a92-e82a-4ca0-a53f-438e8f46220a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e71147-d74c-4b98-9a6e-22e664025b69",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4001d90-7f7a-4309-943c-a726ff763444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9820e7-682b-4a1a-93fe-4c92b823db9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6494bd1c-f886-418b-95bb-0ab3fada54e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a927a445-e487-4063-aee6-156e003567f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f51f924-bbb7-43f8-bdcd-9336aacf42ce",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598a75cd-1d59-4620-ae39-c27167ff7d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40b947b-2e80-4966-bba4-25c8e0b83cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61a4c56-acaa-4f3e-9f4a-bdf72e69f5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7d25da-dc90-4c61-964e-274f9323dc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90eba9d1-903b-47a0-9385-40e6aae83a82",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cfed16-3f52-4dcb-a0ad-3e994b574c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa338b3a-57f1-4ba0-914c-48e10bf74c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c47df0-aecb-42e6-bb91-5270951c64f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "db55ce41-ad74-48f9-9891-162bfedaf48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d526d5-4aec-486c-84c2-a624b2c1068f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e84739-bd2e-4a3f-90d4-aac664e51bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6277129-6c22-490b-8044-763988224019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb2c88c-1045-48c3-87d6-a6060f985ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6101f852-2294-425b-87ca-e9cf17b9def3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c0da34-d163-442d-a2c6-9771e0cc0929",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72e2d2c-ff22-40b4-b9de-9d19cb82c6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a96b6c-2a98-495c-a56a-332c458ae116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6e12fd-56a7-49f9-981a-c05991c7ccc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb429ac-a2f3-43b9-8352-d68ca7d4c02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470d83c0-49e2-480a-9a52-f454f156dcc1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acce3c44-7d21-47ce-826c-b75c6024165d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4413e78e-4a4c-401a-81dc-0c3157110f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0c58df-7d7e-47e5-aa8d-16033fe3113d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc4584a-70a0-4dd1-a45f-05bea4159535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b7485c-15e2-44b9-8000-f80cefa7d31b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40e46ae-1e87-408d-b2c4-622671c4aded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb63d55f-a0fe-4cd9-b183-76d247d5085b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969d40df-f663-452b-a8da-508a10d942b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3601f04-3d33-412c-a6a6-b13c0d7bf147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c217c495-bd4e-4923-8396-640548954945",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40e2dd5-2a59-4baa-8363-68f01687a252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33625d8b-29a5-4d75-b9d6-ed918bbd5c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93aaaa52-0163-4786-ada9-a55a4e6bc134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65c54654-18a6-40e1-9465-856f3a097edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3134a9-7c62-4b52-9bef-5df8b2c6bfdd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2512ec4f-8ec9-4327-9555-87825c853be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9697d96-472e-4add-a167-f0382087989d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6dda20-0ea6-455b-a035-d93feb5de898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15ca62b5-0ae7-4e81-997d-26a57160a2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69c07ac-92e9-4e20-8b12-f9772fa2e841",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf55f0a9-b83c-41b2-944c-a92d79a10f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e77c79-f9c7-4795-946c-3a333aa70fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e3569d-1699-48b1-8c4a-78bcce3c7bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7863fe1-0e06-4090-9bce-b41f591bbc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7089d0-b8de-4bdf-bb83-0ad6d8a4c64c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26422718-419f-4af4-bd00-d3bfabc806ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a179cff-25d2-49a0-91ca-efcea9eca3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50be70b6-71eb-4c4a-b038-26e89c16b1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a70e9a0-1ccd-47ca-b2c6-5963bbfd7e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb42efc-d469-4d45-822d-0da7e6259d2e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725b29dd-038c-4607-8e97-55229a51ee3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59600bf1-0f9e-469e-a932-6fbc43a571f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b74702-c9d4-4ed2-88bc-1465d9223bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dddd849-85ba-4ac7-a0fb-3539d7598f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b26f811-df77-4f29-abee-24da8f1980ce",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b824197e-da8f-4fb3-a927-9f538c9b4535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80b6eb6-1cab-46e8-abcc-f46031461a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cec980-ef0c-4edb-b5f3-cf381f18b19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e09de9-69e9-4d11-8ae8-52eae934c15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c3f847-b053-406e-8695-eac5a48ee31a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c545e4-2052-48a0-9ebe-1cce50bf9b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3ff381-bc2f-45f8-94b0-f73ba822fe63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95687bf-3ec7-4290-94fc-6cbbc7c8b5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae020835-8a99-4c8b-9d64-5d8399ecb264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd104f4f-eff4-4f01-884a-a621f27ed70a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544ea7df-5828-4452-bdc7-ee65dbf6b953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff7d2e0-2421-4925-8d09-6fe67c2eb3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58334de2-a184-4284-a9e5-345e884a3810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4c1e24-d35d-4e74-a7d9-b3a11fe6f139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64543e28-338b-4bf8-b33e-579939828ac8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca180f1-ef0d-4776-9675-7dcfc817d6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f790fe14-edeb-4d77-8b25-032f1b71ceb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907a21d5-54ce-4219-92e3-4cf1dbffd4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6de0ae-8a4a-4e18-be9d-2e699fd008f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6a913a-dfa1-455f-8027-c1fc2958a14c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f62b156-da40-4e57-ad71-d398c06029c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc509d8-65e3-49a8-9518-c40d5092adb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a6c950-b672-4d21-97d7-e982fec8ecee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "affa536c-e360-4bd6-9fa4-c7c67a62f8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c304932e-0d1b-4116-a6f4-94767cc88332",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a27cfd-7e2b-47ef-ae3a-0bed33d83509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdec6239-e564-4912-ae76-d1cc03d78f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecbf951-deb9-40f3-86da-7aae4726c7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c46856e-ffff-4276-8566-efed70a5d64f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9f7fea9e-91e6-4322-8516-4729876b06fb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "deef0ca6-5787-40bc-a916-8ca22a22fadf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e146ef89-352c-40d2-8781-5f296a4f0212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d5a921-2087-498e-968d-c33c76bfcd72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3a7df2-f158-4c7c-a8e4-3d9fd5033812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34beb9fb-594e-4d9a-9204-f89d6aca2020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e383c863-3b5f-47fb-bdb0-f4b511a21f1b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87745b66-d3b8-4bec-8d6a-766514ae7e17",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "154b0bd6-8810-4362-ab02-a72d5b8c603c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf82cd0-d808-4a7f-84a1-80dd9a290d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf4f69b7-5432-4615-9f08-68dbf589fec5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "480ce029-b78e-4879-9330-33316467ea28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f3d5da9-fd80-4580-af20-2d0cd2492b86"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee56a0fe-1ed3-4789-947f-01bdfc378d33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaf85941-38df-4e21-9f7c-87cbf158d0d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c35833e-df6d-47c9-bfaf-3e1f08fe52d9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5b39b889-5c0d-4865-bba4-c1dddb3f820c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef51b83e-65d2-4e94-9e56-0084a1731fbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b7500bf-3cd6-439f-bbf1-0236a5a64afe"
            }
          }
        ]
      },
      {
        "id": "6adb4c70-e1f1-4a51-8a7d-cd72fd4a155a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "324ba1f4-8f5c-468e-9af7-fe904663138e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fe60792-a3ba-445b-988c-07d1acb9ae6f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bf219acc-317a-4c42-af00-43feb9b6315c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c635c8c6-2787-41a5-89cf-8439e886ca02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac4ed6c-b0a5-4200-9b0e-6567d5c155e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a420d1-0aba-4128-bf3b-c25c4ea5d59c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919ad4b0-2ed6-4c18-9a04-f543a1c13fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439dcbc1-e10d-48d9-b048-e49e41f6a80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c3fb4c-7286-4a34-a8c8-ff4f75c1c83b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf1b5a9-52d2-40d6-9d2a-edbd4e1d2165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da9ba8c9-1e10-45f5-98c4-a5f052e93e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83037378-b366-46dd-b5be-e772eebed7c8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b2e0e1-444c-4044-964b-6ba3c4a37640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93d5cef-afdf-47e9-8505-f65ce473a40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b70f9fc-37eb-4331-9940-71e32fd63cfb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222a959b-1e8f-4b8d-b06f-d4e5ff0202c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46e49f3-596c-457a-a8b1-b25563b25c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391f8d99-bcc2-45a2-8e6e-5150f3082c50",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2087ae-ce2e-411a-b34d-076e47cc0f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce0680a-6329-4b0a-b6ba-32851305bb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad29bc54-3aca-4544-ab4a-9cf2a7951827",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b2e399-054b-46d5-977f-5817b1b27a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92818969-a272-4295-bfc7-b8abab9fe957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e6b19e-32dd-4461-bff7-1e6c8e6bf9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ab93d5-d875-44e6-ba0a-1c8759c7fdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbcfdff-fbae-4a19-ad7d-f39f392c45c5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe49cc7b-ec87-48f7-96a0-214c3d19ba59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47b47815-a6da-4a08-80ef-ea3e63156438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b41f64-5130-4602-a623-41b57a6bfd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea22dbf5-5a62-4d06-a7a7-4dd99596f392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c797def-75ec-43e2-9369-183784ddd67e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea4598a-b0c0-4655-9374-fe8f07a9e966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4993277f-c94e-4a10-a46d-c2a06563f5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd1acb1-bef1-406c-bfa6-1efd77ffbc59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3448bd3-cd4d-4590-8746-50bf2dd9f20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d82e092-4c9a-4d90-8e23-8b0b466f18d8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa4059e-c06c-4667-83e3-540c0f5e4510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "043fe8a5-27b5-4824-9445-629a962f4933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eea454f-46ed-4861-985b-f14da4267730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a0ebd0-ee85-46dc-87a3-2e0e2f183fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5991ce-67e6-4c3d-acd3-f8bb2dc0de11",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68199c01-bcef-435a-a208-ab4321b57998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f514194-1626-4735-bc90-abf7cc43dec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb9f91d-abc4-4ca6-8365-015cf5fdf8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e52b3d-99c9-4965-b70d-e9d318cd8e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f25ef9a-1f3d-450f-bf25-e26e660dead2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d7c8de-ec9f-43cf-b30d-4f5e58aa85f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afd353d-e1e0-41ba-885f-c93174e24269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b27113-a71c-467a-a292-51f27d9fb03d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d47211-3e92-4e60-bae7-ba148864a81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d884b5d0-931b-40b9-be57-f3c35ea574c5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88543fc9-c147-405f-8d7b-eaac3adbfa36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "394d4449-0768-468c-9229-29b570385e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5202aef4-edf9-4a64-ba91-103ac1e30716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01051cdf-d0b6-47b9-891c-76627886fe2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d99ad16-5880-4cc1-a952-27184cad23ed",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4dcad57-9379-420d-9f59-1d73894c1cc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8588d8e6-6ee8-4342-abbe-e1511bd42211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3978e026-2694-4baf-bc21-2813e0ed2028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb664d6-96fb-47e5-8e84-7fdefe8c0095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7247972-2b53-4c2e-8b5a-8e5281173c4d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbce11a2-ba2f-47f0-a61f-240c1d2560a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fe57c53-3770-43a2-a65a-96b58c86825b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0497813e-0b81-4501-accf-be666280fe6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6309e5a8-74ad-4d1e-bb08-c1f37972cb30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d736480b-cb8c-4313-8228-934c960c70dd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851a53dd-1b6f-4f24-b901-ba780773ccc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79bf873-7308-4bc7-8399-d9532693f927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3001ec49-75e5-4af6-9aa6-3a0baae5a72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181cf667-9922-42b6-b530-d4287d8139f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d65f197-e9bf-4daa-b9e1-22311cd73581",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9218c2d-fa96-416e-bbbf-7c07230f53b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da92919-a06d-424f-9061-9bd5e8877542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2fd6c5-f928-4ce5-a682-3191fb70525d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e1de9c-45ec-43d0-8b2b-a2d32b528686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9678f2c5-5092-406b-a12e-0517c4081010",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b65695-bd99-449e-8c33-dc19074f055b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf913ec-7d56-4ead-b05a-b39bdc36f7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "178f50c6-62a3-47e8-97d3-01fda9513d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dbb54a0-b87a-4350-9a19-e802add454d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52dd080-c4b8-4988-b66f-3ca7c449982c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3a6e81-afb3-4b82-b3b0-76cf5dd60c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c66457-81dd-42d6-91c5-be2db21c488d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3fc1d2-d2d3-4d30-aea4-078b628a7b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a14103-c375-4c77-aa02-dc89935c1439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2d0bee-7204-462d-994c-5bc32bc039db",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbdf323-e621-4a43-a32a-d226ad42a500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8286d5d2-7c45-448f-b3f8-98fa48b511b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d4cf2c-7b71-4472-9e7f-95a18a0eca4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060deba4-3fc2-42ad-8576-3f7e72111717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1b811b-ca6f-48cf-8e2e-5a69456a2ea8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09fcc0b-3c37-4570-8f9f-9bf2d0ad50c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a85b443d-4190-49e7-b995-119b063edb23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08141106-78e2-46d8-8bd2-27ef237e0661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eeeced3-8b76-473f-bdf9-a7fa4274153c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289bd899-7530-421b-b0fc-1d81b7059deb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9b2c6e-c015-41eb-87fd-b68a82ce4c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e76f6b2e-d1ed-4cc4-a8b0-f1ac603f9340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6370c8e3-38eb-493f-9428-cb080adc9374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d591a8-547c-4251-ad57-0e284e15cb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7708061-74e9-4061-b980-a9a9ae3fc12d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746fe28a-900f-41b4-90a9-1343f20605c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc25d76-d11c-4dab-8d00-62bbe36761f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f492df-ba8d-4bef-84a2-2b027e4095d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d4c18a-552d-4006-9488-bcafe07cb8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d419309-ea2f-4a07-9463-2106a1121bf3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348cb4e9-9603-4ca8-9ec6-67ab2b792b89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af809f77-ff6e-4306-9d34-571b0919e8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46f4d49-5f61-4b8b-8521-4a131633c304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d79ea49-07b2-4d58-bd5e-a120f22e9df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c5a29a-aaa7-4257-9045-7044dc3d7f9d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0801a66c-dcf1-4254-a18b-57ba2842f42d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc81596-4eeb-4820-8305-6b856c776e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3074757-53c3-49d9-9d41-a748a44f154f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "124f078b-8fdd-4277-8df9-de3e028555ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fd4b92-5145-4738-b0ab-985313ca450b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca487d17-5633-435e-9a0f-643d882d9d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ba3146-dabb-4fd6-901e-469439045231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d0454f-2a42-4e26-8d82-d90564173b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1387bde2-6ac9-4402-83df-f281d3e83539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaf5242-28e3-4baf-a3e8-fb75417dd347",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02e6ed8-bac7-425f-9e33-0b432efc273c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a5ca24f-5392-48b7-a45e-33b1087d7671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0022bf6a-9a2c-4cd2-88cf-7609abb9feaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5494a0ac-ff6e-4d8e-8c0c-3fe77196043e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5a9cfa-df6b-4ecb-86d6-0eca5ea71b0b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0f524b-c57f-4d67-9fe5-0cca5ee9e43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c644a198-94c1-4c00-a7aa-ba2c97d4ff69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d199b16-f9ed-4c1f-895c-219028597425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44f2d1b-4777-4767-acb4-e32aca13fb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea1083a-28d2-44c4-8fc1-521897ae92db",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325d8a33-0cce-42a6-bd60-d38176e7494b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21ec917c-76a6-4840-996f-2fe936ff41d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5ae3c2-8eef-4817-93a4-97dd6b723018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c4afee-4813-49b9-afe4-40230495feb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40091d8a-d963-416e-847a-1fc4d1988d74",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4bf07fe-8d34-439f-83da-a2955ea9a47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f182e389-c110-4419-8874-128b80385066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e1a922-8c12-43fc-b518-dd31171b3efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8599984-3739-4db1-9c78-bf3ae0b2d3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368a75f8-06a1-4bed-926f-2440b5f6515e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e54d784-b8f2-4943-b9fa-1cf1b9d410ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e113c50-f140-4652-b64a-01907ce3890a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f144adc-e437-468f-9ce7-4ea505d22dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256099aa-c167-4c4c-a21f-24962149ea3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c50804e-3572-42a1-88a5-71ef33452063",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac7866b-f45b-45ff-9301-520d51301729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e4bc084-f486-4998-b3e9-264c8b592bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd265a6-d6d7-43f6-8df6-410caafaa738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb49329-ebb8-4fee-8f64-d83e607059c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7dd90f-1938-4c4c-a38b-f7ed09f97306",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1baaab-75ac-4d02-bcc9-6e64e1fd576e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "215729ce-1a6c-4e39-947d-5681f5f4155c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c6feda-0055-41fd-b626-714d04f89fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff753e1b-1ed5-4f71-9a56-bbf9f212790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376693f5-fe50-408e-b402-43d149536163",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04275b83-9be9-473d-b664-dec5080aabec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c761c1-dcc2-4d58-ac4e-0c1bda27ed03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d59f70-e8db-4f5f-ba34-543d9cd6ff94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa0a8f6-b238-4e40-bf9d-8246f8bab8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b518a3-151d-4339-b217-66381e880d06",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5caa38d-0a62-4c98-927c-3ab5433f1685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db41a0a-e9ac-4980-8c60-bc6db53bd030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206ded34-c1bf-4495-b8fd-8be843bc81b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661313c7-ca4e-4718-b7f3-ba50b0c8168f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a791c3-e41f-4668-8d81-92e04b85a9c4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ee1fde-ac5a-4333-be40-078fb9e07409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bc346c-1d67-4dcc-b1b2-b4b3f389e379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884febee-365a-4a46-b257-7ed40d543f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0420bd61-7f0a-453d-a664-24a1b0d0c15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ddc047-b609-44eb-a11b-b616796cb2a0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41ecd74-f7d3-4bf6-8b86-b4e888c27106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b278a853-a179-4eea-85d9-ab8c07bb4c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ca617e-558c-4a6a-a35f-7e71e7bcdeaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc0dff2-b829-44c0-abb9-5f8f67ca5468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f49722-3b1a-45eb-af61-66dcf8caffd3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fff47e9-6492-49b3-919c-0fa4f70fd720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877f409d-aca9-44e3-be97-553a0126f419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "524e79e8-4549-4cc5-8597-4d84505e33e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a64e10-99cd-45b9-b6b2-c10746674047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2950d601-0365-4b4f-ae55-6cede8bd3cd9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c9a173-3dec-4665-b332-33b7b93a4fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e57884-5d62-4b38-a254-10b33314d51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca03012f-ef74-499d-ad82-f7c9d8035ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3018378f-c159-4f1b-b473-c0e0dd27707d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be676d18-3eaa-40d5-babd-96b82065eaa5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d90e37b-93ac-4fb1-89f5-acbca7a1b497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4782bde2-43f8-464d-8e0c-c3322b7a1cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9abc9ea-9f7e-4c70-ad0d-f86baef0fca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afac4e5-6651-4b6e-ac41-4e04a32f7bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3171338-19d8-402e-b654-20aa86a07645",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8c0f96-6b5b-420f-8512-b0e059977939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300ec883-7d10-42bf-acd3-c83820ad4e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece575ad-6423-412b-93dc-857cf2e81b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c762b44-3ab5-4581-8900-643c490790aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e24cad-9931-4efc-ab84-4a0b595210e7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bacfe568-6c23-4fe9-8c91-49dfbed2493c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3bdff6-02b8-4aa3-afae-3651f95c3ff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4863c65-b8d7-4352-aadc-9d131eccef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da487fd-fdff-4297-90ff-77778f6ef3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1d3158-da44-4b5d-87a3-713f1dec4f5e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3831c180-c3a1-4e69-8029-fa5d33c80b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0daeff24-378c-4224-b311-9079dd7cba8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ac522a-4574-4e34-b90d-b21e757769b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28858c81-8adc-4516-ac21-29c4a579f9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388ab638-b27b-4ef5-ad99-056b886e00c6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518063dc-91f9-405c-a211-9e62d37f2bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad727ac8-50ce-4ea0-8936-dee913f2756e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30d8f76-64d3-41d2-a790-3bfeda8f8558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3069959-c968-4fb1-8551-3c9ef81cd153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c2d04d-2da0-45b2-9605-0f1fb7b7ac95",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d338666-71b5-4f01-ba4f-c2e4a49c535a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bccb63d-060e-453b-9afe-99a0915cdcb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a0d180-b270-4c41-8c7c-ce0132b9924f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7332e1b6-2687-4333-9f94-c9f9074d939c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2675bca-9494-40a1-9f37-893bf00a883e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c71cb85-1f98-467b-b4a0-3c6e1603770d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881f2722-54c4-428d-b44f-84ebff8b9884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a49ae59-fda9-43c7-b4fc-168c2d3fae2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd7a100-51bf-480e-a3da-370e30ed0f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3708f5c5-c89b-401e-b0f9-37cb229739e1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2beb2d-0078-4755-bbc1-cfd0007f1a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9c489b-43ed-4013-aa6c-c3dff87a28e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5bf60d-4fce-45e6-9332-80773007e87b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cbf797-d4a4-4f53-9903-b86e6f07d6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60059d9c-31da-4eb2-ab5e-998dab91fdf8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae0d9b3-1ce1-4f23-8ffe-9073c521f966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4d2165-374c-4e9e-b431-6cdf4ddd6416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846c7520-f4f8-477d-9ec3-376a24bb820f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92d2636-0e74-46e4-9472-4557bc00e501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb82b50-997b-418d-94ba-e26bd3d80675",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95eb8c4d-a840-4d41-8bda-be9498061420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a456a4-4f00-4fa5-ab9b-db5993fcfcfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f767e2e7-74a5-424a-8e96-8023af14a9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a91395d-6040-4821-9b12-e70811ffff76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9095d6d-86e8-4de7-833a-572c6494c805",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba46d66-14a9-4492-b76a-a2a503ff94a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525ab30d-02b1-489f-b709-148f694d269e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97301d2-e1a2-474b-9596-a12b8b68f195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c35c21-5d53-4ab1-9671-db4d08df3def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9b6f44-496e-41b4-ad8b-8f7ffbca318f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0028b9-4d10-4342-ad12-4d0929266f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a0f27f-b111-4ce3-8337-772a1aaecdad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b11ee5-123e-4112-b327-9a4442ea8aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0643822-b06e-47c9-860a-61782d78f687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33cf247-f70e-4ecb-b9f9-9509660b8f97",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6ad809-d2b3-49c4-aea8-1072ac2c8a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf487128-b894-4ac9-889d-24d07d4a9ea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3c9277-95be-4a84-a7ef-428c30ebe936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5c517d-988b-4ab8-ad2d-5362b11b6288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12881053-940a-4184-b63e-17848e2f0353",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea6ac72-af05-43d1-a151-3e21f4eac8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7c1e90-d223-4bbb-9e9e-481440439d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6001329-a097-49db-8587-f489e908e863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca0a521-fa68-405c-99b8-264e5551685e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5341b650-5782-40c3-a849-0cbe513767c9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d179720-0053-40b9-8bb4-c6fb47981fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963ee22c-4bfe-4cc6-b924-8b86b71a72e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd6ee9d-8274-45ca-9120-3b86bc9086ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f27caa7-4ff6-42f3-845f-862f95ac45a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ce61ba-45ec-43a5-b914-e5da3f4e4970",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4844c454-1e14-4782-b5cf-5fbdcc74c1b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77530dac-e44b-4ee9-8bf6-5d4a6803160d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a15ada-cdcc-487d-8662-441475576b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2111abd-02a7-4af5-a278-be77042d5af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2bc3b7-4b88-46f6-ab71-198f7573064b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693bc828-889e-4912-8f5b-456cebbdcf44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cea6b38-eb8a-4a1f-9306-e1c3c016c9be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "641c7a7e-fdc4-4ef0-b5c1-5f1e0130ade9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b9d9cd-2b0d-425f-8153-f9081e6847f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae93095-85e4-4c0e-b8c9-aae056b17342",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9bdc9a-edf7-4503-b12f-39a01d46c103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc799d5-4645-42bb-9eaf-618fea2597e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f455d12-7491-44ac-8641-04523412fbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44496066-147a-4b08-8c5c-29b2e6445307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb2dbdc-e3c3-49c7-9f7d-d0ae7b952947",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd04aada-1248-46d0-a67a-6b0562f9f3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0553103-a658-4744-ab5e-d9b206344148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa85241-7e21-410a-ba99-67df41563a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5bccb5-93d9-4e3b-b818-8dd1f625fbca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fab4466-23fd-43cb-8bba-fa4ddbacd976",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d05ff3f-f8de-4371-8351-d5c6bb2be418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27aceb6-f771-4b99-a311-5a7ea58bbf6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc0c10e-9640-4fd8-acca-5da3f69dcb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79757e54-8a8a-4a43-9e69-3a8da5b540b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85370588-36c3-4e24-b761-2c741dfc9b46",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ca9dd2-ce33-4d3a-b4c4-7852b6033d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043aad08-939b-4f5b-a06d-705483b5851b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46cc96a-7bcc-4ff4-b34d-9cae14c7b213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3530adcb-dd60-472a-afbb-baee0cc4c0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d96519a-2b66-4cb0-b510-58a809732087",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3f79d1-99a4-44f3-9d90-d09d5b5a6134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077b7d31-6067-444e-8d7f-9006e8ba7988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30924069-01c6-4477-9878-b54b277ee0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a64db7-71d4-4dbc-aea3-435a6b2701b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64960506-60bb-4f14-b042-e74a653bf4fd",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2be4a2-fd29-4281-b1e3-79a2ff52d220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c2853d-45e9-4241-adbe-28caa44f7112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa31244-a496-4aa1-9fa6-6d6902487bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b00a108-e69b-4c00-8cc8-4d60d315efb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28ebc6e-b9b2-463e-ab27-19e538ad373e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04671c5f-16ec-4df9-8802-2443ef6e4f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fffb9a1-7767-4189-8e94-54fd176379fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a8cd75-40f6-4626-8fb5-cfff599da8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da698cc0-5258-49d4-a267-1cd48d079993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf18730-99d6-4884-be4c-501f4d7d5402",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeee0c60-a1a6-4167-b8cc-acf60ce0c473",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6e99231-5913-4c63-915b-71f5fa1952a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa50d5d1-850e-485a-823d-173fe64cdd28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde420e9-7e90-4d0f-8351-d63544e52519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6188d74-f64f-4650-a539-825ebddb56f5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2031540-7d3c-4e79-9ad8-82b8353df481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1ed91a-7753-4af2-8e24-2b74487274a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1150e19f-fbda-435b-9911-783a476bf3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feefed75-5a82-4a78-8d07-c237e64b8909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2515d9b0-3673-4dfe-aee1-d78988a89c9d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4130d74d-89ea-41dd-b0b3-726e594567ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99d5195f-4655-4686-b50c-b15ab16994c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6eed69-f589-4648-9c2a-57e69fd4f68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d04506-bd3e-40e5-abff-921ae85165c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6123ecb9-5e32-440c-8227-9ecf45a56ee3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fe92fc-6aa5-4639-8b33-b0464699acb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "359b3878-f9d4-4692-bcb2-03ea7297f58d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bbb3e3-a5c0-479a-a216-b326a36afd86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1f0983-6dd2-47cb-979d-1a08379832ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eaa93a8-da29-4079-8784-fd1b574ee884",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c37447-e730-4778-875f-a6b48653aa21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b5c4fa5-3370-4704-ad73-08c7149a0fa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a25d9c-7205-443d-a17e-aec89f30d598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "141e4c43-2944-4f39-8d45-421bf1d77fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86cfec8-5a9e-4441-9a47-2dfdeb224a3a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74d47ef-a4ce-47da-a27d-640a700deb57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25d3be8f-3612-4045-99d6-f183c130421b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc60673-4999-470e-9f7e-234a0796bf57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d822eebf-8320-4c02-a361-485d7888db40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09e5c5b-7d1a-4ad3-9357-e6d5b3117ade",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1eb0399-0cc4-4a8c-9142-9264412ed888",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bbeb765-581b-4bd7-898a-91df79494d07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e37bf1-76fc-41bc-96be-6aafd5c2cd67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7552ef0c-58e4-4abb-b45b-7c1753f0aa26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b2ebd7-fd08-4fd7-8c78-05182b2ed097",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45220da3-f2ba-4251-91c9-467448c6041b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66a00775-9f1f-4187-9557-02e9896814ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89c66e6-d3ec-4f71-9b5a-8f0450421786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de43f8b0-4a0c-462b-973d-29c0b199a0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792a11fe-d97f-441b-a708-4fd1ff1371a3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4efaca-2c9a-42d3-9b15-f37b27b28854",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55c0692f-c681-4c02-9e1d-b78a7a104c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ec91e6-b372-4371-809e-1ec04bd1713d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188d09fc-2552-4304-8a54-061e538632cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c5045f-50e2-4d2b-8d0e-a77e4c8d0861",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974b2668-82c0-406a-81de-0b341c35c2ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a9768e3-2e92-4783-8baa-53069a84adde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037e9544-b38c-4e49-919a-a68309272bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0230b5d6-c366-408c-87fb-1166887431e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f27d340-fc58-4ae6-a0ce-49f2615bf1f8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc6313f-fb52-4332-93df-6559dcf96a09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbce6110-222d-4fcc-b32e-c7e768603748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07d7d7b-88be-4f1b-8ab6-f858c4fc75f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b33971-e11c-429a-803b-1e09fdaf086b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9591b60a-d237-4e30-b21c-f66b25ed54a6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b846fa-c24e-4689-be22-bcccf59e7d23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65023f31-6186-4de6-9a92-71bcdb0cc168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c7e131-29aa-42e2-9133-ea1e9db55142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bc19cc-f558-4e3d-a960-9b9c6970f168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7098b7-a083-42ca-a48e-fa20b408ef98",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc8fab2-0195-4236-a1fc-7e6bdd91c3d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "926a5646-98f1-4655-bfb5-afa0de3fe189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406c0cc3-b3a5-4a20-b7f0-f480ad4de4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e986d21-176f-42d7-b074-d074ec58a0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19184024-0fb1-4c76-bbb7-b1d91e177155",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c90681c-9d8f-4586-a041-fdeba47be426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1ff94a1-ec60-41c9-9a21-6c235a31f831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0932a18d-13fc-41d0-8169-e674a53b06ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e9ccb8f-bad1-4e45-91f3-b66318e9d409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdc3ea2-bb1a-423c-88f8-37a562fd0446",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448098d7-910d-43fe-b4df-8f184c78d31b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a80f49ab-6131-4267-8783-24c43e1ed8f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80b0646-5644-41d2-9f1d-f2badc7cbcef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b32373-4141-4002-a49b-9d9d34de69f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10ab542-2415-433a-bd18-1a605f08bef3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7819141e-b462-469c-bd94-54a8ada7a5cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c61319dd-6a75-4a6d-8215-d725fcc679f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ae9079-6f37-467c-bb5a-0de9050d9d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f80282f-e65a-4f29-933a-cfb8639d112c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d63c32d-82e8-4c63-bfe7-881a26660c35",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e5b2d0-b348-4388-8ac0-c6d3eacf1fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f4e9e16-ccde-47d9-b32f-afe7a34ec464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4a70c6-877e-41fe-b623-425b1014c18a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee72dd8-ee6e-415f-a0e2-99b4063e9887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92e1972-c163-4ddb-8e98-e456f9d5b929",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9210ca22-b065-43eb-9368-21101888bdb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e6a9b6e-0ef8-4f3a-a849-6370d95adb7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3f4214-96a0-497a-b6c1-77ac05fb516e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181c08ec-80aa-4a26-9978-a0a6475d40c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c7cad6-8bb4-4595-8299-6a31bd93836e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453d73af-29ff-473b-aca5-4888a2d5efdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e187bdc-063c-4914-981a-c61229971df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41c333a-3608-45f1-83c0-6feae36f4d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b040b7b-04e0-4c26-b1b6-634743e3a993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad41a6f1-dcb5-49e8-932b-b37431e5c290",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c506af0c-85c9-4e48-89b9-cfd51bad96aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f79ea373-c1fb-48e1-957a-6058599e08e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b38dc7-4c7c-41bc-9a4f-6d91dc473e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbbd6e0-e51f-441f-9cb2-2be99065017b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27f3df6-2083-42c4-a130-7db815f4d12e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b88238-f995-43f0-87ec-faf986b3fc25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d44fbff8-f5ee-405b-81c4-4970e91969ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e782a965-fa7e-44a2-b632-289988034766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5f6083-89fd-44a5-a4b6-27614ec60c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134d0091-697f-4b92-be6f-b12c1d3ae2e6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3285e2ce-0b2f-44c0-8d59-e5ed2ab86a00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b58dcf90-bacd-498e-aacb-9ce9a9c9bed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f7a5ef-c876-4018-86c0-01d820f11a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f39df6c-29b3-4b1c-9f33-b22722012e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56a5f04-ebbc-47fe-93ee-c5d9d416f040",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1b88f6-a876-4d72-928c-7a9c0ea914ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e15ad33-fa22-4701-8d8b-a49f7e66ed9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefb43ec-3b59-4bd8-9fbf-ed4c0c214c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f93936-e8ee-4a53-b0b9-2ede7027a522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633742f4-0f57-4a8e-84a0-1eaa73cd63a4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25af7e1e-f0fa-4fd0-a013-2e508fcbced1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dfebcb3-cbe3-4486-81d5-af4a271453fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c97339-d059-41f1-ae79-839acc5904f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c8c7aa-d326-4f82-9d59-24743a060803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10786749-418c-40d2-86bf-34e869c8b31d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cc2f66-52e4-48d9-8301-ddbf07c5d93c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29ce65cf-b5c1-489a-bbed-c22e24be1293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced01601-9367-484d-95c9-d93bdcda25e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99f607d-2f07-4972-a5b1-792707415756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81279dec-ecbc-4440-9f9e-d9d508fc6cac",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d25903-4278-40f7-97b3-2174591efd87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7c5ba5e-9382-432f-9c9b-64a7b520bafb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a401532-5b62-4bb9-8eda-d3318ebd97d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2b0a02-45ac-4637-8cc4-2e6b275dd584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8a1d57-341c-4172-bf9f-30eac4feb59a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb34d2e-af6a-45ed-bafc-05a0716d700d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e548953-e0bc-40e5-a770-72696a1cdd2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf1a9b6-6a31-4b51-953b-28b24c2bf886",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b188c05b-84ed-4c90-8312-7ad8afb45d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d62b967-38da-468f-85e2-4f14f4c5a78b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3994b90-6803-490c-a16c-8ac8e84a1a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba421fb8-ffc7-4b72-b6e8-672633b150f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e378ff10-cbf0-404c-ac55-c97d0dd7f025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65baabe5-34f2-4c13-bd12-5a152667e3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d73ad03-4805-4d41-a6c0-c193cf054414",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45be3a5-bcee-48c7-b778-213b7abdb818",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "256af134-614e-443e-a1a3-00b8fe449f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73672db7-fcb6-4a73-a36c-614a0358ff21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "106ac75f-4fbc-431e-96bd-157ebfa72aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ce3415-8df1-42c3-8378-3d487443f38e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e543ca-54d8-463b-8b8c-31134c8c5950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e58056d6-4815-43e9-8827-81db68407692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e459866-751e-4a66-bdd7-eaa78013f3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5fca260-0fcc-4704-9262-136922c256d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d15bd5-1d86-4f49-a8b0-6cbf99f5631e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be959666-487f-4046-bcb3-aaf18c3f8612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08c385bb-bcc0-4245-8e7e-decfbe222a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad30d4a-428b-4954-98d2-0c4c7c78dbf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf45a15-670b-4a19-a557-c766de5b1d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c1159d-fa64-472b-a13e-be639c1e9b4e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2165e3-b7e6-4b1d-8aac-ba960c8cfd3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6d0380e-a9b7-4569-b1ef-f67ab9b1f927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "623365dc-d999-485a-be28-dc170f5ada19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905ef0a4-69ae-4557-bd7e-f96f49526add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8823f594-33f9-4e65-b7f7-8778b0b22bcd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b518ae3-72c5-4177-877c-e1c783224c43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aa7b41a-1fe8-412a-b0c9-c2c9f5eb0715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cf0c92-23d3-462e-8684-079ded5ccbaa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49854664-8089-4a05-bf14-0f931834a0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4714cf7b-4977-4008-b39e-e17e34462410",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53706978-ad38-4467-a936-846d3b462438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec37a120-61df-44a0-bd7c-38eb76d95628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a584142-2129-44ed-b2ec-46e987aad158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7fba48-4ec6-422a-8be5-652863971866"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c29d9a27-2159-431e-936b-e3acaa0604c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be53fe1b-abc9-4eba-bc4d-51a7be0540c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c4b8903-0db2-43f1-857b-a1bde9fc5c01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40ca9fd0-013c-4c7a-a95a-28802c61c70e"
                    }
                  }
                ]
              },
              {
                "id": "945cbcf5-f9be-4fcb-9150-3ad9d65ca629",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35d7100c-90c3-44e8-89e7-03e73c50b0b1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc8e876-52ba-4425-b236-888889ba16d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4a6b19e8-916f-49c6-97d5-65f79013e2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5951b0-f522-4096-884d-bf8a9bb4740b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ab9ba1a-e152-4114-aeab-ba4ac67e56e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58772c1-9131-4382-8f90-26313c7cd2ed",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900e7a09-acbf-47ad-8adc-e2e865af9d7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "db7891e3-7d70-4610-98de-1ddba805a671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36438b5-fe07-41fe-a19a-7fc39aecef86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f101e8e9-c636-4513-ba29-6c21f61d1434"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0da0702e-ac3d-4035-a14a-b2c9402548f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dc51f7a-03a9-4068-9a24-3ee4c1039efb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "076642af-d6d1-4038-bb01-12147a36fa80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6605f9aa-f8dc-484b-9963-2182ede9a33b"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "198cdc18-bfc3-4729-be97-209859b3f4a6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3c2426d-b28b-4183-aec5-e62ecdd962f8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4a350dd-d966-4af0-a6d9-7065d479acae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5880912-26da-450b-88bb-d511d82bc845"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "611df7ad-8743-43dd-b22c-84fe837b17f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d89d210d-cf17-40fd-97d3-b54c4c38dc25"
                    }
                  }
                ]
              },
              {
                "id": "599e335f-9c94-47c0-978f-ebf2a5d2aa25",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae0cbfcd-da08-409a-a01b-224c0e81ff4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d2e54a4-b0d0-442f-b183-85cfcf072e46"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de6eee36-0ba7-4e24-aba4-ba99d020f22d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71d1f21f-23e0-4542-bf7d-92b0678df6dd"
                    }
                  }
                ]
              },
              {
                "id": "b8aaabc1-dc0c-438e-b09d-fdad6710d95c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ac7ae75-a378-42d4-8725-63422d301124",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d322ddc-411a-4838-9e33-3822580ec524"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8ca812e-bcc3-4f3d-93b6-94463b160f9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fd18d56-5ba9-4c42-bf76-320c39ae7a58"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc61c1de-22fe-4499-9ca6-f058e0aea718",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fbb953fb-4766-4cd3-b00b-5d2bb95ce711"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "944d431f-f2f7-44db-bb80-a99b21ae0436",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a973b016-4e27-41da-b030-6088fcee30f3"
            }
          }
        ]
      },
      {
        "id": "11f155cb-ef3d-4053-a686-c9a4b164a721",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3a7d0e47-8e97-41c3-bdc3-a6d4dc41e1b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a25a399f-21db-470f-a6da-5cadb0d876a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92942677-ee67-4c55-a83e-9bac1285f517",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557e84c8-2f5c-4171-bea8-d753d901a36b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d59a2895-a094-4baf-97e4-2af02f154cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc467ec1-aef3-4306-a473-098de6b25828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10098b74-c681-4a28-b1ad-2f7629978f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2723f3ef-7f88-4c54-853c-ff71ad979de5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f266f64-582b-4483-b88a-aabbeb5c8418",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2018778-57ac-4c67-b2e0-73447f5d745c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf36128a-dd43-493e-b57a-5ca28053437c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "414c3a57-66e2-4838-a997-2a6fc35e5be6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cc9aabb-5e35-42c3-afb8-159156f2bb42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3088a7be-9b0e-4e79-ba43-fef900357ce3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9fec264-44d6-4a71-8a5b-3c279cc38a88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f22898ab-8504-4b12-9265-ebc98cd7d97b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79e3213b-4213-4a4e-8465-3b25f2e35a43",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0d08d3f4-91f4-4c41-8c00-4fe1d81f83b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a6e8913-f25a-4e05-be75-389c35a8f416",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0cb2b221-b7a1-4a92-8426-4c64d2ae21ec"
            }
          }
        ]
      },
      {
        "id": "302ff807-6826-4577-a251-ef374a29555f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2b18f950-598f-4bb8-b95a-6e155cef6914",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5328b2ec-14e3-4c09-8416-29c0678e1e55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0ef1dca-4f0b-4e20-aab3-8f30b1c9ff51",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809d9659-3a93-439f-9194-c732afb88ee7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a8a6ff82-5dfb-460f-a320-ec0b0aa6e6eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff18a69b-c814-43c5-ae19-02c1bc4e119f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a2261c6-8760-4edb-a082-0ce2673cb082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23253a1a-ce9c-4fdf-bf85-6bb83fa2bcf4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ed0f92-2d55-4978-b2ce-36cb5b32d71a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "589ef6f4-17f7-4073-aa40-89c41afef446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db937a0-0c0c-4ce9-9c7f-567d92700738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "793cc191-15e7-49e5-980c-e140039d40b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91662aee-2c46-473b-a822-c9f194affed5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9996ac90-bf23-4755-9c85-57aab25a8333"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69e68d3f-bbab-4205-8119-25d498f29a85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "732aa2ae-61a3-45af-a7d8-a59ef2ae4454"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23f09c3f-0ec0-4716-981b-1a297ce415dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "79fde55d-4921-405a-9744-2bce30bc4ca5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ce148b7-efdd-4015-960d-719ffc3c45aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "394d5fa1-405b-439b-a4f1-30a0368a1895"
            }
          }
        ]
      },
      {
        "id": "ab3a3038-b71a-41b8-bd2e-e886e9810747",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "67434745-e7e3-4fe7-b81a-460b1fbe7fec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a537a868-8130-4a6c-afb5-321bb4abff96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1bb9317-cdd8-444f-8c5c-43c30124104b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f83a4e-4593-486b-9566-a070a87ba949",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7ab66aac-a6f4-4589-a1b8-54e831c800a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8c72f0-1dae-4c25-b9e3-ef5a76afaae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40718a59-984d-4055-af4d-b76d0c3e480d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cde18b0-f7ae-4bfb-a180-4ef0cdcd0495",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c5ae19-fdfb-4b36-9e01-4b72aafdebd0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7466adf8-ce3e-435e-987e-0058849e081c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2ee461-d937-4429-8ca8-2fb480e1e57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6981c7cc-fe6e-4e47-a80c-9d5a46f3a08c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e525648d-9171-40e6-907a-2688496131dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31db6fbf-a7ae-4673-8c31-8662bea48643"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee23492c-92a1-4f85-9b2d-2f4d1db339a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ca79359-47db-4bb2-ad43-1e99b1f472f7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f0a6759-9e3b-460e-bf60-99efd22c7311",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "67090f4c-8108-47f9-a2ef-9d901b2109c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c654e427-5df9-4d81-a5d4-66a641730f25",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0dcff6b0-d47a-450f-afe6-634325a0c259"
            }
          }
        ]
      },
      {
        "id": "ca4b1dca-8527-463a-b2f8-e401a3e1b6d6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a3b1248-458f-4213-923c-75a46b4c79ad",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82abbd5e-c1f6-4b6b-a081-78484b07a6d3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "98b7af3b-1bca-48ac-9650-bf61413d9c9e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da2979d2-1cf3-4d80-83d7-5475e94a3aed",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "427aae6f-0a66-4bc7-9954-31c8abd9afa6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 169.45769230769227,
      "responseMin": 6,
      "responseMax": 2643,
      "responseSd": 321.5914186009189,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667004232784,
      "completed": 1667004287867
    },
    "executions": [
      {
        "id": "2eed2685-8b49-4098-bbb5-a321684d6f2a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ee7c27bd-48f0-4212-b23f-96889fd97c18",
          "httpRequestId": "78d8fc44-bed6-42f3-8411-0dc0d3bf57ed"
        },
        "item": {
          "id": "2eed2685-8b49-4098-bbb5-a321684d6f2a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "686d166b-8ac7-4476-aa52-91449b0c00c4",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "828e9dd3-0869-4f93-94e7-e6791b44db98",
        "cursor": {
          "ref": "5688eafd-0691-42bd-afc3-6a0471c5976e",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "15805a5f-204e-405a-bc47-25609f90870c"
        },
        "item": {
          "id": "828e9dd3-0869-4f93-94e7-e6791b44db98",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3f900146-e5b5-4485-b543-935ca9250b36",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "5947e061-c575-4952-a9a3-5d0d8362963d",
        "cursor": {
          "ref": "2586fc4e-a1fe-4ce7-bbcf-b5a289240b17",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bda16abe-06e1-4ff6-a39e-57bd07c48e58"
        },
        "item": {
          "id": "5947e061-c575-4952-a9a3-5d0d8362963d",
          "name": "did_json"
        },
        "response": {
          "id": "a7d29380-8655-4b0a-9c68-a7cc39b8465c",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c464aedc-6f5c-403f-97b6-d339bb5313fa",
        "cursor": {
          "ref": "957b30a7-dc58-4d9f-bfd2-b265e14f5fb9",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "022ce61b-5b40-4e83-8093-6348de15f9fc"
        },
        "item": {
          "id": "c464aedc-6f5c-403f-97b6-d339bb5313fa",
          "name": "did:invalid"
        },
        "response": {
          "id": "4822d95d-066c-43f2-b55b-325bc3924bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c464aedc-6f5c-403f-97b6-d339bb5313fa",
        "cursor": {
          "ref": "957b30a7-dc58-4d9f-bfd2-b265e14f5fb9",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "022ce61b-5b40-4e83-8093-6348de15f9fc"
        },
        "item": {
          "id": "c464aedc-6f5c-403f-97b6-d339bb5313fa",
          "name": "did:invalid"
        },
        "response": {
          "id": "4822d95d-066c-43f2-b55b-325bc3924bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f9b048-1415-4a7f-a55f-5fd6ba675b38",
        "cursor": {
          "ref": "6e1fbd82-882f-4550-b0e8-86b17d15051e",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "294e2a50-88fc-4bc7-bbda-340fa9bcd74a"
        },
        "item": {
          "id": "36f9b048-1415-4a7f-a55f-5fd6ba675b38",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bcb48162-cdf8-4d67-bac8-fdc25c2ca078",
          "status": "Not Found",
          "code": 404,
          "responseTime": 621,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1492be9e-85a1-43ad-af0a-e95ec48eb7a2",
        "cursor": {
          "ref": "f161be70-f42b-447f-bdc8-d29230d447ff",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f4aa89cb-ae0d-4278-924c-8e990ff152c2"
        },
        "item": {
          "id": "1492be9e-85a1-43ad-af0a-e95ec48eb7a2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6a15a867-ff7c-4b82-8736-3fcc80896053",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9f4509-8264-4ec1-8281-ff948c5c9d92",
        "cursor": {
          "ref": "9a1ed5d0-eccb-452e-847e-9f1f50d4da42",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3ba3ef7e-b40e-4fd4-9687-0b4532dca49b"
        },
        "item": {
          "id": "bf9f4509-8264-4ec1-8281-ff948c5c9d92",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "82417e7c-9cad-4fbd-b82e-5bbc1d728329",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec86d435-5ba6-4c99-a294-728a3d548ffc",
        "cursor": {
          "ref": "adacb53a-e5de-469d-9399-0b5eabd18d57",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1a0693c5-de16-4da6-bc7c-8aab73c5cc41"
        },
        "item": {
          "id": "ec86d435-5ba6-4c99-a294-728a3d548ffc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4563b095-75ca-486c-add5-9637c20fddd2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 126,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec86d435-5ba6-4c99-a294-728a3d548ffc",
        "cursor": {
          "ref": "adacb53a-e5de-469d-9399-0b5eabd18d57",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1a0693c5-de16-4da6-bc7c-8aab73c5cc41"
        },
        "item": {
          "id": "ec86d435-5ba6-4c99-a294-728a3d548ffc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4563b095-75ca-486c-add5-9637c20fddd2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 126,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a2b350-59cb-412b-bbe8-667932f7f3f4",
        "cursor": {
          "ref": "4ecba0b5-94da-440d-a275-cf387f4a8b0c",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c289b3ca-c77d-4475-a6e9-a84a08a45b67"
        },
        "item": {
          "id": "49a2b350-59cb-412b-bbe8-667932f7f3f4",
          "name": "identifiers"
        },
        "response": {
          "id": "7104158a-8d45-44e4-8b24-948aeaf2bc5f",
          "status": "OK",
          "code": 200,
          "responseTime": 472,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72eac9a7-4766-469c-9cf8-e99de0381e47",
        "cursor": {
          "ref": "2c80606d-7020-4902-88a2-cd708f31ea35",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d4da8a24-ddbd-427b-8352-63ba3b635432"
        },
        "item": {
          "id": "72eac9a7-4766-469c-9cf8-e99de0381e47",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b8b2f54e-7482-474a-8b38-6cc2264e2623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72eac9a7-4766-469c-9cf8-e99de0381e47",
        "cursor": {
          "ref": "2c80606d-7020-4902-88a2-cd708f31ea35",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d4da8a24-ddbd-427b-8352-63ba3b635432"
        },
        "item": {
          "id": "72eac9a7-4766-469c-9cf8-e99de0381e47",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b8b2f54e-7482-474a-8b38-6cc2264e2623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdff66ae-9f22-442c-ac20-af0f7d0b18ca",
        "cursor": {
          "ref": "079e323a-edd7-48e6-b8f7-4bf62bf1ef38",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c330321d-edb4-41b5-aba3-47d7158a59ea"
        },
        "item": {
          "id": "bdff66ae-9f22-442c-ac20-af0f7d0b18ca",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f961630c-a9f9-4be9-8709-c3b8c793e8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242f1673-b614-4d9c-b43b-ef16f6c2fe73",
        "cursor": {
          "ref": "b5a3d93b-3c24-4aca-8013-2e64286e7fed",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5ff56b18-9049-4c9b-af20-09339d621a3e"
        },
        "item": {
          "id": "242f1673-b614-4d9c-b43b-ef16f6c2fe73",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e3432183-5db3-4e8b-be4b-578083242f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c342c8c4-b91b-481d-9a29-f8f27ad1b1a9",
        "cursor": {
          "ref": "46753fa6-b838-49d6-92d0-289dfdda59d6",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c4cb09c6-54f7-4f0d-bece-cb48de1f4ede"
        },
        "item": {
          "id": "c342c8c4-b91b-481d-9a29-f8f27ad1b1a9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "58676587-7a0d-4bc4-930f-5d4303cbeb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d909f92-b4a4-4906-8c4c-59c9309f6d51",
        "cursor": {
          "ref": "760b5a19-4808-476d-9fc7-8572f6d7a35a",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b97695a0-3456-47e4-b9c1-234c85b9bbcf"
        },
        "item": {
          "id": "4d909f92-b4a4-4906-8c4c-59c9309f6d51",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a79bd19a-b246-47b8-9195-cfc5dc874148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b9c0c1-9fbc-471b-82bd-c14a2414acb2",
        "cursor": {
          "ref": "5a78219b-e72e-49d2-8510-23ebd9d04e22",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "48e00d76-f811-4f9a-a006-376b6c0da3b5"
        },
        "item": {
          "id": "f8b9c0c1-9fbc-471b-82bd-c14a2414acb2",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d83a5be1-ec1e-4aa7-b173-b4b966088490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55172223-8c85-47cc-952b-5ddb56cd7b0d",
        "cursor": {
          "ref": "83825cd3-a1f8-4166-84b1-ca9d810f9b16",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3671dd22-bf72-4ce8-8b9e-5bf945b5f132"
        },
        "item": {
          "id": "55172223-8c85-47cc-952b-5ddb56cd7b0d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5928d9bd-e6e3-4309-8fc7-e6134001931a",
          "status": "Created",
          "code": 201,
          "responseTime": 2643,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "9a100d25-1784-4a16-89fa-3e6511be3c9c",
        "cursor": {
          "ref": "ced7d8be-2e32-4a51-8af0-f31b69de6f46",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "14e57a7c-7185-4188-8f3c-075a0b600458"
        },
        "item": {
          "id": "9a100d25-1784-4a16-89fa-3e6511be3c9c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bbc017e5-1017-48b8-b0a0-86a05bc6e86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3e1800-10f5-48ae-bb9f-197af3c755ff",
        "cursor": {
          "ref": "b2a44abd-8c09-4bd3-b095-99409c6d1c7d",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f8d16e0b-10b4-492f-85de-233928dfc604"
        },
        "item": {
          "id": "cf3e1800-10f5-48ae-bb9f-197af3c755ff",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "308c123a-945d-4246-824a-280f77b87ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e7ec97-2886-4a63-bb20-4943f5102bc6",
        "cursor": {
          "ref": "50edd65b-f4d7-4b3d-9d22-32b869c05533",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ed8e9402-3bdf-45fa-97ea-ae934ee807b6"
        },
        "item": {
          "id": "03e7ec97-2886-4a63-bb20-4943f5102bc6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3a20482b-cc67-400a-bbd9-b383b8707af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0512052f-1044-4719-a058-b2f3741fabb9",
        "cursor": {
          "ref": "2353dc94-a85a-4f0f-bcf8-86c21a6edd06",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7865d20a-2a72-4897-84e3-3254a862df11"
        },
        "item": {
          "id": "0512052f-1044-4719-a058-b2f3741fabb9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "01184d8a-61b9-451b-a3ca-2603f7c18681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebcd2fe-d8e8-4595-a5f8-84ea8fc66e12",
        "cursor": {
          "ref": "1c63b264-8144-4bdb-9b54-b4336318a6d6",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "50e8327e-5f42-4591-974d-73615360b41d"
        },
        "item": {
          "id": "cebcd2fe-d8e8-4595-a5f8-84ea8fc66e12",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f764190b-7ad0-4599-b6a4-f4ba91d09800",
          "status": "Created",
          "code": 201,
          "responseTime": 419,
          "responseSize": 582
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "756d4700-0b12-462f-84aa-a5a6599a8988",
        "cursor": {
          "ref": "b0112d58-eac1-467d-bfe7-2766db41c191",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1cbb72e5-bd7e-4470-8cad-cecdbdd927fb"
        },
        "item": {
          "id": "756d4700-0b12-462f-84aa-a5a6599a8988",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7a50d4e7-ef1d-4cde-bf18-a8f526b9a550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0713cd-a012-40f1-9824-5b349cd6f14d",
        "cursor": {
          "ref": "9b150136-4aca-4645-a213-3ad14af1745e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5a8776d0-8711-42ad-9b74-376affaff6c7"
        },
        "item": {
          "id": "2f0713cd-a012-40f1-9824-5b349cd6f14d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5d2f5dee-68e0-4e20-934e-63652ea415ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8db7a02-02ab-4dff-b130-61b81ced5c07",
        "cursor": {
          "ref": "01217a67-8117-4a68-8e43-50113d96fc9c",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6240be04-7742-4db4-8db0-b62c349f7fab"
        },
        "item": {
          "id": "c8db7a02-02ab-4dff-b130-61b81ced5c07",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a7e12e6b-415d-4428-81d7-e752a5595a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa27f14-1977-42ad-9fe0-ce42d985f7ce",
        "cursor": {
          "ref": "bd4c435b-7881-4464-a929-27be46f15097",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a64fb2c4-f7d6-4bec-8a4d-5801585ca4ef"
        },
        "item": {
          "id": "afa27f14-1977-42ad-9fe0-ce42d985f7ce",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e5725196-e497-43c7-95dd-4738cba4a070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedad612-8152-4eb9-9897-22107ca7aa83",
        "cursor": {
          "ref": "ec6f0529-28e2-41c1-9525-6006f0062845",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cc51f53e-cace-45df-9f42-45b7e6c066a3"
        },
        "item": {
          "id": "aedad612-8152-4eb9-9897-22107ca7aa83",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "dc51ac3f-d093-4986-aaea-331989eaed19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a1cea2-3906-447c-a5de-3071b21f9a6b",
        "cursor": {
          "ref": "5b2c7c73-8e15-4f24-803a-99d211195a94",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "21e86812-cca9-4c50-8946-05d79c599132"
        },
        "item": {
          "id": "b1a1cea2-3906-447c-a5de-3071b21f9a6b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4ef08b1d-04bd-4d2f-9436-8184bdfeaee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a4babf-589d-4aa3-8b03-3d5c3b096a98",
        "cursor": {
          "ref": "d4b3a035-40e2-4a17-87f9-1e7d573f0c22",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2cb888cf-3235-4efb-ae0c-e5f750210b61"
        },
        "item": {
          "id": "a4a4babf-589d-4aa3-8b03-3d5c3b096a98",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "798a84a2-42a0-407e-9232-f80dfb8e391b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786ed597-144c-4361-909c-9598600f79d6",
        "cursor": {
          "ref": "8f3ee5ff-ea21-441c-a4d2-b4b1fb5f12a4",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7933a050-6625-4080-8128-f349c5b911e8"
        },
        "item": {
          "id": "786ed597-144c-4361-909c-9598600f79d6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5869aed3-90f8-4159-bc5d-6aca1a32ec82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b292e78-f074-4008-bdd1-fe076067f7cb",
        "cursor": {
          "ref": "0c9970a4-2df0-434c-8195-4f7312d201e6",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0710fd90-2505-40b4-a591-0fe3a34ae95e"
        },
        "item": {
          "id": "0b292e78-f074-4008-bdd1-fe076067f7cb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b7e43262-e8fd-43eb-8ca4-3e5618fec4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5506e8d1-9dbc-4472-aef0-a609eff744de",
        "cursor": {
          "ref": "27daee3a-5588-4dd9-949c-8eac70b08638",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f9ef5ac9-0f89-48c9-b8dc-0afbc151178b"
        },
        "item": {
          "id": "5506e8d1-9dbc-4472-aef0-a609eff744de",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e57ead27-44a7-4ed8-9c6d-a4a2d56f135b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a7a828-3b68-4154-9ee3-d635aa7891d8",
        "cursor": {
          "ref": "3f2f3439-8e62-430a-8680-446fa1908143",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fa424f1d-7f17-4307-afda-1053a7b61844"
        },
        "item": {
          "id": "c4a7a828-3b68-4154-9ee3-d635aa7891d8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d478a684-3ddb-4276-8fa9-648b8c8dfa65",
          "status": "Created",
          "code": 201,
          "responseTime": 745,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "817cfc0b-6f61-4af3-bd4b-7235dfa46586",
        "cursor": {
          "ref": "2cb4b4de-9e45-44bb-a790-f009c987fdea",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e8d9a74a-f8d9-4bb3-bd0d-8352b6a86208"
        },
        "item": {
          "id": "817cfc0b-6f61-4af3-bd4b-7235dfa46586",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "11e96dc2-6dca-4762-b9bd-28f80bfa4c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea62b321-d9ae-4a86-b533-359e1bf47da1",
        "cursor": {
          "ref": "b013d871-e5b3-48a3-a285-42f2cd9e603e",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c45323f2-95fa-40b6-a5b6-8b2266eb6270"
        },
        "item": {
          "id": "ea62b321-d9ae-4a86-b533-359e1bf47da1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "34afec80-6ec0-4aed-86d5-cd550ae83ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad26367-5863-4218-8150-da79dbd33098",
        "cursor": {
          "ref": "67dc53af-e706-4346-9d6a-3fd443ca016d",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7303a840-678a-4b1d-938d-99fdc08d223d"
        },
        "item": {
          "id": "9ad26367-5863-4218-8150-da79dbd33098",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5b97f604-b3cc-41b9-92bd-311760fc7f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670a5fc9-30d3-4f9f-b11f-648b0ef08b24",
        "cursor": {
          "ref": "ad4875de-a26a-4cd0-a75d-6fe6347c5de2",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "95cb0f21-3590-4fda-81cc-ed681533243a"
        },
        "item": {
          "id": "670a5fc9-30d3-4f9f-b11f-648b0ef08b24",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ac77872c-3dcb-4dd5-acae-219b1e7cb604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b11fe4-9b2a-46f7-b52f-2a656718f35a",
        "cursor": {
          "ref": "ce8ce110-28d0-4860-8b18-9b7283b93d59",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "17b60272-caae-4504-8222-054295335a78"
        },
        "item": {
          "id": "c1b11fe4-9b2a-46f7-b52f-2a656718f35a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b7c872ac-e0a8-4b25-ad28-0b81155701e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa32d81-2bb5-4f8f-8f68-9ded1cee4c74",
        "cursor": {
          "ref": "5cf1f93d-ff24-463a-9c66-cbc17706d6fa",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f08fc556-abdb-4483-806b-f5f48d365b1d"
        },
        "item": {
          "id": "2fa32d81-2bb5-4f8f-8f68-9ded1cee4c74",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a1b9266d-64b6-4361-8542-ee8978fd0573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8beb513-eaa2-4b49-b8ae-4cc90c0646f1",
        "cursor": {
          "ref": "4e270b93-da67-438c-9d61-cb585822b730",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dbca8d26-5408-40b7-bbcf-d23a02fcfe32"
        },
        "item": {
          "id": "f8beb513-eaa2-4b49-b8ae-4cc90c0646f1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1312c7f3-b954-49de-b498-0564693815ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd72c0e8-b3c8-485d-b236-19873e3bd5ce",
        "cursor": {
          "ref": "75a09417-9ed2-4c4f-8405-99c9d7c8538d",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b23ea575-bc75-430e-a5b3-0ebcb94e0b1b"
        },
        "item": {
          "id": "cd72c0e8-b3c8-485d-b236-19873e3bd5ce",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e9e5116d-d847-4504-9e2f-acb639ea3bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6236ae99-01b7-4d8a-964c-6166eb15bbca",
        "cursor": {
          "ref": "0c9c9a95-7ee7-4491-a5a4-9038acce1123",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "189c659b-c99d-41a8-8693-5b30eedf69d3"
        },
        "item": {
          "id": "6236ae99-01b7-4d8a-964c-6166eb15bbca",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "76365c97-7656-44de-aa8d-a10e319c6352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb005fc-2ecd-4aca-ab8b-e856ed07389c",
        "cursor": {
          "ref": "f8bcd7eb-a02b-47fc-84f8-790b49cc3a72",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e7798a7c-f0ba-41a1-bef3-b6e0e62e96db"
        },
        "item": {
          "id": "fdb005fc-2ecd-4aca-ab8b-e856ed07389c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "af515c21-950f-43b7-b0ed-58b64bb9cf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b438987-68d5-443d-a23d-e3c854d70a3e",
        "cursor": {
          "ref": "aa6b11a1-e25b-4a0c-a553-837c7c3d2318",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "722c730e-35b5-47c3-b83e-5a1049603ad7"
        },
        "item": {
          "id": "9b438987-68d5-443d-a23d-e3c854d70a3e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "437c2909-1ed2-42ab-9e51-0554bf234985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d08030-966e-4c20-b3da-ed6ece0f5621",
        "cursor": {
          "ref": "beddfe38-38d8-4edb-8558-23ba37b2aee9",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fd65de72-e9b6-4a48-bdc7-3d9cb6c86687"
        },
        "item": {
          "id": "e0d08030-966e-4c20-b3da-ed6ece0f5621",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e4175fc3-38b7-4758-a2ee-4bb3c20b13a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e0f87e-dc6d-4469-b9f0-6a3978ab5ea2",
        "cursor": {
          "ref": "470bca5e-1b93-4cd1-b1ba-fa913ce09978",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c8836425-a648-4b52-8452-d2f4da2a7250"
        },
        "item": {
          "id": "e9e0f87e-dc6d-4469-b9f0-6a3978ab5ea2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "54a5f810-7a23-46d0-a2e1-b5635f37517d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 469,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4945f73f-f553-45d2-8720-6edd43897a94",
        "cursor": {
          "ref": "7bf0e142-df30-4e5b-82c3-e550ed798149",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "14b6f5b7-dd13-46a3-a4b8-3d602597f27f"
        },
        "item": {
          "id": "4945f73f-f553-45d2-8720-6edd43897a94",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fca39355-0016-4397-b4f0-eedb5c8e5131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa00fc4-1cd4-435a-aed5-9e43e57ba3f4",
        "cursor": {
          "ref": "81e060b4-9bf2-44e7-98fb-67e1fb4fcb25",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "44e38032-3cd7-4e33-a5c4-c403ed108805"
        },
        "item": {
          "id": "1fa00fc4-1cd4-435a-aed5-9e43e57ba3f4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "611c2b21-853f-4c09-9839-d32f71d48de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efe5bca-279f-4f13-919d-0d7a988a61d0",
        "cursor": {
          "ref": "a53488cd-0076-49c4-9e19-68f4e2db1f0d",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f01e833f-3544-4d6d-97ca-24b6b2ab2670"
        },
        "item": {
          "id": "7efe5bca-279f-4f13-919d-0d7a988a61d0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f707eaf5-b3da-40a7-9323-1b38fb8bcdb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66672ec-d09c-461b-aaac-e2d10d98def9",
        "cursor": {
          "ref": "8411e0eb-7412-4cdc-bcaf-30fb8aa3a225",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a3a2092a-cb4f-48d7-9063-21587d5232da"
        },
        "item": {
          "id": "e66672ec-d09c-461b-aaac-e2d10d98def9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "48258224-49bf-457a-9802-b88ad8996cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b0b4be-9916-4259-8701-26dceed7ae9c",
        "cursor": {
          "ref": "2a76c43a-0d70-4ea8-b456-46b0a26498fb",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6a2a6d0b-5ef5-4bb2-82b7-e1de3cde5123"
        },
        "item": {
          "id": "16b0b4be-9916-4259-8701-26dceed7ae9c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "90940174-f632-4ff7-9eaf-321ad3295e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb9567a-0883-427a-b6c3-c12c50836f2d",
        "cursor": {
          "ref": "a2683f98-fc44-4e31-86f8-b02cd1f82c07",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b1bae693-8e6b-424f-932b-ed83f13f7830"
        },
        "item": {
          "id": "1bb9567a-0883-427a-b6c3-c12c50836f2d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d8dac5d6-d527-416e-af42-2e1906e78ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a34da4d-f173-4d24-a006-ae1b933d9834",
        "cursor": {
          "ref": "72aed0b0-cd01-4e38-b899-bbfad5f3b5b6",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "732ac290-8d34-490f-828a-23a2b3aee647"
        },
        "item": {
          "id": "8a34da4d-f173-4d24-a006-ae1b933d9834",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3bac0943-e32f-4e96-9aa2-f2e39a162d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 621,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b82ac0eb-a4d2-4a90-91f7-3d24a1ec91eb",
        "cursor": {
          "ref": "692702a1-91ed-4ae0-ae84-71b351b4e58d",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8184594c-fb41-42c1-ad49-01de63c00fd5"
        },
        "item": {
          "id": "b82ac0eb-a4d2-4a90-91f7-3d24a1ec91eb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "21c82b70-a1fc-41b4-8582-f861c13ca758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8689ab71-d817-4e15-a1e1-e54ce57d1b02",
        "cursor": {
          "ref": "145e7781-c695-4b9f-8761-0ce878d3b1fd",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3830ee8a-490a-4c62-a534-a6b4ec248941"
        },
        "item": {
          "id": "8689ab71-d817-4e15-a1e1-e54ce57d1b02",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "05cf43e4-1478-4e38-a69c-334c0914aadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37a46ea-5c24-4bd8-9ff5-ff01b53a9696",
        "cursor": {
          "ref": "52188c97-b6b8-4767-af2e-238f91defedb",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7bd1c4b7-e1d0-46d2-867d-225189c42d1f"
        },
        "item": {
          "id": "e37a46ea-5c24-4bd8-9ff5-ff01b53a9696",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1272798d-1881-459a-8fb3-0e7af5ebff3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84fcb7a4-567c-40a9-8cf9-f529a57d7adf",
        "cursor": {
          "ref": "8a0bf4e0-3bc5-4569-8139-774ab0349cf6",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7aa857ab-83e1-4303-b92a-f1a3ef6c653f"
        },
        "item": {
          "id": "84fcb7a4-567c-40a9-8cf9-f529a57d7adf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "87ff1968-b0de-42f4-b9b5-5ace4cbd2de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5236512-12f3-4498-89e8-b8d3a9508eb6",
        "cursor": {
          "ref": "e9277027-25d9-4fde-a061-0093614fd51f",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a0e3f757-473a-483d-a3ad-f092a525922d"
        },
        "item": {
          "id": "a5236512-12f3-4498-89e8-b8d3a9508eb6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fbd5ac95-6ec8-4044-98ce-759847e6222e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1f669e-ef26-46b0-93fa-93a843a57ae7",
        "cursor": {
          "ref": "04179d66-a3c0-4995-822a-7f3c29d49169",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c79d284e-45c9-43ed-960c-b2b902fe8cec"
        },
        "item": {
          "id": "7a1f669e-ef26-46b0-93fa-93a843a57ae7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b45da976-d4d7-4277-9155-a8555b1a7a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3f7e7d-45e7-493f-9199-73a59b0080b4",
        "cursor": {
          "ref": "e3ffd206-b3e1-4c02-bb86-e9c235629187",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fb2aa5de-1594-4b8f-b65f-321434c5fd47"
        },
        "item": {
          "id": "5b3f7e7d-45e7-493f-9199-73a59b0080b4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9745c725-2663-4de3-b564-25b190f82ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824c9738-4719-4cd4-b236-762ae56c9a64",
        "cursor": {
          "ref": "42493d34-51ae-4022-9ccf-cce4f0844838",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "93f6bbf0-4843-40c6-8b99-d4e3b3ed4a98"
        },
        "item": {
          "id": "824c9738-4719-4cd4-b236-762ae56c9a64",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e73d07e9-729f-493d-93ab-1d68ae37c85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864e12fe-8d7b-401f-9394-daf37ce5086c",
        "cursor": {
          "ref": "c5651c3b-d516-426c-9696-add1362f7faf",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "22b8d73a-1637-4029-addb-f2b2642dbad7"
        },
        "item": {
          "id": "864e12fe-8d7b-401f-9394-daf37ce5086c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dd94945d-277e-4672-bf74-bb6e8fbe37de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77aaf47d-151e-43bd-8b30-d92a592823a7",
        "cursor": {
          "ref": "72ffec1b-7db0-4820-bbc3-e295f7405a89",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "acf3b35a-2366-44c2-a23d-6a8d6c231e79"
        },
        "item": {
          "id": "77aaf47d-151e-43bd-8b30-d92a592823a7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ae6313b8-6809-450b-b5c5-403a7f4ba718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4111da-2fa0-4a05-a926-0ee6e1e5c800",
        "cursor": {
          "ref": "cc950a89-353a-474b-91d9-b80e06912541",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "82a96e7e-377f-4d1d-946c-5e48e8987946"
        },
        "item": {
          "id": "4a4111da-2fa0-4a05-a926-0ee6e1e5c800",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dbdd3f5f-38c7-4fc2-a934-163b527ad64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36639dec-7a6f-4155-91d2-423783b35b68",
        "cursor": {
          "ref": "2aa210e4-054c-4ccb-83ef-a1205c1ac61e",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b1fcbe90-b1d2-4477-9d4b-febc66c890a0"
        },
        "item": {
          "id": "36639dec-7a6f-4155-91d2-423783b35b68",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "78cbfa4f-e846-461c-9aab-9311b373f555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610c4bd8-dcd4-4cd1-90dc-6f3c3f0c8393",
        "cursor": {
          "ref": "c33dde56-53f4-4edf-9617-d7529906fdfc",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "88ca5b4b-3600-4252-9121-bc1cc159927d"
        },
        "item": {
          "id": "610c4bd8-dcd4-4cd1-90dc-6f3c3f0c8393",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "05a045a8-69d1-40d7-9918-83e3b34575c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fcb491-9a48-4cf1-b256-41cb2651eab5",
        "cursor": {
          "ref": "2b2ffa1a-7f59-4915-9363-b57312d55a81",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8c96f8eb-8297-496f-b995-f0681e926ff6"
        },
        "item": {
          "id": "f3fcb491-9a48-4cf1-b256-41cb2651eab5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f6e9fbc5-c0b6-4d09-8e8b-2edc44776230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62c4ebf-0eaf-41c7-bd8f-c07cee0059f7",
        "cursor": {
          "ref": "98a6458f-d207-4c8c-bac8-cbb73973820a",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7d134a4e-e896-4b2a-8d67-5cfd69d4565b"
        },
        "item": {
          "id": "e62c4ebf-0eaf-41c7-bd8f-c07cee0059f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "640cb850-7e0a-4c78-a7a1-ddaf3844513b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09f5395-e3dc-4cbe-b2e6-e350d7ddafbd",
        "cursor": {
          "ref": "4ff4c5af-6dff-4e70-84ef-b029ceac4db4",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5b027955-4d9f-4ed2-a913-b100d49360c7"
        },
        "item": {
          "id": "b09f5395-e3dc-4cbe-b2e6-e350d7ddafbd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c44c2b5d-254c-445b-b642-4ca2e7e52dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39aa48ab-078c-4dbd-a3fe-fcd7051eeb64",
        "cursor": {
          "ref": "3cc8e891-9c6d-4d0a-9aac-2cf826ffaa49",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b8737913-c281-4c0d-a2d4-f75ac453b861"
        },
        "item": {
          "id": "39aa48ab-078c-4dbd-a3fe-fcd7051eeb64",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f5bf0a9a-3303-49af-a46f-19e11fabb6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 650,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25380c98-1dfd-4898-9e6e-d15820475df3",
        "cursor": {
          "ref": "1cf15fbc-5ea3-4446-bcf4-5c1d2cd68741",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ffe32bb9-5a53-4822-a6ba-daec39ad8211"
        },
        "item": {
          "id": "25380c98-1dfd-4898-9e6e-d15820475df3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c91494cc-edf0-4eb4-982a-cc81aca10dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3caa58b8-d23f-4810-b182-5db2cd313981",
        "cursor": {
          "ref": "625574ce-a625-4ef1-b858-28430c671c81",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "91033d9b-8742-4baa-ac91-8d51b489ca11"
        },
        "item": {
          "id": "3caa58b8-d23f-4810-b182-5db2cd313981",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dc6106b5-5660-45e4-9cde-64ea23388a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cd2f97-1afa-4bc0-81af-414b38913a67",
        "cursor": {
          "ref": "e9045c53-07e1-4d52-80a2-ac7d182c3172",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7a2b5acd-2150-4046-bc56-6b46ec4397b2"
        },
        "item": {
          "id": "91cd2f97-1afa-4bc0-81af-414b38913a67",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "34eac4a0-1987-4cd5-97d1-37ebd238e959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f53634-6e6a-4759-a7b1-61acfa4cd92a",
        "cursor": {
          "ref": "0d6e6ec0-256b-45a1-895b-c039bca92e44",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a7f63dc3-2050-4d1e-9915-75416825640d"
        },
        "item": {
          "id": "10f53634-6e6a-4759-a7b1-61acfa4cd92a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "43897cd8-72c9-4b52-ba30-dc0795f1b9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8e4ff1-7f57-4b42-831d-68d4a24b62ef",
        "cursor": {
          "ref": "f16ef35c-d2e8-4667-afcd-da880618619c",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "94acf4ce-ef0e-49a5-ac25-bc64cdf2a241"
        },
        "item": {
          "id": "7d8e4ff1-7f57-4b42-831d-68d4a24b62ef",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "32233905-481e-481c-84e2-dbc0539dc7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096d1dd8-7155-4882-8b69-d9ab929eec51",
        "cursor": {
          "ref": "25e3f0d0-5397-448e-bd55-f7b57d916275",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b880ad5f-f44b-490f-9a18-9482ba97fa7c"
        },
        "item": {
          "id": "096d1dd8-7155-4882-8b69-d9ab929eec51",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "19d06b59-823c-4c10-8c6b-cb505018bfa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27242234-7c32-4475-8761-9e5d3496ae42",
        "cursor": {
          "ref": "2225a43a-7dd6-4240-8441-5e3949768baa",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fbf22bf1-99ce-4c40-9119-b6ed4dba13dc"
        },
        "item": {
          "id": "27242234-7c32-4475-8761-9e5d3496ae42",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "140a9543-3a8a-4d10-a0a5-428d7a6f8726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4dc9b0-70c7-4d74-828b-85cf05a34175",
        "cursor": {
          "ref": "11f67fdb-0462-4cdf-8ef8-cfbc1aaf2888",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d6860f2b-a9f6-48dc-ad9a-72cae6000437"
        },
        "item": {
          "id": "5b4dc9b0-70c7-4d74-828b-85cf05a34175",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "88497906-6bb8-4960-9846-27caa9f0e49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acffb59f-e67d-43c8-93fb-931b4f946e14",
        "cursor": {
          "ref": "93456b01-1af9-4bd7-ac43-96ba84cbc10e",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "081180ce-829f-4ef4-afe4-da244d93642a"
        },
        "item": {
          "id": "acffb59f-e67d-43c8-93fb-931b4f946e14",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b69fd077-e399-41af-932d-5bed82681898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d06529d-a2e8-45c7-bcee-eb5859ef8700",
        "cursor": {
          "ref": "67e462a6-2c61-4581-8dd1-860fddff8b27",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "08720d98-04ff-4f45-8225-efc917c5c840"
        },
        "item": {
          "id": "5d06529d-a2e8-45c7-bcee-eb5859ef8700",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7cdac761-2513-4d21-b428-4d4f67988de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10765f9d-9c9c-4cca-88fb-e50af8645017",
        "cursor": {
          "ref": "005ff881-b325-4ed8-9c4c-19cf94a50c64",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "17cbde5b-bdba-4b00-b617-c2281381eb00"
        },
        "item": {
          "id": "10765f9d-9c9c-4cca-88fb-e50af8645017",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "66b8e2f7-8aa6-4068-bba4-f9187226de7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403c864b-03b9-4970-9c46-02473f679088",
        "cursor": {
          "ref": "9aad4ab6-a5e5-4051-b189-85071c7a4418",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "dc5b03ea-2445-41f0-8c3c-b45493c967f0"
        },
        "item": {
          "id": "403c864b-03b9-4970-9c46-02473f679088",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "82589f14-c986-4a80-80c3-3612811bccd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14cee18b-6447-46b2-927b-d1607d20cdc1",
        "cursor": {
          "ref": "c532fc9d-189a-4149-8468-7a2c990e4aef",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9ffa96d2-5c62-49fb-a639-7c35b41cf845"
        },
        "item": {
          "id": "14cee18b-6447-46b2-927b-d1607d20cdc1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6f4068d5-7e9b-4372-bd41-e6e6ae9adc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc12fa4-008c-4054-81fd-2c434cfb05f9",
        "cursor": {
          "ref": "d0deff06-c4e7-4b2d-9d05-709496a6c73c",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "11e3c42b-5365-4d23-891e-113b935509a2"
        },
        "item": {
          "id": "bdc12fa4-008c-4054-81fd-2c434cfb05f9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c6335868-c815-4a01-b5f0-41f26a3b692d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1985,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9acb280-3d94-45fa-9165-ed651db3d9c4",
        "cursor": {
          "ref": "8f3cb741-b2b5-4f47-9d74-1d893675324b",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "666ce765-f9db-4cab-9e11-8fd819868984"
        },
        "item": {
          "id": "c9acb280-3d94-45fa-9165-ed651db3d9c4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1bb05646-b212-41d8-9513-913b75a4a9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73360582-86b2-4069-b8a1-7651d280138c",
        "cursor": {
          "ref": "709a41dc-886a-480d-868b-d58556326653",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9bcc099c-5744-4a03-b1cb-89fa005bc4ce"
        },
        "item": {
          "id": "73360582-86b2-4069-b8a1-7651d280138c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3fb17dee-be6c-48a6-907f-2b4cefd207a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53879df-07f7-4dc6-81f5-2c304daa6df7",
        "cursor": {
          "ref": "2514e57c-edd0-422f-9538-9e8ab4208a86",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "32807f38-51cc-4429-b9ce-dedde6409ad2"
        },
        "item": {
          "id": "e53879df-07f7-4dc6-81f5-2c304daa6df7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d0b5069b-82e2-44a4-a08f-76b02ebd80b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd7f4f9-713a-4ada-969a-b04744cac98e",
        "cursor": {
          "ref": "b6f9aaca-fdd0-4da4-a280-9b81f22f2dc2",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bf7d155c-f820-4c20-8895-a66f2cec53a1"
        },
        "item": {
          "id": "bdd7f4f9-713a-4ada-969a-b04744cac98e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f9184651-2df7-462b-bd51-dcc36ea03326",
          "status": "Created",
          "code": 201,
          "responseTime": 488,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "dc36c3e5-f060-4ca0-9c8b-d0424b8e280d",
        "cursor": {
          "ref": "9520639d-fce4-4ba9-a5ad-6cfef93c077d",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f0b84c79-a8b2-4ec3-a0b0-7b575078a1bd"
        },
        "item": {
          "id": "dc36c3e5-f060-4ca0-9c8b-d0424b8e280d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "949d6d75-f55d-492e-b956-1a2e005e09af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48caef8-28ae-4bb9-94c1-228e3a7033db",
        "cursor": {
          "ref": "2f851885-640d-4ed8-9f28-5e0883cbae7d",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7a47172c-b3e0-46ca-8aa1-5c7760c446ab"
        },
        "item": {
          "id": "c48caef8-28ae-4bb9-94c1-228e3a7033db",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cde010de-27ad-457f-905f-546177fae3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a836201c-19a3-4352-8ae6-f9564caa1b6b",
        "cursor": {
          "ref": "70fb6192-0bd2-4834-991d-280415275f3d",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3da28a6e-b182-435f-bb8b-97c87dfb8a31"
        },
        "item": {
          "id": "a836201c-19a3-4352-8ae6-f9564caa1b6b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "862ca88c-8016-409f-99c8-5fb08ecdbeb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35573943-af9d-4df9-acc9-ae64c6b79cf8",
        "cursor": {
          "ref": "9a402c5a-2fd1-4ab0-bbf9-d21d4895116e",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "89188cb1-6f16-46d8-9c36-5ef31ef4de94"
        },
        "item": {
          "id": "35573943-af9d-4df9-acc9-ae64c6b79cf8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "634d753a-4e5b-4a12-a031-09533a04c76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfff5694-1836-47ff-b253-ccfe80ef80a8",
        "cursor": {
          "ref": "0d2fe238-b9ea-4ddc-9b84-6f968dbee3f1",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "67eecc97-7791-4e71-8b54-77c91e97ce7c"
        },
        "item": {
          "id": "bfff5694-1836-47ff-b253-ccfe80ef80a8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dc4f62a7-d127-45c1-8729-73b9fc894d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845aaaf0-dab3-49fe-8960-755854105f76",
        "cursor": {
          "ref": "24d6762a-1dc6-4e8a-8df7-f1a76f4d23d0",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b0965ceb-38fe-44de-936e-ae69693576ef"
        },
        "item": {
          "id": "845aaaf0-dab3-49fe-8960-755854105f76",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ad1403a6-828e-44bf-adab-2e214161afb6",
          "status": "Created",
          "code": 201,
          "responseTime": 487,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "03f05bcc-af8c-4f51-aefa-651b849fc0b7",
        "cursor": {
          "ref": "10396601-3acb-4096-8a65-f4c2530fd95c",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bb6c4ce8-48d6-4b57-8845-543a55d6196f"
        },
        "item": {
          "id": "03f05bcc-af8c-4f51-aefa-651b849fc0b7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e5e7d483-cc8b-4fd5-88ea-f07dd3d1ea77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6704f0d-e928-4b7a-9446-9be75e2d3913",
        "cursor": {
          "ref": "88c945e4-7324-488c-bf82-1e90bab67b17",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "05730a64-5b7e-49fd-a011-8d64edf01a23"
        },
        "item": {
          "id": "f6704f0d-e928-4b7a-9446-9be75e2d3913",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0397a050-50a2-4249-8438-588a1d7a35e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5890e1-a794-4864-b433-ac4aea18f304",
        "cursor": {
          "ref": "589d5d25-810a-4fb1-91d9-f1219b098d23",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a66cb3be-a3e7-4dfb-aedb-dce0f5cf2162"
        },
        "item": {
          "id": "7d5890e1-a794-4864-b433-ac4aea18f304",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "11d6a789-4355-4103-b293-7e24fb3d6793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f517825-4aef-437b-9211-49aa966a5d1e",
        "cursor": {
          "ref": "adbd3191-ba85-4b75-be8a-1dfc0f3cea58",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0b2376e5-4488-4b21-9301-ac0acdb6e649"
        },
        "item": {
          "id": "9f517825-4aef-437b-9211-49aa966a5d1e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "356d7551-e2dc-41e3-8094-ad7c2634cb8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa86240b-7b27-4566-a7e7-96ffa1c565b7",
        "cursor": {
          "ref": "dd761df7-8fd9-4152-a3d2-301031dcd405",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "df064710-d372-49a8-bbd3-1aa542abcfb2"
        },
        "item": {
          "id": "fa86240b-7b27-4566-a7e7-96ffa1c565b7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b63045f4-3960-49e7-90ab-611163106e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7be99c-f0c2-4542-8ae0-70248cf245f9",
        "cursor": {
          "ref": "2db2427d-94d3-49c2-9448-da52d05f6004",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d4870820-87c0-42e6-b1ff-b6b4bcc2f056"
        },
        "item": {
          "id": "8e7be99c-f0c2-4542-8ae0-70248cf245f9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d33ae2fd-fa0a-451b-b7ab-b100a61d0738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da766db5-15c5-4d31-b8d0-acaac35e99dc",
        "cursor": {
          "ref": "c74538f3-7219-41e8-a424-412084bc9c73",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "02e7ef3e-f82a-4221-864e-2c05b3b83724"
        },
        "item": {
          "id": "da766db5-15c5-4d31-b8d0-acaac35e99dc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fe0252b7-28bc-4fcd-81cb-93c87d2d78e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c98d15-2ca0-4f6a-a066-5e02ba3312f7",
        "cursor": {
          "ref": "030f6500-531a-415f-9c3c-643cab5ae7eb",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "710a92dd-2649-405d-9c0f-454a328e7a00"
        },
        "item": {
          "id": "02c98d15-2ca0-4f6a-a066-5e02ba3312f7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4e6b1f06-5b57-43a9-b69e-a948be484121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf4b621-5160-4828-868f-e82c0c0d91f3",
        "cursor": {
          "ref": "999265b5-f5d5-4b71-a18a-6ee73d35c7cc",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "53c15ed5-b419-4ce4-a1fa-330d41be749f"
        },
        "item": {
          "id": "5bf4b621-5160-4828-868f-e82c0c0d91f3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1cf18b02-f982-4964-9127-53719a6af697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "0b4644d6-3af6-4d02-90e6-1e9f9465c13e",
        "cursor": {
          "ref": "7770cb0b-c2b4-4804-a13d-6204b087089c",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "93025b42-5443-42d6-b787-477e1d7cbed5"
        },
        "item": {
          "id": "0b4644d6-3af6-4d02-90e6-1e9f9465c13e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a09c542b-5897-4990-92cb-648fe7ded6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b3797b80-7b65-418e-95df-195584498d32",
        "cursor": {
          "ref": "267335c5-1dea-4a4f-a87b-891ce465b797",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d7c9fe6e-f85f-46ff-b345-c5221b6d4654"
        },
        "item": {
          "id": "b3797b80-7b65-418e-95df-195584498d32",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f552d0eb-c697-4a0e-be04-259dcac38029",
          "status": "Created",
          "code": 201,
          "responseTime": 825,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "00967bd7-be41-4683-85c0-be5f8cded3b7",
        "cursor": {
          "ref": "f3384f06-cb71-4295-9008-92ddcd4c30c1",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4b2dc284-5745-4f78-88eb-cdfad785242f"
        },
        "item": {
          "id": "00967bd7-be41-4683-85c0-be5f8cded3b7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "661e620c-4e0b-4177-864d-907de7c807a8",
          "status": "Created",
          "code": 201,
          "responseTime": 760,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda8191c-5cf3-4771-ac2a-7822a573d373",
        "cursor": {
          "ref": "ca1ae975-0651-4fae-a311-ec1116a28b74",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "67e16e41-eba9-4522-9c89-901d0d254004"
        },
        "item": {
          "id": "cda8191c-5cf3-4771-ac2a-7822a573d373",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0f8ca8fa-b743-4e25-bbfb-561c3a35fbd6",
          "status": "Created",
          "code": 201,
          "responseTime": 407,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15032a3-827b-49d7-acf9-92ed0f4c1682",
        "cursor": {
          "ref": "828ebd7d-af3e-4dda-8bfb-6e437503a267",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e651fc49-fc42-4172-9b5a-ac9613cd05ab"
        },
        "item": {
          "id": "d15032a3-827b-49d7-acf9-92ed0f4c1682",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5626ed6f-1222-439d-8df9-20b2e9d8c819",
          "status": "Created",
          "code": 201,
          "responseTime": 472,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dbb2d4-aef0-43f9-a646-bd4c73444d15",
        "cursor": {
          "ref": "d063c2d6-d6cc-4d65-8c9d-737e56d47f90",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a3b8bd2d-350d-4555-9e72-52b2deaf64e7"
        },
        "item": {
          "id": "30dbb2d4-aef0-43f9-a646-bd4c73444d15",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cf6b2e47-a14b-4b8d-b297-76a277bf4ddf",
          "status": "Created",
          "code": 201,
          "responseTime": 665,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf3037e-aed8-4ef7-b9cd-825ac60aa2c6",
        "cursor": {
          "ref": "ad98758b-b899-430b-9f06-56685c2b0fc6",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c159d2d8-10fe-4773-8629-b759559ab07f"
        },
        "item": {
          "id": "ebf3037e-aed8-4ef7-b9cd-825ac60aa2c6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f4d18d9a-1ee1-4243-b285-776c945da7d0",
          "status": "Created",
          "code": 201,
          "responseTime": 403,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ff415d-6a27-4d48-9d9d-63f9005d465f",
        "cursor": {
          "ref": "20a371e7-0ec9-4d36-ba76-7eb174ee0e6f",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "acee761e-438e-474a-8996-84ef710cbc94"
        },
        "item": {
          "id": "04ff415d-6a27-4d48-9d9d-63f9005d465f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3a7e64c7-401c-4ec5-8401-305557aeb063",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "04ff415d-6a27-4d48-9d9d-63f9005d465f",
        "cursor": {
          "ref": "20a371e7-0ec9-4d36-ba76-7eb174ee0e6f",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "acee761e-438e-474a-8996-84ef710cbc94"
        },
        "item": {
          "id": "04ff415d-6a27-4d48-9d9d-63f9005d465f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3a7e64c7-401c-4ec5-8401-305557aeb063",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "5224c5c9-6696-4ebf-a26a-094792943bc3",
        "cursor": {
          "ref": "27a31a5e-6031-4882-840d-91841606903a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "88bb642f-7d50-46f3-b352-6de43cf186e7"
        },
        "item": {
          "id": "5224c5c9-6696-4ebf-a26a-094792943bc3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "27f1636f-36dd-4c6b-856b-ce5464b08d2b",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "cfaa8757-2663-48e5-8215-1baef550eeb2",
        "cursor": {
          "ref": "d8d121cc-310c-4598-916f-502a7bc81fe7",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7f139dfa-428f-4ec5-8aa0-7022ae1fad6c"
        },
        "item": {
          "id": "cfaa8757-2663-48e5-8215-1baef550eeb2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2995d931-70b9-4793-a46f-47a617a006da",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ad1aa83d-6e1f-4fdd-8f71-a185003ca56a",
        "cursor": {
          "ref": "6f813f2f-a50e-4079-90f8-9f8dc2ec4e71",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "60db2cf2-27a0-41bc-afd7-6314bc4d9438"
        },
        "item": {
          "id": "ad1aa83d-6e1f-4fdd-8f71-a185003ca56a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3f875bfb-5f6d-45ea-888a-f49e1bde64be",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "3e02c21c-f4b9-4ad5-860b-8afbb2d945c2",
        "cursor": {
          "ref": "ef611827-3db6-423c-bb81-57166b74390d",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1165e5af-a7d7-42c3-bc3b-98786b543fa0"
        },
        "item": {
          "id": "3e02c21c-f4b9-4ad5-860b-8afbb2d945c2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8282cf75-4d11-4025-a97b-449018ce2d1e",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f5f83616-26d0-4c40-80ef-8c384251d30d",
        "cursor": {
          "ref": "4942cfee-bfb7-41de-b955-8620565c6b14",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f12ca46c-1d3e-4e7a-a118-cf395b20074a"
        },
        "item": {
          "id": "f5f83616-26d0-4c40-80ef-8c384251d30d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f19757a1-4342-4aac-ac08-5c6f47546004",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "e1ae8a79-4d60-48f6-8323-97a94c9f1b0b",
        "cursor": {
          "ref": "bef1fe5b-4c26-4ae7-8b96-ab794406040e",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "45193fb1-8e33-4f43-9161-a7101bcb5dda"
        },
        "item": {
          "id": "e1ae8a79-4d60-48f6-8323-97a94c9f1b0b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e4e72af0-ff38-49c9-80e2-d4df32adfa30",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "329206dc-ad85-44be-940c-41a9c430e5ab",
        "cursor": {
          "ref": "fdc80829-43ca-4a51-89a4-e0f42ebc334f",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d782287a-baf7-486c-a6b2-ae1cc96176c4"
        },
        "item": {
          "id": "329206dc-ad85-44be-940c-41a9c430e5ab",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f467c8d4-75e0-4f14-b5f3-f6206c4ab1b0",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "7c5d96c3-67c6-446a-ac20-dbe28ec5fa0b",
        "cursor": {
          "ref": "146b05a7-170d-4edd-93de-4e924a680a95",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6eeea600-98f0-4879-806c-f3085a09b007"
        },
        "item": {
          "id": "7c5d96c3-67c6-446a-ac20-dbe28ec5fa0b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ebdb5f77-ab41-42f4-89cd-62bb5a7973fe",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "543d2034-d445-4943-be37-99b905946e39",
        "cursor": {
          "ref": "6589d75a-0087-4e85-8572-25e07b439d36",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0e7ee32e-5673-486c-90df-bf8d27843877"
        },
        "item": {
          "id": "543d2034-d445-4943-be37-99b905946e39",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "de7f7818-e8b4-48da-b9c7-cafcda3715fb",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "79a8571c-9777-4ebf-b9c9-b41d493b00fc",
        "cursor": {
          "ref": "097a7e2b-6725-437f-aa50-0d10258655e8",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8d3d72eb-7324-4b7e-b1f6-b2d264cff64c"
        },
        "item": {
          "id": "79a8571c-9777-4ebf-b9c9-b41d493b00fc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0f5f3f91-4eaa-4660-93aa-b3128aaf263b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "00c5019c-c595-406b-84a2-3f3160288d3b",
        "cursor": {
          "ref": "8c32e204-df2e-49d8-a593-7ed3875a04db",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8fbfb16b-f287-44bb-bd87-3311e62a49c8"
        },
        "item": {
          "id": "00c5019c-c595-406b-84a2-3f3160288d3b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "82905280-f8bc-490a-b8ff-941289826fda",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "93ee35ee-fc02-4302-b9df-90ab964e44b9",
        "cursor": {
          "ref": "3f1befc8-4c9b-4a7f-aa6f-343cb98aa37d",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ab99b654-0de5-4bd6-8f8e-faac24be8e6d"
        },
        "item": {
          "id": "93ee35ee-fc02-4302-b9df-90ab964e44b9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5c98143b-5175-4f7c-b2b1-4517cd924730",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "cdaf250b-9284-4e84-9aee-1607ce11b935",
        "cursor": {
          "ref": "94d9a48e-31e4-49ba-8e9a-04bb612b6207",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9f92cb5c-e526-4060-8780-6375e5b8c0c2"
        },
        "item": {
          "id": "cdaf250b-9284-4e84-9aee-1607ce11b935",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a4628f19-373e-42e7-81df-f1893f26fce4",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "66e71147-d74c-4b98-9a6e-22e664025b69",
        "cursor": {
          "ref": "ef624c05-de75-434d-911f-fce740f1c119",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "765e177d-0445-400c-a8eb-1459a07a599f"
        },
        "item": {
          "id": "66e71147-d74c-4b98-9a6e-22e664025b69",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a7767be9-9011-4e62-a2ab-05b4eec8157c",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "2f51f924-bbb7-43f8-bdcd-9336aacf42ce",
        "cursor": {
          "ref": "3855e3ff-1e04-49f6-8194-d4023cfa8e33",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d387038b-1acc-48bc-9709-e4df0369bb8b"
        },
        "item": {
          "id": "2f51f924-bbb7-43f8-bdcd-9336aacf42ce",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bc12e1a7-75bf-4560-a7ef-9ea296e950f2",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "90eba9d1-903b-47a0-9385-40e6aae83a82",
        "cursor": {
          "ref": "d157e92d-c7c5-4c31-bedf-af604f2bb58d",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c848be0c-188d-4375-9449-af0a60c2374d"
        },
        "item": {
          "id": "90eba9d1-903b-47a0-9385-40e6aae83a82",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1f412cc0-195a-4466-9c59-e2bbfb56dc04",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "33d526d5-4aec-486c-84c2-a624b2c1068f",
        "cursor": {
          "ref": "710d26f2-4a22-4524-a993-ab4d6cb15c3f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bc1bd515-6408-47b2-8786-20a9b5f4ab50"
        },
        "item": {
          "id": "33d526d5-4aec-486c-84c2-a624b2c1068f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0b8eeaf3-4965-480f-ba6c-7be6c6a7e564",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "53c0da34-d163-442d-a2c6-9771e0cc0929",
        "cursor": {
          "ref": "4f55ad5a-4fa0-4fa6-920a-1b47a6652172",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5cedd6a9-433c-407a-8591-d4b2ace02aa6"
        },
        "item": {
          "id": "53c0da34-d163-442d-a2c6-9771e0cc0929",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9103f25c-328c-496e-8986-e943a8928fef",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "470d83c0-49e2-480a-9a52-f454f156dcc1",
        "cursor": {
          "ref": "03c9b67f-a03e-4432-a18e-b292f839e9e5",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f0259a25-dccb-4386-ad9f-e71faba25ee1"
        },
        "item": {
          "id": "470d83c0-49e2-480a-9a52-f454f156dcc1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2a473a1b-a560-4c11-a42a-da610f65cc7d",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "39b7485c-15e2-44b9-8000-f80cefa7d31b",
        "cursor": {
          "ref": "6d07a5f2-e9a5-4bbd-9522-58b57dc0d574",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f11c4daf-5283-408e-9309-56f1a9846f42"
        },
        "item": {
          "id": "39b7485c-15e2-44b9-8000-f80cefa7d31b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cf9c78b2-f532-4824-b940-30e9254df556",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c217c495-bd4e-4923-8396-640548954945",
        "cursor": {
          "ref": "8ff2a43f-5a7d-4ddc-b8f3-e228a2db0756",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "09b9d623-9c96-4114-b14d-201f2ed46db1"
        },
        "item": {
          "id": "c217c495-bd4e-4923-8396-640548954945",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f2aef950-20c0-4c30-98b6-fe1da76b4db3",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "0f3134a9-7c62-4b52-9bef-5df8b2c6bfdd",
        "cursor": {
          "ref": "2cd9aa0f-d620-45a1-a60a-cb80020a67bf",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "813c1fa5-dbfc-439a-983f-fc5afb1c175f"
        },
        "item": {
          "id": "0f3134a9-7c62-4b52-9bef-5df8b2c6bfdd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2755723e-af3e-4a60-9a22-3d944059a12f",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e69c07ac-92e9-4e20-8b12-f9772fa2e841",
        "cursor": {
          "ref": "ee56b21a-654c-4794-9d72-e27284b3be99",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2b3d3a7f-bb62-47e8-810f-6e26fc61022a"
        },
        "item": {
          "id": "e69c07ac-92e9-4e20-8b12-f9772fa2e841",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d8d4f86b-821a-4447-a274-a2bbea40b3a6",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4a7089d0-b8de-4bdf-bb83-0ad6d8a4c64c",
        "cursor": {
          "ref": "e4d21c77-cbca-4658-9b08-cc22e1ebee22",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5c6745e7-7b20-4a4f-bc64-bf45ecf8c8e4"
        },
        "item": {
          "id": "4a7089d0-b8de-4bdf-bb83-0ad6d8a4c64c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "485c34d7-8bf5-4b34-b3bf-961e5f8cb869",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "bbb42efc-d469-4d45-822d-0da7e6259d2e",
        "cursor": {
          "ref": "fb5a32cc-4e84-41f0-a7a9-49b8ffb8bc33",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "75c3098f-d69f-4c8c-9033-f89c8e149c9b"
        },
        "item": {
          "id": "bbb42efc-d469-4d45-822d-0da7e6259d2e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "01bb2201-0545-4ef8-a7be-18e3e2fd2242",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1b26f811-df77-4f29-abee-24da8f1980ce",
        "cursor": {
          "ref": "331849ac-d847-4215-8304-b171b276be38",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "33389743-6da8-45f1-a694-f984dd585fab"
        },
        "item": {
          "id": "1b26f811-df77-4f29-abee-24da8f1980ce",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c415a6e9-0661-41ad-8de2-031aab0ec060",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d8c3f847-b053-406e-8695-eac5a48ee31a",
        "cursor": {
          "ref": "bdabe1e3-280d-4acb-876b-7d9ba6761d90",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b120f078-9176-4f8a-afae-8281a1cf2e49"
        },
        "item": {
          "id": "d8c3f847-b053-406e-8695-eac5a48ee31a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8315325f-5f6e-40a8-9001-ca3b6049b3b3",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "bd104f4f-eff4-4f01-884a-a621f27ed70a",
        "cursor": {
          "ref": "49edc605-9b58-4632-aeca-e83d72acd17b",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "aa25ee20-e240-4a1f-88ad-e2b48000a9c6"
        },
        "item": {
          "id": "bd104f4f-eff4-4f01-884a-a621f27ed70a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e91e31a7-2573-43c3-ba05-9ced188e38d9",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "64543e28-338b-4bf8-b33e-579939828ac8",
        "cursor": {
          "ref": "3302b0ed-a0f4-40a1-84d8-b34df9508c76",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "43fbd1dd-51b0-48de-968f-6a49ad890100"
        },
        "item": {
          "id": "64543e28-338b-4bf8-b33e-579939828ac8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "80bc5a25-bff1-4283-a75e-54de6f198c97",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "fc6a913a-dfa1-455f-8027-c1fc2958a14c",
        "cursor": {
          "ref": "9053c26c-64d4-455f-bf14-b05c68a39e2d",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3da10d79-bfde-4d4f-92ff-b900b3aba002"
        },
        "item": {
          "id": "fc6a913a-dfa1-455f-8027-c1fc2958a14c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5bb571dc-17d5-4c85-8356-fad146d28632",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c304932e-0d1b-4116-a6f4-94767cc88332",
        "cursor": {
          "ref": "95770229-38f2-4acd-8d8c-b3f0879c21be",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bee2fa10-c085-4594-9e43-3f5404b5397d"
        },
        "item": {
          "id": "c304932e-0d1b-4116-a6f4-94767cc88332",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8666a2c6-3dc6-47e1-95e9-74b8840f8786",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "deef0ca6-5787-40bc-a916-8ca22a22fadf",
        "cursor": {
          "ref": "907a0fd0-a719-46a3-96b6-2302050abc85",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f754bb90-689d-47bd-a040-5db2fb7b2e9c"
        },
        "item": {
          "id": "deef0ca6-5787-40bc-a916-8ca22a22fadf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "de3173e6-d99b-4c7e-a679-e6f77b338c32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e383c863-3b5f-47fb-bdb0-f4b511a21f1b",
        "cursor": {
          "ref": "3f7e9d63-ec05-42d3-93f0-4d50fb151546",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cd8d23a3-3a1f-49f1-b023-32440c18c087"
        },
        "item": {
          "id": "e383c863-3b5f-47fb-bdb0-f4b511a21f1b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2baf5c2b-0126-45be-aa2c-9f178f1f87ba",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 136,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf219acc-317a-4c42-af00-43feb9b6315c",
        "cursor": {
          "ref": "7c7a5e36-97bb-4a8d-b664-99264237cba5",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9eb89295-3227-4467-909a-2068ebcb68e0"
        },
        "item": {
          "id": "bf219acc-317a-4c42-af00-43feb9b6315c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "253ba1b6-1d21-4631-a501-33cd1b38aa77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf219acc-317a-4c42-af00-43feb9b6315c",
        "cursor": {
          "ref": "7c7a5e36-97bb-4a8d-b664-99264237cba5",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9eb89295-3227-4467-909a-2068ebcb68e0"
        },
        "item": {
          "id": "bf219acc-317a-4c42-af00-43feb9b6315c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "253ba1b6-1d21-4631-a501-33cd1b38aa77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a420d1-0aba-4128-bf3b-c25c4ea5d59c",
        "cursor": {
          "ref": "192d2bf3-505f-4e45-8e58-36f23828d13f",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "201b9448-9c6b-4ad9-9646-1c089ea274e1"
        },
        "item": {
          "id": "d7a420d1-0aba-4128-bf3b-c25c4ea5d59c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3620eb2c-663b-4352-982b-f9a6008d7d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c3fb4c-7286-4a34-a8c8-ff4f75c1c83b",
        "cursor": {
          "ref": "3ab14ffe-3581-4867-9e1e-feaf600228ef",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cdc19fce-2c90-40aa-99c8-b7d0d5834c72"
        },
        "item": {
          "id": "b4c3fb4c-7286-4a34-a8c8-ff4f75c1c83b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c0100a4b-4f6d-4207-afba-eb5336f3de57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83037378-b366-46dd-b5be-e772eebed7c8",
        "cursor": {
          "ref": "c093fcea-43a6-451c-8447-0d4370020965",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b4397d6c-e92c-4708-996d-fa9afdf63d9f"
        },
        "item": {
          "id": "83037378-b366-46dd-b5be-e772eebed7c8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "375ab668-5eb8-46f0-a874-dbc908aa126e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b70f9fc-37eb-4331-9940-71e32fd63cfb",
        "cursor": {
          "ref": "8680e63b-acbe-4096-803c-cbfb3af1201e",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4f1288b3-dcf3-4542-bca0-b7b9111d5f3c"
        },
        "item": {
          "id": "7b70f9fc-37eb-4331-9940-71e32fd63cfb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "551aae59-fbed-40a7-9432-9c8278a1329f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391f8d99-bcc2-45a2-8e6e-5150f3082c50",
        "cursor": {
          "ref": "e3457dac-3f61-46e6-b43a-6363c391d80b",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b4e8b853-65a7-4710-a68a-c3125d0220ec"
        },
        "item": {
          "id": "391f8d99-bcc2-45a2-8e6e-5150f3082c50",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2d665375-c2c5-487d-83d8-897e1a990a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad29bc54-3aca-4544-ab4a-9cf2a7951827",
        "cursor": {
          "ref": "0762c42c-7b3c-49ab-b353-8d3981795835",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "126f2fdd-0d8b-4303-9786-e509f09a6df9"
        },
        "item": {
          "id": "ad29bc54-3aca-4544-ab4a-9cf2a7951827",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7db8cfd0-8d5b-4dc2-a5a9-47696e748500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1377,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbcfdff-fbae-4a19-ad7d-f39f392c45c5",
        "cursor": {
          "ref": "7804d202-cd32-4391-80b5-bd88b4bacd42",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "362df919-88b4-4c49-a436-a4c651a7903a"
        },
        "item": {
          "id": "3bbcfdff-fbae-4a19-ad7d-f39f392c45c5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "782db1eb-eeef-4d65-9a2c-2e603d40c6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c797def-75ec-43e2-9369-183784ddd67e",
        "cursor": {
          "ref": "eba76b81-6a25-40b8-879e-8922ec2e57c5",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "50a383a1-8a57-432f-84e3-4aa6fcbc3663"
        },
        "item": {
          "id": "0c797def-75ec-43e2-9369-183784ddd67e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "585187f7-c9f6-4971-93ad-8514e5aeec22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 770,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d82e092-4c9a-4d90-8e23-8b0b466f18d8",
        "cursor": {
          "ref": "6fcc3cdb-e45f-4faf-85e8-ae6549b4f23d",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f03124fe-4291-4a40-b798-71ea8747f210"
        },
        "item": {
          "id": "8d82e092-4c9a-4d90-8e23-8b0b466f18d8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cac6b9d0-43b3-4906-a201-ca4d6995a2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5991ce-67e6-4c3d-acd3-f8bb2dc0de11",
        "cursor": {
          "ref": "49e6dc27-0b92-48d2-9e69-90e809fbd65b",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8e311e6e-43ce-4c08-9039-44d0fc166b8d"
        },
        "item": {
          "id": "3e5991ce-67e6-4c3d-acd3-f8bb2dc0de11",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7d19f223-aa0d-4c33-bc73-aed351240219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f25ef9a-1f3d-450f-bf25-e26e660dead2",
        "cursor": {
          "ref": "9cb922dc-e3ba-40c9-a246-c4c1ebae3885",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1afacf7d-dd19-4499-9ef5-e5d0634bb9d0"
        },
        "item": {
          "id": "4f25ef9a-1f3d-450f-bf25-e26e660dead2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7b0d01a6-61c9-4e4c-99b6-2763e9464017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d884b5d0-931b-40b9-be57-f3c35ea574c5",
        "cursor": {
          "ref": "d0756b5e-03b2-4943-8a43-e4fc487578bf",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "85c78bec-870a-48b0-ab10-599d571bca97"
        },
        "item": {
          "id": "d884b5d0-931b-40b9-be57-f3c35ea574c5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "446c8627-a5b2-4d87-b37a-815e8388d874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d99ad16-5880-4cc1-a952-27184cad23ed",
        "cursor": {
          "ref": "db0d8c67-f81c-412f-b47b-1299aadfe773",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3fc5719a-09f9-4b81-946b-757dd9b67272"
        },
        "item": {
          "id": "1d99ad16-5880-4cc1-a952-27184cad23ed",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2a34eca5-f1a0-4cc4-8fe0-4d7de0dc391d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7247972-2b53-4c2e-8b5a-8e5281173c4d",
        "cursor": {
          "ref": "c7442990-1cce-4869-bec5-7e2d8a98aefe",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1f0dcac6-74c9-49c5-83de-df216e26cf03"
        },
        "item": {
          "id": "e7247972-2b53-4c2e-8b5a-8e5281173c4d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ee8b21a8-b799-41c4-bf90-4268027bf0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d736480b-cb8c-4313-8228-934c960c70dd",
        "cursor": {
          "ref": "fe91c8f3-f13c-4d0c-a3e9-089d23fabf92",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "917533a7-5799-4426-baa1-3db1bd264d97"
        },
        "item": {
          "id": "d736480b-cb8c-4313-8228-934c960c70dd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1afb1ca3-944c-4ac0-959b-df7372919cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d65f197-e9bf-4daa-b9e1-22311cd73581",
        "cursor": {
          "ref": "3710a8b0-4074-4cbc-b5f3-52b010547f22",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e44ba4c2-5733-4f05-bd3d-2f9c83a8cb1b"
        },
        "item": {
          "id": "6d65f197-e9bf-4daa-b9e1-22311cd73581",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1c5a739a-6c2a-42e5-8f55-ef300bcacfc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9678f2c5-5092-406b-a12e-0517c4081010",
        "cursor": {
          "ref": "20c2e7b2-a845-48ff-a734-5d4bd3905701",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7c137136-f75b-4dd5-93dd-2cc9d38c6ff1"
        },
        "item": {
          "id": "9678f2c5-5092-406b-a12e-0517c4081010",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bed117e2-1bec-42fc-8fbb-e025894ccc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52dd080-c4b8-4988-b66f-3ca7c449982c",
        "cursor": {
          "ref": "d5577bce-40d7-4b90-bbdb-923d948f1701",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c39745d1-bbe0-48b2-b3e1-84f3004a4d52"
        },
        "item": {
          "id": "c52dd080-c4b8-4988-b66f-3ca7c449982c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7c54ba59-5bf5-47b4-867d-faed7067ea2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2d0bee-7204-462d-994c-5bc32bc039db",
        "cursor": {
          "ref": "8a1679f5-1641-40ed-88ec-cb4f9aa39490",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "391aa4c8-d1e3-4536-af19-0ae9a82596e5"
        },
        "item": {
          "id": "2f2d0bee-7204-462d-994c-5bc32bc039db",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7c7ff28a-ade8-4dd7-841c-9408a2a06c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1b811b-ca6f-48cf-8e2e-5a69456a2ea8",
        "cursor": {
          "ref": "f5497588-c179-4848-9d97-c465ff44be45",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c596f3b1-f86f-45e1-81f9-adcca76e009f"
        },
        "item": {
          "id": "be1b811b-ca6f-48cf-8e2e-5a69456a2ea8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "204397bc-5eb5-4beb-aaf7-5c211c316e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289bd899-7530-421b-b0fc-1d81b7059deb",
        "cursor": {
          "ref": "051280a7-2a14-403b-b3bd-6656b8e40d71",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "180e8b34-8ecd-44f5-b88d-455a073e1035"
        },
        "item": {
          "id": "289bd899-7530-421b-b0fc-1d81b7059deb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9b88fa09-c395-4466-a473-152d7c913ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7708061-74e9-4061-b980-a9a9ae3fc12d",
        "cursor": {
          "ref": "e7e1fee5-56d2-47fa-add8-ac889539f41e",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "22eaae96-4d36-499e-ab17-12d10f868f84"
        },
        "item": {
          "id": "b7708061-74e9-4061-b980-a9a9ae3fc12d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "809d3e3e-1003-488e-8b1b-085716598295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d419309-ea2f-4a07-9463-2106a1121bf3",
        "cursor": {
          "ref": "f7e6bd68-51a6-4f6a-a4b4-26e4e05d9720",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d3e2f736-1538-4bd5-a980-da42f4ba179f"
        },
        "item": {
          "id": "9d419309-ea2f-4a07-9463-2106a1121bf3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2b19467b-9012-4d76-afaf-befe3d774839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c5a29a-aaa7-4257-9045-7044dc3d7f9d",
        "cursor": {
          "ref": "6c162a0a-227c-4bcb-815c-edc2ac4af524",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8825551d-ba66-4602-a12f-ac6a24f3f225"
        },
        "item": {
          "id": "63c5a29a-aaa7-4257-9045-7044dc3d7f9d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4890d9f4-8397-4ea5-8dce-9e3fcb702230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fd4b92-5145-4738-b0ab-985313ca450b",
        "cursor": {
          "ref": "4a0b40d8-726e-494d-b48a-e15484f74693",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "23842d56-356a-4105-9d8c-a48bcabf155e"
        },
        "item": {
          "id": "16fd4b92-5145-4738-b0ab-985313ca450b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f9336cbf-d69b-44cb-ab85-a474ce7a9127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdaf5242-28e3-4baf-a3e8-fb75417dd347",
        "cursor": {
          "ref": "a24efe1a-809b-4631-a10d-77d89dd68a02",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f2d12179-65f7-416e-88cd-39481b106668"
        },
        "item": {
          "id": "bdaf5242-28e3-4baf-a3e8-fb75417dd347",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3ec9ec80-5340-4cd2-a9a1-c89ab5615f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5a9cfa-df6b-4ecb-86d6-0eca5ea71b0b",
        "cursor": {
          "ref": "e457f017-82f7-4337-9384-8e8a65813faa",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "44fbc60c-9f95-4474-9efb-7cfa3e8f55e8"
        },
        "item": {
          "id": "5d5a9cfa-df6b-4ecb-86d6-0eca5ea71b0b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "096eb643-c7ab-4ad0-bfba-48bec8a73dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea1083a-28d2-44c4-8fc1-521897ae92db",
        "cursor": {
          "ref": "ed272765-947f-49b6-9fd2-6d2d400d5622",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "583b1089-b394-4e42-a051-7f3973f5c251"
        },
        "item": {
          "id": "9ea1083a-28d2-44c4-8fc1-521897ae92db",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0acd4f55-cd5f-48e4-a548-8a0ad1d21f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40091d8a-d963-416e-847a-1fc4d1988d74",
        "cursor": {
          "ref": "4ad9dd26-0612-4d06-9c37-5185862b65ca",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "30ad68ee-d835-45b6-8756-785ed0ba4c10"
        },
        "item": {
          "id": "40091d8a-d963-416e-847a-1fc4d1988d74",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "19def1a6-3eb8-4055-a03e-a4f08c3d6671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368a75f8-06a1-4bed-926f-2440b5f6515e",
        "cursor": {
          "ref": "6c6f9185-9cea-4258-b327-b69584f06f11",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e7a6a14a-331c-4b14-a776-06b2ad273da6"
        },
        "item": {
          "id": "368a75f8-06a1-4bed-926f-2440b5f6515e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "37f255a0-ee49-49e1-8578-c172c2ccc1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c50804e-3572-42a1-88a5-71ef33452063",
        "cursor": {
          "ref": "f095b086-f528-4867-9892-349b03ec747c",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "53ee529d-f32e-4d12-aa48-04fc46ea0a66"
        },
        "item": {
          "id": "2c50804e-3572-42a1-88a5-71ef33452063",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e4416323-8631-438c-b2ec-ad9ee367aac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7dd90f-1938-4c4c-a38b-f7ed09f97306",
        "cursor": {
          "ref": "1f7be5ed-e678-4188-9912-17f13f2f05b0",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8ed3e14e-a114-4f90-a896-11bf0539b0e2"
        },
        "item": {
          "id": "be7dd90f-1938-4c4c-a38b-f7ed09f97306",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2e6086e5-d5b5-4f14-97c7-54796e150a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 364,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376693f5-fe50-408e-b402-43d149536163",
        "cursor": {
          "ref": "8598069f-1851-42b6-8a5e-6294e1bc1e65",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3f7d9406-968c-47f8-9b6a-7082fcafa089"
        },
        "item": {
          "id": "376693f5-fe50-408e-b402-43d149536163",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0dc37a44-24e5-466f-af08-decb17ff551d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b518a3-151d-4339-b217-66381e880d06",
        "cursor": {
          "ref": "2c90839e-3cdd-408c-be05-fd0771157446",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "27d81ada-7228-4c69-8245-0085cbf5f30e"
        },
        "item": {
          "id": "62b518a3-151d-4339-b217-66381e880d06",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b8eae155-ce2a-4880-a42c-5f4f4d694c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a791c3-e41f-4668-8d81-92e04b85a9c4",
        "cursor": {
          "ref": "66dc1d89-7ab0-4ead-acfb-19ed86856305",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f60482c8-8b37-4b19-9354-47b606fd47b6"
        },
        "item": {
          "id": "82a791c3-e41f-4668-8d81-92e04b85a9c4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f72d573d-332b-463e-9f43-9b9d0b6f12f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ddc047-b609-44eb-a11b-b616796cb2a0",
        "cursor": {
          "ref": "2b8b87af-4cf1-46fd-893a-6fc962ea32ae",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4602125e-cb21-4b5e-a38d-038bc9a07ff9"
        },
        "item": {
          "id": "b6ddc047-b609-44eb-a11b-b616796cb2a0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "dbb84194-e315-4938-9f79-d56c2c74ca19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 316,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f49722-3b1a-45eb-af61-66dcf8caffd3",
        "cursor": {
          "ref": "cce7ef20-0528-483e-a0bb-072d09734c4a",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8bedbbc2-b2ee-49a9-9451-94efd69d7371"
        },
        "item": {
          "id": "e0f49722-3b1a-45eb-af61-66dcf8caffd3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9fefb3ce-c71e-40a3-9762-9940c74dde1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2950d601-0365-4b4f-ae55-6cede8bd3cd9",
        "cursor": {
          "ref": "886849dd-771c-42da-97e3-fb45f5886769",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ec593697-fe0b-40e4-a0f2-9e8e41eb0689"
        },
        "item": {
          "id": "2950d601-0365-4b4f-ae55-6cede8bd3cd9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "03c7da16-6515-4fdc-9b80-fecfffa3864d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 587,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be676d18-3eaa-40d5-babd-96b82065eaa5",
        "cursor": {
          "ref": "b3531de9-26cf-4741-9422-dc0b7f60ecc0",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d9d2caeb-96a4-4e0d-8315-129e0d1ddc11"
        },
        "item": {
          "id": "be676d18-3eaa-40d5-babd-96b82065eaa5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bc4a56d9-4a25-425d-b35a-5900fd7cf6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 388,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3171338-19d8-402e-b654-20aa86a07645",
        "cursor": {
          "ref": "89fc28ec-5bb6-4a83-bd48-35fdc99d8058",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "98e97243-35df-43a0-8aec-ae1a04aede68"
        },
        "item": {
          "id": "b3171338-19d8-402e-b654-20aa86a07645",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8c6d313b-be85-49f9-8cd5-1a6a2355bb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e24cad-9931-4efc-ab84-4a0b595210e7",
        "cursor": {
          "ref": "ab16dde4-172d-46db-92b5-b56b75b75652",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "41806e15-01da-4660-bda6-145aadd296f2"
        },
        "item": {
          "id": "58e24cad-9931-4efc-ab84-4a0b595210e7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "183868fb-9998-493c-ab9a-6b4ea753fcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1045,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1d3158-da44-4b5d-87a3-713f1dec4f5e",
        "cursor": {
          "ref": "6b91ac45-4f9d-4307-95fa-5bdff3cd66f7",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "48f42c52-d206-45f2-a5b7-58fded95ddfd"
        },
        "item": {
          "id": "df1d3158-da44-4b5d-87a3-713f1dec4f5e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9b65c4a7-7e46-4a1d-b2ec-5f0571a6c34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388ab638-b27b-4ef5-ad99-056b886e00c6",
        "cursor": {
          "ref": "688ac2e1-9568-4a69-80a7-ae04a5a47ec6",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "882b0e9d-2c3d-4e0f-85b7-160da6cd7206"
        },
        "item": {
          "id": "388ab638-b27b-4ef5-ad99-056b886e00c6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ebc77952-c1b3-456a-b99a-ebf81263172c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 736,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c2d04d-2da0-45b2-9605-0f1fb7b7ac95",
        "cursor": {
          "ref": "4be98862-206a-41a6-a2a5-0f91bb1cfe65",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1c213b9f-37ab-49da-8aa0-465242ae9d9a"
        },
        "item": {
          "id": "50c2d04d-2da0-45b2-9605-0f1fb7b7ac95",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6e6fd7dd-f6dd-447f-b7c0-f2184c2197e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2675bca-9494-40a1-9f37-893bf00a883e",
        "cursor": {
          "ref": "de37b117-07eb-4e52-b6be-959f41a6cf63",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "70ac02f8-a172-4d67-904c-ac3637c30a4d"
        },
        "item": {
          "id": "d2675bca-9494-40a1-9f37-893bf00a883e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0de71389-2811-49b6-be15-390b9a18440b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3708f5c5-c89b-401e-b0f9-37cb229739e1",
        "cursor": {
          "ref": "d4625ace-786a-4431-a008-b66f07ef3851",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ec5c5fb8-cb8e-45a3-abb9-22b1a7db0811"
        },
        "item": {
          "id": "3708f5c5-c89b-401e-b0f9-37cb229739e1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "349287d3-98b2-4146-a867-451cb3aed123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 721,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60059d9c-31da-4eb2-ab5e-998dab91fdf8",
        "cursor": {
          "ref": "431c7ed6-381a-4f54-8507-0c2b5db5e5fe",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0dca400a-fb67-47bb-b745-5f7e727a307f"
        },
        "item": {
          "id": "60059d9c-31da-4eb2-ab5e-998dab91fdf8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d984042a-8ef7-4a71-ab25-49a56f90302e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 654,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb82b50-997b-418d-94ba-e26bd3d80675",
        "cursor": {
          "ref": "298251e8-1431-4564-8705-425d58c752df",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e0239a0b-e01c-4c2d-be05-861b9dd2d721"
        },
        "item": {
          "id": "3fb82b50-997b-418d-94ba-e26bd3d80675",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "40095fd0-6558-43fa-84ab-18b6767e5a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 335,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9095d6d-86e8-4de7-833a-572c6494c805",
        "cursor": {
          "ref": "a06a95a8-b879-4eb1-b919-db28d57c5033",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1993afb6-e402-4a4d-9ef5-5359700a7d45"
        },
        "item": {
          "id": "d9095d6d-86e8-4de7-833a-572c6494c805",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f76c22c5-571e-4bea-ad8b-3f119b2f42f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9b6f44-496e-41b4-ad8b-8f7ffbca318f",
        "cursor": {
          "ref": "5ac32d98-be6e-4a29-a1ab-6f5a7322b972",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bc7f482c-6c62-4d9f-ae1d-cba3703f4969"
        },
        "item": {
          "id": "be9b6f44-496e-41b4-ad8b-8f7ffbca318f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "70e74506-3dc1-4f73-8ab1-23cd09d37a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33cf247-f70e-4ecb-b9f9-9509660b8f97",
        "cursor": {
          "ref": "d4301e98-67c1-4e16-bca5-89abc2a933ba",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a1a95e7c-ed56-4218-8ca3-9d53b0aa214f"
        },
        "item": {
          "id": "e33cf247-f70e-4ecb-b9f9-9509660b8f97",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "43edd806-875f-464a-bcb4-dccb6755d5ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 377,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12881053-940a-4184-b63e-17848e2f0353",
        "cursor": {
          "ref": "719ffa62-0e44-412a-802c-a74f1a9ccb98",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "72956361-20f5-4525-9389-88221a9bd4b8"
        },
        "item": {
          "id": "12881053-940a-4184-b63e-17848e2f0353",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d36c5bec-13e9-4a81-b8c1-d6d4bb12b216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5341b650-5782-40c3-a849-0cbe513767c9",
        "cursor": {
          "ref": "167f0be2-7776-45d6-8bb2-9ab983e263ff",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e7f8424c-4f1b-46a6-a50c-1a2583f007e0"
        },
        "item": {
          "id": "5341b650-5782-40c3-a849-0cbe513767c9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6c57ed4d-6ee4-413a-a0ca-628c07dd9f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ce61ba-45ec-43a5-b914-e5da3f4e4970",
        "cursor": {
          "ref": "2ba14943-54ab-42c4-86e6-49a3b3232efe",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e4e009aa-d271-450d-9d65-a0651c9ffe0f"
        },
        "item": {
          "id": "14ce61ba-45ec-43a5-b914-e5da3f4e4970",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "64d5bcf4-ff99-4b85-8d87-c301fd144785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2bc3b7-4b88-46f6-ab71-198f7573064b",
        "cursor": {
          "ref": "1009ba9e-ca9c-47b9-9e0f-65a3dcf184fc",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5ea96979-4d45-41bc-92cd-32a4d96efad9"
        },
        "item": {
          "id": "ee2bc3b7-4b88-46f6-ab71-198f7573064b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9fb9720a-6207-4cd1-a6ff-1166a9a0fec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae93095-85e4-4c0e-b8c9-aae056b17342",
        "cursor": {
          "ref": "993306fc-f72d-470b-9215-684dae07c4ce",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d7f7b7c1-f5cf-4e06-a282-56e8c998a22d"
        },
        "item": {
          "id": "1ae93095-85e4-4c0e-b8c9-aae056b17342",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8cb49e5e-97ce-4ebf-9f99-7131fee799aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 412,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb2dbdc-e3c3-49c7-9f7d-d0ae7b952947",
        "cursor": {
          "ref": "9ab2d465-f2d1-4046-a623-dc385e4c3332",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c671bcd8-e90a-48b1-921f-0bf8dbdd5fe0"
        },
        "item": {
          "id": "4cb2dbdc-e3c3-49c7-9f7d-d0ae7b952947",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7132bda9-bdbb-46df-8f8c-6be6d6c3baf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fab4466-23fd-43cb-8bba-fa4ddbacd976",
        "cursor": {
          "ref": "cb76e148-fb70-4ab5-8194-2ca6f4dc5a4b",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d5cbfa41-87aa-4752-8e30-4d119f2b9be5"
        },
        "item": {
          "id": "8fab4466-23fd-43cb-8bba-fa4ddbacd976",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b204a837-4817-4d8a-b8e6-e9c7e80ccc12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85370588-36c3-4e24-b761-2c741dfc9b46",
        "cursor": {
          "ref": "827816c9-02f0-405b-87f3-70f01d0a73fb",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1319263b-fde3-4046-916a-04f7becb2dab"
        },
        "item": {
          "id": "85370588-36c3-4e24-b761-2c741dfc9b46",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5c506600-9675-462f-9703-a180ab5d6b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d96519a-2b66-4cb0-b510-58a809732087",
        "cursor": {
          "ref": "ba382896-c3e1-458e-9ed4-b814764ec53a",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f2f94dd8-5eff-4aa2-acd0-56389813a1bc"
        },
        "item": {
          "id": "6d96519a-2b66-4cb0-b510-58a809732087",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "add65883-7c95-4a8c-a213-c80d1ec73c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64960506-60bb-4f14-b042-e74a653bf4fd",
        "cursor": {
          "ref": "3e580223-08af-4d63-ae5f-73cb5c4881dc",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "59cb96be-b2ac-4be2-9915-92bad97fd769"
        },
        "item": {
          "id": "64960506-60bb-4f14-b042-e74a653bf4fd",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "83ba9285-3772-47c3-8d64-4b23d0b25d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 482,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28ebc6e-b9b2-463e-ab27-19e538ad373e",
        "cursor": {
          "ref": "a8843899-ecd6-4a7e-90a5-739e770b4222",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "33e376b1-f0db-4f2b-8461-8c10768d4d37"
        },
        "item": {
          "id": "b28ebc6e-b9b2-463e-ab27-19e538ad373e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2160ee42-ad20-4072-a006-116af4d0ff7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf18730-99d6-4884-be4c-501f4d7d5402",
        "cursor": {
          "ref": "53b9bfde-1288-4c41-9bd7-0934c973f919",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e180b910-c6d9-4e6a-bfbe-92b7c655dbc2"
        },
        "item": {
          "id": "daf18730-99d6-4884-be4c-501f4d7d5402",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "569c48c0-40cf-4e16-b8bd-4394b8e847a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6188d74-f64f-4650-a539-825ebddb56f5",
        "cursor": {
          "ref": "65f4bf27-77da-4fc1-9d5f-66b329e6a393",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f0ed97d4-06cf-4082-b0f1-f427aa7b5649"
        },
        "item": {
          "id": "c6188d74-f64f-4650-a539-825ebddb56f5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e4e1a8fe-5554-4845-b588-25e722e46c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2515d9b0-3673-4dfe-aee1-d78988a89c9d",
        "cursor": {
          "ref": "5ab3b943-1713-4daa-b0cb-5848f73a302d",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "14a4b7be-1150-4fc2-981a-b453ef2ac165"
        },
        "item": {
          "id": "2515d9b0-3673-4dfe-aee1-d78988a89c9d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e4b555d9-f312-4161-b438-38c4b7013377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6123ecb9-5e32-440c-8227-9ecf45a56ee3",
        "cursor": {
          "ref": "28c96ed6-f86a-4bb8-941b-62f389597612",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e7682aee-19a0-4e8d-b4fb-44915170d40a"
        },
        "item": {
          "id": "6123ecb9-5e32-440c-8227-9ecf45a56ee3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "847046ab-a1c2-4ca2-a4a7-358396798128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eaa93a8-da29-4079-8784-fd1b574ee884",
        "cursor": {
          "ref": "c3ce1dff-de4e-4d2f-855f-6ed76c804eab",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8d3eae03-1d19-45d4-80a8-ca5c833769b8"
        },
        "item": {
          "id": "2eaa93a8-da29-4079-8784-fd1b574ee884",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f9c39bd0-08a4-4c03-acc4-325953120121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86cfec8-5a9e-4441-9a47-2dfdeb224a3a",
        "cursor": {
          "ref": "72745c8a-3aa6-4012-b028-554b72ff7b7b",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "cad20b11-c5b2-4fcf-9e3b-400ec2011556"
        },
        "item": {
          "id": "f86cfec8-5a9e-4441-9a47-2dfdeb224a3a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "377ccbaf-76dc-41be-addb-6e3a0a88176c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09e5c5b-7d1a-4ad3-9357-e6d5b3117ade",
        "cursor": {
          "ref": "2865138e-9859-4739-b2c3-03d72b9ae354",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "98cbceed-5590-4df5-9c98-cd950aec045f"
        },
        "item": {
          "id": "a09e5c5b-7d1a-4ad3-9357-e6d5b3117ade",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f9164b03-751a-4508-a41a-1fd68988db09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b2ebd7-fd08-4fd7-8c78-05182b2ed097",
        "cursor": {
          "ref": "12a6b458-4eba-4dfa-be46-ef5e10095913",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "932157b5-da2e-4d77-960e-b031b2c9134f"
        },
        "item": {
          "id": "f0b2ebd7-fd08-4fd7-8c78-05182b2ed097",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e9d73a54-9c93-4ce5-8c3e-eb14076162c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792a11fe-d97f-441b-a708-4fd1ff1371a3",
        "cursor": {
          "ref": "b910f949-256e-4ef9-b6f4-11e3f3df36ae",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2cb83951-74f9-49ef-bd2d-de386883d269"
        },
        "item": {
          "id": "792a11fe-d97f-441b-a708-4fd1ff1371a3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8f2fb075-e6d2-4c1a-a1ef-f6300dcccaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c5045f-50e2-4d2b-8d0e-a77e4c8d0861",
        "cursor": {
          "ref": "c58812d5-12d8-48d8-b572-1e2006ad21a5",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fa8c74f7-c1d9-4c7e-b104-b0091914ea2c"
        },
        "item": {
          "id": "15c5045f-50e2-4d2b-8d0e-a77e4c8d0861",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eff4b92b-780a-4a25-b49a-f48d10449c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f27d340-fc58-4ae6-a0ce-49f2615bf1f8",
        "cursor": {
          "ref": "b95c1c62-00a1-42e3-b13f-428e9c65c473",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "288c0af5-9542-4918-a452-d54297023851"
        },
        "item": {
          "id": "6f27d340-fc58-4ae6-a0ce-49f2615bf1f8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d0d329f2-aa19-490a-ab9b-7453b6e722ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9591b60a-d237-4e30-b21c-f66b25ed54a6",
        "cursor": {
          "ref": "c2942772-e932-4154-a008-cf21205f7f59",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a7680d90-6fb4-4a21-b03c-96184c3d320c"
        },
        "item": {
          "id": "9591b60a-d237-4e30-b21c-f66b25ed54a6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "eb0ab439-2ef3-4598-a22e-7b157c9a6a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7098b7-a083-42ca-a48e-fa20b408ef98",
        "cursor": {
          "ref": "96bfa936-22e7-47db-8700-b44d8b133277",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3ba8dfa1-9c45-41f9-ab4f-dfa56bd6c691"
        },
        "item": {
          "id": "5b7098b7-a083-42ca-a48e-fa20b408ef98",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3baec6b1-0728-4172-b79b-d8a078dac31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19184024-0fb1-4c76-bbb7-b1d91e177155",
        "cursor": {
          "ref": "0a9ca63d-092d-4f9f-b1b7-c1bf6ae1d1b1",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0c74f686-eb0f-4be2-8050-1c180d95e587"
        },
        "item": {
          "id": "19184024-0fb1-4c76-bbb7-b1d91e177155",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e1b2492a-e07c-4838-8191-1564edd45bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbdc3ea2-bb1a-423c-88f8-37a562fd0446",
        "cursor": {
          "ref": "593014f9-2258-449c-9e1b-5255c57d1a1d",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "040d37d8-fb59-42a2-b827-32ddfda635d3"
        },
        "item": {
          "id": "cbdc3ea2-bb1a-423c-88f8-37a562fd0446",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a32f2b92-380a-4cf0-a1c3-7a973e543609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10ab542-2415-433a-bd18-1a605f08bef3",
        "cursor": {
          "ref": "5edf3213-527c-4097-b358-7043139c9ec2",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c91b0e0e-50a4-4a78-856a-efdd6b5a49bd"
        },
        "item": {
          "id": "f10ab542-2415-433a-bd18-1a605f08bef3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0ffbbcfd-5fb7-482f-af97-d42607bd1fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d63c32d-82e8-4c63-bfe7-881a26660c35",
        "cursor": {
          "ref": "412b831a-07d2-4448-9052-748e44cd4ea8",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6a7ac755-bde6-4912-81d4-7667080264a8"
        },
        "item": {
          "id": "0d63c32d-82e8-4c63-bfe7-881a26660c35",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7edad41f-f950-4ced-ae33-2cd01aa5ff11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92e1972-c163-4ddb-8e98-e456f9d5b929",
        "cursor": {
          "ref": "bc8479fa-e037-4406-a299-1afa21b75259",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fcec831c-c8e2-4128-850a-59f17885560b"
        },
        "item": {
          "id": "d92e1972-c163-4ddb-8e98-e456f9d5b929",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c481e98c-0370-4938-bb86-fff22aa4cbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c7cad6-8bb4-4595-8299-6a31bd93836e",
        "cursor": {
          "ref": "bcd3727e-82b2-4616-bb9d-ca2c30e84ee7",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "013013d9-7669-41cb-814b-49dc4989abdd"
        },
        "item": {
          "id": "92c7cad6-8bb4-4595-8299-6a31bd93836e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e9a314bf-1f3f-4b8e-8a53-a4e00e22a7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad41a6f1-dcb5-49e8-932b-b37431e5c290",
        "cursor": {
          "ref": "716c4ade-f539-4db4-9281-b53ea9444b10",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "84e4c4de-d6c9-4525-9f99-e60909585509"
        },
        "item": {
          "id": "ad41a6f1-dcb5-49e8-932b-b37431e5c290",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e505ecaa-e4bd-46df-a645-c55cc4ce7c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27f3df6-2083-42c4-a130-7db815f4d12e",
        "cursor": {
          "ref": "6fa5ccac-8422-4702-bd48-7251e8463ad4",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "db77f0d7-d061-4135-b2ec-1126288546b0"
        },
        "item": {
          "id": "b27f3df6-2083-42c4-a130-7db815f4d12e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "397e2ada-798e-4cd7-9573-bab464e650d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 300,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134d0091-697f-4b92-be6f-b12c1d3ae2e6",
        "cursor": {
          "ref": "895cfd2a-b247-4f65-be19-e3f251aaed2b",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c80635ca-95bd-42d1-8701-19b69e3d31e0"
        },
        "item": {
          "id": "134d0091-697f-4b92-be6f-b12c1d3ae2e6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3e956c17-fb88-4177-85b2-8f625d666ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56a5f04-ebbc-47fe-93ee-c5d9d416f040",
        "cursor": {
          "ref": "fe7b38e3-c429-4341-91e5-a58232fe1170",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1ae96e2b-c1b9-4afe-a54a-dbbe531700e3"
        },
        "item": {
          "id": "e56a5f04-ebbc-47fe-93ee-c5d9d416f040",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e310fea2-c4e9-4f5d-b110-f0d5853ce8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633742f4-0f57-4a8e-84a0-1eaa73cd63a4",
        "cursor": {
          "ref": "ba15307b-92ca-42b3-85d0-d940b7d37e88",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "440e92a2-875b-402b-81b8-fed26e1f19b0"
        },
        "item": {
          "id": "633742f4-0f57-4a8e-84a0-1eaa73cd63a4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d91b9d35-04e9-477f-92c7-4fbd1f8b4b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10786749-418c-40d2-86bf-34e869c8b31d",
        "cursor": {
          "ref": "b04813f5-60ab-4d88-b136-3603d4192b92",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "76ca86a0-d372-48ad-8c12-baa0cc12aa5c"
        },
        "item": {
          "id": "10786749-418c-40d2-86bf-34e869c8b31d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c64144ae-aea0-4304-8764-f54fd315a066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81279dec-ecbc-4440-9f9e-d9d508fc6cac",
        "cursor": {
          "ref": "e7da23ca-d996-4b73-b1e7-7c5a7a242c54",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1d4136cc-b283-4839-b2f1-e6ccdd15c882"
        },
        "item": {
          "id": "81279dec-ecbc-4440-9f9e-d9d508fc6cac",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1d160c11-b925-4364-825a-64cff0fd0601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8a1d57-341c-4172-bf9f-30eac4feb59a",
        "cursor": {
          "ref": "2cbc3551-18ca-4c0f-980b-e03d3f65d993",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f95f9e7e-ae3e-45bd-a493-6fddb04b2f3e"
        },
        "item": {
          "id": "7f8a1d57-341c-4172-bf9f-30eac4feb59a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "676c9c15-c0e1-44da-99f0-0f7e38ea6c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d62b967-38da-468f-85e2-4f14f4c5a78b",
        "cursor": {
          "ref": "627a075f-d5a2-43dd-85fa-f0b9da40a00e",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9aed9001-8fc9-4207-a6c4-12e7ce52be92"
        },
        "item": {
          "id": "2d62b967-38da-468f-85e2-4f14f4c5a78b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "103413c1-bbf1-44a5-9e76-d0552cdeadb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d73ad03-4805-4d41-a6c0-c193cf054414",
        "cursor": {
          "ref": "6f3e7c15-a71a-47cb-aba7-3539fdc526c7",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a81d5881-c613-4edc-9026-8f2ea8983b27"
        },
        "item": {
          "id": "6d73ad03-4805-4d41-a6c0-c193cf054414",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3c48c7b3-6301-4a2d-87f2-545c81adb07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ce3415-8df1-42c3-8378-3d487443f38e",
        "cursor": {
          "ref": "5ddbb82b-51e5-4967-b408-e1e324163124",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7c9a6764-8a2e-4bc9-aecc-fca107f9e844"
        },
        "item": {
          "id": "73ce3415-8df1-42c3-8378-3d487443f38e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5709607e-b87d-4348-affb-391e90de4650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d15bd5-1d86-4f49-a8b0-6cbf99f5631e",
        "cursor": {
          "ref": "3137d4de-40bc-45fe-8718-bfc34d3d35e8",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "25611f3f-5830-4640-be6c-6a56538d622b"
        },
        "item": {
          "id": "45d15bd5-1d86-4f49-a8b0-6cbf99f5631e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b522e89b-41bb-48ee-82fc-36955ce3f563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c1159d-fa64-472b-a13e-be639c1e9b4e",
        "cursor": {
          "ref": "c1ff4c77-333d-4f74-8ee5-d71b3a9edcc6",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "aeccde98-ac66-4fee-8b04-a8c3c3be4c08"
        },
        "item": {
          "id": "a4c1159d-fa64-472b-a13e-be639c1e9b4e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "71a0e7ef-638f-4357-ab5d-52a4644e6ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8823f594-33f9-4e65-b7f7-8778b0b22bcd",
        "cursor": {
          "ref": "cdf30b2d-4885-4c59-990f-045ac7c68290",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f669e1ed-265e-4a40-a745-e38cf9df95b8"
        },
        "item": {
          "id": "8823f594-33f9-4e65-b7f7-8778b0b22bcd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "06e7599d-6235-49d4-9e2d-c502977969b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4714cf7b-4977-4008-b39e-e17e34462410",
        "cursor": {
          "ref": "0776d6d3-6a89-4fc9-9723-15d4e0c070d2",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e360ec36-d227-4d9c-ac3f-0ea3f7a24d00"
        },
        "item": {
          "id": "4714cf7b-4977-4008-b39e-e17e34462410",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c12404bb-fc06-4808-a463-08e7730d5976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d7100c-90c3-44e8-89e7-03e73c50b0b1",
        "cursor": {
          "ref": "632e5fc7-373f-4944-8f9c-6f2c4bf37270",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cd99156c-08a3-4cd1-8cfa-6c98513b9ca8"
        },
        "item": {
          "id": "35d7100c-90c3-44e8-89e7-03e73c50b0b1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f38a5dfe-e156-4ddc-a5e1-fbe047467e4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58772c1-9131-4382-8f90-26313c7cd2ed",
        "cursor": {
          "ref": "6d7986ef-1674-4e26-a5ac-e6e6511e2f9b",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9d25bae6-78e9-47be-a530-e763a6d57b57"
        },
        "item": {
          "id": "e58772c1-9131-4382-8f90-26313c7cd2ed",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2556c7c6-d028-442f-9cbb-ae46803f1ac0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 24,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c2426d-b28b-4183-aec5-e62ecdd962f8",
        "cursor": {
          "ref": "4bb4f4d0-0d5b-4c52-9172-6546e04b691d",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "99618c6c-5f35-4f0e-93de-57c7bad5545e"
        },
        "item": {
          "id": "b3c2426d-b28b-4183-aec5-e62ecdd962f8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bfad0b1d-65c2-4bae-b17b-94e11519ac37",
          "status": "OK",
          "code": 200,
          "responseTime": 1785,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599e335f-9c94-47c0-978f-ebf2a5d2aa25",
        "cursor": {
          "ref": "7bde62d9-7962-46be-9b35-8d0a015a47a7",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5b6821b2-2a45-40b5-8720-0b1be8a903db"
        },
        "item": {
          "id": "599e335f-9c94-47c0-978f-ebf2a5d2aa25",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "66316c68-e07a-47f0-ab28-2378a8fa73eb",
          "status": "OK",
          "code": 200,
          "responseTime": 595,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8aaabc1-dc0c-438e-b09d-fdad6710d95c",
        "cursor": {
          "ref": "5f8d1220-4af2-4fbb-98cb-b58d7accc3f6",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c08fe273-a697-48fb-8a67-21fae9d251c6"
        },
        "item": {
          "id": "b8aaabc1-dc0c-438e-b09d-fdad6710d95c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a76ba0c7-384f-493d-b8bc-5a324c2cedde",
          "status": "OK",
          "code": 200,
          "responseTime": 787,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92942677-ee67-4c55-a83e-9bac1285f517",
        "cursor": {
          "ref": "896ac7de-f8a1-4650-8421-a5a9a7e1cc20",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3bf9ca95-48a3-4cef-821e-84f411e92e7f"
        },
        "item": {
          "id": "92942677-ee67-4c55-a83e-9bac1285f517",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "53563bcb-eaae-44d6-91eb-ddbc68dfb743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92942677-ee67-4c55-a83e-9bac1285f517",
        "cursor": {
          "ref": "896ac7de-f8a1-4650-8421-a5a9a7e1cc20",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3bf9ca95-48a3-4cef-821e-84f411e92e7f"
        },
        "item": {
          "id": "92942677-ee67-4c55-a83e-9bac1285f517",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "53563bcb-eaae-44d6-91eb-ddbc68dfb743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92942677-ee67-4c55-a83e-9bac1285f517",
        "cursor": {
          "ref": "896ac7de-f8a1-4650-8421-a5a9a7e1cc20",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3bf9ca95-48a3-4cef-821e-84f411e92e7f"
        },
        "item": {
          "id": "92942677-ee67-4c55-a83e-9bac1285f517",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "53563bcb-eaae-44d6-91eb-ddbc68dfb743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2723f3ef-7f88-4c54-853c-ff71ad979de5",
        "cursor": {
          "ref": "ed399d50-3cac-4b9c-bc4b-5b311ffd2fff",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3376f533-c66f-4685-88a0-79d2d8c5f3d9"
        },
        "item": {
          "id": "2723f3ef-7f88-4c54-853c-ff71ad979de5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "be89dd53-87a4-4781-9750-eb721461ef5b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 15,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ef1dca-4f0b-4e20-aab3-8f30b1c9ff51",
        "cursor": {
          "ref": "a3f22f32-635b-41ee-9b82-90868e517359",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b8d51601-0269-45dd-b0b5-c72813b3bed2"
        },
        "item": {
          "id": "b0ef1dca-4f0b-4e20-aab3-8f30b1c9ff51",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b60956b0-16e5-42d1-a48a-6f92b1d6cd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b0ef1dca-4f0b-4e20-aab3-8f30b1c9ff51",
        "cursor": {
          "ref": "a3f22f32-635b-41ee-9b82-90868e517359",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b8d51601-0269-45dd-b0b5-c72813b3bed2"
        },
        "item": {
          "id": "b0ef1dca-4f0b-4e20-aab3-8f30b1c9ff51",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b60956b0-16e5-42d1-a48a-6f92b1d6cd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "23253a1a-ce9c-4fdf-bf85-6bb83fa2bcf4",
        "cursor": {
          "ref": "5e085337-f63a-42a2-b28e-3ab65500921b",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5caa0c01-b9b3-43d4-9f8f-1642c7ea2fdf"
        },
        "item": {
          "id": "23253a1a-ce9c-4fdf-bf85-6bb83fa2bcf4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a2133ad2-c0e4-4528-ba15-49477f06cf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a1bb9317-cdd8-444f-8c5c-43c30124104b",
        "cursor": {
          "ref": "34992561-936c-4092-b6a0-b0c7eb7de605",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "418f04a5-437e-41c8-a8a2-5a2dadb28eff"
        },
        "item": {
          "id": "a1bb9317-cdd8-444f-8c5c-43c30124104b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "219a7cc4-bcf2-4bac-9f24-09c9dc4a202f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1bb9317-cdd8-444f-8c5c-43c30124104b",
        "cursor": {
          "ref": "34992561-936c-4092-b6a0-b0c7eb7de605",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "418f04a5-437e-41c8-a8a2-5a2dadb28eff"
        },
        "item": {
          "id": "a1bb9317-cdd8-444f-8c5c-43c30124104b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "219a7cc4-bcf2-4bac-9f24-09c9dc4a202f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cde18b0-f7ae-4bfb-a180-4ef0cdcd0495",
        "cursor": {
          "ref": "efc9d65e-a1ec-4af7-b74d-78227a9bc0f6",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6aea4c0f-0d80-43bb-8f41-236356f53340"
        },
        "item": {
          "id": "4cde18b0-f7ae-4bfb-a180-4ef0cdcd0495",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d34e661b-9f9f-4287-9a34-11cb32bd0e04",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 24,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}