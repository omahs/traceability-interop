{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "06d1558b-e461-4b01-8407-c7a13605b01c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1ed3cc4d-c977-4154-8ae4-33e81bc7c726",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a45f5ad-df15-42cd-ace0-7982121b90bf",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "143d4452-96fe-48c0-a927-90b7dc9a787e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5d4fc8f-ec76-4bcc-b6d4-65d0cf52dfff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "65e2ad70-221e-4000-a5cf-fadd992ff082",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8dc1865b-e6fc-47ec-9a7a-44ccd9ab64fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8aac0acd-fba6-4d97-a83e-c44d7cb9633a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "26f3c526-794c-4bc2-a294-dd4f13feff4c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fd77ad-2798-443a-9f98-c7d9f2a4ef4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b6a9806-ec7f-4efe-b759-0daa4f844472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fe48f5-3179-44c3-b18e-eb2f45bc0f39",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff477449-39c8-4c44-9f1d-1def16bd9c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2590292-ed6c-4f74-801d-bf6963a82d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a37b56a-3630-4d6f-b5de-1bd3eb1befd3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f9aa2f-2a0a-456d-85d4-70f672ac9823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71cad48a-0929-48fc-bcff-cc5498dfff86"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2b925a1a-913d-4397-856a-6456a434dc68",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48188d3a-a5e9-4c44-80d7-9e8fa806c007",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae812fe-923b-4de4-8ada-780a68083975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d390fdd-e13e-4924-b93b-6dce68bed755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdb3d3b-b280-455b-b54a-7f4c84032a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e850ed8a-a9e7-4e1d-93af-fdc239ee440f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7916b2-41c2-4822-9f01-1ce783ff6d6b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39b85ac-6cde-43f9-9f67-92d1c4ecdd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8770e2f9-3aef-48ee-bb00-db457054e879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e891a5-bb4e-4908-9c5b-79879a5186da",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "25a561d9-afb9-4171-8c7f-379571aed641"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4345ad78-fdf0-46c0-bece-5865111d316e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "33829884-30ac-49f5-919b-6295a976a2b4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "086a2130-57da-4e77-b470-34588efdf9a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "30f24133-fc73-4b23-a0da-0039dbfaaa45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f20215ea-790c-40f2-9f9c-1dfc855db288",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0fff84a8-478d-40eb-9505-16382db97eb7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5763d8a-64e4-401e-8bc2-97895df75bea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5a4d9fa-ab36-4864-9d6e-08ff5117e507"
            }
          }
        ]
      },
      {
        "id": "53d973e8-15db-4fb7-99d5-8ff3f98cdc7f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "80f4bdd9-988b-4848-a8d4-9e7f2ba9ffb6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f10692c4-2228-4365-8fae-c836d1b388d4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fbe6a839-38ef-4b7b-9de2-f6270b174242",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d38a25-e552-4f30-9162-4745c6f68cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1158ee05-21e1-4d57-bb12-2108353d4cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b80327a-3373-4b36-9154-cd385efb121d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0c85cf9-fbe5-4157-ab13-6001a739f6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c355a6-92ab-43ea-88ef-c88deb857d35",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a078a34a-93f1-4e2e-a405-fb7b916b20e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de37927b-ceec-493e-8fdb-d4d0f601e4b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e090960e-dfba-435e-9c52-81747f6ab458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6647c584-c992-45e2-81c2-f44c10d5c08c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b131889d-8e7d-4822-8966-a1c89cc338c7",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f375c5a1-5ff5-46a8-b8e5-a9c0c084ebc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85052b90-4e44-4185-ada4-eb6dac6e1ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac12d2e3-9f01-47aa-877b-ca46fc018314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23e0022f-c23f-40d0-9c9f-e5b032856dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c5f28f-551f-45f0-8d1a-87194dbbce8a",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88014c4-e961-49ef-a042-d904ba4c1db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bde18a8-4c9f-4e12-b4c1-f6296f24c126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27edf503-775b-4441-9b0f-7c10f9e06ead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d5b0675-988f-4cdb-8239-236c94df5c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b190ac-26c5-49a3-af53-1b01f2991d50",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab28a23-7a1e-499a-bd1f-e000c7eb38ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc3a850-c103-4893-9613-6d0eea22b241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f6b363-6e6f-439c-8891-528d60bda1e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f81b8213-58c2-4504-9191-97ffc10c4273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67dad551-481f-4466-98a1-369320733039",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d31b9e-7a4e-4e17-b7aa-b10d1719b5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de4498c-5534-4983-a258-b86ec1864059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dffe2b8-5196-47a3-881e-43fac4538e95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86647710-72c0-43b3-b3cb-5b038e34a53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a0006a-d211-44f2-a6d8-d4293ee2ae84",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4995aa9c-d12f-4962-a210-675a04c764af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd010a37-d567-4845-a9ea-832f09e96469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b843420-1785-4116-9fdc-c39ab2008643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0e2611-b1c9-40a7-8d99-5876e49d1794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57ab1ba-3074-4786-93f1-ebc681f38932",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2e41e1-a6f7-42fa-a5a9-2192e87ccd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc17aac0-37a4-46d3-8868-e6185f49adeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666e8241-e15d-4132-a40b-41fe039be7c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d36d113-3be8-4f5f-bf9d-18eb78653244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e8f6b8-0962-4b9a-a4d2-fabd348f8672",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7689c74f-49ac-44f4-b633-31ee477711fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6c94e0-0d59-4d13-9b0d-30f5185a33e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e1b39d-37fe-45e7-8ca0-4d1a23eabfe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81668a6d-5c08-4ba3-be63-9348dd3c6da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f588ad-addf-423b-b80f-1e6f5e0cd7b4",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9229736-ff4c-495d-8708-1af6107afbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fcae1a2-5b1c-4208-8033-1a94ded4ff2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfa45c3-6ddb-45eb-8147-e45e4297bff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71c82694-bc07-4324-9e0b-5a819cdb33d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5c87e7-58cb-4587-a6e4-954e6775cdd0",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a448151f-0239-4556-8a5f-5ef1e4563094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1c0835-75cc-452b-9730-8dca0900764f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7bd332-2ee6-4435-9869-621967d9f144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cb9c8de2-da9a-4a67-8ad7-16368d2cd60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9922df5-599d-461b-b1c9-8bf2462bd76a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd371f6f-bf4e-4723-afda-5bc8dd89d5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6903d6d-0ebc-41e1-bb51-b25aba9a14cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8d04c7-e02c-461f-b2d6-6adeed62dfff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cd774abe-c96d-4fbf-a987-627eddbe24d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283f4203-cb1e-4bd5-8746-7535a6a98251",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac60c78-eff4-48a3-8e86-c3874e7318eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1b883e-b7d9-4efe-a9f1-1ef7c76190ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fc19fe-64d4-4cea-80a2-448d185dbc66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05f36477-6dc8-49bc-b02a-776090a2b6aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc13a54-c520-49e8-a61c-4cb6a99511e3",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2ffbdc-dcca-4152-b210-6e056ed8dd5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86624a65-4305-408f-955f-82385261466d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46415b7-4481-4244-a985-75d102f33919",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6beb974-34f0-4e97-b79a-547e59781247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9706b3dd-df05-49cc-8700-bbfa047eda62",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9475e1-c191-48df-8b8d-097532e0d934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab49f48c-fd27-48b9-a63d-2dbfd8dd4bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef26bc5c-5bea-447d-9eb0-350b65109410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "406c12c9-ca58-42b4-a931-b72b5d0b61ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2acbc45-e1f1-4feb-a538-04e979c3138c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb00a644-d3cd-4576-a51f-aba88fc20f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159d93b9-99d0-4065-8b95-a564d2b6b12b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2954994d-f0a2-48aa-8fb2-9caad7fd312b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "1a037976-4855-444c-8b71-f04b58d00e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02128e2d-4843-4257-b300-9e3e96de0951",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5182a6ee-4bcf-43b0-867f-405cf455921f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d93e087-07c9-42e9-a7de-0e1a280d0ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9d27b0-10ab-4c5b-8276-2a5106f7ab88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42f31f8a-b034-46bc-acb6-018ea50c1fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65db07c5-80fc-4e45-b9f2-99b83643fc8e",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a8b7c8-03ac-493d-b8a5-db2a74fe70e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a162c99d-a7a8-4def-b58d-7f1c847e5914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5068f1-1af3-42ac-965c-67bd93141493",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f25a70e-ec45-4935-9eea-d2b08d283aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26b0b17-7aca-45d4-b745-4ae84d8f7dbc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ff2cfc-7d35-43a5-8c7a-a207ebdc2e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ef7d7e-f40e-4699-99f8-2087981a7d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060000ad-88cb-4230-8d73-1dfef93d0d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea214d46-a334-4754-b577-8674d9041395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cda441-7dbb-4e03-afff-831c4d901511",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ded297-6575-4652-970b-397450927e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a14abb4-194b-4a8d-b491-97b4e804d4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce710c97-ae61-47a1-9ca1-065ecea03899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9efa44f2-ed95-4674-adc1-6ca2302e3c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9686b6-20f5-4255-8213-9a43e669f394",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1d72ed-5866-45bf-b94e-e5340432a9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a68d4b1-642b-4fe3-b0bf-f6b6e9105faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91939b5-f040-4602-bb29-02de96a6ba32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bf1f98e-fd2c-479d-adf6-dfd7141ea2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2258792b-b2e7-46d3-b1ae-d2072aba5b8f",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee22fe4-7ecd-4199-b9fc-5a9403bb4043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3b673b-4b04-4730-bcc4-325c040de0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9e3556-145a-4344-bac9-d10bc9eda88e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a86bd317-73b5-45ba-b65a-dcbd9b67f174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9611a996-e89f-43d4-ade3-7c9d0190f952",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5e7046-b033-42bc-8db0-6b3b06eaddef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06fa042-6a34-4b37-8a0c-6f335d554ebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01d3d32-7a4b-4480-adfd-a0c889306824",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5e9ad51-f7b7-4c11-9771-2baf87676f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ea0348-f50c-421b-9199-d4ee508fef96",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c980a933-8370-4a26-a45b-af80fb12aeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7464525-6a96-402b-ae92-be47679b59da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01798265-04fe-46ec-b4bb-a9b924027f77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7340a39-9550-4a69-8ad3-bbe5c4a3877c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e07bb66-eeaf-4f00-b5a8-c08b396a11d4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a7f0c7-5c42-4cce-a99d-ee34daa1cbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eaded21-4b04-4312-954e-cde8ec5ec13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08fba24-2354-4f86-9383-4867ec152973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16123b85-60f6-4072-9069-fccdd17b7f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889b1e42-c10b-4d4d-803c-48456985c504",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475dcd00-7c67-4a3c-a170-6668714f2972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10f1d2d-5296-4329-88db-b31c9c32b1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81668940-2b6d-41e3-99db-2654e0317222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c2cb162-ac85-470a-8bd6-5b6b2c9b938c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73d2cf6-accf-4632-ba9c-e2fc21e33e0e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0011165-3169-4b34-93b2-9cd32295e6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f94593-5360-4058-b2a7-5ad629428919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ce787d-29f1-4c22-9c33-c217175290a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4d1cf61-4098-413a-bd51-ca7444de5eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccf780a-1187-4184-be12-ca7009ff3477",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba25024-55b7-45b3-ba6e-1beae9a0b17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c1c9b5-21bd-4784-8c6d-fcf32b1b044f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baeae213-f9c7-411c-86f7-c7b6f02a97a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c577f847-d597-4b1c-81de-92f54cfda004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dd50c7-2626-4044-9f92-b8fa2221dbd8",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36417f7-1219-429e-8266-34eee74d1554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbac2801-05ee-4647-9f45-db1e346d6df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f056d33b-1a20-4612-bb73-de78e9fd14a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41556f2b-ca79-4389-8594-888019c2766e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938490cb-5313-48cc-a74e-0b2cd1f6d9fe",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28200e51-7c04-4f4f-a311-0bc6e60c25d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275affcc-0032-426f-b7c0-c507c5c474ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85047b5c-e4c5-4ad1-b964-6e8dcf26941b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0d4763b-0445-4279-ab0e-30e5137b6ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c054a59-68ab-4e18-8c69-4407aacb390c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866612c4-5eac-49bb-a11d-13dbda8f4604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a3348161-425d-4189-8806-30cfc0e69e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3185f0-d235-4e84-bde7-19d92cf6d0b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17988651-90e5-45d1-823b-cbf2a5f16829"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1fc4308a-83e2-43d6-8b53-8024f1f96fe8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "460ebeb3-c547-48a9-92f1-9b34442a34a7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a3a5f5-3696-4537-bf2c-bc0d3a5d08fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdb454b1-deb2-461c-97a0-cf2e905d4a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e87761-2dfe-43f6-b26f-760a18de4369",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "905f9fa6-ef06-4426-a5c8-676291ebd688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f92bc2-e436-458f-98a6-56ae226e2f95",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6092593b-16b1-40c6-a8f1-c95bad4394b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ffcce39-6ff6-4b80-a1ac-fad46924a845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81de7006-1070-4481-aeaf-80c3e316a617",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3e03fc9d-7026-4c22-bfb8-ccaf0dd5903a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eab077b-214c-4bde-a2ca-32cf2f8d12f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "100fd2d9-6199-4276-95e3-ad67b190daef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "223a696b-9543-422a-9500-2c3a60374e85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b74d483-2319-4512-adaf-ed25fd6bcba4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af530825-b4d0-4852-9092-638bf3474b97",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62b68c68-fff7-45d8-a385-b82c7e335336"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16bbbf5b-3350-4deb-9c82-c34b7f3eb95a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57df0f9a-7a03-4de2-a952-7cea86cd3c68"
                }
              }
            ]
          },
          {
            "id": "1657f517-60be-4141-bb5f-cfa210710826",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ab88b3e-8bdc-4905-93d6-b679b4057df2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc66fc00-2f97-4594-ac8e-239a2ebb08b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e86f6fd-4c4e-41c1-ba2f-796043d0f265"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ba236a8-0d5b-4728-b70c-1faa3410868e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "55c01772-da36-4bf3-ab3e-2154c22bb665"
                    }
                  }
                ]
              },
              {
                "id": "80085564-b404-4d75-a510-bc7a1107159c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4fea630-d7f9-4f16-ba0f-a794c1b1e04a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bc782a4-4934-4727-b999-3f1f86fd8f2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "853fe3aa-0a33-44aa-9f6b-d444c63907b4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0974a00f-15fb-468f-b400-500aba359096"
                    }
                  }
                ]
              },
              {
                "id": "0127a49f-728c-434c-a8a2-4e5b9e3f2768",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b1a735d-a5eb-43f4-8b43-d9bd71b89757",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "801e405e-5b93-4466-9d3b-a8dcf6b742c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7dea0b2-6654-47fb-9281-2684b2feee7c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "255065c2-615b-423f-bd0d-9edb99b2f290"
                    }
                  }
                ]
              },
              {
                "id": "2c77928c-61ec-4903-b364-e0d563dd0b60",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ee6a53f-4339-4dde-ab85-e00bfebf2680",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a77c0a0e-10f0-40d1-9a45-fb1063f459e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "645e7c3d-7c49-4ae8-a8ba-18496bafa3a4",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c00bd981-f819-41b7-b2b9-3ee9a341f936"
                    }
                  }
                ]
              },
              {
                "id": "dc2c74e7-b2dd-4b3e-ba08-3ff7598da160",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1862224b-16cf-40dc-a218-b46bd694c055",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "e285a633-0ce5-48c5-a4c5-8afdfa1b99f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33595eac-e2b7-4330-86bc-d0685f5e3cab",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "4ce8cd85-ec5c-4e6d-8c0d-f7a875950775"
                    }
                  }
                ]
              },
              {
                "id": "c030a9cd-9037-469c-a040-16027ca7c6cf",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fffa9fc-e4ba-40c4-b743-7d65fa20a574",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64fdd7f9-deae-4ebb-8545-089ef6d58ce0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7edb5ab0-391d-4eaf-a270-f31ff3aae828",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "24fba183-651a-4a6b-9585-90bb301ebd7a"
                    }
                  }
                ]
              },
              {
                "id": "277a7405-2c34-4bab-b3bf-ccd22f8edae0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d2e216b-eda3-4838-82a2-087f322fee3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3305aef-f000-484e-9006-ed39677bd941"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfd0577c-c114-48db-a6d9-79ea818f056e",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "24b2bab4-af23-4fe5-a7f1-3314e9b48099"
                    }
                  }
                ]
              },
              {
                "id": "ac0538bd-3127-4550-957c-5cb778cf2964",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "caa7e4fa-2b20-42ee-823c-fc9b0666ed16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72164ab8-5922-4058-886d-d6cd397136c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e49d1cc3-ca51-41bb-b3e2-a0fe34e59a1c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "998c0d55-5de0-4936-a109-51d6042c5fd6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "061d748c-e0f8-4d13-ad98-038b7394be49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e089c97-bca7-47bf-bebf-6e8bce36f5d9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "244fd66a-1719-4cbc-a4f2-07432ce581f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "315f9fe0-10e5-4017-8a73-09c2f0889722"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e062ff3d-0a6f-4d9c-840a-84640918aa31",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "021c6db9-0a27-4598-8358-18668e79983e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d1fa48a-235c-4c70-b500-bacaf084f015",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aebebfc7-5345-4f4c-88e4-bd38a961f0d2"
            }
          }
        ]
      },
      {
        "id": "9f7eac52-593d-4201-bd53-9f14343ee381",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "83e0edaf-f21c-44a5-ae10-da59c4536582",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d731b054-a671-48ca-8b71-ed1128091cef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "912486fb-2003-424f-9a2c-f2d777c6720b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02069a4b-9ce2-41db-8ba5-46e82da2eea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ecd4ac9-da35-4832-92b4-279e49a3d89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5268bffe-e18c-442e-8708-7a2b73f3134f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2291dde7-e227-4c77-aefd-c6aca054ecf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d736e270-7950-4299-9719-476b9b5459a2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7b6e15-68b1-4774-bfee-5cc963aacc57",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ee65c75e-1ebb-4aa7-8a31-10ed2b62da04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926a80f9-de80-4dc1-bc38-765bee702da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce13383c-7619-441b-8afc-0e30d1c7eb16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55b45318-c935-4662-af10-dcf3b81f7fb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23d46136-12f7-42a0-b007-9515c2fe6237"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "12761d5e-11ba-4790-a3fb-b23fc9f72fab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fd21d72-1fef-487e-bd13-75f17e747504"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c2e15a4-7d94-4742-beaf-0e569b74d467",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "112d046c-daf7-4b16-b8f1-235bf5a32bf9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "424e81bb-3a40-418f-a0f0-da359a2cccca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc007838-bb51-4823-bed6-b82d9e48cabe"
            }
          }
        ]
      },
      {
        "id": "5335b944-8b5e-446b-ae4d-1381557bd9a1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7f001e98-af82-43de-a147-ac69daa94947",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2eeae30f-668d-4392-bd44-6ec27b85346a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "098a3dcc-2980-406e-ae40-9aaa42fb112f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beea96bd-04db-4f80-ad6d-ecca1c5114c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "0571014d-4605-41da-a1c8-532f868ab74a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05b0a7f-9aff-4d97-95ed-633e881eba50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0db55e7-2e06-438e-a266-d4103afc8487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecef91d8-2eef-4232-887d-66a84d712126",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfdadeb-1d32-481a-8d39-c9d22988adc3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "03675140-090e-4edc-9153-c779acd449f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4b9442-0ac3-425e-823b-13a6526c22c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d5162e5-7777-4190-ad02-827377597c13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e7d021d-9103-4981-8782-5cbeca824fb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "baef7fb7-07a5-4b66-8040-14f6d02ed3bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f91a006-b38c-4770-b9cf-184ae63c4f47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32a3997c-320d-4135-9127-572f366b492d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bcc8b02-5db3-4c8e-a0df-4aaddfa4fa10",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "91dd7e25-f1db-4337-be6e-d932cdb87050"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "104f83a0-dd11-4dee-8a89-97ec25d0bc07",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3f824f2-eda8-4771-861d-d1c06981037f"
            }
          }
        ]
      },
      {
        "id": "5b783b83-bd31-42b5-9f78-630ed1b0a3f5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1969de9e-03b9-45df-acf1-37e940ea6950",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc2ee4a5-e882-451c-99a7-b399c2572b1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c027b6b-1f9a-4a9a-bf09-aed83b02e18c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea8a829-e349-461a-9b12-6b328f89cd5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175c7084-5db9-4f00-abd7-6d66de7c1d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d5ca8e-0f00-4d6a-9523-50dc369162ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52d8dc82-6819-4b3b-b650-9fea6278aa3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7647164a-9fad-4251-a0b2-1679be792fa7",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a52284f-5fe1-49c5-9f29-ee05cf1cbbac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "47cd98f2-c338-481c-8906-df20aa787595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d7e520-7efb-4379-8e85-7c5ead865b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cb07ee3-389e-49b3-adba-e384bbfb3c8d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de0673fd-6470-458b-bd73-8deee2d0570a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b29618ca-b762-4af6-a83b-3d1e67117fff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fe4d85c-3874-43aa-9ee2-b15bb438628f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d87a5bd5-6f7b-456a-82b4-84bd80e297e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f1a03ff-a686-4742-945d-fe600d8401e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "3b72d461-9d0d-4950-bec4-bee7a167fe57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "365b2568-a4d7-41ca-85d3-9abe42e37e3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07bf8cb9-3457-451b-8f0c-2d438d4938a8"
            }
          }
        ]
      },
      {
        "id": "f4ad2867-76f1-496d-9433-7713991fac51",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "28711060-a561-4c62-a5d3-4386e1fde1a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ff8a249-4a47-4ba2-9a92-adc65289b5d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8770bea-bea2-45de-9bc0-0be0b4e67a37",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bbf62f-3b9f-4811-b28b-7f66fa2eb52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854eaa3b-8a50-48f1-abdb-8b559c92ccbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f44687-be95-4979-a6bc-5f7c9f23e959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bec4a6d-22b3-43a4-94f6-b3158fdfd925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c175ee-4596-4e28-9dca-b25a412fbb4d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec59e25-06f7-4270-9a91-0d310ac94be7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0e4b9510-2ff0-47db-b967-cfb95ec14f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff253100-a044-447a-bbf6-5e31e5b0ce0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e729ff8-8ca0-42dc-b68c-41912309d2f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e3e6e80-09df-493f-a2fc-9f1ddfb447e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01810ea1-9e6f-4385-b5d4-c5ab48177098"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16c1c16a-fbfe-4043-9e0d-2dd0b23a7fab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f478412e-3a6d-434b-9e60-5015f406939d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75ecc7c8-5b01-4739-92d0-94b96a72b5e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "3c67acd4-0076-490b-8cb4-367eb62b78d2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "372f1ea8-7c21-4f57-9c54-a154bddab37b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4036478-6676-4b1e-993a-ec7eeb25fa8b"
            }
          }
        ]
      },
      {
        "id": "63d533ae-3b3e-44bb-a491-d4795fe4efee",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7d5600fd-986a-4d00-9914-cca8a132bbdd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bd4dda5-62cc-4380-a2e5-d877e9b94774",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6cf09c5b-c386-4c0b-8a48-c45ea07d4c16",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82effa66-c440-4eb3-a522-fd22f58fe23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e3efaa-c6a7-4193-a903-09d2e3d37860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd4f3f8-6769-43cf-88e3-3a1c747cf44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a2fe9fb-c99a-4c5f-b459-fa001baba105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da8d81d-f5e5-4947-bdff-e16e524011ff",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea23ab6-2477-467e-8f3e-91d0854aefda",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "82057922-6964-4f20-a604-fb7a099ddb29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6dd354-0f85-440a-aca0-f7addfff6ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85055c59-220f-4fe4-8afa-dcc0e981ab69"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5cfa57b-0f4b-4073-be16-f1de80331f26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4abe61a5-88db-4b0a-b068-48000f631b73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f646b2f2-9094-403a-b6e8-0c49da357d29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fea935b9-727d-4a41-8aaf-2fc93b38d7a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77a72f01-9866-46ca-b05d-ea409d04cfc6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "7514725d-213d-47a1-b238-97b0a35a25aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7bb62268-07fc-49fb-bc34-bb207d900385",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "735aa0ef-d694-4c79-acc2-19568ada9cb0"
            }
          }
        ]
      },
      {
        "id": "5190a948-81ed-439e-9988-7b1aca78959d",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "63a24e18-f291-4088-9588-d1505f2f7de8",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.97196261682242,
      "responseMin": 4,
      "responseMax": 809,
      "responseSd": 139.19880611959314,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661734280114,
      "completed": 1661734289919
    },
    "executions": [
      {
        "id": "0a45f5ad-df15-42cd-ace0-7982121b90bf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dd1965ef-5deb-4e08-9974-5854fd82ba59",
          "httpRequestId": "7cfcbdfd-37b9-495e-b5e7-7276233090b8"
        },
        "item": {
          "id": "0a45f5ad-df15-42cd-ace0-7982121b90bf",
          "name": "did_json"
        },
        "response": {
          "id": "bcb3e0e7-6589-4623-b7ae-f0f442390289",
          "status": "OK",
          "code": 200,
          "responseTime": 476,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f3c526-794c-4bc2-a294-dd4f13feff4c",
        "cursor": {
          "ref": "53994880-0056-40ca-94e0-5d066e50873f",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8fac1578-95ef-4589-b1c6-3c63a4c912d8"
        },
        "item": {
          "id": "26f3c526-794c-4bc2-a294-dd4f13feff4c",
          "name": "did:invalid"
        },
        "response": {
          "id": "47ada86d-bea9-4b05-907f-58ad21c9e960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f3c526-794c-4bc2-a294-dd4f13feff4c",
        "cursor": {
          "ref": "53994880-0056-40ca-94e0-5d066e50873f",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8fac1578-95ef-4589-b1c6-3c63a4c912d8"
        },
        "item": {
          "id": "26f3c526-794c-4bc2-a294-dd4f13feff4c",
          "name": "did:invalid"
        },
        "response": {
          "id": "47ada86d-bea9-4b05-907f-58ad21c9e960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fe48f5-3179-44c3-b18e-eb2f45bc0f39",
        "cursor": {
          "ref": "4735b558-6521-4d00-985c-e9ff1c14130d",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "81c3c93c-34c2-4670-b02f-f301a2b6401b"
        },
        "item": {
          "id": "97fe48f5-3179-44c3-b18e-eb2f45bc0f39",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3ef4bcd7-66e3-44ee-8187-9f31eb0c307c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 126,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a37b56a-3630-4d6f-b5de-1bd3eb1befd3",
        "cursor": {
          "ref": "c0a8a04a-777a-40be-b302-e2fd4c04f1a7",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "10ed7447-2fff-41cd-b402-c01ca634364c"
        },
        "item": {
          "id": "4a37b56a-3630-4d6f-b5de-1bd3eb1befd3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "eb1d2b60-44f8-47e8-9ad4-eb601730da31",
          "status": "Not Found",
          "code": 404,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48188d3a-a5e9-4c44-80d7-9e8fa806c007",
        "cursor": {
          "ref": "a0e27ad7-4e2f-4745-a48b-4af36061a863",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "beb0bfe3-ad47-42c2-800c-d8b1fe27cb49"
        },
        "item": {
          "id": "48188d3a-a5e9-4c44-80d7-9e8fa806c007",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "10785091-5be6-4f0f-8993-9be831084db6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7916b2-41c2-4822-9f01-1ce783ff6d6b",
        "cursor": {
          "ref": "0545fd1e-d795-4b60-a25d-ef939a87ffed",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bed68b60-c708-4ab4-a312-7a9713439f08"
        },
        "item": {
          "id": "8f7916b2-41c2-4822-9f01-1ce783ff6d6b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c2278002-aa05-4b92-ac81-be13584be5ac",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7916b2-41c2-4822-9f01-1ce783ff6d6b",
        "cursor": {
          "ref": "0545fd1e-d795-4b60-a25d-ef939a87ffed",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bed68b60-c708-4ab4-a312-7a9713439f08"
        },
        "item": {
          "id": "8f7916b2-41c2-4822-9f01-1ce783ff6d6b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c2278002-aa05-4b92-ac81-be13584be5ac",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33829884-30ac-49f5-919b-6295a976a2b4",
        "cursor": {
          "ref": "52b8e71f-a7d8-4ea4-a7b3-3f9715a70d4b",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e8e2fa15-44fd-49ff-a532-28ac06145570"
        },
        "item": {
          "id": "33829884-30ac-49f5-919b-6295a976a2b4",
          "name": "identifiers"
        },
        "response": {
          "id": "335b3cd1-221c-431c-809d-4204105a53d7",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe6a839-38ef-4b7b-9de2-f6270b174242",
        "cursor": {
          "ref": "081538da-9107-4aa4-b610-ce9f51996551",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dd4ec497-4757-4dec-bbc2-761d3f4dd1a6"
        },
        "item": {
          "id": "fbe6a839-38ef-4b7b-9de2-f6270b174242",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6c565135-b50b-4153-9882-ec8e16546990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe6a839-38ef-4b7b-9de2-f6270b174242",
        "cursor": {
          "ref": "081538da-9107-4aa4-b610-ce9f51996551",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dd4ec497-4757-4dec-bbc2-761d3f4dd1a6"
        },
        "item": {
          "id": "fbe6a839-38ef-4b7b-9de2-f6270b174242",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6c565135-b50b-4153-9882-ec8e16546990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe6a839-38ef-4b7b-9de2-f6270b174242",
        "cursor": {
          "ref": "081538da-9107-4aa4-b610-ce9f51996551",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dd4ec497-4757-4dec-bbc2-761d3f4dd1a6"
        },
        "item": {
          "id": "fbe6a839-38ef-4b7b-9de2-f6270b174242",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6c565135-b50b-4153-9882-ec8e16546990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c355a6-92ab-43ea-88ef-c88deb857d35",
        "cursor": {
          "ref": "ac9e04c6-7181-487a-b926-86b729004899",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "89f6a39a-82dd-43d3-982b-c7c813b17911"
        },
        "item": {
          "id": "09c355a6-92ab-43ea-88ef-c88deb857d35",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "744ed7b8-3b8c-460c-8f22-b40314281d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c355a6-92ab-43ea-88ef-c88deb857d35",
        "cursor": {
          "ref": "ac9e04c6-7181-487a-b926-86b729004899",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "89f6a39a-82dd-43d3-982b-c7c813b17911"
        },
        "item": {
          "id": "09c355a6-92ab-43ea-88ef-c88deb857d35",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "744ed7b8-3b8c-460c-8f22-b40314281d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b131889d-8e7d-4822-8966-a1c89cc338c7",
        "cursor": {
          "ref": "c2336613-edb2-472c-a3ef-da4e7548e228",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1e0da7c3-13ec-4e3b-b3bf-86b8aeee5071"
        },
        "item": {
          "id": "b131889d-8e7d-4822-8966-a1c89cc338c7",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "9525adc6-6f37-409d-a3d4-9f124ed2d910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b131889d-8e7d-4822-8966-a1c89cc338c7",
        "cursor": {
          "ref": "c2336613-edb2-472c-a3ef-da4e7548e228",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1e0da7c3-13ec-4e3b-b3bf-86b8aeee5071"
        },
        "item": {
          "id": "b131889d-8e7d-4822-8966-a1c89cc338c7",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "9525adc6-6f37-409d-a3d4-9f124ed2d910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c5f28f-551f-45f0-8d1a-87194dbbce8a",
        "cursor": {
          "ref": "af99d891-3262-40ca-98c6-b52e8784fc2c",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "90548933-c063-417f-bfb8-58232a0cb91e"
        },
        "item": {
          "id": "90c5f28f-551f-45f0-8d1a-87194dbbce8a",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "090e44bf-10e2-4796-ab01-2021952cb062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c5f28f-551f-45f0-8d1a-87194dbbce8a",
        "cursor": {
          "ref": "af99d891-3262-40ca-98c6-b52e8784fc2c",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "90548933-c063-417f-bfb8-58232a0cb91e"
        },
        "item": {
          "id": "90c5f28f-551f-45f0-8d1a-87194dbbce8a",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "090e44bf-10e2-4796-ab01-2021952cb062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b190ac-26c5-49a3-af53-1b01f2991d50",
        "cursor": {
          "ref": "cba3a25f-e2f6-4cbf-91b0-5f9a2949e420",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ea17efe0-a015-413f-a8ed-55b6c2d27105"
        },
        "item": {
          "id": "d4b190ac-26c5-49a3-af53-1b01f2991d50",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "8377fc71-64f3-441d-b2a6-e393784d87e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b190ac-26c5-49a3-af53-1b01f2991d50",
        "cursor": {
          "ref": "cba3a25f-e2f6-4cbf-91b0-5f9a2949e420",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ea17efe0-a015-413f-a8ed-55b6c2d27105"
        },
        "item": {
          "id": "d4b190ac-26c5-49a3-af53-1b01f2991d50",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "8377fc71-64f3-441d-b2a6-e393784d87e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67dad551-481f-4466-98a1-369320733039",
        "cursor": {
          "ref": "19d47e36-eb26-42df-85a2-1bb2add4ab8a",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7d66747b-a735-4425-971c-a934f0f8f4e5"
        },
        "item": {
          "id": "67dad551-481f-4466-98a1-369320733039",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "17036082-0911-447d-b2e4-5d1f37562e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67dad551-481f-4466-98a1-369320733039",
        "cursor": {
          "ref": "19d47e36-eb26-42df-85a2-1bb2add4ab8a",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7d66747b-a735-4425-971c-a934f0f8f4e5"
        },
        "item": {
          "id": "67dad551-481f-4466-98a1-369320733039",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "17036082-0911-447d-b2e4-5d1f37562e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a0006a-d211-44f2-a6d8-d4293ee2ae84",
        "cursor": {
          "ref": "a6fc499f-75eb-4cf3-a611-5856069ce672",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f09bf7ba-8ee8-429b-a08f-2107c42bb252"
        },
        "item": {
          "id": "77a0006a-d211-44f2-a6d8-d4293ee2ae84",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "7419bf38-e2cb-40d5-b035-866a447e8f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a0006a-d211-44f2-a6d8-d4293ee2ae84",
        "cursor": {
          "ref": "a6fc499f-75eb-4cf3-a611-5856069ce672",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f09bf7ba-8ee8-429b-a08f-2107c42bb252"
        },
        "item": {
          "id": "77a0006a-d211-44f2-a6d8-d4293ee2ae84",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "7419bf38-e2cb-40d5-b035-866a447e8f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57ab1ba-3074-4786-93f1-ebc681f38932",
        "cursor": {
          "ref": "a77a6f04-7635-457c-812d-c5738535e18b",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "25889b9d-7e74-4e14-a156-04b8b05065e0"
        },
        "item": {
          "id": "c57ab1ba-3074-4786-93f1-ebc681f38932",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "e16e0e3f-9ad1-4eed-858c-5839593d51f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57ab1ba-3074-4786-93f1-ebc681f38932",
        "cursor": {
          "ref": "a77a6f04-7635-457c-812d-c5738535e18b",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "25889b9d-7e74-4e14-a156-04b8b05065e0"
        },
        "item": {
          "id": "c57ab1ba-3074-4786-93f1-ebc681f38932",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "e16e0e3f-9ad1-4eed-858c-5839593d51f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e8f6b8-0962-4b9a-a4d2-fabd348f8672",
        "cursor": {
          "ref": "293c1372-e0dd-4716-897f-8d09815b750b",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "45982f9a-40ad-4b05-b225-01f00fb2fc8a"
        },
        "item": {
          "id": "58e8f6b8-0962-4b9a-a4d2-fabd348f8672",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4c62005a-1d65-4df8-88d1-f09eda6ce85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e8f6b8-0962-4b9a-a4d2-fabd348f8672",
        "cursor": {
          "ref": "293c1372-e0dd-4716-897f-8d09815b750b",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "45982f9a-40ad-4b05-b225-01f00fb2fc8a"
        },
        "item": {
          "id": "58e8f6b8-0962-4b9a-a4d2-fabd348f8672",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4c62005a-1d65-4df8-88d1-f09eda6ce85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f588ad-addf-423b-b80f-1e6f5e0cd7b4",
        "cursor": {
          "ref": "36a4a77b-b4ae-4673-9e9a-9804fd96c6b1",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "36744fb3-a705-4c3e-9dba-db8cad6b14c2"
        },
        "item": {
          "id": "08f588ad-addf-423b-b80f-1e6f5e0cd7b4",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "13c4b013-c712-406b-9270-a06e5ee5d31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f588ad-addf-423b-b80f-1e6f5e0cd7b4",
        "cursor": {
          "ref": "36a4a77b-b4ae-4673-9e9a-9804fd96c6b1",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "36744fb3-a705-4c3e-9dba-db8cad6b14c2"
        },
        "item": {
          "id": "08f588ad-addf-423b-b80f-1e6f5e0cd7b4",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "13c4b013-c712-406b-9270-a06e5ee5d31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5c87e7-58cb-4587-a6e4-954e6775cdd0",
        "cursor": {
          "ref": "4df29f4c-19fd-4dfc-8924-7f52a58a9d33",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f10563c0-c4f0-4f36-9e38-16e7ac98e382"
        },
        "item": {
          "id": "3b5c87e7-58cb-4587-a6e4-954e6775cdd0",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "92c682dd-ec18-4b7a-ac40-f1c23c641931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5c87e7-58cb-4587-a6e4-954e6775cdd0",
        "cursor": {
          "ref": "4df29f4c-19fd-4dfc-8924-7f52a58a9d33",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f10563c0-c4f0-4f36-9e38-16e7ac98e382"
        },
        "item": {
          "id": "3b5c87e7-58cb-4587-a6e4-954e6775cdd0",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "92c682dd-ec18-4b7a-ac40-f1c23c641931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9922df5-599d-461b-b1c9-8bf2462bd76a",
        "cursor": {
          "ref": "1eb6ba8f-1171-4705-98d0-1c81dddb36ff",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cf5ab42c-690a-406c-a67a-e826b726e95f"
        },
        "item": {
          "id": "b9922df5-599d-461b-b1c9-8bf2462bd76a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4232bde7-9978-45ea-baa6-52229e47cad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9922df5-599d-461b-b1c9-8bf2462bd76a",
        "cursor": {
          "ref": "1eb6ba8f-1171-4705-98d0-1c81dddb36ff",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cf5ab42c-690a-406c-a67a-e826b726e95f"
        },
        "item": {
          "id": "b9922df5-599d-461b-b1c9-8bf2462bd76a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4232bde7-9978-45ea-baa6-52229e47cad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283f4203-cb1e-4bd5-8746-7535a6a98251",
        "cursor": {
          "ref": "446e2cd5-7ec5-4029-99f7-b3bf1433f1bc",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1be4e507-d8e9-4dc4-a67c-039a29894c1c"
        },
        "item": {
          "id": "283f4203-cb1e-4bd5-8746-7535a6a98251",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fe8f7498-db81-44a9-ab57-4cc8498a3e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283f4203-cb1e-4bd5-8746-7535a6a98251",
        "cursor": {
          "ref": "446e2cd5-7ec5-4029-99f7-b3bf1433f1bc",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1be4e507-d8e9-4dc4-a67c-039a29894c1c"
        },
        "item": {
          "id": "283f4203-cb1e-4bd5-8746-7535a6a98251",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fe8f7498-db81-44a9-ab57-4cc8498a3e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc13a54-c520-49e8-a61c-4cb6a99511e3",
        "cursor": {
          "ref": "205a638e-dd34-484e-94ee-72063d87ca91",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bfdec151-9cb3-4389-9e50-f7e8ca71aa19"
        },
        "item": {
          "id": "9bc13a54-c520-49e8-a61c-4cb6a99511e3",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "4f031a5b-d9ff-480e-9086-b154762a6ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc13a54-c520-49e8-a61c-4cb6a99511e3",
        "cursor": {
          "ref": "205a638e-dd34-484e-94ee-72063d87ca91",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bfdec151-9cb3-4389-9e50-f7e8ca71aa19"
        },
        "item": {
          "id": "9bc13a54-c520-49e8-a61c-4cb6a99511e3",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "4f031a5b-d9ff-480e-9086-b154762a6ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9706b3dd-df05-49cc-8700-bbfa047eda62",
        "cursor": {
          "ref": "71dee78f-3f2b-4e52-8767-c657220cd098",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cf7c2db7-f1d6-46a7-a86b-5b7a3c37b512"
        },
        "item": {
          "id": "9706b3dd-df05-49cc-8700-bbfa047eda62",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "67c911c7-53cc-4bbf-922a-f69bda4f49e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9706b3dd-df05-49cc-8700-bbfa047eda62",
        "cursor": {
          "ref": "71dee78f-3f2b-4e52-8767-c657220cd098",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cf7c2db7-f1d6-46a7-a86b-5b7a3c37b512"
        },
        "item": {
          "id": "9706b3dd-df05-49cc-8700-bbfa047eda62",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "67c911c7-53cc-4bbf-922a-f69bda4f49e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2acbc45-e1f1-4feb-a538-04e979c3138c",
        "cursor": {
          "ref": "9ab33aed-9353-451c-9a51-ffacc334694c",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b33fe51b-626f-470f-b03c-68a68856b39d"
        },
        "item": {
          "id": "f2acbc45-e1f1-4feb-a538-04e979c3138c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "91f008e7-e297-4d5a-a627-d1b928182088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2acbc45-e1f1-4feb-a538-04e979c3138c",
        "cursor": {
          "ref": "9ab33aed-9353-451c-9a51-ffacc334694c",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b33fe51b-626f-470f-b03c-68a68856b39d"
        },
        "item": {
          "id": "f2acbc45-e1f1-4feb-a538-04e979c3138c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "91f008e7-e297-4d5a-a627-d1b928182088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02128e2d-4843-4257-b300-9e3e96de0951",
        "cursor": {
          "ref": "c09fe231-705b-4720-94f1-a18bfb9f7456",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c31c884b-fc1d-42bb-8ad2-04976903ea44"
        },
        "item": {
          "id": "02128e2d-4843-4257-b300-9e3e96de0951",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bee15320-a85b-4696-9c0b-83d999a89c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02128e2d-4843-4257-b300-9e3e96de0951",
        "cursor": {
          "ref": "c09fe231-705b-4720-94f1-a18bfb9f7456",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c31c884b-fc1d-42bb-8ad2-04976903ea44"
        },
        "item": {
          "id": "02128e2d-4843-4257-b300-9e3e96de0951",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bee15320-a85b-4696-9c0b-83d999a89c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65db07c5-80fc-4e45-b9f2-99b83643fc8e",
        "cursor": {
          "ref": "753f8b14-3dbf-4aa4-876c-7fadc3909b3b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e921cc76-4ec4-44ae-8321-1dd80246a98d"
        },
        "item": {
          "id": "65db07c5-80fc-4e45-b9f2-99b83643fc8e",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "47a50b72-be72-4b10-9015-878ca5e935a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65db07c5-80fc-4e45-b9f2-99b83643fc8e",
        "cursor": {
          "ref": "753f8b14-3dbf-4aa4-876c-7fadc3909b3b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e921cc76-4ec4-44ae-8321-1dd80246a98d"
        },
        "item": {
          "id": "65db07c5-80fc-4e45-b9f2-99b83643fc8e",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "47a50b72-be72-4b10-9015-878ca5e935a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26b0b17-7aca-45d4-b745-4ae84d8f7dbc",
        "cursor": {
          "ref": "04b3ed66-60c2-4f2e-8961-eb1720b21f8d",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "20181224-a6af-499f-8615-6841fdcb50a0"
        },
        "item": {
          "id": "c26b0b17-7aca-45d4-b745-4ae84d8f7dbc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "96e4e0f8-a7f3-4867-ad8b-16e52e58f36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26b0b17-7aca-45d4-b745-4ae84d8f7dbc",
        "cursor": {
          "ref": "04b3ed66-60c2-4f2e-8961-eb1720b21f8d",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "20181224-a6af-499f-8615-6841fdcb50a0"
        },
        "item": {
          "id": "c26b0b17-7aca-45d4-b745-4ae84d8f7dbc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "96e4e0f8-a7f3-4867-ad8b-16e52e58f36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cda441-7dbb-4e03-afff-831c4d901511",
        "cursor": {
          "ref": "552fd2f8-0202-448f-9c48-75e064bac2e5",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "27a1872c-9874-4630-86ae-50561da7caea"
        },
        "item": {
          "id": "f5cda441-7dbb-4e03-afff-831c4d901511",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "38a36f5f-18d2-4295-8aaa-0089a7e059a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cda441-7dbb-4e03-afff-831c4d901511",
        "cursor": {
          "ref": "552fd2f8-0202-448f-9c48-75e064bac2e5",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "27a1872c-9874-4630-86ae-50561da7caea"
        },
        "item": {
          "id": "f5cda441-7dbb-4e03-afff-831c4d901511",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "38a36f5f-18d2-4295-8aaa-0089a7e059a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9686b6-20f5-4255-8213-9a43e669f394",
        "cursor": {
          "ref": "ca9693a3-f0f3-46ce-a4f5-6153c29b513b",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "987856da-5fde-4b4a-9aee-4c36882616e7"
        },
        "item": {
          "id": "dc9686b6-20f5-4255-8213-9a43e669f394",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ea70e4b8-d30e-4d8a-af7e-dc89e27b479f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9686b6-20f5-4255-8213-9a43e669f394",
        "cursor": {
          "ref": "ca9693a3-f0f3-46ce-a4f5-6153c29b513b",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "987856da-5fde-4b4a-9aee-4c36882616e7"
        },
        "item": {
          "id": "dc9686b6-20f5-4255-8213-9a43e669f394",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "ea70e4b8-d30e-4d8a-af7e-dc89e27b479f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2258792b-b2e7-46d3-b1ae-d2072aba5b8f",
        "cursor": {
          "ref": "eb437d56-4b7e-4520-8499-9ebe2c7a72c2",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "92bcee79-642e-43f0-9f71-877460c66578"
        },
        "item": {
          "id": "2258792b-b2e7-46d3-b1ae-d2072aba5b8f",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "0f1f95d1-da44-4521-8cb9-d73ba5b9c5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2258792b-b2e7-46d3-b1ae-d2072aba5b8f",
        "cursor": {
          "ref": "eb437d56-4b7e-4520-8499-9ebe2c7a72c2",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "92bcee79-642e-43f0-9f71-877460c66578"
        },
        "item": {
          "id": "2258792b-b2e7-46d3-b1ae-d2072aba5b8f",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "0f1f95d1-da44-4521-8cb9-d73ba5b9c5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9611a996-e89f-43d4-ade3-7c9d0190f952",
        "cursor": {
          "ref": "3f23f349-a606-42be-806c-94b84f564864",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "69d80dc3-909c-490d-917f-f4bdbe7b314a"
        },
        "item": {
          "id": "9611a996-e89f-43d4-ade3-7c9d0190f952",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "21716011-a68f-4863-8f10-088cc8caf45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9611a996-e89f-43d4-ade3-7c9d0190f952",
        "cursor": {
          "ref": "3f23f349-a606-42be-806c-94b84f564864",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "69d80dc3-909c-490d-917f-f4bdbe7b314a"
        },
        "item": {
          "id": "9611a996-e89f-43d4-ade3-7c9d0190f952",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "21716011-a68f-4863-8f10-088cc8caf45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ea0348-f50c-421b-9199-d4ee508fef96",
        "cursor": {
          "ref": "9023dfe2-b5f9-481b-ba9f-477d25d75e08",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "88897bd6-af69-465f-9837-b51268278a9b"
        },
        "item": {
          "id": "a7ea0348-f50c-421b-9199-d4ee508fef96",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "96411f56-7ce8-42e8-bd16-418d35e3448a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ea0348-f50c-421b-9199-d4ee508fef96",
        "cursor": {
          "ref": "9023dfe2-b5f9-481b-ba9f-477d25d75e08",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "88897bd6-af69-465f-9837-b51268278a9b"
        },
        "item": {
          "id": "a7ea0348-f50c-421b-9199-d4ee508fef96",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "96411f56-7ce8-42e8-bd16-418d35e3448a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e07bb66-eeaf-4f00-b5a8-c08b396a11d4",
        "cursor": {
          "ref": "51916000-6711-4061-bed6-0cdc8d23ead4",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4f8b1358-653c-4f2c-bfcf-e85daf4e4328"
        },
        "item": {
          "id": "4e07bb66-eeaf-4f00-b5a8-c08b396a11d4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "deedd0c2-60e0-4cba-8bf3-885b67aa466b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e07bb66-eeaf-4f00-b5a8-c08b396a11d4",
        "cursor": {
          "ref": "51916000-6711-4061-bed6-0cdc8d23ead4",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4f8b1358-653c-4f2c-bfcf-e85daf4e4328"
        },
        "item": {
          "id": "4e07bb66-eeaf-4f00-b5a8-c08b396a11d4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "deedd0c2-60e0-4cba-8bf3-885b67aa466b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889b1e42-c10b-4d4d-803c-48456985c504",
        "cursor": {
          "ref": "1992cdd2-9b22-40c0-9c96-8e6b3b9a6087",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1b4a7fe4-09aa-4a5b-a522-ba437beb18bd"
        },
        "item": {
          "id": "889b1e42-c10b-4d4d-803c-48456985c504",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "74162a6c-0d3d-467f-882f-f21810489e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889b1e42-c10b-4d4d-803c-48456985c504",
        "cursor": {
          "ref": "1992cdd2-9b22-40c0-9c96-8e6b3b9a6087",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1b4a7fe4-09aa-4a5b-a522-ba437beb18bd"
        },
        "item": {
          "id": "889b1e42-c10b-4d4d-803c-48456985c504",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "74162a6c-0d3d-467f-882f-f21810489e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73d2cf6-accf-4632-ba9c-e2fc21e33e0e",
        "cursor": {
          "ref": "998fcb6f-55bb-4efa-90e2-49c27031265d",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6ee1dbb3-1ef0-4746-83c1-d14db82097f9"
        },
        "item": {
          "id": "a73d2cf6-accf-4632-ba9c-e2fc21e33e0e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b84952d2-98c6-4e62-b06e-1e045da474cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 674,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73d2cf6-accf-4632-ba9c-e2fc21e33e0e",
        "cursor": {
          "ref": "998fcb6f-55bb-4efa-90e2-49c27031265d",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6ee1dbb3-1ef0-4746-83c1-d14db82097f9"
        },
        "item": {
          "id": "a73d2cf6-accf-4632-ba9c-e2fc21e33e0e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b84952d2-98c6-4e62-b06e-1e045da474cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 674,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccf780a-1187-4184-be12-ca7009ff3477",
        "cursor": {
          "ref": "0bf84132-73cb-47df-907b-cba6e240cb80",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "43ce6c4a-6fbe-4277-9201-73abdebdc02a"
        },
        "item": {
          "id": "7ccf780a-1187-4184-be12-ca7009ff3477",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "87cc6f80-e9fa-41f1-a5c7-82595bf54128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccf780a-1187-4184-be12-ca7009ff3477",
        "cursor": {
          "ref": "0bf84132-73cb-47df-907b-cba6e240cb80",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "43ce6c4a-6fbe-4277-9201-73abdebdc02a"
        },
        "item": {
          "id": "7ccf780a-1187-4184-be12-ca7009ff3477",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "87cc6f80-e9fa-41f1-a5c7-82595bf54128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dd50c7-2626-4044-9f92-b8fa2221dbd8",
        "cursor": {
          "ref": "5d31ef19-192e-4a1b-85a4-e60e84994efd",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9d3b1342-7993-453c-9576-a7699adfd9bb"
        },
        "item": {
          "id": "f4dd50c7-2626-4044-9f92-b8fa2221dbd8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "d402f99d-2bf7-43de-9cdc-f35937a989eb",
          "status": "Created",
          "code": 201,
          "responseTime": 809,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f4dd50c7-2626-4044-9f92-b8fa2221dbd8",
        "cursor": {
          "ref": "5d31ef19-192e-4a1b-85a4-e60e84994efd",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9d3b1342-7993-453c-9576-a7699adfd9bb"
        },
        "item": {
          "id": "f4dd50c7-2626-4044-9f92-b8fa2221dbd8",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "d402f99d-2bf7-43de-9cdc-f35937a989eb",
          "status": "Created",
          "code": 201,
          "responseTime": 809,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "938490cb-5313-48cc-a74e-0b2cd1f6d9fe",
        "cursor": {
          "ref": "9177162f-daf0-4d88-802e-2b12cb5095fb",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "220fbada-b390-489a-8a39-8844fbc5e8bb"
        },
        "item": {
          "id": "938490cb-5313-48cc-a74e-0b2cd1f6d9fe",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ec537965-165c-4bfd-8345-27c74dc69ef5",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "938490cb-5313-48cc-a74e-0b2cd1f6d9fe",
        "cursor": {
          "ref": "9177162f-daf0-4d88-802e-2b12cb5095fb",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "220fbada-b390-489a-8a39-8844fbc5e8bb"
        },
        "item": {
          "id": "938490cb-5313-48cc-a74e-0b2cd1f6d9fe",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "ec537965-165c-4bfd-8345-27c74dc69ef5",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6c054a59-68ab-4e18-8c69-4407aacb390c",
        "cursor": {
          "ref": "5be5b888-53e7-4ddb-9c5b-51365ee026f6",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "35b98019-af92-4c76-9008-dcfd70a0785a"
        },
        "item": {
          "id": "6c054a59-68ab-4e18-8c69-4407aacb390c",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "931d52e9-92e9-49b3-a202-75d119e57ac2",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6c054a59-68ab-4e18-8c69-4407aacb390c",
        "cursor": {
          "ref": "5be5b888-53e7-4ddb-9c5b-51365ee026f6",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "35b98019-af92-4c76-9008-dcfd70a0785a"
        },
        "item": {
          "id": "6c054a59-68ab-4e18-8c69-4407aacb390c",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "931d52e9-92e9-49b3-a202-75d119e57ac2",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "460ebeb3-c547-48a9-92f1-9b34442a34a7",
        "cursor": {
          "ref": "b096fe77-d369-408f-a359-cdf47404ce76",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "563b1efd-4abd-4906-a9dd-49c03125178d"
        },
        "item": {
          "id": "460ebeb3-c547-48a9-92f1-9b34442a34a7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ab106f5b-19ff-4d03-9297-0cf1d8d39019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460ebeb3-c547-48a9-92f1-9b34442a34a7",
        "cursor": {
          "ref": "b096fe77-d369-408f-a359-cdf47404ce76",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "563b1efd-4abd-4906-a9dd-49c03125178d"
        },
        "item": {
          "id": "460ebeb3-c547-48a9-92f1-9b34442a34a7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ab106f5b-19ff-4d03-9297-0cf1d8d39019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f92bc2-e436-458f-98a6-56ae226e2f95",
        "cursor": {
          "ref": "fefbb3c1-79a4-4530-9579-cda3b9d8acdf",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "308660b8-fbe8-45e6-b90f-43f50bc67b01"
        },
        "item": {
          "id": "73f92bc2-e436-458f-98a6-56ae226e2f95",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e173da5f-579f-45fc-b7bd-170a2f92cfb9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f92bc2-e436-458f-98a6-56ae226e2f95",
        "cursor": {
          "ref": "fefbb3c1-79a4-4530-9579-cda3b9d8acdf",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "308660b8-fbe8-45e6-b90f-43f50bc67b01"
        },
        "item": {
          "id": "73f92bc2-e436-458f-98a6-56ae226e2f95",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e173da5f-579f-45fc-b7bd-170a2f92cfb9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab88b3e-8bdc-4905-93d6-b679b4057df2",
        "cursor": {
          "ref": "edd5e2f5-908e-410d-958d-6386cb9e5d3c",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b14385cc-ce06-4a2b-a629-3ecdafcb8303"
        },
        "item": {
          "id": "7ab88b3e-8bdc-4905-93d6-b679b4057df2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f414f63a-054e-4eb8-91a4-abdcdcb7f62b",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab88b3e-8bdc-4905-93d6-b679b4057df2",
        "cursor": {
          "ref": "edd5e2f5-908e-410d-958d-6386cb9e5d3c",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b14385cc-ce06-4a2b-a629-3ecdafcb8303"
        },
        "item": {
          "id": "7ab88b3e-8bdc-4905-93d6-b679b4057df2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f414f63a-054e-4eb8-91a4-abdcdcb7f62b",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "80085564-b404-4d75-a510-bc7a1107159c",
        "cursor": {
          "ref": "76dce34d-4a4e-4fcf-bd2d-ee78b226e850",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7b04d5df-770e-4a68-a809-bb1726de8ddf"
        },
        "item": {
          "id": "80085564-b404-4d75-a510-bc7a1107159c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "971f8525-0d49-4fa5-9678-477cba059a8c",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "80085564-b404-4d75-a510-bc7a1107159c",
        "cursor": {
          "ref": "76dce34d-4a4e-4fcf-bd2d-ee78b226e850",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7b04d5df-770e-4a68-a809-bb1726de8ddf"
        },
        "item": {
          "id": "80085564-b404-4d75-a510-bc7a1107159c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "971f8525-0d49-4fa5-9678-477cba059a8c",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "0127a49f-728c-434c-a8a2-4e5b9e3f2768",
        "cursor": {
          "ref": "6cea9206-53be-48b6-bfb1-1ef29ef6fba7",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b0567cad-be49-44c1-8c6c-9a165ab5c018"
        },
        "item": {
          "id": "0127a49f-728c-434c-a8a2-4e5b9e3f2768",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "652d8423-cdd3-4995-9f64-5bcb7837b33b",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0127a49f-728c-434c-a8a2-4e5b9e3f2768",
        "cursor": {
          "ref": "6cea9206-53be-48b6-bfb1-1ef29ef6fba7",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b0567cad-be49-44c1-8c6c-9a165ab5c018"
        },
        "item": {
          "id": "0127a49f-728c-434c-a8a2-4e5b9e3f2768",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "652d8423-cdd3-4995-9f64-5bcb7837b33b",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c77928c-61ec-4903-b364-e0d563dd0b60",
        "cursor": {
          "ref": "af17d67f-5b91-481d-860f-c6db3dfc4745",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d1b8d8cd-2f34-484d-b092-b9a426f62c35"
        },
        "item": {
          "id": "2c77928c-61ec-4903-b364-e0d563dd0b60",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "ecc7b6c5-856f-4e76-b9e1-7430fed7b5ee",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2c77928c-61ec-4903-b364-e0d563dd0b60",
        "cursor": {
          "ref": "af17d67f-5b91-481d-860f-c6db3dfc4745",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d1b8d8cd-2f34-484d-b092-b9a426f62c35"
        },
        "item": {
          "id": "2c77928c-61ec-4903-b364-e0d563dd0b60",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "ecc7b6c5-856f-4e76-b9e1-7430fed7b5ee",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "dc2c74e7-b2dd-4b3e-ba08-3ff7598da160",
        "cursor": {
          "ref": "eebfae4d-bca3-46d2-8200-2b0d49e6c05a",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0059229a-1a46-4623-ba52-2c69498210a2"
        },
        "item": {
          "id": "dc2c74e7-b2dd-4b3e-ba08-3ff7598da160",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0c9d7dd7-e21b-40fe-ba37-9acf74f79d4c",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2c74e7-b2dd-4b3e-ba08-3ff7598da160",
        "cursor": {
          "ref": "eebfae4d-bca3-46d2-8200-2b0d49e6c05a",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0059229a-1a46-4623-ba52-2c69498210a2"
        },
        "item": {
          "id": "dc2c74e7-b2dd-4b3e-ba08-3ff7598da160",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0c9d7dd7-e21b-40fe-ba37-9acf74f79d4c",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c030a9cd-9037-469c-a040-16027ca7c6cf",
        "cursor": {
          "ref": "00a89317-7403-42cd-97de-a4fc175dcfb1",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "346bc6e9-a510-4077-a4e3-80a996ce61b0"
        },
        "item": {
          "id": "c030a9cd-9037-469c-a040-16027ca7c6cf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0418afc4-383c-49a2-954d-7662ef92a52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c030a9cd-9037-469c-a040-16027ca7c6cf",
        "cursor": {
          "ref": "00a89317-7403-42cd-97de-a4fc175dcfb1",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "346bc6e9-a510-4077-a4e3-80a996ce61b0"
        },
        "item": {
          "id": "c030a9cd-9037-469c-a040-16027ca7c6cf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0418afc4-383c-49a2-954d-7662ef92a52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "277a7405-2c34-4bab-b3bf-ccd22f8edae0",
        "cursor": {
          "ref": "4285af6a-64d4-4f2b-92d1-349680965b78",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "709c6b46-7470-45c7-90b1-bf0653e6780e"
        },
        "item": {
          "id": "277a7405-2c34-4bab-b3bf-ccd22f8edae0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d9b31ccb-c122-4d2a-8c3f-beca210a1583",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "277a7405-2c34-4bab-b3bf-ccd22f8edae0",
        "cursor": {
          "ref": "4285af6a-64d4-4f2b-92d1-349680965b78",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "709c6b46-7470-45c7-90b1-bf0653e6780e"
        },
        "item": {
          "id": "277a7405-2c34-4bab-b3bf-ccd22f8edae0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d9b31ccb-c122-4d2a-8c3f-beca210a1583",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ac0538bd-3127-4550-957c-5cb778cf2964",
        "cursor": {
          "ref": "6f6341e1-52ce-442d-a4f8-d2bc21f58e57",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c1ddb2aa-d17b-44bf-aeef-f8248f318a0f"
        },
        "item": {
          "id": "ac0538bd-3127-4550-957c-5cb778cf2964",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "f3c3a54e-5660-4c53-a69b-66823c49a2fb",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ac0538bd-3127-4550-957c-5cb778cf2964",
        "cursor": {
          "ref": "6f6341e1-52ce-442d-a4f8-d2bc21f58e57",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c1ddb2aa-d17b-44bf-aeef-f8248f318a0f"
        },
        "item": {
          "id": "ac0538bd-3127-4550-957c-5cb778cf2964",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "f3c3a54e-5660-4c53-a69b-66823c49a2fb",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "912486fb-2003-424f-9a2c-f2d777c6720b",
        "cursor": {
          "ref": "d8e7da2e-2eee-4ea6-8a2c-0b27ecc1b92d",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "054b2583-d723-4848-8995-fd74d6fce2f8"
        },
        "item": {
          "id": "912486fb-2003-424f-9a2c-f2d777c6720b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d6c1236d-60ce-49af-9b05-e4f7e708b141",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912486fb-2003-424f-9a2c-f2d777c6720b",
        "cursor": {
          "ref": "d8e7da2e-2eee-4ea6-8a2c-0b27ecc1b92d",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "054b2583-d723-4848-8995-fd74d6fce2f8"
        },
        "item": {
          "id": "912486fb-2003-424f-9a2c-f2d777c6720b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d6c1236d-60ce-49af-9b05-e4f7e708b141",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d736e270-7950-4299-9719-476b9b5459a2",
        "cursor": {
          "ref": "6b213c51-eefe-44d4-b01c-4c174ba234bf",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b26dcb4c-e16d-4124-8249-181c97d69998"
        },
        "item": {
          "id": "d736e270-7950-4299-9719-476b9b5459a2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4573fbd3-59da-4324-8497-eb0aca525914",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098a3dcc-2980-406e-ae40-9aaa42fb112f",
        "cursor": {
          "ref": "e1b1a67b-2416-430b-9732-d9bbbf8dce84",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "24ca2b99-7af5-43ce-8ad1-91f65b62a402"
        },
        "item": {
          "id": "098a3dcc-2980-406e-ae40-9aaa42fb112f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3a3688d8-52c4-44dd-b57b-33de381100ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098a3dcc-2980-406e-ae40-9aaa42fb112f",
        "cursor": {
          "ref": "e1b1a67b-2416-430b-9732-d9bbbf8dce84",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "24ca2b99-7af5-43ce-8ad1-91f65b62a402"
        },
        "item": {
          "id": "098a3dcc-2980-406e-ae40-9aaa42fb112f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3a3688d8-52c4-44dd-b57b-33de381100ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecef91d8-2eef-4232-887d-66a84d712126",
        "cursor": {
          "ref": "39673d40-711f-40db-92ab-b556f624258f",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3cb08706-854e-45a6-bfab-6f37dbd34110"
        },
        "item": {
          "id": "ecef91d8-2eef-4232-887d-66a84d712126",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ba3deccd-1399-4259-a7f0-22193003406e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c027b6b-1f9a-4a9a-bf09-aed83b02e18c",
        "cursor": {
          "ref": "17b39b60-fe9d-41b8-8d9b-9f2aca1ffc01",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b7b0b66d-7f83-4cd4-a27c-d6577e4c77eb"
        },
        "item": {
          "id": "2c027b6b-1f9a-4a9a-bf09-aed83b02e18c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "98b3e22b-6937-44bc-91dc-9da11e1609d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c027b6b-1f9a-4a9a-bf09-aed83b02e18c",
        "cursor": {
          "ref": "17b39b60-fe9d-41b8-8d9b-9f2aca1ffc01",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b7b0b66d-7f83-4cd4-a27c-d6577e4c77eb"
        },
        "item": {
          "id": "2c027b6b-1f9a-4a9a-bf09-aed83b02e18c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "98b3e22b-6937-44bc-91dc-9da11e1609d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7647164a-9fad-4251-a0b2-1679be792fa7",
        "cursor": {
          "ref": "0f5bd83a-2933-42a7-b7b6-9fdfbde445ba",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "38f5bbc7-5890-4895-b4b2-edffa399c3e2"
        },
        "item": {
          "id": "7647164a-9fad-4251-a0b2-1679be792fa7",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b10d9af0-a5d5-4771-90c0-cb01c7b92819",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8770bea-bea2-45de-9bc0-0be0b4e67a37",
        "cursor": {
          "ref": "feb44cab-dad0-47df-a5d6-e67909a6fe18",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "019d17e4-50a2-440d-9243-8b23255ad188"
        },
        "item": {
          "id": "f8770bea-bea2-45de-9bc0-0be0b4e67a37",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "15740f19-372f-4e88-8b36-72f2583a8770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f8770bea-bea2-45de-9bc0-0be0b4e67a37",
        "cursor": {
          "ref": "feb44cab-dad0-47df-a5d6-e67909a6fe18",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "019d17e4-50a2-440d-9243-8b23255ad188"
        },
        "item": {
          "id": "f8770bea-bea2-45de-9bc0-0be0b4e67a37",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "15740f19-372f-4e88-8b36-72f2583a8770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f6c175ee-4596-4e28-9dca-b25a412fbb4d",
        "cursor": {
          "ref": "e6b2af0e-e3a9-4d60-9a32-2f5f7a08334a",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bb9591d2-85f6-4c21-9195-c112cea5f836"
        },
        "item": {
          "id": "f6c175ee-4596-4e28-9dca-b25a412fbb4d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "25df0b55-c2be-4e3a-a60e-459bb55a62af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "6cf09c5b-c386-4c0b-8a48-c45ea07d4c16",
        "cursor": {
          "ref": "4b4e84ec-8f8f-44dd-8571-d26853e6f77d",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a5b8194d-6080-4214-9568-9ef2a1cf2568"
        },
        "item": {
          "id": "6cf09c5b-c386-4c0b-8a48-c45ea07d4c16",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "508bcc60-45e5-4512-ad67-5c76b74e7c13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf09c5b-c386-4c0b-8a48-c45ea07d4c16",
        "cursor": {
          "ref": "4b4e84ec-8f8f-44dd-8571-d26853e6f77d",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a5b8194d-6080-4214-9568-9ef2a1cf2568"
        },
        "item": {
          "id": "6cf09c5b-c386-4c0b-8a48-c45ea07d4c16",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "508bcc60-45e5-4512-ad67-5c76b74e7c13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da8d81d-f5e5-4947-bdff-e16e524011ff",
        "cursor": {
          "ref": "b797e8a0-76d3-45e1-bff6-df3640d57bc1",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1397fb16-7d53-4b6e-8f45-27441049d202"
        },
        "item": {
          "id": "6da8d81d-f5e5-4947-bdff-e16e524011ff",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "5b0af3e1-e4a7-4ffc-9f03-a4232d14cee4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}