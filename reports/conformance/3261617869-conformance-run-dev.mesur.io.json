{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fda142ea-26a8-4eea-b926-27f324976a80",
        "name": "Clear Cache",
        "item": [
          {
            "id": "57ee6201-09ab-469c-8a45-7441486f9dfc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "06fd9281-877d-4e87-8cfa-b2f98f5e130b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b6f96920-7156-4e35-bdfd-65c7e5aa6a92"
                }
              }
            ]
          },
          {
            "id": "ab6aa886-fec6-4615-8eff-cd5a9f65db43",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c74b7570-32db-41ed-ab13-297b19b8510f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "13adedba-06b3-4596-84f8-a1bfe674b65e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0005b93b-5241-4d02-bf19-4824ff494aa2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b9b747e8-04fc-4527-b375-ae7ab63e6fc0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f22eb34-87d4-49aa-87e4-d1c0dfa524f8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00bc801f-5fbe-4eb9-ba7c-d92bad20beac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7bb0fa1d-f060-4202-892d-c49a7660704a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23d82fbd-34ac-4a78-a491-28534628d68f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2daa3e9f-2be7-4a02-8c0e-b2448ddb1b22"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cfb0f1a1-9b0c-4125-b196-67474df44c28",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66e4de5e-6458-41be-9956-1fab8efacf8f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a3a3605-7baa-4f3d-b55d-2296d96e0e56",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b3cf2165-cf39-4b5d-9936-8665f765ff86"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63b929ba-61f9-42a2-b313-5d72b9edb9fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abec9c79-17c2-4d74-b235-0055039956dc"
            }
          }
        ]
      },
      {
        "id": "477a7cd1-2ad1-48f7-bf4a-d5a8cc84736e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6d1789ee-d6f1-4703-b692-64e15c70af21",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6644aab1-0291-409a-80e1-1be49195c883",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4815c4a6-031a-4cea-a973-1a3f1dbc4f2a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0dffc8-5658-4dfe-9f10-8d74f20006fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4bfa1ae-f74e-45d3-8289-f4432a36e58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54aeaeeb-6841-4f66-a477-dcce283e5f40",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15db8db8-ee97-4e1b-8419-e969c0c89495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43c80f82-5a2f-41b5-a212-85956730e9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620af9b6-1148-4106-8056-9c45859a0e8f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e0df7f-3c23-4915-9e96-520b4a0f25a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "540a72b7-3e1d-44a4-87e3-54e8267fa5bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef518638-c646-41af-98c3-6de95080eecd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09bb4656-0d48-4ca5-b8a2-19bc6e71476e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68f4374-a2fc-41a2-8a4a-cc9c2f994590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "031068bf-5bc5-422c-8ef0-fa9badc6af5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333e5d2c-4c02-4780-b2a4-1ad4aa187f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7d4728-b043-47cf-87ce-245b2c8571fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b23102c-f86b-4b36-b230-03a9859e9b9a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b7fcb0-ced3-43b1-b16a-264c6a23e767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdc79a19-0241-4343-bbe4-2e908e3f56c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9206978b-dd77-4a19-940d-ccd6af858baf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "47011af2-2a6c-4c4e-9376-9241e395e942"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c650ccbb-2ccd-49a6-87c6-6c727aba7099",
            "name": "Positive Testing",
            "item": [
              {
                "id": "778825db-18da-45c4-bf24-58f42f7d2d60",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dd41ad2-33ff-4a6d-868c-4a5a9c6e71d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ce119d98-67ae-4bb3-a58a-f775fa0dace5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c0f26e8-7bdf-4634-ba11-ecfddb526f23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ffb7a655-638e-448e-af02-a810e7d83c0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c2a8a62-8243-44e1-b61e-23e404b8d81e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d03037a4-c321-4e1f-ae2d-3c3c66c59768"
            }
          }
        ]
      },
      {
        "id": "b9adf978-385f-420c-828f-b8cde69ecd8c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fe52dfb2-95b9-43ae-adae-3874a0d3d88f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bbcb3bf-1a9a-4607-aa3f-bd183e01991f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "afad9627-9397-4375-bce1-9d80975b229c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6924123-4006-4e81-88fa-c46ca14067e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d9d0fa-2fa0-44b9-807b-5dc5a7048d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97aab014-f011-4ff5-a3a2-09d508070b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73041460-80f5-4eae-9a9a-99920f42e7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a58d753-a637-486a-bdb6-d0178c86d13e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26530a5a-c439-438d-9746-06b31e89ff92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8578efe4-e531-4f71-bcd7-9fa83267bf4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6036088-e7dd-49fd-bcc4-cab5301245fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19ae01da-b7da-423d-85bb-9f35074c64e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21e7bd9-6f5c-4ec5-9e9d-39ddd7f1fbd3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca303c4c-bb0b-4ca2-96c8-b4b58672541a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea083509-e008-4a4e-8c0a-767738b29d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a059de-a571-4ac7-aee2-ed40d443c4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaea2449-8b75-429c-b62c-521a64a6764a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ea55be-d0e2-41bc-9f13-6a16ac913867",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782deae3-1ca8-4a61-a177-dd2431d244ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845b69c8-2d95-4b8c-a859-337a07708d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4036cd80-a7db-472a-9c26-aa5311fee6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "127eefda-68f4-400a-bd8c-815c97ab12b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff6a7fc-129d-4d14-b684-160676ae4cf8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40651a19-c3f2-445c-b6af-8fb8da427794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359ff0dd-7000-44a1-a30f-b892da4ebe36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85aeddf-a744-41e0-a869-c58d1f90a245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38a72c47-8249-4bc2-b370-b1495648850f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1547d0-084a-4442-9644-005cbc2b93f4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e259104d-e68b-464a-b5f7-324e974d56df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc70295-76af-4ed4-b53b-c8dac67a8d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6611be20-b0f8-4b89-8866-b4bf0c28987b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2898d58-3323-45cb-9f56-1cd82a3b99c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe653930-985b-43f3-843f-542282948977",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35f2052-e313-46f4-8c5b-2cbfe2c107d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef101a8-eae2-41ee-9863-ef9c3fa2715f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83df6370-5d84-404c-a5ce-20bf99b39630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8e3c282-3c06-4ecf-aed6-599cd8fcb00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a08d7f1-cb3b-4070-a433-c41a568f8893",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43dbb2bf-c0e5-42ff-b1be-3d81b943e59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b1035a-8919-4045-b615-6b84a19b2631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff760c9-d25c-488d-b096-2ed7cce445c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24de4d5a-2da4-4905-898a-1da22d439476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad4533b-105e-4f5a-b6a5-13f2c17b00b3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed293cec-6c99-463f-b421-f06b9c37d1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0b21d8-2a6e-4786-8f46-92f85fd7f715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e85b14a-dd76-4a1d-bd82-7f57c280ab4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab15580d-16e7-4cc9-92ae-5f9b3a7367cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d8ac24-61e6-44ef-ba9e-0ad9dce7b198",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace67193-0489-4097-8308-e62d12e0c5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cbbce74-6cd9-48fd-b958-5c1afc4287ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2389c5b8-47ff-4269-a6a1-57c4c9d859b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "976343fe-379b-42cc-b3fb-e9b9ae18ac3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7542a5f-a590-4f73-b016-db8e8be4eb60",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8222eb-b515-434b-8ca5-d73dc69cd728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6a41f3-bea2-4e81-a325-dc30dee42102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420ac6ac-223a-4f7b-8a18-4e65073c1f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9f229ff-3e74-4880-975f-8acdddb529f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a812e9-b4c2-4673-9e50-26227de2b20d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4fc322-94d6-4fdc-8881-05b51e5c7c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a7cb6a-151c-4e81-b3af-b09b104c183f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91da0a87-d4b8-48da-ad71-8f92e76bfffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21339452-8d0c-4688-9ec1-28a4c1d64f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ec345f-d663-4d6c-97f6-be23c52893d3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e0b538-6eb2-4eee-93ce-08bdacbe50ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d27358-5640-4656-b99e-270df17fc692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebadb88-0dfa-41f3-a80a-ed255b96145e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40ae6389-d3b6-42d5-8267-7a4b4ebd1213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1540c586-8b9e-479d-b15d-7d73e735e333",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2d1f16-3ff8-43dd-89d9-c74aaeb73e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f27514-508e-48e1-9aae-e9dd6f9f35ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570aff37-7610-4905-8e76-998e050e4b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdf2856e-078a-40eb-aeed-3d974e36c35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe86cb4-c2fc-43ab-b01f-23cf770bf460",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6d5dac-d68f-4012-8e89-2e6924b838cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c14c23-2bab-48ca-9c74-7c863181e4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399b3013-ee88-4e08-bd32-2a3c9c5f94aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ba385d8-241c-48e5-8fea-70cab8c04931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d5df78-57ee-4fd6-8a97-e0a24f22f8a1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b1e6d4-3e45-447b-a553-49c6f899fd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9755292-5985-4aa1-b64c-3e76e8f67577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b2afe1-e63c-490a-bb35-e7878c2fbc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bdb75b7-c8fe-4d16-b18b-7877ca00b049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740be60d-72cf-465c-a15f-7df530053151",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c126d77e-a934-440e-853d-17c5f933c1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fda140-b254-40bb-a0df-56054f121426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ada8ac6-5f0b-43fd-b5e3-8a0af4cca49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33b1c56b-a632-4a35-aa60-fabbee54f911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2008f4-e4c5-4b22-83d5-a9a81bc2d30b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737ab875-b298-4480-8969-778ec4cad5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b8801c-c717-44fb-ab2c-5bfd10c7fa38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43366f78-aa72-420b-91c2-b90938758d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f482f16-165a-4ddd-97ed-e39f871cf9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3672ce9c-5d81-4136-b04e-7cca9d5c15a2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166b534b-f97d-4feb-b22f-f97ee7f6202e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f688f49-3640-4679-a5b7-24b741b13235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac5f7c5-2296-451f-b73f-776a8d8f4573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fba895c3-929f-44f5-a673-dcab5c3a9be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4496e34d-5f4c-487f-bd9c-2caace245999",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b19723-431e-485f-8267-5a3e2b42ba76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49759c1-21ff-45f5-a025-46b1996d6011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96342af0-fc48-4f07-a808-2494b1427f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba982298-4f5c-49d1-a49c-0bc3c5562ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa11a04-09aa-4455-a366-d35bda264201",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31789dbc-8750-4bb1-8ff6-b83c5cb0a5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af0956f-4ba2-4b39-a45f-4d377745332e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213871d8-a9cc-4f9a-9b3a-7a83a12e06bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c84ad698-d1ca-426d-82d8-e24663a60889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a4dce2-e269-48c9-9d03-da976eb62077",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8f1c94-78b5-4b3d-8308-0c061a15d523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49136b9c-7a97-4cb2-8047-54e21bcfe8b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73077d24-6829-42bd-a45e-accf4a8a8cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7709d3ff-1d37-4efe-8429-9fda3c9309af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2d541c-50cf-4e97-bfb1-04b59c49a7cd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51edf0c9-3878-4a5c-b77c-0ac3df09d5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfffd36-41b5-43a8-98e4-ba4f2853234e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1127656d-651b-4105-aec4-245995cf2876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9bde8fbe-57da-4b2a-87d3-e8f13d3cf6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4df75a0-7fc4-4abd-987e-0f474c1da2d1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41c6f53-bdbb-429e-b48d-9aedfb2a6377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46ee1ce-caeb-4979-8720-67b6994d0648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a446a9f-942a-46ba-8573-82d37029c2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba40e87-5379-4e62-abe2-40e8d83b51a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d540a9c-d88e-4584-aebe-9477d39a5cc6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7beb94e-27b7-4155-8e61-1c56cc2d45eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2651097-3927-463f-9c52-daf963ba656b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bd0f06-3497-48df-aad6-41cfe0f78116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa6aeec-a659-4fb4-ae46-48864713c99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2776106-7027-4563-b51a-b007dac41068",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e84113e-6de5-45c0-bbfa-fb5f871fd5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495bc5f9-fadd-44ad-882a-c2154cd4d6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587a3c76-23d6-4d1d-8246-28c8284fb61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06e04ba4-b70d-4929-a9cf-6b3ba824b02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0641965c-b023-4269-af36-0d8f4a7d0354",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0336650-bfb1-478c-9aa7-66552bc68c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0063787-14ee-447e-b2a1-2d55d0205133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e21533b-be6a-4bfb-9ae0-cb76e0ade0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "77cea590-81bd-43b2-b685-76ef8290f33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308a8e1b-5d67-4c49-b3fe-a69abdb7a223",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba54107a-66e8-49c1-bcb0-059a92deb628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2d9dbf-725e-41ee-866a-c5e002cb332c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cdc603-e5bf-4bd9-a27c-f7b911a2eecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac623d96-720c-4304-8136-db446431879c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7759f8-fc3d-47f5-8503-d5a617446add",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbc4845-c5be-4493-a49f-2a65e86d6664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c0abdb-3787-4ac2-a633-6bd12bbf6996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549754a5-71fe-45fc-be60-8b274abff2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "35999786-a86b-4e58-8f41-6db92b5e9ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8970acf3-1e69-419e-ae9f-ad9a2e0ea30a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd4665c-d801-4e73-b090-c2268c2f26a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110a3e04-262e-474f-ac06-80b74d8b2f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e21ab93-4c0d-4ac9-a0bc-615313e1ad49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9a11a5-0ab6-4e9d-8728-3178952159e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd0355e-6742-442b-a69c-34318e114e66",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ef4f30-cff0-47b7-9986-21fd76e1df30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dafb9b78-2d44-4339-939e-51c28b6bf490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8760687b-d06c-418d-bf13-3861755ff656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d56073d2-c977-470e-9cee-9b08a524f817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8559aa3-e530-472a-a6a9-924bb19db3bd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dcd1b86-d888-4c93-9b8e-e54403c5822c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735735e8-5fe5-476b-ab1e-ca9282326df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0722b303-5235-4ffa-bc1e-8450ca988c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aac4cef2-95a3-4ade-9755-4d7d9aec827f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdbe4a1-903b-4849-a378-f58a023a39af",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8092c3b-4ca8-4516-a6d9-56f3ed4c3333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07662108-834a-4bcd-a87a-12ca3464d400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a0821b-48ca-442b-a246-c59b15386154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d397c4ab-3723-4228-af32-cc338f8126bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95214b1-fa9a-482e-b4b0-9c96a283ef62",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b9113f-a955-4885-8439-c23866b3ba8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89557049-b80b-4ff3-b1e7-4da4539a5df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e474ea-91bb-4025-b52a-a10ece904a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ffc2f3c-682f-4eb8-aa74-636e35e51cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98de6b73-da4e-4d15-a781-5cba44f526de",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7eeba3d-280f-4af1-b179-977a2836314f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee6c791-eb39-4388-9f6d-f5fc668a677e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd99d25-1345-494e-b0ea-8bfe12325657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a45602a6-63bf-4861-8c50-a8fa0b44309d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27acd41d-0e99-4a2d-8b36-9666e8efd1ee",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcae4232-f4c7-4089-8531-b03bcb1f784c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f23ae39f-9064-4c90-b769-d4a6f830937e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4702ff97-624a-4e3a-83e9-38d9e476484a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b002ca0-4643-476d-9669-e0bd01a5e81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c99a8a5-578f-412a-a968-ca9191d302b1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7821417-7de7-4fe3-907b-86793424af1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dccaea6-7fa0-4178-8b81-844aceb3ba63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13606d4c-da9b-4a9b-ae63-4851fbf03966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7216ac45-9cc4-4acb-85d5-74de75b04c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ced329-948c-4a8e-bb09-ec32d6433341",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e3ee37-4b3a-45b1-ab94-43ce2173bbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a995475-ae79-4fb0-a944-8b282f5c4702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b72351-5524-43e5-b14e-1a67e5e239c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90ae6362-b42d-4001-a170-e0e46b16ea65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23e4fd9-7be6-446b-b721-ea1e9772e16e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b669960-ba1b-4c03-9aa0-b4f63415c041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf36d41a-d6ca-4252-9176-c6861cac5e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8973269f-93f4-4642-89c3-8b6273589817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8cddf4-15f4-4283-bd57-68ec682fe85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dca9372-86d0-4a02-b3fb-1513da356a96",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70671148-526d-477c-a823-dbff423b8497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caeac00c-ff39-4df2-9c03-2fd377ed1dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0d1e69-1a96-4018-9b57-83babd6c78d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d05a94cd-2c9c-4e9f-bded-79609677552c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4149f7-f48c-47c7-b748-d20ee4f43aef",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b543f844-af4f-4f82-ac50-a07188da1c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e49f16-3eb6-4632-bbcd-5d6c0c204543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a05000-0b6c-49c0-b032-d76db7d10659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "514f4a9b-9590-472e-b402-41ddc3a1a1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baaacc3e-4505-44e4-83c6-d0848bd5552e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143912b1-d216-43b5-8c6b-1c61bc262864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108f0e11-6be1-4dd8-8213-e283afdd3854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83502013-eb23-4c90-8f03-6b1756e920c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdfe67a-dee8-4459-873b-d63e704ae497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f0a795-e1ad-43e8-8c77-896f7ed58f81",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04993da0-7532-49c7-b8fb-ed21467f5271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94796219-75b3-4978-ae5b-a211279a1f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6852427e-62da-4b94-858b-59caf0c2e7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d171af37-905a-4639-8f22-bbcb1e7354fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5ead46-3198-4bb0-847c-64c101334919",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d6b81d-027b-4348-abb8-85767ae4d39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41dc33b9-b32d-416f-9857-77f7a9d15174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8677a097-8418-4ad8-ae64-3ccd8fc696ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcaa9845-39d0-46af-9d32-36c2445fcb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b1fa62-f844-49a9-a24d-03c773875a76",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db50d5f-7373-4db3-8f78-ae02a1277a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3befd274-8672-4547-be0f-f8932808152e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a727a50c-c9a7-4c51-ab3c-a7c28bd1a035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "88bf6768-28d5-460a-9c9f-6db3cab1102a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8440317-c33d-4869-83f7-d46fd463425f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4b16f7-0edf-49bb-ae58-ceaa1eb950b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5452b04b-22fa-4d6c-940b-8a5f251149dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168ed05a-82c2-4350-8ccf-43e8f4ea0069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83a96223-6833-4660-b22c-c4853003cb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aedd92d-95d1-4b5f-85f0-fde5ef7f2d05",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da4afe6-4e62-456d-b50c-d8c491417002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4635b5f9-91f0-4c42-9d77-c547743235e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261657dc-fd74-4a35-b4db-63f433144248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a38eba64-572e-4c67-a212-fbd43d8189d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c5b607-948a-468e-b44b-7491c410945a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf97077-eced-43cc-b939-90847dd07c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c396295d-ff30-467b-8efc-67f27dbf89d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8308e78-2c3a-4815-a1ee-13800237101e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9557694c-c785-4501-a8e0-ed7d1e261061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb35826-1d32-48d9-a9bf-dda5bd7b0183",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7048a9c3-d905-4e41-a188-f53b59ead62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6ebfb9-6b61-442c-9b6d-5326ada80710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c9b98b-0404-4351-a8e0-b8f8f7378d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91cca66f-76ea-48a5-ad6f-0b389a43c231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da586aa5-6ad7-4b1a-b0cb-fc38c0e7183e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c531b5-3d60-428a-9f2f-8b8f8b416532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc91d92-2ef7-41ce-a446-fa90e31e4c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a0d9e7-b00d-432a-a311-024e3c016941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f78c1f4-3b36-49fd-8f43-e03c38dbdff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d78fa67-6f86-4fab-8589-451b27405823",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc38530e-2351-4571-8840-d7e3c5b3d2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad2c9db-f562-4525-82fc-0ed000dab667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136dde3e-7e27-40fc-8cf9-5c6d3683ee95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd90197d-a728-4b24-8512-b987cc4f2d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007d27f0-68ff-48bd-98ff-b0df99ac8377",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef23436-6815-4f1d-bb53-dc61a0ab053e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88588ba7-636c-4937-b8fe-c288cf5b07db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896a46d9-bb02-4b0e-bbb4-b5e7b2e5e8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b46f7ce-dd7c-476a-b9dd-3ea4a946de62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f07b2dc-b265-439d-9781-dd9b1ae54aac",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d540d6d1-5e40-421e-8a40-bbe42c8d195e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96885bfe-1eac-48eb-904c-e28fbd6c04e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d4c5d9-7b35-44c7-aa2e-b16881a785d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20d1e1e4-cd5c-470d-a53c-16c9c424413f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22118f5a-1c55-4a66-9b6a-34c3ce9658dd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48725d7-6149-4aea-959e-ffd2dc42ccbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ea3cb7-3c8f-4d99-9de2-f8545468ca42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327014fa-585d-4d5a-90c3-eb3ac441a889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5fcfdd6-f796-437c-81d5-94d7669eade5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5bdb1f-495d-4cd8-9bd8-c9ac0a7bfd80",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a95c491-f6bc-4755-811c-ba2a434f6b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a3f8c1-0227-42d6-b312-1b1228328282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4777656-dd2e-4d28-831c-faf957d3c4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6326bd19-834d-4a06-88ab-d7e25d5194d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd3f4f0-cd00-4d9c-a9c7-c09765c361f9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db71648c-9d47-4835-91cc-29eadb15c7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b38a044-4ada-4656-a6ab-effa26af4fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d423559-1767-4969-9461-f20b18ce9825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "01695de1-7bd9-43a6-a1d9-248b8349c8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7394d81d-2013-4f50-8f59-4cc76f227aa4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0887a27-5758-49c3-88ea-6f62863bf4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a11a8ef-b87b-48e8-ac80-ae832e4f824a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c201c687-28b0-4b61-b8c6-2f412bc4875e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "49908936-1ce2-4bcc-b5f1-e659128360c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514bba9c-09d8-4a0d-ad04-1ea62c655866",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255aaf7f-116f-4bca-a4fc-158226dd4acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e196c5-9227-4a00-a044-76ddf84eaf56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13077743-365b-470b-ac2a-81e9d2ea655d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5a073a-c730-4609-87de-7ad07e7e3baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc78ec0-19cd-4b74-b408-420139037ac5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38866433-f720-434e-97f0-c2fe6bc8fb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b982f85-c32e-40ca-964c-d069b1605393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa89046-886b-40e9-ac6f-73ece82e045b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5458601a-5401-48cc-8efe-77e984760ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4aff324-dd44-48da-9645-deaca40b69dc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0eb30b-7537-451a-9f2a-5919245f2a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f5b673-e289-4dcd-9b10-60a43783f1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38de2d52-14ef-4fb9-972f-11612d978b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6c3bf0-36d4-47db-991f-dac1e1aa9a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d808e6be-f0a4-46c0-8b96-efe0a07b12c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e9118e-b64c-49e5-9f2e-0e3a2325b08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beda0aa4-d5af-4b9a-86de-e14152f878b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1f5ce2-53c0-44b7-bf17-a193aedbb875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae5ee4a-a430-4026-a4ed-e8c477b8ecf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f7466d-c34e-4924-a436-95f0601f8e80",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108fe285-2f0d-4e3c-89a1-1366ceea181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76651b29-5bd7-46d5-bd12-1338be3a4521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07754cd0-4deb-41ef-9035-5bcb7a5ef38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bed13e-76e1-4196-9800-b954db19c4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e62d39b-96f5-4d1a-9b28-681eda969cbc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23d61e3-a4db-4e18-9364-9b9e04734a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bae8b8-6d23-4f68-ad3b-fea16a2dd438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b280890d-b989-42d5-9123-fca53069254b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7746d2e2-001f-489b-8637-8ec86998f05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed8f29b-2d26-46e6-a30d-f5330907e1c0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588f15b8-b0f8-4ac5-9e4a-3c25af0add9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfeac3c-cab0-44a5-8d37-bff42750df88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b42387-ca9a-42b2-9d81-ffec2e751bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b11157d1-b56b-4434-b65f-9def7a022fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bff2369-4ad7-44c6-a481-04b310dc32d8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da49e533-16f1-43f0-b73a-977abf63cd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f507ecca-30ee-489e-bf3f-2ed06827306c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47bddb9-a519-429c-83b8-ae6bd6bb7673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe583da-3b0d-4e86-ba32-07228f322796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f3fdf8-b626-4899-8174-964c6794b9e7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8341c5d3-1eaf-4242-8e6e-a93d2ae6eb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c91b28c-ec3d-4b15-b786-b9c3bc3ebaee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b8d8d3-a4f1-4292-b444-d242f750a079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1b912f-152a-4d4a-805f-0ae96d5411de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c01e38-19d4-4c75-ae60-44ab4970bc65",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe72293d-4ce1-43f0-8aaf-a34615b59806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32261b7-7ff0-4e65-9ccc-ff89a1ccd1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe571949-6088-4e9f-93fc-56871598a40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8534056c-2276-4d7d-a77f-94f20c4d529f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73248b4f-cc5d-4f3d-8dd4-97e60133de99",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24db2cbd-1ffd-4a40-a38f-cf03c89a58bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4e79ae-b2a2-4c51-a185-b98bca836b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895d4863-9086-4e12-bf7c-d66c7d9e6e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f977497b-9dc0-4464-8ca2-c5c4912933eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78960dd-c34d-4b83-b25b-df30581d68e2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3edf145-17e1-48e1-aa6b-3c7e2c44a454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12f4263-093f-477b-926f-eb7e06cda019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce2b241-d527-40d3-80ae-9ec73a2daec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2e6c08-ff24-4bb6-8d87-a3298388724f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d19d09-4127-45c7-9582-2f05fad5fe49",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b140ad50-d2fc-4130-8425-590dba67090d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0746d964-b4fd-4e04-927b-98f8dce95c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17235c6d-81e3-44b0-996b-caeb104f5def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "462e119e-2bcf-4453-bd76-665623e43526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa76a6e-6957-416d-9cf5-e3e86be44c51",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316ade84-5363-4efd-b801-f611635078a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d10539a-4b9b-4cb5-a49c-df96d06583fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f158e75-6748-492c-aa97-2be8a4315326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76f875bf-3aa7-415e-b29c-55fd6c48d1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d223b842-cc23-4dff-9f75-2f5ec56e6967",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a755ae19-d001-4cc2-aec6-aaf1391fd5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ef193c-4a66-464c-8029-bd83677e714f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84f839a-faf1-409c-8573-6f4fff2f95bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68507110-bc7d-430d-b67c-996d82068a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa94a94e-8fb2-41d7-a702-ac6baaba07eb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cff670e-7346-4905-b63a-200cfd68c4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98cdd824-7c24-49aa-ae1c-acb2b74a26d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025a5478-7da4-4083-8d55-a1a8593ff815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e512f18b-f785-42cb-b07e-1ceb90a185c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc5c350-5edc-4ebb-8c65-94ee5289101d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a44c122-00c7-4376-a46f-86f4b59b24c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b40481-99ce-42f8-89d1-c6894b51a86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228f8e7c-0f9e-4231-97fa-0e7764b684ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "078c1297-ccc6-4f7a-886f-e939068c6e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2111c34a-90eb-45c9-9d19-8d292c4ef322",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7339de1f-a6ce-43ab-ac39-5deeccf31520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e02cae58-5626-4f03-a3ec-b83eaffbf62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04a7676-3779-41f4-a08b-5c1ddef6199c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc5da71-ad51-4cdf-96d7-163b8e10c5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8813eb-8cd1-45c9-9094-cab7f128f18d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d79c612-ff61-4cac-9dd1-0228368edef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ee92ed-a8b4-44ab-ae68-ca9e3961beda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc19168-7dbd-48b1-bc1e-16d916861cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6806e2-0359-47d7-a346-62d07875e7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0e04df-bbc6-4f07-b2e2-15847f009edf",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f842c3f0-44ca-41cb-9cb2-54b0a1a4c503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f634050-c0b3-4609-93d9-62e7168d62e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1373ad8-8aab-4c44-bd71-6281ed8903f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a30a554a-f742-40cf-a69e-db316d994091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de74b998-d3c0-4594-b4e7-8fa13d6dec13",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94327b33-0a57-4259-aa28-7dbd40032fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749d7822-bf8f-48a5-b6b9-d02ce466e3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c523ce0-846e-4fc9-977f-6ce2c9cbff42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc4f8c8-c94f-4f74-aab7-3499ef5db7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed107ff-e967-4e19-9e82-c164e7fa501b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452954b5-1280-44ac-aee4-4200b8f5a528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d20ddf8-b4d5-4833-bcee-e5ce79ae1457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d05021-d687-4642-9560-9aaaa93cbd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2b6838-c383-4375-8089-f28e47eb6b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f861edb-e931-4d18-a656-9668eb04ec17",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d4bff2-a60c-4a72-a4ed-76755843b58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025cc101-d9c5-4fec-b38d-d60c1003a129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b70598-cf1d-4811-bd1c-2b7cab9e9016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72c4b07e-e3c3-4166-821c-a1890e0e793f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e29a5b-9a82-4123-ab18-930d5af2b163",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbd4bf5-79a7-46ee-b7f5-cc7f541afded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcd68d3-35ed-406c-80ec-6f49b5d5692b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4191ea60-089b-4684-9194-f1b6a54e98db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c542e32-0aef-4704-9e47-471746bdde58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1704e01-cde6-4e3c-81b7-cb889b48a25b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d884b9f-f2af-4b1f-8f3d-1cbb76137de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1d8f32-69b2-4a1f-913a-5475b8134eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e952b72e-54d6-4a54-b500-2671e8bf9380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "873a8fdc-de5d-421c-9a35-3a3531aec36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e412b1-d858-4bd0-b617-2b84ccbf9faa",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70aa356-3654-45bb-a74c-21284faca827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43df92d3-2f23-450c-bb54-2d3f17aafa02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06db1f1e-0f63-4785-b8a9-adabedc92222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "539696cd-7a99-4112-8693-3d3d1aaf79d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3269b3a4-1397-4b39-834b-361d167bceb5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d60db2-2058-4301-b00f-1580ab1cd0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac21f6d-402a-42a7-9577-fbca86721f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db9bc46-b6a6-482e-84ac-6e2810bdfcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09ab0187-7027-4682-b6b6-42678388f2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cd1e48-0a4f-4f90-877f-4c2cdf056f26",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1bfee2-3eb7-406b-acad-51805c60c80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7861b747-8024-4b6b-b0ec-3b589c6378a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8bcc8e-21dd-4529-be13-a4ae79188fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3aef8e8f-9bad-4a03-9f5c-404751d5c7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10182f29-817e-4f7c-b1e3-d46f98ecc831",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e504896-f0f7-487d-aa2b-8b05da1fb90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0c6106-4572-4bb7-a908-ee5a60177257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d2f75b-c9cc-496f-b279-58ac029053e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c50ad18e-71bb-4b00-8af5-32ac5266dee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7aa1871-e9d2-49fc-b38b-baeefe878a1c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed252a5-3af9-4f0a-a451-31eac0b5cde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f500c68b-250e-4d1f-a996-4684c0a0f701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b01bb7e-3fdb-4308-8085-b723f3af2a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c09c58f5-d48f-404b-95d4-46f7e7a59466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501fe457-29f0-4659-b785-592ff859dcd1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393568d3-de04-4780-a37c-b6ca98336808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e882aae-cdd4-4f51-a3f6-16b473b6880e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e425e9ee-e775-407d-bb0b-8dafa2608c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "53a0ad34-a4d5-4296-b0d7-0c8305a3ecba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07057a7a-18c4-4d67-bf5e-c7e5e110d91e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199acd60-7d44-4c69-b5a7-7d83f042652c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80bce9b-0a93-4f59-8af4-1e29e4a2c1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b6d01e-f260-4283-aa8f-2efd25424b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5187431-17dd-4477-accc-72924c419c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb1ef3e-a486-4148-a03d-eef9838e48b6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fdba8c-4759-4179-abb4-9474df995372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ea1ee6-ea6b-4b35-85f7-03d28ca722a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b64e96-b0e9-43e7-ac07-3c881015e113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47f4e2f8-d1e6-49c1-9647-9f506c8daf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b1ff4c-89dd-40cf-8602-1a9dc36d8531",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad92172b-21f6-48e0-b2e1-b47cb56fc2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12be5c07-042d-4171-bd6c-f99ed5d930ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de56841e-385a-41ea-a91b-ba95e41c74f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "eba680d4-0771-49cc-b23c-e72864258b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437d82f1-f46d-4f38-b6ba-e848b105a9ee",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c774824-ad52-4e32-99fd-52603704fe6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8b6b02a3-8bef-4ab5-ba1c-9f8eaf56917d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdaa10b-cf7e-4496-89bb-39688c2baeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8054de8-ac82-47fe-b4fd-ba511ab705e5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a10c0373-bdf4-4736-a75e-391b230ded49",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad2029d1-14a2-4e4e-95e3-96954942c67e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8b1d5e-98e1-429c-ac43-0055d8460b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "691d5c12-58d6-4eae-9771-9dc120eccc57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e03790d-c8b1-4cce-a2da-d45f5215b6dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3f018274-402c-4cee-95ed-5b65de56db12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cc41ea-559c-4b34-952b-79e86114ead7",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429117cc-3c27-4c3f-a5e7-95b7df43415b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d03dc0a3-b473-4bb9-85ec-f6255de3b040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29af7d63-2817-47b3-a93e-22ddba477320",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3cf24c56-82a7-4c87-b707-19ed793a399c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12712784-d94b-42c0-820b-e1cf6ed6b283",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ed37932-954c-4eb7-b90e-a5f6abc48fd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b3edf78-f4c2-41ec-9aa4-2f68a54fbf62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb8c9fd3-80d8-4b05-9427-035474f697b3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97b7cf5f-90eb-40f0-a3e0-8e8b5d10501f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4a977d0-ab96-4a96-8eaa-f20fbe008eea"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e66c655d-997f-4162-a064-f6c8cf4c5703",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef759313-dcde-4526-a60d-359bc83341aa"
                }
              }
            ]
          },
          {
            "id": "137d1f03-6e5f-4ee2-98bb-bac3c38f7987",
            "name": "Positive Testing",
            "item": [
              {
                "id": "75ead6b0-b1e5-48c0-a6bb-e64c3be4ee86",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "baf30e97-97ad-4a64-9551-e7ec905525ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20ee8e5b-20ef-4fa8-9c27-d69053fa4602"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64411cbd-40c3-4c2f-b7a5-74e9be398cd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "af0fc389-daf7-446c-9ae7-c7e25069829c"
                    }
                  }
                ]
              },
              {
                "id": "d3eedd42-1fa2-4133-8e9f-a73060c6c958",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47074798-69f2-4ae5-a57b-f2e18dd3e9d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0655100-c486-4498-bd43-0cc93b903171"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69e61947-9281-4011-8ef5-d02c4016bd21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec15c99f-13ed-49a4-a6e8-09bb14a1a734"
                    }
                  }
                ]
              },
              {
                "id": "5ab66512-1d99-4d2c-a402-5aa2bfa2589b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5397e5d-6799-4aa2-97c1-6be63acb92ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "640c9762-bf22-454a-84e8-73152d8bb72c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a74b3386-29a0-480e-a4f4-e57384a589b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ef8b588-cd3d-4c38-ae61-40c4a0740beb"
                    }
                  }
                ]
              },
              {
                "id": "4d1d3a60-3805-4cd8-b4c2-eb092f80a41b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83b42f41-f2e6-4f93-be1e-859e9dc4e613",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5430c6ed-aabb-46eb-8376-bfe8f0c4f44c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e30f262-1954-4c63-b647-ce3fa3cd8cdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dd31b44a-3835-41ef-9b1b-0f98b5f40108"
                    }
                  }
                ]
              },
              {
                "id": "054365af-5bae-4575-aca7-d151e7374765",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2f71c16-2f55-4f1f-af40-acd65bd8d46b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17367b91-4ac6-4039-adb7-6e972600dd7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dac0918-a9a8-40da-8554-d478c3d68350",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b58f2c63-9348-447c-a94f-a6765081b37b"
                    }
                  }
                ]
              },
              {
                "id": "a3b66866-4db8-4c44-9da2-924749e3ea90",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc87c155-fd68-420d-98e0-5dfccc3c4e25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21a85a96-cfb4-468f-a4db-330363c99bc0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8778e214-2349-4697-a80e-852c72090d11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "04aa89e7-1ff0-4abc-8458-e0164f6a80e7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "325c73db-805f-453b-bc3d-825831960c9e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ede3603e-e2bb-48c8-94a7-7813a34a9b70"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7296b305-5607-4c69-ba1e-43c1276967df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dc38080d-f845-4dc5-a54c-7c4367041d0b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59e8c57d-58db-4b41-b370-5c1b9e370961",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "53cdaa8f-9593-43fa-8023-69f1d552fe16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3128070c-9ae6-49ae-aaa3-a783a711cba3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c49d8ea1-af4d-41d8-ad0f-e526e4fe1c04"
            }
          }
        ]
      },
      {
        "id": "c614de31-daef-4225-99b8-54543f094ce3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5f5d720d-8071-4b8f-9835-8f728e89cb1b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1139a058-c29a-45b5-9428-933d8b018cb5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "03aacf5d-4a39-4182-b29a-74c38c811673",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6d2ddc-55b6-4bb2-a7c5-94b8973e5bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7e21074-b34f-404e-b53e-ca4cc0fcb76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a452cc5d-e3d5-4038-8c39-544888e6fbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "963daa9c-ccb7-4553-ae5c-a396ca4282a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9805aa89-c843-4729-a38a-ecaa9d9b4685",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebb645b-ca8f-4734-ab39-92cf0665769d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1d09e7-f791-4cd1-bea5-670211c02038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4b26a6-5bb4-4b3a-b1bb-32fdc37fc4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2241044-f1c3-4359-a338-2b584a64e81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64231f14-b545-4373-a260-51d5ac432c50",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b5e20d-88f7-48c7-afa3-a4135173a053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76887141-7bfd-4255-b03b-e4cc9c40ede8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94643e3-8d0f-4edf-a9d6-b38d784c9ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c35d78d-c952-443c-956a-ad4515ac9ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a0c77e-91d0-4dde-8227-7aa222be3f8b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e556af20-dc88-4bf0-aad8-58795b30c432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c26bd2-fea6-40b6-a769-88470fe81e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bcddc5-94ff-4a24-8c16-675899573f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dec6665-b774-4fb0-8e26-7e50f34e3231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adae93fa-b603-4a18-8106-87c4c5142fd8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d05e89-532b-4c30-9897-86668187b7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88fdaf4-2c3f-4da5-84ec-78c79911581a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94816a96-b0bf-47cd-9278-7e5226ec02d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a9ce29-b950-4894-a985-0256168f29b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fbdfa10-4ed6-4335-a384-5949ec08e431",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f34edd-caf0-4a85-97f5-f952cc83f6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fff810-5f42-4e5b-90a4-526a94fb0dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0a8121-8d55-4c7f-bd14-7e968798eeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "953f0d15-d81f-4c2c-a845-88c9a0b73767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04588b4d-ca5b-47bf-ac33-2d0426d66150",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c44d30b-dd43-4df3-be21-fd3b07b0b0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e429389e-35c4-4c60-87c1-f76f215bf504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ae3cba-6973-48d7-94ee-66d33b8b7299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e33f1d22-7568-424d-9b10-84d06864a265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80df5a5a-7168-48eb-9fd7-0c65eb45b895",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c074a05-26cf-466b-85e9-0ea4ffe4695e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1e357d-c0e0-4d96-a262-10e2ac58c0cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30203dd4-2eea-443c-b9e8-f72f67c6dd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34df0d9-0b1c-475f-8545-d27fc8619dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63194e0-0263-4899-a3db-0b4cebfe1c48",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae5bfbc-4a9a-4cd9-ab99-96026ff75650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42185525-2af1-4311-9f99-65c45fdb6d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f38a14-4b17-4d0a-b27f-dbaec7badf91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "147e0167-dc6e-474d-9b5d-702fa70834c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc28a6b-41e6-4afb-8455-321ca16a766c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fb55c1-9e55-4aa1-9e3f-7ae66669545c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede7647f-22a6-4aae-81fd-35b19d782a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45627a6-28ec-4b1a-bd9d-31cf4974a14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4117675-e017-4c8e-823a-3d79da3d45f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8871b069-1027-4ba8-9653-e741a8e42da0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956078f1-75b1-4a8b-b69b-8913eb05c25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e198eea-e9b8-45d3-80d9-f4b8327fe424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5b6b9f-93f2-48d6-a866-4b00bba6af55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7061fcb9-3003-49ae-96f4-369d1606ce7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91caa429-80d7-4408-a43b-59ed74d6ac20",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffec4e7-2b68-427f-a314-afd6c5f65dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d08627-e289-4dc4-819e-bd04a58db7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96ef3e2-8721-48c0-b4c3-af7ad710b0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b56fb6df-4e29-4db7-a22b-b5325eb6bd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ad8d9e-648f-405b-9931-705937b44e12",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34fa0a6-aea0-4fe8-b97a-d98d6c6cb769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c61a99-6e7d-43ba-8515-42bd6c98c14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01b721c-75e2-4f7f-8b38-8cb296d1ee5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "618795dd-575b-42cd-979c-cbe547f83d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20b9efa-afef-482e-858e-87725a8fe9da",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd46341-d36b-48ac-9878-ed9d558c08e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f5e9cd-276e-4523-8942-f99eba45a8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7890244a-6f5e-49e3-8b79-d8ad0701e375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb308001-86b0-4416-afe5-68000ddf7ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7d4bec-a30d-4116-8fe1-9a1f92e4821e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df66f99f-6b03-4e2e-a087-d972439d9c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84143b07-51ce-4c14-bd46-2bc69b79e802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ea2693-826c-41fb-af4d-63158892c845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef992fc-6ac3-464a-bbf4-c70e9d1ff137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fac5f68-e66e-4aa4-8e1c-27e0f9a8bccf",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278b67f2-8429-4d41-8292-50c6a92de565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0eac14f-f8ed-4f17-8110-dc9c7e0840e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67938d56-e502-46e6-9f24-fc9f5d34d70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "66aa367d-aba8-475c-a913-1e9a6b45dd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596ead39-f5e9-4fdf-a3fd-345332840b4e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56613288-2bcf-44ca-90e9-f52020596708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b97165-714b-44f3-b2d7-06da32241949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9d2a19-62bd-4f06-9ff1-0b8775b38549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "04b31f39-7d1b-4776-8936-eaac1ce136fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b26072-c3b0-4380-be5d-d0bf5693245a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5a4517-cda1-47c9-afd7-e91b0b82967f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d07844-a006-48fe-916d-8dea7a95e8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c0a44f-fd63-446e-888c-febf03fb4719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7938537d-db26-498c-bc7f-56b2932f462a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2308d5d9-2df1-4854-8443-035a47e9f55e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746f6d72-68a3-4fd7-b93b-0032e2d333da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4834e8-c51e-4130-bacb-9fd8aad2dc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0480f5-cb54-4f02-bbc4-f80eca3374b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "971d43cd-57fb-40f2-a490-2bde198514fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282db7a9-3975-44d7-9eed-5521f8b23a09",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5793a4da-04bd-485e-a097-f1eb6fbabcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1c161a-1f62-424b-bab7-fd84b15d332a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671b3fec-9ce4-449e-8931-5176bdd2cf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba06672-08da-43f6-b1a7-cbaea775f388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30703b2-84d5-4bca-aa08-5a0455c5632d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadd34ba-3acb-47b0-817b-beb38115e170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f319e034-49bc-411e-9ac2-99c491979cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b01ea3-2f8b-4127-94f2-75491c55eac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd10bd7c-17cf-4f93-96da-a0a859145d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417a6dab-82d4-405b-bbbe-715a8c68371a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcae5b1-d31d-4dd6-a482-1b72dfd5e993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d4bd2d-09e9-4a23-99f1-a12de0423a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b95268-3295-40aa-91ac-1102a22c1acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1af38b-5b4c-4cb9-8525-fe07010fab01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ba6aa9-d9e5-4eac-ba88-8e6d824b8604",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a555653-59c6-49cd-bbf4-51b671250516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea3dba1-0781-4858-b77c-b3f77fefd9de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab755c41-bc3b-463d-8361-9fe6084bc83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c528b307-2886-4f94-b2a6-afd0dc373b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6035f0b-78c5-4de3-9cb3-404f20169b73",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ba49c6-58ff-4f79-8348-de9e2c051b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163a34dd-4107-49cc-ad1d-090cf4926dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1a1e61-a68c-4d28-b455-2f100cc7d2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3acaa7-e84d-490e-84a2-3d5d4b177262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9ca5fc-28c1-467a-9319-57027e14fee1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31e1012-fc1f-418e-8738-1ecb92949e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a459c4-6389-4e3b-9f33-ade1a7157aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a0987e-710d-4fd4-92e3-c4631136d97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4014060-9ed3-4b51-9ee0-ade239bfa44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5412f47-b07a-4c48-b301-d20e135969a7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8e0885-d832-4132-9ebd-e2185994105a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b2cc499-559f-4538-a7fd-0e2e1899b710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6517e763-e209-4051-bc73-6e7c3793c616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19179373-c77b-4a81-a42c-25058e26e760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7c520b-d870-421e-8586-261f8c475be7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ac9b45-78a8-4a61-9b72-464107db1580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7872962-aa63-4e82-9aba-a296ecf64980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a678f1cf-0f5f-43ad-913b-0c87279bfaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1adbd227-f13e-4061-a7e6-d9bcf555a25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8673fd8-1e88-4721-820a-9316883d5bf4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3559cc9-5244-442e-b6ad-66da8a0cebc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9921174b-d19c-4191-852a-29837353052a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6331c180-4dce-4b6c-a6fa-61d90d29544a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffdb2bc3-209d-4b3c-9f90-84012d789917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d38e2db-3724-47d2-aeb7-154dd83ea636",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad22ea1c-2db1-4433-ad79-eb6a503441fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d57e8e25-8324-4897-9841-a1585a04215b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8990b8-7096-4498-8dff-4ea5161f6800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e04d9f9-dc0b-4d65-a6a2-5efec19ebabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd39edb-1214-4c2c-9209-cd1ee279e6bd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed355422-920e-4e82-ae63-28fe417cf3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2054b8-1436-4796-ac3a-7ef2a2a36539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43607c8-ffc9-43f2-9283-a86361098d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0a129d-a617-4062-b9bb-5e7e5c46ddca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102ea6fe-d755-4966-b522-536acd84789c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e5e1f8-a509-4043-bd7b-ffbfd1206310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21ba80f-50ad-47cf-9468-ca5d283f186e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4deaef-c1ad-4eeb-a6e0-c23a7aea1107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "603dd3fb-6f99-45f1-b8c1-a2f3273cf880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde6a2ca-4101-4d31-842e-d3e091953fb5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14e3952-07ad-4672-92f4-01fa80740a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2ee134-7c41-43f5-ba87-fe68dc3bd521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8694e8fa-fc45-42e0-bebb-6be168fbec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a6c5c02-a44d-4ad6-8d71-6a1da42d8af0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "495d6c10-967b-47af-9ab8-adc587654257",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4f0c5f8-28ed-4824-a7d3-fd3579cfef65",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40673071-c5a1-4e5a-85b6-08f78597addb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9527a143-051b-4ef3-a59c-fb1db7e34123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1e6043-374f-477c-ba1b-5cd981dbe298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cece8e67-5aa8-4c89-84a1-0b745888888b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb5774d-11d9-4555-b90f-f5a0af2a8f5c",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16187359-d7a2-4b7b-a75a-6e46f02f89d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6c0c7fa1-c207-40a1-aa8d-b61c09c7fd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a603cd9b-7e14-49cc-bfc1-a7a6c3e592b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d14d3959-defd-4594-a75f-58b31f2875f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ae2cd64-6611-4663-b887-be18b2d19938",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b70a33c-4ae4-4de6-a529-ad6efdfbd86c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f7efeac-119a-4a09-89ce-73176557ae77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "873f626a-7705-4a17-9dc9-08a7086c0228"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "353185d5-580c-4ed2-8178-420fb668adb0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3026b51a-f9a8-4696-af4e-19bee2cf6b6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57c744c2-0d9c-48e7-bc3a-fd493a77b209",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83256509-1f79-4cbf-9af1-5243e36a871c"
            }
          }
        ]
      },
      {
        "id": "e32fa6a3-3d33-4d79-b66c-5a726251dabd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "13651a5e-1438-4f87-b0ee-85ec04e592b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1349f8e3-4c51-4246-b68f-d6a4c3d7e016",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "96216198-1e04-4e33-a882-16ce19caad18",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151219f0-480d-4dcd-9b89-b62a7d7ba2d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da601b76-1be0-46ee-9921-5010732d3178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79ea8d8-f3af-479e-84eb-0d76a8c9e29d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3245cb5-e5da-48f1-b3b3-c45671f43845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5fd002c-c025-4748-b792-13f857c67d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2bd08f-d91d-45c9-a519-fe9604faff67",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd41cb9-196e-47cc-a10a-15be7c162534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4839b073-f0c1-4cb5-8fd9-a1d75dd0211e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd419d7-8f73-455d-85a9-08378a81861d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5554ccdf-f1ad-4473-8472-c14e640e3259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbc2129-0c3b-415c-8fec-9e24363f6849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6aeb9f-33f1-4481-9030-8242fb18a793",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a0241d-156e-4b38-94e6-9bf356c6ced7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8369e91f-16fc-4e54-9389-e38c35a86db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4c794d-d6c9-4aef-b45d-581efa9faceb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15b4967-5cbb-4e02-9b1b-3f18a4cbcc5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0d62e4-0fa3-4239-8429-44dcf7854e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3f2c62-a17c-494c-aa03-61a96cedaedc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e5d216-6243-4ab1-be32-a329dfc39a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0bef9d6-3bbe-4404-aa30-404e15d8d998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5c89c2-20c7-4521-8a07-5f7cff3651d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40973f7-350e-44e3-a34a-030fe0353dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721bc6d9-0f92-482d-9d8d-a7c3cce60a94",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead3e440-23cb-4142-9f53-94aa4595f586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab2789d-c727-4fee-9a65-5cc3c6b6ceba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b214085d-0db1-45f6-b00a-790971fa1763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a7ec44-a907-422a-b463-2061654a29b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa40cd9-78f3-4f85-9958-fc7a1c225752",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210b3f90-cdb1-42df-9d3d-f97f8e950bc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b37371d-4752-44c1-9d40-0cf049b4eadb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb77131-d1fc-49dc-9602-8d8a4f244800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e831f3-2ddd-4b24-8aa7-9b298e580452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2056785-d0d8-48e9-85ac-c96035e0f416",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564b0ca3-06cf-4bf6-b0a2-b4696ab817d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "935e3f79-f036-40d9-a0a1-9d3a27e9ba44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05828d65-2978-486a-b78d-976b50779190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17eecd74-b86c-4db8-8206-095884d96c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ac4729-dff2-455c-9029-b569fbb40c83",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8069e00-6fcc-42b2-8818-8452bb307f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c971f5b6-91f1-4721-9495-7c080e0881c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13baf88b-6a50-4563-b595-b92b80500898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9fa1d7-5757-43e5-b4a2-1ab5b927993c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe6b68b-5bea-4ef6-9188-447d0d9605a5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bd09c0-d856-4843-8da3-be617860f394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32492472-d93d-45dd-aa16-83e5baba0443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76c9b74-0613-455d-91c1-d25d101bcbcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59095ed2-941d-4b52-9e55-e06f9af4c459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ad0dc6-d4fb-4e55-a399-5519b0045e40",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26c0640-711b-4df6-bba2-1d0cfce0815e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd8fcf2a-36a5-464c-a740-5257ca164e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187b15a8-c31b-404a-b855-3dd77d494160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7458552-a473-4ad2-8e61-b2a08d618bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b6c5e5-2382-4bca-a5a6-598c33f1cf7f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea76f5b7-83cc-40f1-a289-614fb09f52d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8520854f-1e31-42db-91cb-39e3b677b85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d111e0-4280-4414-9726-d18967d0cc3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8f83f1-ea4d-456c-9435-5fcd7e52569e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b18992d-3ad5-40b6-9014-a3cdd27da901",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bdab3a-48d5-42fd-a0e8-64daac2eaa63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1ed324b-2d35-44eb-bc65-f45bfb25b2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6793ebdd-ca8f-40a3-a23a-aeb2cde24a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2995a9-2cae-4318-a77a-23fe5f928d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca1beff-2294-416b-a97f-42db84e4ca3b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccc063e-9a36-4938-87a6-d006436d9dd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "593dd1a8-fe22-449f-95c9-0ae4b08bbb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7b8e86-27fe-4850-b808-a8fa432ffa95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02bffc1-d823-4daf-9f0d-d43125811b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff56718-5b16-4817-9b8f-5a879eb6cc6e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bc8902-1352-4684-b8d2-04d30e37d97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3be752-ab77-401c-8b1a-974d583f9e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d4521b-74f4-4120-8557-19c826b37e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21741cc7-0582-411f-a552-e08681134cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c27871-d247-4fae-8869-81f8f530ef2c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84d275e-970b-401e-9bce-15a11b4f9394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3073ff30-3215-4ee1-acb9-a40048c01cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109903d6-6c28-4732-aa8e-b379ddd058fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79d189b-f47b-4aa7-a204-deff7ce64479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d941d3-494b-4e89-b7d1-b77e21cf848f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e513d333-6b59-4d04-b9f0-3fc148b7e903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb280558-4d16-4d41-9b89-166b76d9a33f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3695170-c1b0-405e-814f-5fc073f4b56a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736118c1-18af-4de0-a1c8-7d98ce62f06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67beccbe-4410-442e-937d-57f6eeb48e2f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7223c66-338f-440f-a33d-f36ebb0dc994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1fc159-28fb-4e41-adfb-ddff74d6db85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df027131-1b22-4e46-801a-c8b97c2f74ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddd1cea-fa6a-4630-8556-9cd23ab1448e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a493af75-9db6-4a33-8975-b73c0f7d6c0a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57cf1fb2-6b03-4902-9225-640f6c219fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d22764-0a92-4834-919c-373fe20ee2bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4279c8-af7c-4e66-84e2-61dbb5986d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40022bf-7e6e-4911-81af-cce20e41a0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacc3b0b-95dc-4d82-bb36-9e7b088bdf84",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c915c49-978f-4ba3-b12a-ab69d077e2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d61e5f-7041-4013-bd1f-3f4f535e654a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4bdd89-5ed5-4243-b00b-64f1fc453936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69f2183-11bc-405e-adde-16b6de3c57a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba4e259-89bd-426d-bdee-a07a79532c51",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c162c0c3-62dc-472f-ac6f-bfac5b7a3bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abdfed6a-e404-4457-ba8c-dababb2575f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff77d9b-08f1-45a0-a29c-0334de78cf4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb254b50-b69d-4306-9346-7612d6c3ed34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13120b33-04a2-4443-b567-2d89980e4774",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8293a79-e30b-4eb2-937b-f2a29db7ff52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31dad2e0-8421-44d1-86a9-d4bc47a12876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaf37ab-1ef4-429d-a51c-b065894998d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7aaac83-0401-4609-8a59-c50e18dfd509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0361d6-6f7e-4a93-8dfb-5fdae1116979",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370b53f1-ffe7-4ed1-8d46-11fa111e1881",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bb60e3a-27dd-4aee-af36-bef874251942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f77728-f293-4d62-a8c5-3a9a56593b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b39321-af0a-4b2c-88dd-a940aa494417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6d5713-6051-4e4b-8366-abfb83b6842b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2184f66a-7493-4acf-8ca5-d465b1deece7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178e03d8-d6f8-4554-98db-06e3482a4673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba087e14-fb59-4c58-9760-ea531e42386d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ada6f81-01ed-475e-baf0-ea30bb484d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe4bebe-4158-4068-a618-fadb14b074ef",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa14c568-1c5f-474d-8bed-4f5ffbf05e83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b39d33-7747-4da3-ae4c-46b052c6441b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a049ca-fd19-445f-af6e-e4f921aa0b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a25401e-f55a-4be5-8917-0c9c2b442f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a9688e-f8d0-4f0c-ba27-71df0315b137",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfc4b7e-be6b-49c2-99db-1c5db9a3a21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6920d542-b8e5-4d2e-ae62-1dbd3ececb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc4abc8-af98-4bca-8d32-43a1afb8166f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79da6cff-8342-4e5b-97bc-e76520966bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db8f80e-16ad-457f-96b6-7ed29c600818",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32bdbee-798b-468b-a1dd-ac04dcda3e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e49494-7504-466e-9f13-f39b826b5d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61db9f07-f835-47c3-a996-7869a4590047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4e3f5c-d3d9-4977-b97a-00e0e7d54adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abf4a5e-9709-459f-8e23-e21d9f02b849",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946886a5-5ab0-4983-9393-2815260a7dc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a379f48d-43e9-49f6-a96c-bcdc49c6b58d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2d9c51-7b07-487c-8835-74f4061c7bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f274acbc-37a0-4043-be55-77b31e3ed6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6577bf18-6e5d-4533-b434-6c6ca07cd262",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab874b60-39d7-4c48-80d3-2a4a72573a9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20f3d93e-43d2-43fc-be00-973c2a869e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a7816f-0274-4cc5-87b9-0d7bf20f8f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e441fb5-62c5-4f08-a15d-2b3098ace377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7a6bd8-94fe-4506-b300-78991895a4ef",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1c9f30-135c-4966-8f6f-7b2ae0ee2509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "308742e2-35f6-488c-98fb-bc5af92ec640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "592f322a-e597-45e1-acee-ef080efaed2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3262c2b0-b70f-435c-ac61-9f39ee86050f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7237fd6e-a450-414f-95d3-1a5d2132f1b3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442231d8-f78e-4190-879a-15336d8a0cbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f396b2c8-748b-4127-ae41-fc28bdfb4bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d96fef-a923-47f5-8e92-f43f435b479e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989c96a8-0810-4b0e-b9b6-f8597b7572d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7bd8e5-53f9-4a1c-bd5d-badeabbc7ea0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8298e370-8e40-4a55-988d-575f78075638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c71388c-8897-485c-9f67-05fce3fad947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07eb376-042d-4525-b4dd-bc5546af314b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d21f3538-1512-438a-bde3-5c8dda9c64eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c41c3f4-afbd-4120-933e-c725603f9c92",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013fb0e9-23f9-4f68-a99b-589822bd4870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bcedf69-e6db-42ab-b316-aaa17f35f835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec869fcf-d144-4722-95c7-dc28856c1706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9deaf443-1235-4e23-87eb-b9ee0b1a58c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d6c26b-4a4a-4308-af66-6afc9658703e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9a7649-32c0-4c30-b015-859ae8a88a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45eeeede-efdf-48c0-8535-93e61324028e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c60c24-660f-4a74-a1f5-23342c7036da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9efcacb2-7565-457b-b51a-44b8453ebcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97564e82-a907-4c3e-8bc5-530ec59b0bac",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86458e26-6784-4885-aef6-11b31097a5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61839648-fdcd-4139-a2d1-09a10b2bea84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58736024-b81c-4e58-837d-f324d4e5bdcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cf1a7d-93ea-4700-9b49-9b3d1d8cd419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c676db7-8c03-4bd7-8dea-b780904ee0e9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55335368-1d68-498d-a152-6bb937da2dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99926a6-29ef-4835-850c-7aa3c2c74534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "304a7cd1-4ff0-4095-bae7-aa160814cf6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1bdc4e-91aa-430f-8d27-4942ca25101e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde123a5-14df-4672-895a-5fa5e7d9842c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fae258d-d74a-42e2-9331-0cb3006165cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcaf9e9-9ed9-4673-ab84-7788746f6bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f441edb-aa39-45e4-a2cb-4083032e8743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135bcce8-003b-4746-9cc2-cd378d8638b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f489a64f-984f-45fb-b84d-254be809926b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe942fa-04f6-4605-ab08-d4a8b20b81c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4226b4e5-4a27-4c4f-9def-307d0be29294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d3d150-8fe3-41f2-8ed0-b1b847182e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0947596-b13c-4302-a938-b873b50e3088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2322cfb5-69d2-4f99-96a6-5c78a7a701b9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b612f06d-1591-418a-868a-401e307ddf0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1e8978-06eb-428b-aa19-1579d0bc3a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d8cc87-67c1-474b-9d1a-36172cd69de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0fe6d0-322d-4386-9f23-3ce128a6f183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4274f98-c89f-48d7-8667-b7f06980d3d5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3261a97b-0924-4703-a680-b873daf11164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0023ba62-10fd-48fc-b60b-e2bc01f600c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb04d9c3-750c-41cb-858c-fa8933efa196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10a6f16-7d54-40e9-8a71-2f01824ee8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a683384d-073d-4a24-971b-afb9c8708a78",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ead5cae-e2e0-43ab-b655-2af21fd9215f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf00bb9-a35a-47d5-8d09-6e3ceda9316a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8a9a58-61ca-4277-93cb-be2f7b985067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a95feb-0840-464d-a06e-a4f3c362747f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ffa43d-cd7a-458a-a8b7-b481dccdfee7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96ad63f-d3b8-4edd-b2fa-5f9551cfa09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770b4cd0-5135-4636-9f06-ea5da26881d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2631d41-4c58-4c63-b29d-091c974a78bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b662d762-99e0-46e6-a4ed-a0e7aadb5d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdb47de-e1c8-4618-8fab-55cd37626e32",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb745d92-a329-4653-adbd-db98fdb41078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e22aa5-42c1-4b0c-9955-51c7cd4fba87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e5ab2e-18e8-4fbf-b72a-39f92c66a884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d295caf-4f9c-464a-802c-1685a39d3382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d9587f-7e57-47e7-ad5d-29b18aa08dca",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f564eb-9e1d-4410-ba95-1a36d47f40c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db4da3e6-940b-4e3f-b5cd-c8539aa39605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede5bf35-d84a-4405-bf99-40be3b7bf64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cd0c98-9aa4-42fb-9b23-34256cc8ae75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a07d60-d5c3-4711-8831-62fd080bd4db",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90aa8cb7-a2cc-43dc-8725-5a674fc721fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af5b1e5-9092-414f-b38e-ca7b5c2be45b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99d3b61-8555-4c0f-baf1-3f7d3ab25c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1302233-6457-4a7b-adb7-608fde0d2a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296337a3-ccc9-4095-8416-17e9de5ecdba",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab10b65f-fbca-4fdf-aabc-bd50535700e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f621754-2499-40d1-b653-51ea56f49a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b26aefb-87fc-4a8b-9d54-14d01b6b5604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4aeddfb-9d85-4a01-9f09-dd1d29d922f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcb5321-6124-4c88-be5d-a5ac13761fed",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71d87db-3e0c-49e1-aa0b-abced543d6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5274e9-dba8-48c6-8562-5d5c9fcfa937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb82c40-97e4-493c-b614-40082a0e6078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641dafb9-d985-437f-9f38-555ec6d6b8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa6b77c-adc7-4bad-a66b-3ee99ab0471d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deda83d1-d044-443b-aae3-092062ec0c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e82372-3440-4e1c-b768-8f03d160ab89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c09323-f5a5-49b8-8590-f6f17738c52b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df86c90-0487-41f5-8ff3-9c2954bbd24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750f778e-cfed-421d-a6cf-f2b99b4d1333",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d19213-1d65-4a2f-813b-8fb9c0784ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b056047-9e98-4301-84ea-95c83b713e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677aa02d-8426-4db3-bb45-745d1614a68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df2535d-9809-4881-bec2-f28df2de621c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db36a8d-ab84-4b8f-bd28-c124933c9f48",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d55289-d37c-42bc-9e0c-bc2145cff69e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f07f1d-2850-435d-9027-ea92da07c7d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02888e5d-3ba6-4834-8b7c-1240e55f6da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8adf6d1e-3079-4378-a494-2c699dbbb508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d408eb41-9944-4354-9556-8bc102335b3b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5899614-d2c9-4a4e-a080-036acba9c5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80cc018-8481-4154-92a6-0b3e43630584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac3d88f-d3d8-4db8-8a23-1198b9fb6c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8bd9a3c-63b2-44e8-9553-2a6fb839356f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171c90b4-7181-420b-9ccd-5cf378b885fc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d87c7f6-e231-4677-9935-ecb4dd423c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ae4ee0-f653-43f3-8acc-38aa07b5a1cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fb4834-2eb7-4f0d-bb68-588321daee9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bec904c-ee1d-4c7e-b000-60c4fb040dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92916404-f9ae-4864-b244-9784a4ef6d3c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063bdbcd-9b64-43b0-ba24-a3dd4e604a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c18249-8a14-4e9b-8a9e-e9de3d148260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3853584-7027-4c36-b832-ce887674897a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878fa0f4-7d11-428b-946b-ebf77d8db672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b5505c-4ed1-40c5-8e98-6429c056504d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbfebad-8398-44c1-be7f-ecb08be38ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e85975-8703-4ee1-b988-b7cc97ffe261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f27912-3956-47e6-a1a1-1c163d70a824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312cd1ed-2def-42c5-8a92-e01e010d9405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98d795a-8c28-48fd-8739-b0754a6aabbc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d889d9c-308c-45ba-a850-20196080aa8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd3f04a-8be8-4a6c-ad99-61f4e7ffd4e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfb9d99-27e6-456c-8a21-45d73e435682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5571816e-cc98-4dae-870f-98c0dce25ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d2c82a-35a9-4da4-a8b1-f2d492f1f0cd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6416a878-fc48-41af-bf04-5c4835f0507b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8902dd30-89dc-4249-867d-ff9c78bb662c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bea0111-53c7-45fb-924d-26a9f056fe51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff3db93-1869-4366-b288-d29cc855b131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae82f8a-5653-42b4-8209-1f8042795a09",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9622b0ab-d903-4551-83e1-343e469e9318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35074ebe-4c82-4c86-9eb4-8aac3ee28e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1cc7c1-a668-4f0a-9411-ecdc9482d5b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a07b21d-dda8-4cab-af77-00d0c85d7c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46c45c3-aa32-42a0-b9e4-e4e0c1b236fd",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf0a93e-498a-4411-8767-4f47ccc86332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a63e50-1285-497b-95b5-a4fd60751d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30865f00-c84c-45f1-92ae-e9a4463c270a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46d45a8-9b49-4cce-bb10-ee0c4343e5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee62944-cb8b-4828-9991-f8cc545e457b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ae4f4c-43f1-44fd-816b-bd0f4eaece19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16accc2d-19f2-4f94-81dd-017fafde6897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fd871a-72cd-458f-a885-9cb273cd605b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccc0939-c88b-4b90-b749-bd97c7ce5c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf45a21b-3348-46f4-a91d-11966545ac52",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dac16d3-924d-4c2a-8994-eeb182fdd07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb65ad20-5571-44be-bde4-c48549d1e3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb19db58-22e1-4a0b-b6e6-3434b1abf025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854165cb-6aef-4422-acf5-51ddc7a7a0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e8fba4-8a17-4daf-903b-ace5b58d383c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b99d1e-8ab4-4016-8b9b-15d975918bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0504a3c8-763c-4e54-9696-fda072d3fed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6e3f65-db52-4ea3-af5f-244f8ad8df13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d655a4ea-37c4-4f2a-bfe5-44fb0747675a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ec6fc1-2052-4b9f-9d84-6f5f34c175cf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6706061-67a8-4e09-ad19-137175d8813b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d0a54d4-23cc-4e33-a9c3-f942b6a30bf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1972d37-2dde-4a4e-ab16-c5339c1b2d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa22a8ae-43bb-434c-896f-23e3004875a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d676fa-a8d7-40fd-ac4c-83a5d7fa244c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e039d0-e043-4d6d-87d4-670699cd84d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53ba9432-3b19-430b-abc4-cda23d57a8ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea66dcbb-63be-4679-b9f3-bb2384d150fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7f7b9c-9573-49a5-b71a-178766aa06a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff5262a-b12c-4a9a-8366-b3cc4bc95589",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a88557-bc25-4b7d-a02b-0475c47ee2c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae411eac-2288-4e00-a278-081b6eca5df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07782f0c-8f8b-405e-aa0a-4c16e9adc75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9bb8df-e988-4767-8bf5-126fc12c83fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40032ea-77c1-4f38-8e59-dcf4cb3bfb94",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80637059-34ac-45e8-8f1d-37ca47f9f112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df7ad43-dcb5-4da3-9619-9ad31977e828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ef87c1-26c4-4cfe-8c7f-827db7fbaa94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84b2c6e-5c96-4b35-a671-484565cfced5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed78f0f-ead8-4378-8182-38d7ed984bb6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc5c96c-9925-423e-ad7e-a5585e67b7a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5248a8d-47bb-46a8-9567-061c1d5325dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2893dd05-9e1b-4e7b-9b5e-8d979a3d2432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5fca5a-41b0-4a00-b3d0-fe802eceb55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a603c841-aeea-4de7-b562-a3b89b813c4e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f72d8f-6631-4434-8514-52e0dddf6ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c945461c-da5a-4eb1-89a6-fbcfaa4bac34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c41ee77-eca3-4b55-9e54-29abee1f125a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479e57b3-cd64-49bb-9e46-8fda3a28d86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253900c2-b01c-49aa-88bb-61847d76a7ce",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8642f65-4d89-4df2-af77-92fbcbc0661a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b79cf3de-372e-4de1-a717-e61557e8205a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7f916e-9296-45f1-80e9-945b0bf90f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0656704-e7e6-40bd-9626-62ae7ab88ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b9ff80-8b01-4e52-aec9-0249a648f4a1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75407c12-f35b-4150-b023-3c1db5c15d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d79292-c4de-4f3e-afdf-ba523f8b2527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37aadee3-b321-4cb0-a685-b93ebab3759e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672633c0-8ba8-469b-a622-1f4586afa8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429c264a-ddca-4685-b23c-2e304d487fa4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242f159d-e558-4514-a2b4-662ce789057f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37b55197-c88e-4ce5-b4a1-ebf8d53cedf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ce046d-b599-4ac6-9b1d-b830ccf9c3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0368f36-e0c9-4f83-a3eb-b6900ebc2a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d0ba49-6b4b-48f0-a5ff-1a5d0d734dce",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c0497a-de2e-4c46-95bf-6f88bd959be3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24e13ba7-a06a-4790-b565-17d50a65d19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacda144-ad00-4a05-ac1a-4708aa6410b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e21a659-6185-4303-b7f5-c19826f7d43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbc3efe-d450-4b62-af2c-c758134909e1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3807e0-8130-46b4-aa39-d3799aefea29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b33906e-4bac-4ef8-a283-572576121569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce93c31-97e1-451c-a5a3-7f448909bb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb35344-1d0b-4fee-b9a9-1e6fc857cf6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae15738f-aa17-4dbe-a90e-a7550d16ffae",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c1d8aa-2116-4399-b760-703bf6639017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "268e9e11-2255-4198-83b2-fd2db168e647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb1c0e9-737d-4007-ba94-a38e8830b6f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606b38a9-f4c6-4336-a118-ce9c9a7c8184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4810dc21-b01c-42e1-bc6b-57932a97567d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169395d5-c34e-4d47-acae-f325c3ceefb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dcd3e28-96e7-4d90-b44d-83e2037fdea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d92830e-aee7-49fd-9ab3-ddfd9c56333b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a651a306-b19d-4ba4-958c-573de4911950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fac66db-d388-4d28-942e-0811259ee570",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f7df2d-4d7d-4167-8d5e-95705e520e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17390a18-fbe6-4d21-bcda-a18feafeabd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4c8538-a5c4-4239-98bc-6408c5aca81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3754ee4-4ed4-404b-8df2-d18246a59d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8116a0-b58b-445d-8a93-1635819a39d5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c62a41-5e28-4392-9e17-887a244d1b30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b00d9c-a026-44db-98d7-ed5b5531c618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffc5e7e-90f3-4855-b5e3-a86165328a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756c2f74-2eb9-44ce-8894-90ed5331d036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411381e4-578a-42cb-b8bb-8cd1b83ec254",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9833ff4-8edd-414b-bfdf-8a1099d60ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b09999a-18e1-44ee-abfc-50ea6b275a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ee211a-102a-4bb1-8711-36b2585cfc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866c699a-36fb-4274-bafa-faef9912b93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc66193-861d-45da-9cb1-1cdb0eb812fc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731a0284-6cca-4a7a-a333-893c4852999c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930e3b65-f8f7-45e1-b9f6-d4df9997f3ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a507399f-72ae-43cb-95cf-50fb0c7cfacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5709f51-1da2-4155-853f-89df79551cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f66c8da-1706-4d06-911e-1193c2e19a30",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fe388a-c01d-4980-99dd-e2af25027d3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a185f56-044b-4e30-8b86-216cad8a9f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca54898e-ca54-4a22-a9cc-44d19782c4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cdfe5e3-4329-49f4-9b0e-6a6e53771e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587475ff-78c4-4817-8208-2ecdec2e0bcc",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09f8acf-a978-41a6-b009-285dfc466dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b753201e-8dab-43ae-b125-81ce89ddc2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0404d28-2d62-40b6-a1a2-c71e2c26fb8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7265ce-fcad-472f-8306-0598de8da942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415d5092-5edf-4554-9f6f-f284d3441e68",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499c080b-acd6-4973-bd57-dfeb5b9ca3af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35fefb3a-5067-47a8-9eac-62348dc2cc4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62728d01-868d-4592-a066-1d18ac242433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d5ad90-c1f2-4ec4-aef5-acb9fc4cd46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0220178-0e82-440f-9158-f50f02d91cb0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3eee350-f498-49ca-987b-ccdfcd7237f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87be2430-221d-4858-8ee4-e2af2aa2d4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9773d0d6-5c60-4c8a-a9ef-df23c3a3bb0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d45a392-3f9a-42d9-85b3-30f965ced4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea18d57-4d89-4ea3-b430-edaa4302a0b2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa36731a-216d-4bff-8b36-d53d82538015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3c49eed-67d5-4184-a6d7-59832139598f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "537b5222-6039-4c16-9fb3-3e7b2d149bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c415c7-ebde-4734-bf20-bbf24b675504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb590a7-53fd-470d-970e-d530ff52c143",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3088caa-6dad-4b58-836a-1dfa8b1e20aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4225a58a-610f-40f9-9491-b90f511617d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75296ad-32c9-4fef-9541-ecb14a9cd929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3fb715-b83f-43c5-a0c2-de1d308c25dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e941d564-ef5b-4f72-965f-edf661191cac",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc9a11b-5414-4e69-9c6c-d72e7e94575f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28bba37f-077a-4150-b30e-ab6c8d850a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4db466-f9d0-4ebb-8fbb-23ce3b11b0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad286ab3-2a6a-47c7-ae53-82d70f3d728a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f4853b-b76b-49b4-bc0f-f6a7adca1ac0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fe41dc-19f6-4762-9559-142cdcf767ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d64ba69-edb2-490b-bd1c-419da941f2dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc1c5d8-79c8-4aa4-bdf9-dff1757d4b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbd81ff-1c85-494d-a87b-ccd7463f7787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc50f28-b180-4529-9b1d-38eeae4c3c30",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86509e92-a19f-40fd-b605-9bfeeb9ab98d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "989fe475-8532-4ae9-a32d-d6785a27b793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f4903b-ddf7-4ba4-a8ff-64ac32029a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16f1e6f-a5ff-46b4-b0f2-364fd4655c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8981f910-9832-4bac-888c-934e33d2fddd",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de7c389-363f-462a-8cc0-5da7ba71eefc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0f8890f-b82f-4077-bb05-b032c27dd5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e531de31-2886-4658-8c5f-04073531bc5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff709c4-5907-48ad-bf0d-b616f1e2cb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8672776b-fc70-467e-a54c-87086df0530e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6969ce0c-2cac-4c97-b459-d3305de59468",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0baa1aa-7213-4e98-8a9c-09f0f0ad2486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e2df41-1318-46fc-891e-e8bef567452d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db02fbf4-fdd0-419c-bb07-5c6de5742253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28755ea2-ef92-4e4b-aba7-02ec6dad539c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872522eb-8472-4e0c-be2e-bf9879a2df57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73ab9dee-d66b-48b7-8335-8ff92aade8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69485b6c-2b3d-47ba-8a0e-0519ed7eebdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a7cc73-4049-43cd-9b5a-cea06b1e2107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cc898d-0890-485e-828f-425c8f6ee17c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28034a3-6bc1-4fdd-98b2-69ceb17c48e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e61057c-9a41-4f9d-a0b2-c4392f76b06c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9053103b-be8b-47d4-a70e-4c02bdeddc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efb0368-a052-4bcd-8912-4d906f696d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a98921-79c3-41c6-a5f1-34a0460aa908",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cf1002-37b9-477c-aec4-45937f2405d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfb36257-ad57-4b36-875c-a0c0898aea11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "290627b0-eaae-4805-a22e-9818d241b393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aff65f7-9043-4f70-bab0-c83686a3c702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce1ed51-a16c-47ab-9d6b-32e5a4344706",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c589017-d8f2-4324-8e4f-d5e49a896bca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "226ff912-9dd8-4cbf-9fc1-11136616cdef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342778c4-5696-4a9a-b3ba-83bc43bc2011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa905e54-dc8d-4083-a428-811b937f961e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d0293-ecbb-4d00-ad83-7d5410a016fa",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6159ec04-0892-4770-9ad4-807980f606a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "361091ee-c206-488b-bbee-4210abd80584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "256a0b45-c2d7-4b80-8925-14b919e2f267",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15aabe32-9465-417a-9fda-0697c4b32fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec033752-e14b-4f17-a106-047a9358b15d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f1b02e-e762-4e32-a613-4d46e63d5dad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e058230a-fafa-4e67-a2a4-9c7885f4a7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edd8252-0d13-449a-8d4a-108944c48405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79513411-af29-48f8-a046-53d1241b6ef7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82bad868-ff0b-4fe7-bdc8-d10d77f56c7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f74ab6f-d474-4a1b-82df-4bdbcafa79db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4a11913-4e2b-46c7-9b53-c715d35d6837",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41312bb9-a3f7-42e3-a370-a03a42f9ed2a"
                    }
                  }
                ]
              },
              {
                "id": "4e40cd7a-ed81-4fdc-ad31-5fd13a13f0e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3aef4c1d-6b7a-4799-8b8b-aaeed424eb8c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665c9e72-4875-43d2-9c3f-360911d5b864",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "57ac0cce-fa43-4435-b236-cb0afafd8fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e49a12-ba1d-40a5-a4f5-be03c7d8de36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcd362fb-b0af-4264-8573-0518bcb19d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8421c4-6b49-4b1b-a816-7a990c6c452a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589302a7-bb8f-4c46-9d1e-cd398fa85b11",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "10a81c6e-a0d2-4e41-aeda-f575a66bd317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23a8434-1aae-4ab6-9c27-60a47279b223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abb5b6bd-4719-474b-a70f-8fb544ee1f89"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32404d48-075a-4833-be44-01b06ce96f1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ea97539-e319-4c6d-89e9-533294265132"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de59ab1c-ffc3-454b-89bf-52abdc46e2f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1dca16c-6756-4c63-b404-d65b4ae738af"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "05acdd94-24aa-4741-82b1-97bc3c996794",
            "name": "Positive Testing",
            "item": [
              {
                "id": "38831a68-e12e-42b1-b293-97ef584b09ba",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbba847f-6425-42f1-9d44-288f24731284",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec3fae1c-864b-4133-b26b-a4270fe310e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f18c4a7-4266-468d-9bcd-cfcde4d58bcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c683e521-b6c2-4105-8649-2ed816850460"
                    }
                  }
                ]
              },
              {
                "id": "df791ab4-3806-4d27-9e2e-c1c10289210b",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db434b06-b333-46be-9ba1-c84fae6bf4eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "676d8647-1ba0-40e3-8914-38e70ce352fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "183c9a75-d20a-407e-8df9-193856aa1e11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d763cac1-381b-4d6b-b66b-e33be086c922"
                    }
                  }
                ]
              },
              {
                "id": "caa53709-0f99-4944-ba13-477a118ae664",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e29c306-2bf2-4d9f-8ce5-81e70eb3ae4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "982f4ee5-09b7-4653-91ae-d79f48b2b84b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a103cf6-22f2-4570-86c9-7abc8a0b6137",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8f564bf-d3c3-440d-98e9-0a9b0ce18d88"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c555f791-7440-405b-bb25-33b6b1f382ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cba8a369-d0de-495f-9f09-281e9cfc386e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "904f9833-b167-4b60-9411-ce399e897910",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7146b90-9534-4019-aa5b-5dacb395a50e"
            }
          }
        ]
      },
      {
        "id": "d3ceb15c-8d4f-4e42-b41c-b1d0f9a65bda",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3ee6c955-28d8-473b-b878-b5a0d35a0d6f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea527595-9a39-444a-99e3-647a699df93e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "551c46ef-319c-4ff5-8a0d-26d595ceceb1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b560414a-949e-4bc4-aa4a-2a8125ac1c06",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a50e090b-7af6-475f-87dd-b13f8c887722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3496bf-f9fe-4011-8959-47a692fe619f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5d726a0-15e6-4578-adc7-881daced7571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5cf992-e177-4b4a-b2a2-4f67104f1e5f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4f4ada-3994-4f8c-b3cd-3d4b2ce0b892",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5f63e31d-5ab6-4ece-ad43-f7e0370c08c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1684e19b-f407-4a7d-9934-bcfa3322d9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e0fa12c-42bf-4c49-91b0-e5614abee1c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aea5cfd8-1339-4ff6-8348-8da4f2bab12d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20f57095-3f68-4565-b3c7-b56ef9b83767"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41034af8-61cc-433d-92b0-77bbc38e8c60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5796d89-24bc-4e9f-ba42-3ca780cec8c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "476638ca-38ae-44dc-8aaa-626b4a5e94d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "76bd4376-8d33-4e39-b4e3-cf3f113d8a1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "baf4b9ec-1c55-46e3-93f9-f3406b39fe1b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae85a00c-ac05-40eb-b675-ea3a5a063682"
            }
          }
        ]
      },
      {
        "id": "debc63a4-24db-414f-9b6f-7b3eec64525d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fa20c915-992b-4d92-8071-f51961657a19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "787e20d4-9984-4903-932e-7fc6ae01cfad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32f3ec11-3cae-485d-9f95-7823411f5b62",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5759e37-1c5b-4688-a74f-51204ab9a16b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a5811f72-2dff-4a41-bd37-87513364b3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4125c327-47f9-4a47-8da0-1253f905bd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc975c3f-2354-4b8a-bb92-1218dda1abfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05437ad8-9cd1-4185-a48e-8c1cafdc8ff7",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb0d5ee-c637-48a6-a4b6-a142d87e3512",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d8548f0c-d427-472b-b0e0-4cb62486c13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f860de38-6b4d-4045-9e77-41e0962cd42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc46677a-4b16-4647-8676-68dfb8ecc606"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a47c6d8-62e7-465a-bcd4-32d352a16ce8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4885a60-3995-4c77-82a0-d74ea70fb9d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4609e6c3-13e0-4bd6-97e8-7fd84128895d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff495b3f-4c46-4d08-b974-28f38d2af208"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39a4d22f-2ac4-43e3-a15b-c5110e6ceb09",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dfce3e66-fbe7-436c-b3b7-729c004a1453"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e75eb84-9a7e-4b6b-ab3e-b8a3ec7a202f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10d6213d-0eed-452c-b4e1-fb455957dc82"
            }
          }
        ]
      },
      {
        "id": "7c8a0dae-991f-4b20-9371-fea354780c50",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c224ba8e-7ed4-447e-a481-a37c039cc4a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "914c2383-2c81-4c76-aa28-dff3da82b65e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3983ceb8-ca00-4ab3-8805-4ec11825e3e6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb51dd7-1a00-4bb4-8ce5-af400a511f59",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "51f1e0a1-6f81-4c5e-9d35-22372b801cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880bc3c5-443a-466f-ad7f-0c224c23d2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66820231-428e-4ea7-a0a3-c7775a0bcedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddc2dbc-baf4-4805-919e-d83f88dede7f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1964ec2-79b2-40f1-a8df-394eda51f9e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f90d07c6-7492-4a6a-b7b3-970f051c8b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9022415c-9f5f-488e-979e-2f312002c72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eded7e70-a1d6-43e7-a7ae-6f01daa6dbd3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99d36ed1-6db2-4c63-86d7-f413c1cb3efc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8d4c620-a73b-452e-8f70-5b671d4cbc3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d4702bf-a7b0-49f1-afe1-86507cc9cff9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ea96c79-577a-4199-805e-4600bd7216be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ffaf320-e408-4078-8ecc-20fc8bab74dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5331de99-0408-49b0-a2e8-f82cf9d06e27"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "939257e6-e67a-4a65-8979-6f90b1e2e7a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50d7e3d5-99c4-462a-8dda-b0e48509c15b"
            }
          }
        ]
      },
      {
        "id": "c4989d67-663e-4ef9-9976-79561f25a345",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25c4fad1-4ad5-4969-8131-c47ef76b4cd8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf635d2f-baba-4c49-abd2-b4d9e017e5d7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "382b34a5-b133-4b08-ad36-7a8169a89308",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f425c7f-01ee-499b-9273-bac3426a1d36",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa0796c8-5821-4ac5-b2c2-9be4d390d7fe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 197.19230769230768,
      "responseMin": 4,
      "responseMax": 3061,
      "responseSd": 413.16544639487245,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1665968628143,
      "completed": 1665968690135
    },
    "executions": [
      {
        "id": "57ee6201-09ab-469c-8a45-7441486f9dfc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f8f6a287-22eb-45e1-98bd-9c280e73c091",
          "httpRequestId": "b7dff964-2b27-420c-92dd-da30752065cd"
        },
        "item": {
          "id": "57ee6201-09ab-469c-8a45-7441486f9dfc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a7bb3226-7c67-4c20-b0d3-4d6ddec353b4",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 0
        }
      },
      {
        "id": "ab6aa886-fec6-4615-8eff-cd5a9f65db43",
        "cursor": {
          "ref": "19428d4c-6abd-452b-a040-6ea980ac3e1e",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "75c01cf3-ab84-4f2c-9ea6-9ea7cef956ae"
        },
        "item": {
          "id": "ab6aa886-fec6-4615-8eff-cd5a9f65db43",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "93679dc7-7251-477d-b049-9613cd423020",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "3f22eb34-87d4-49aa-87e4-d1c0dfa524f8",
        "cursor": {
          "ref": "bd8ba459-71f7-4c74-bf22-794018b92715",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "384c9a1b-6362-4c64-af53-64161658d7d5"
        },
        "item": {
          "id": "3f22eb34-87d4-49aa-87e4-d1c0dfa524f8",
          "name": "did_json"
        },
        "response": {
          "id": "7b185666-1e97-45f5-91cb-72d613eeaa58",
          "status": "OK",
          "code": 200,
          "responseTime": 3051,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4815c4a6-031a-4cea-a973-1a3f1dbc4f2a",
        "cursor": {
          "ref": "2f81111f-3a62-4602-97ff-a6b2153c987a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3ab03ba3-ce6f-49a0-a610-9a1fc24141ac"
        },
        "item": {
          "id": "4815c4a6-031a-4cea-a973-1a3f1dbc4f2a",
          "name": "did:invalid"
        },
        "response": {
          "id": "03e880a6-77c1-42b6-bb7b-88f5f2b69fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 377,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4815c4a6-031a-4cea-a973-1a3f1dbc4f2a",
        "cursor": {
          "ref": "2f81111f-3a62-4602-97ff-a6b2153c987a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3ab03ba3-ce6f-49a0-a610-9a1fc24141ac"
        },
        "item": {
          "id": "4815c4a6-031a-4cea-a973-1a3f1dbc4f2a",
          "name": "did:invalid"
        },
        "response": {
          "id": "03e880a6-77c1-42b6-bb7b-88f5f2b69fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 377,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54aeaeeb-6841-4f66-a477-dcce283e5f40",
        "cursor": {
          "ref": "6c2ad019-fa4e-4a34-884e-8d431b4133b5",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f09d5d9b-c08c-423e-b096-a1f07f0c4446"
        },
        "item": {
          "id": "54aeaeeb-6841-4f66-a477-dcce283e5f40",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a13ec67a-d631-4d43-8019-1f4fa39dd79d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1193,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620af9b6-1148-4106-8056-9c45859a0e8f",
        "cursor": {
          "ref": "84345f3c-3e83-40e9-97b8-bd1eb853305d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "679be04e-8410-46ea-89d5-46664e7761fa"
        },
        "item": {
          "id": "620af9b6-1148-4106-8056-9c45859a0e8f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9f872b9e-3423-4b1a-91fe-40865e1e758e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bb4656-0d48-4ca5-b8a2-19bc6e71476e",
        "cursor": {
          "ref": "3760427f-4bdf-44e7-b0c2-e12ba9ef4b7a",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "200ae1a2-b15b-4521-906e-8d3c9e704826"
        },
        "item": {
          "id": "09bb4656-0d48-4ca5-b8a2-19bc6e71476e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ac298066-7be2-4486-baca-c5856dd804aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 355,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b23102c-f86b-4b36-b230-03a9859e9b9a",
        "cursor": {
          "ref": "610e0a30-2374-48e9-8dab-2e1148895ca9",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b3b7059f-5c58-4bfb-83a1-6a119cf7afbd"
        },
        "item": {
          "id": "0b23102c-f86b-4b36-b230-03a9859e9b9a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "60f7bb18-2a75-4e73-988d-01d9fec45b62",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 689,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b23102c-f86b-4b36-b230-03a9859e9b9a",
        "cursor": {
          "ref": "610e0a30-2374-48e9-8dab-2e1148895ca9",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b3b7059f-5c58-4bfb-83a1-6a119cf7afbd"
        },
        "item": {
          "id": "0b23102c-f86b-4b36-b230-03a9859e9b9a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "60f7bb18-2a75-4e73-988d-01d9fec45b62",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 689,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778825db-18da-45c4-bf24-58f42f7d2d60",
        "cursor": {
          "ref": "1a028c8f-588e-44f0-b769-635d066e3b6e",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f2a8bdca-7bf0-45b3-a9cc-a103d6f03a55"
        },
        "item": {
          "id": "778825db-18da-45c4-bf24-58f42f7d2d60",
          "name": "identifiers"
        },
        "response": {
          "id": "f43f4bb6-a97b-4f02-8146-1ebba915e567",
          "status": "OK",
          "code": 200,
          "responseTime": 521,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afad9627-9397-4375-bce1-9d80975b229c",
        "cursor": {
          "ref": "4b63105b-7acc-45e0-9395-8aa46c8944e6",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3d8b312c-2031-4de6-9519-166194317cd8"
        },
        "item": {
          "id": "afad9627-9397-4375-bce1-9d80975b229c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f4e270e3-e446-41c2-84e3-056991547b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afad9627-9397-4375-bce1-9d80975b229c",
        "cursor": {
          "ref": "4b63105b-7acc-45e0-9395-8aa46c8944e6",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3d8b312c-2031-4de6-9519-166194317cd8"
        },
        "item": {
          "id": "afad9627-9397-4375-bce1-9d80975b229c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f4e270e3-e446-41c2-84e3-056991547b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a58d753-a637-486a-bdb6-d0178c86d13e",
        "cursor": {
          "ref": "ba8edb4c-17f9-4fc0-b168-8c0831b8ec90",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4439bbc2-af1b-45e5-9ce3-1bb4e43ae178"
        },
        "item": {
          "id": "4a58d753-a637-486a-bdb6-d0178c86d13e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d351c5f8-0b73-4e0b-b96c-8decdf860fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21e7bd9-6f5c-4ec5-9e9d-39ddd7f1fbd3",
        "cursor": {
          "ref": "e98844e4-0eb5-4923-8492-2d930763e3df",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "745bc443-ae31-4460-aa16-47c5e1aa3946"
        },
        "item": {
          "id": "a21e7bd9-6f5c-4ec5-9e9d-39ddd7f1fbd3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "56bbd802-1fc9-462b-a5df-63a8a2388a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ea55be-d0e2-41bc-9f13-6a16ac913867",
        "cursor": {
          "ref": "0f136fec-c9a2-4982-9150-ae7367894049",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7d4c9d5b-b5dc-4c08-927b-55aa8938ef05"
        },
        "item": {
          "id": "12ea55be-d0e2-41bc-9f13-6a16ac913867",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "471fde94-87d7-4384-b077-7b3530e8b12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff6a7fc-129d-4d14-b684-160676ae4cf8",
        "cursor": {
          "ref": "3cee13ba-8ab1-4b1e-8db7-93c1948ac60a",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7d0c7a64-a56c-464d-b76e-ffc57793744e"
        },
        "item": {
          "id": "3ff6a7fc-129d-4d14-b684-160676ae4cf8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5dd2b0ce-6035-464b-9855-707abb3e6579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1547d0-084a-4442-9644-005cbc2b93f4",
        "cursor": {
          "ref": "8993472c-f2bf-49bb-8566-72fe91ab9299",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "268a97c9-3768-477e-bc04-636a24125e0e"
        },
        "item": {
          "id": "3e1547d0-084a-4442-9644-005cbc2b93f4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "25828ce3-c754-4291-8505-3d0e5b12f700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe653930-985b-43f3-843f-542282948977",
        "cursor": {
          "ref": "3bfa5348-5ba9-4609-bf07-3fd45e898b12",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3851d712-2930-40c3-aefc-401ecbc2dbab"
        },
        "item": {
          "id": "fe653930-985b-43f3-843f-542282948977",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "04a03ee7-1ac1-494e-a36c-9bb80d673bc9",
          "status": "Created",
          "code": 201,
          "responseTime": 920,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2a08d7f1-cb3b-4070-a433-c41a568f8893",
        "cursor": {
          "ref": "f44139a6-7c38-4eb8-b728-f72ae73dbb08",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5fc2b4ae-b2b3-472a-bdce-aba653b1f00c"
        },
        "item": {
          "id": "2a08d7f1-cb3b-4070-a433-c41a568f8893",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "aac52542-8775-4344-b606-6411410fb174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad4533b-105e-4f5a-b6a5-13f2c17b00b3",
        "cursor": {
          "ref": "51d5f256-96c6-4b51-917c-be7823e43f93",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "44f4d295-e6e0-4148-acdd-f32ccfa3af4d"
        },
        "item": {
          "id": "0ad4533b-105e-4f5a-b6a5-13f2c17b00b3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a7c2224a-e696-4e6a-adca-18a05b5ccae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d8ac24-61e6-44ef-ba9e-0ad9dce7b198",
        "cursor": {
          "ref": "d2fb9a21-12f1-4bcb-8fc3-9c3ed430075e",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2c530b3f-7d2f-43d0-97e7-287fbe0eda33"
        },
        "item": {
          "id": "c5d8ac24-61e6-44ef-ba9e-0ad9dce7b198",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "df6f406d-03ed-433d-828e-ecfffe80a743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7542a5f-a590-4f73-b016-db8e8be4eb60",
        "cursor": {
          "ref": "39c1ca88-e15b-4430-8001-b3bf9b4be650",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "511f14aa-2cb7-40b0-8322-97c5167f8832"
        },
        "item": {
          "id": "e7542a5f-a590-4f73-b016-db8e8be4eb60",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0cf37268-dca7-4412-b558-ca8d99c36fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a812e9-b4c2-4673-9e50-26227de2b20d",
        "cursor": {
          "ref": "4d06833e-2c75-48f2-8093-129b79d9b8b6",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b00aa9fc-8601-411c-b84b-bf44e190c505"
        },
        "item": {
          "id": "c3a812e9-b4c2-4673-9e50-26227de2b20d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "59621286-2152-4884-920c-91b1772d24a4",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "69ec345f-d663-4d6c-97f6-be23c52893d3",
        "cursor": {
          "ref": "a306a516-9029-45cb-96e4-facc7592e39f",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9e1da043-3cd7-4446-b3be-e3bb5e56a90c"
        },
        "item": {
          "id": "69ec345f-d663-4d6c-97f6-be23c52893d3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6080cf0c-7700-4e3a-872b-b155e6c4a1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1540c586-8b9e-479d-b15d-7d73e735e333",
        "cursor": {
          "ref": "2dfb4264-6c6a-48bf-9c10-7bf7873f0352",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d944786f-768f-4c52-9158-1d1fa94b1cd9"
        },
        "item": {
          "id": "1540c586-8b9e-479d-b15d-7d73e735e333",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a4d9db3d-71cb-47ec-97c4-e2fbb2a71d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe86cb4-c2fc-43ab-b01f-23cf770bf460",
        "cursor": {
          "ref": "054b261c-1aaf-4910-8eaa-61cc49f5072b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "82470bb3-e5cb-49de-97bd-aa06eac0bfa1"
        },
        "item": {
          "id": "ebe86cb4-c2fc-43ab-b01f-23cf770bf460",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "903ef0b9-ce5b-4568-9b26-e14b2c09ad69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d5df78-57ee-4fd6-8a97-e0a24f22f8a1",
        "cursor": {
          "ref": "df70bc68-da8a-4c2a-870c-e1ed5ae3e404",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "81c8d8fe-4cc8-4e01-97f8-bc2118e5b7e6"
        },
        "item": {
          "id": "12d5df78-57ee-4fd6-8a97-e0a24f22f8a1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d2c34d7a-7d25-48ae-a394-ac3c5fd6a08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740be60d-72cf-465c-a15f-7df530053151",
        "cursor": {
          "ref": "deb6900b-94fa-4bb7-a261-dcc95666a70b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "785df2d4-e999-481b-9930-612f76c19566"
        },
        "item": {
          "id": "740be60d-72cf-465c-a15f-7df530053151",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "76d2742b-996e-4609-9925-d7d80fa40865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2008f4-e4c5-4b22-83d5-a9a81bc2d30b",
        "cursor": {
          "ref": "d0942679-8b33-42c9-84eb-410d761567c0",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6bd1f0ae-2dca-46f4-8cca-4154db9fc3e0"
        },
        "item": {
          "id": "8b2008f4-e4c5-4b22-83d5-a9a81bc2d30b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f9f415d9-c44d-4b6d-bb84-07a96bfd6dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3672ce9c-5d81-4136-b04e-7cca9d5c15a2",
        "cursor": {
          "ref": "4b5397a9-7953-4335-9fbe-2da5c9b5ec04",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0019926c-797b-44c2-960d-2ce3ab3978f3"
        },
        "item": {
          "id": "3672ce9c-5d81-4136-b04e-7cca9d5c15a2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "149a1759-3cfb-4dc3-972a-3aa9983b5865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4496e34d-5f4c-487f-bd9c-2caace245999",
        "cursor": {
          "ref": "a91428d7-a3b4-42a3-a5b4-8b4c020a5bc3",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8470dfdc-4794-479c-8caf-9ace6dadf644"
        },
        "item": {
          "id": "4496e34d-5f4c-487f-bd9c-2caace245999",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "031144bf-9fce-4c78-8835-e7f56f99d8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa11a04-09aa-4455-a366-d35bda264201",
        "cursor": {
          "ref": "9f321a19-13c4-420f-8965-99620ed75e13",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "533906c6-3c28-48e3-99e2-e2aad576f780"
        },
        "item": {
          "id": "0fa11a04-09aa-4455-a366-d35bda264201",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5293ae3e-43b3-41c5-8341-2eda94ca9d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a4dce2-e269-48c9-9d03-da976eb62077",
        "cursor": {
          "ref": "c7574c0d-e146-4164-98f0-1b2e24944294",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b5cf31d0-34ac-450c-a09d-a08d1f25c18f"
        },
        "item": {
          "id": "41a4dce2-e269-48c9-9d03-da976eb62077",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c4f7d63a-5fc1-48de-a469-2cde31a717e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2d541c-50cf-4e97-bfb1-04b59c49a7cd",
        "cursor": {
          "ref": "d72b45f9-a40c-42f0-ab90-e1271da873c9",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9c2aacd6-e219-470b-b21b-53cc0ebff0a2"
        },
        "item": {
          "id": "ee2d541c-50cf-4e97-bfb1-04b59c49a7cd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b4e6902d-11ea-4731-8684-5dfdda83a234",
          "status": "Created",
          "code": 201,
          "responseTime": 612,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f4df75a0-7fc4-4abd-987e-0f474c1da2d1",
        "cursor": {
          "ref": "79747d6d-20ea-48be-96eb-00f853295564",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4f0020bc-d338-45c9-81a6-625e71c70131"
        },
        "item": {
          "id": "f4df75a0-7fc4-4abd-987e-0f474c1da2d1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c6934202-3858-4be9-a687-c83a1758e65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d540a9c-d88e-4584-aebe-9477d39a5cc6",
        "cursor": {
          "ref": "7753e1b7-dca7-42f3-a852-ac577b0fbe43",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d68157e7-5357-4078-8bb7-6947cad352bd"
        },
        "item": {
          "id": "3d540a9c-d88e-4584-aebe-9477d39a5cc6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0d8473c6-9d6e-48df-a5a8-ee6e67740968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2776106-7027-4563-b51a-b007dac41068",
        "cursor": {
          "ref": "1fe94c50-3c63-4956-a445-c5170e1d8ca7",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0a645bda-0554-4c55-ab94-fe40b8d748a1"
        },
        "item": {
          "id": "f2776106-7027-4563-b51a-b007dac41068",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e0283121-e0d6-49c7-9544-49d40770cfc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0641965c-b023-4269-af36-0d8f4a7d0354",
        "cursor": {
          "ref": "cedd251a-3cbc-4903-aaa6-734c27fd7d1d",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a2b2474b-7c17-420b-8b53-25447ea35f49"
        },
        "item": {
          "id": "0641965c-b023-4269-af36-0d8f4a7d0354",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c7f5fa11-d894-4b70-9f43-ba0485b3b61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308a8e1b-5d67-4c49-b3fe-a69abdb7a223",
        "cursor": {
          "ref": "57e5e246-ca67-4d20-8016-640b1a1a10a7",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5e513185-3d4b-41b1-bf4f-7060be9e10a6"
        },
        "item": {
          "id": "308a8e1b-5d67-4c49-b3fe-a69abdb7a223",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f2dd11e0-771d-4fb7-b2be-af533be0773a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7759f8-fc3d-47f5-8503-d5a617446add",
        "cursor": {
          "ref": "198608ec-0a31-4e95-bee6-96b9f9420667",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "910651b5-af7b-4c38-8612-310f5e6f16c0"
        },
        "item": {
          "id": "ab7759f8-fc3d-47f5-8503-d5a617446add",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "98c44e81-0496-4794-8829-d49da7e1d22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8970acf3-1e69-419e-ae9f-ad9a2e0ea30a",
        "cursor": {
          "ref": "1136875c-ee5d-4ebd-9dfe-0d65d2911d95",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "346f6188-0e6e-46c8-823c-98b72f107049"
        },
        "item": {
          "id": "8970acf3-1e69-419e-ae9f-ad9a2e0ea30a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3a1398e3-f330-4fd8-80c4-b62c6dd6640a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd0355e-6742-442b-a69c-34318e114e66",
        "cursor": {
          "ref": "d56435be-818c-42d3-9627-9b8aa3b074d1",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8d707f39-1ab0-4509-ae5b-d9be69a90076"
        },
        "item": {
          "id": "fbd0355e-6742-442b-a69c-34318e114e66",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "74967c5a-4b72-4e01-a1e9-f046a4b584ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8559aa3-e530-472a-a6a9-924bb19db3bd",
        "cursor": {
          "ref": "1c26b846-0825-44ba-9296-928e0364f578",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0bc96663-8f08-4fe0-8aa3-1278805f9bd4"
        },
        "item": {
          "id": "b8559aa3-e530-472a-a6a9-924bb19db3bd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a0820896-a348-47a6-9826-1d103546d638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdbe4a1-903b-4849-a378-f58a023a39af",
        "cursor": {
          "ref": "4be90216-3af2-494a-94af-a01c9bf783e8",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "86a38fcc-a017-4951-a82c-56c31e10249e"
        },
        "item": {
          "id": "5bdbe4a1-903b-4849-a378-f58a023a39af",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "427ca7df-f32e-474f-80bf-92b9cd5c760a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95214b1-fa9a-482e-b4b0-9c96a283ef62",
        "cursor": {
          "ref": "c3747a8f-5532-443f-a860-e62fa9664f0b",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "08ca429b-2450-4fe7-920b-0c99ff1b13a1"
        },
        "item": {
          "id": "c95214b1-fa9a-482e-b4b0-9c96a283ef62",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d23659f3-526f-4a88-8897-6287c89476c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98de6b73-da4e-4d15-a781-5cba44f526de",
        "cursor": {
          "ref": "fa468d77-c552-4120-8456-1afdf83c0289",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "48a75479-33a0-4886-bff7-e524f2d03939"
        },
        "item": {
          "id": "98de6b73-da4e-4d15-a781-5cba44f526de",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2e7e8333-14d6-466e-a9a0-56091cfa92c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27acd41d-0e99-4a2d-8b36-9666e8efd1ee",
        "cursor": {
          "ref": "9f6f04c4-76f6-41b3-a9a0-2db40c92b7ac",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fe95e7ce-5538-4cd8-9bc3-339a65016e9a"
        },
        "item": {
          "id": "27acd41d-0e99-4a2d-8b36-9666e8efd1ee",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4bb7c2da-d058-4e66-8c56-c541dee9f4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 376,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3c99a8a5-578f-412a-a968-ca9191d302b1",
        "cursor": {
          "ref": "f62910ef-d2ad-4fa1-bc0b-cf599f74bd63",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "53396c5c-45f1-4e3e-a62e-642b99ce2ca1"
        },
        "item": {
          "id": "3c99a8a5-578f-412a-a968-ca9191d302b1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f99efcf0-8a91-4890-bec1-a7f5f41a3404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ced329-948c-4a8e-bb09-ec32d6433341",
        "cursor": {
          "ref": "943531da-1a3d-4a25-ae78-07a8314c9c54",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "99f37dab-b44c-4a2f-a48c-82079ce7cf03"
        },
        "item": {
          "id": "81ced329-948c-4a8e-bb09-ec32d6433341",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "97d69f83-2140-40b9-9681-3551870475c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23e4fd9-7be6-446b-b721-ea1e9772e16e",
        "cursor": {
          "ref": "3f5a1661-d14f-4e5a-8195-f207333f5ef3",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f4e527fb-e846-4e15-9154-855e2d7664dc"
        },
        "item": {
          "id": "b23e4fd9-7be6-446b-b721-ea1e9772e16e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "89774e70-c143-4111-826f-c8f8258e0001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dca9372-86d0-4a02-b3fb-1513da356a96",
        "cursor": {
          "ref": "cddbec11-fa95-4b79-b6d2-bf93af7a1aa4",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aad28c1e-4be2-48d9-bec9-ac5d1ed2bec3"
        },
        "item": {
          "id": "7dca9372-86d0-4a02-b3fb-1513da356a96",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ec469e69-f7e8-4eb7-bd03-2370d9f11b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4149f7-f48c-47c7-b748-d20ee4f43aef",
        "cursor": {
          "ref": "5386b42e-ce2a-47ef-b2b8-dbdc306d28cd",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "36ae4bc3-31fd-4243-a240-f4d4bbf3b4e5"
        },
        "item": {
          "id": "2b4149f7-f48c-47c7-b748-d20ee4f43aef",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d7ce4585-780b-4911-9462-2ced4900dea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baaacc3e-4505-44e4-83c6-d0848bd5552e",
        "cursor": {
          "ref": "9bc38c62-3535-488b-b73e-081452f88a12",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e17efecc-f017-4105-bc8d-7171c3de5e65"
        },
        "item": {
          "id": "baaacc3e-4505-44e4-83c6-d0848bd5552e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "239b9423-7991-4e11-9257-3113dc16053e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f0a795-e1ad-43e8-8c77-896f7ed58f81",
        "cursor": {
          "ref": "eedcb7e4-35cd-48e0-b304-9653da686d83",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0c8aca86-ea39-43b6-8bc5-0f442fa653ca"
        },
        "item": {
          "id": "72f0a795-e1ad-43e8-8c77-896f7ed58f81",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c0c07cad-8e62-4faa-a492-e02eef897571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "9b5ead46-3198-4bb0-847c-64c101334919",
        "cursor": {
          "ref": "9f4fd5a3-7070-4988-8304-35f54f668339",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7d8e3c21-88a1-42eb-bba5-a4c867c05e92"
        },
        "item": {
          "id": "9b5ead46-3198-4bb0-847c-64c101334919",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e3e407a8-6345-4f2f-bab2-65c4bd530a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b1fa62-f844-49a9-a24d-03c773875a76",
        "cursor": {
          "ref": "ca55efb2-a836-4aa5-bca7-0755d1a062df",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "234fa786-dd95-41b3-9851-4707009e9d54"
        },
        "item": {
          "id": "d4b1fa62-f844-49a9-a24d-03c773875a76",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f6eec530-0295-4a1f-a3cd-57c6bc93d505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8440317-c33d-4869-83f7-d46fd463425f",
        "cursor": {
          "ref": "7f5db47b-77d5-431f-9707-4126fd6c9303",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5a47008a-8bf2-44b0-8b9d-ac0bcf9320dc"
        },
        "item": {
          "id": "e8440317-c33d-4869-83f7-d46fd463425f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ff5fd94c-6559-4afe-ba28-4d52462142d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aedd92d-95d1-4b5f-85f0-fde5ef7f2d05",
        "cursor": {
          "ref": "2e6f72e6-281b-4380-a66c-9dfeaecc2c6b",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e70b78aa-53cd-4e8d-9c5e-d2a671c4d792"
        },
        "item": {
          "id": "2aedd92d-95d1-4b5f-85f0-fde5ef7f2d05",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cafe03d4-d9d7-4246-ac02-572003e036a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c5b607-948a-468e-b44b-7491c410945a",
        "cursor": {
          "ref": "4ef38fdc-a2b0-4172-ae3b-4d50250b1371",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "06cc1924-37f4-4b28-bc1d-8f6010f7f650"
        },
        "item": {
          "id": "07c5b607-948a-468e-b44b-7491c410945a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d45cb195-83d1-4745-b8e0-6cbf34c88a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb35826-1d32-48d9-a9bf-dda5bd7b0183",
        "cursor": {
          "ref": "5c31b72a-a6d4-4c3c-bed1-1a57c3df3c5c",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "263595f6-ae96-4240-b98a-23c494d1abe8"
        },
        "item": {
          "id": "4cb35826-1d32-48d9-a9bf-dda5bd7b0183",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2ab1acc0-521c-4c02-85f4-7dacd97d55b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da586aa5-6ad7-4b1a-b0cb-fc38c0e7183e",
        "cursor": {
          "ref": "22f8c690-c993-48c7-be49-3fe50852a485",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2f16dc66-16c3-4217-92ff-d528b724a0f1"
        },
        "item": {
          "id": "da586aa5-6ad7-4b1a-b0cb-fc38c0e7183e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5c638bd7-59fd-4484-9038-0b9532308028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d78fa67-6f86-4fab-8589-451b27405823",
        "cursor": {
          "ref": "ea8c4bfd-a86e-457b-97e4-f90b339688d7",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ef1fe425-2776-4766-b49e-9126f21d00c2"
        },
        "item": {
          "id": "2d78fa67-6f86-4fab-8589-451b27405823",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4a52ca9e-b8c5-4de5-9a8b-fcfca5c10684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007d27f0-68ff-48bd-98ff-b0df99ac8377",
        "cursor": {
          "ref": "f13fdeda-8db1-495c-9404-17107ef8a314",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "97d1073f-9c1c-41c1-b942-f36f0170cf64"
        },
        "item": {
          "id": "007d27f0-68ff-48bd-98ff-b0df99ac8377",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ae303dfe-ffda-45de-9a41-034788a20b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f07b2dc-b265-439d-9781-dd9b1ae54aac",
        "cursor": {
          "ref": "3cef73e1-ee91-49b8-aa5b-ce4b652c9fa9",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f9cf85f0-9ac9-4684-be16-4ab64aa15a6b"
        },
        "item": {
          "id": "5f07b2dc-b265-439d-9781-dd9b1ae54aac",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ece6f970-1b06-47d6-9fd6-27ba6563a97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22118f5a-1c55-4a66-9b6a-34c3ce9658dd",
        "cursor": {
          "ref": "889db61e-7fd4-4f93-817b-7461605b1b9f",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "576440e6-bb85-493e-add9-5647c658d1be"
        },
        "item": {
          "id": "22118f5a-1c55-4a66-9b6a-34c3ce9658dd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6be4c265-d1c4-459a-8b36-e2d7ad991268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 420,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5bdb1f-495d-4cd8-9bd8-c9ac0a7bfd80",
        "cursor": {
          "ref": "805d9789-68c9-4ec8-b7a5-6056555a0523",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ccec940a-efde-4fb3-b06d-98f8c19590af"
        },
        "item": {
          "id": "4c5bdb1f-495d-4cd8-9bd8-c9ac0a7bfd80",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a1110a7d-a6ad-47e1-9d88-e61251d40a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd3f4f0-cd00-4d9c-a9c7-c09765c361f9",
        "cursor": {
          "ref": "bd4fc624-9083-4d15-a5cb-55174af7f034",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "96596791-09ad-49e5-b04d-40e71304dfa9"
        },
        "item": {
          "id": "cfd3f4f0-cd00-4d9c-a9c7-c09765c361f9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bc2b1e54-a7c0-4505-880d-caf6aa581406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7394d81d-2013-4f50-8f59-4cc76f227aa4",
        "cursor": {
          "ref": "0fde19a4-8110-457e-ad54-fb3ecb2539d4",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6f97f601-b9d7-42b2-9927-5d0536d01e5b"
        },
        "item": {
          "id": "7394d81d-2013-4f50-8f59-4cc76f227aa4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "97c3ac16-b37e-4b0d-be6c-2071eb5f2cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514bba9c-09d8-4a0d-ad04-1ea62c655866",
        "cursor": {
          "ref": "6b824d56-fcf2-434b-a0b0-dcecef4e95b0",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ad5696bc-a83f-4475-b19a-bbbcd23479e4"
        },
        "item": {
          "id": "514bba9c-09d8-4a0d-ad04-1ea62c655866",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "be40ed08-5f60-4268-9507-dc13e4499b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc78ec0-19cd-4b74-b408-420139037ac5",
        "cursor": {
          "ref": "c3847380-ca94-45c7-ac4d-a0d11a0b509e",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f45fe980-d18b-4f73-9d44-bf51137b5c3b"
        },
        "item": {
          "id": "6dc78ec0-19cd-4b74-b408-420139037ac5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9f774123-74bb-4630-a0ff-3271eac0d278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4aff324-dd44-48da-9645-deaca40b69dc",
        "cursor": {
          "ref": "ad5b5099-8c5d-4d99-a1e8-217daea91a04",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ab3f0687-4ca0-4838-87c9-4e0758eb65c5"
        },
        "item": {
          "id": "a4aff324-dd44-48da-9645-deaca40b69dc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "afc7e290-e07f-43ce-8c1a-aa2a56852cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 368,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d808e6be-f0a4-46c0-8b96-efe0a07b12c8",
        "cursor": {
          "ref": "aeffc137-7d44-4481-b82e-34a5238231ee",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a781d7d1-e54e-4b0d-84ec-94d58d4075b6"
        },
        "item": {
          "id": "d808e6be-f0a4-46c0-8b96-efe0a07b12c8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f3e835a5-2aa9-4ab6-8dc6-8668f506908c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f7466d-c34e-4924-a436-95f0601f8e80",
        "cursor": {
          "ref": "2d2ca363-991c-46f0-bb88-e6a4b23beea5",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b4ddeec2-fa23-41c9-8f23-7f92aa487d0e"
        },
        "item": {
          "id": "d0f7466d-c34e-4924-a436-95f0601f8e80",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "99f8725b-6830-4d67-a5fe-6ee0254f497f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e62d39b-96f5-4d1a-9b28-681eda969cbc",
        "cursor": {
          "ref": "0d3dcb8d-139e-43de-a058-082f442ed110",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1acc5e67-cc65-4e51-ab3b-44c185f93018"
        },
        "item": {
          "id": "0e62d39b-96f5-4d1a-9b28-681eda969cbc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e2e31264-dac5-4406-9687-4094abb36ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed8f29b-2d26-46e6-a30d-f5330907e1c0",
        "cursor": {
          "ref": "f6adf271-b3b0-46c0-b79e-2b96b6d9026c",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "90dd92fe-0298-4ebc-a2e1-f9a559c30b5e"
        },
        "item": {
          "id": "9ed8f29b-2d26-46e6-a30d-f5330907e1c0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4a3bff7e-ac55-4c8f-85c8-2b8bdd5b2416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bff2369-4ad7-44c6-a481-04b310dc32d8",
        "cursor": {
          "ref": "45b88107-789c-4655-84f9-d38c58695e2b",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9a1ef562-6cb1-49fc-a47c-6d9f79a81466"
        },
        "item": {
          "id": "6bff2369-4ad7-44c6-a481-04b310dc32d8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a1ebec54-7a86-4e9d-8e68-39229b4bf843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f3fdf8-b626-4899-8174-964c6794b9e7",
        "cursor": {
          "ref": "f103d820-7114-4d71-82eb-65a3a5596089",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "08f0b929-7359-4ea2-bbcc-3bf8a8d5d64a"
        },
        "item": {
          "id": "d3f3fdf8-b626-4899-8174-964c6794b9e7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f229bed6-f4a5-4db1-9327-92371d215e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c01e38-19d4-4c75-ae60-44ab4970bc65",
        "cursor": {
          "ref": "b7f0a616-5f8f-47ec-a499-9faeafb8e0b6",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "156ebd25-6f21-4d85-a49d-667b74f3fbba"
        },
        "item": {
          "id": "87c01e38-19d4-4c75-ae60-44ab4970bc65",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "195a37a3-541b-4736-a7c0-c7f1e7b55ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73248b4f-cc5d-4f3d-8dd4-97e60133de99",
        "cursor": {
          "ref": "6bc4bd4e-01ce-49de-bcf9-f7a084f319f1",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "396d0f07-904a-43e5-8804-4f2a65c17718"
        },
        "item": {
          "id": "73248b4f-cc5d-4f3d-8dd4-97e60133de99",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4976a854-522a-4744-98ae-582ccd90c74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78960dd-c34d-4b83-b25b-df30581d68e2",
        "cursor": {
          "ref": "ab4e4a25-ad4f-4e61-a041-e9d69766a241",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b6b89567-9958-489f-96dc-8380b8f4b50c"
        },
        "item": {
          "id": "a78960dd-c34d-4b83-b25b-df30581d68e2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "60415709-2cf7-4dc9-bb52-89e037b44354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d19d09-4127-45c7-9582-2f05fad5fe49",
        "cursor": {
          "ref": "93e13652-9fca-4d5c-8e4b-074af131ddbc",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0d2c59d2-673d-4436-87ef-8045a21fba10"
        },
        "item": {
          "id": "55d19d09-4127-45c7-9582-2f05fad5fe49",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a268f48f-cef9-4729-9df2-e3d51431db44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa76a6e-6957-416d-9cf5-e3e86be44c51",
        "cursor": {
          "ref": "7c0c5a03-2384-4fbf-8394-1739a02afc6d",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "30fa8e55-6c0d-433a-b382-99b74442715b"
        },
        "item": {
          "id": "baa76a6e-6957-416d-9cf5-e3e86be44c51",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5b680d9f-5f4a-4791-88b6-b43126732e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d223b842-cc23-4dff-9f75-2f5ec56e6967",
        "cursor": {
          "ref": "f12510bb-0d5d-42c8-bb54-6b52e20ff84e",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "00a82dc0-0f25-4b88-bade-6010bfd2f592"
        },
        "item": {
          "id": "d223b842-cc23-4dff-9f75-2f5ec56e6967",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0987b4ae-7444-492e-a138-5aad9da19ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa94a94e-8fb2-41d7-a702-ac6baaba07eb",
        "cursor": {
          "ref": "e6815ff7-1895-45da-8b8f-e8c704b6dc82",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4e460b7d-367e-48bf-8852-fcf27ad3d86d"
        },
        "item": {
          "id": "aa94a94e-8fb2-41d7-a702-ac6baaba07eb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "399874ec-a2d6-4e27-ba99-a153dad45831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc5c350-5edc-4ebb-8c65-94ee5289101d",
        "cursor": {
          "ref": "0b02a1f4-c469-463d-a606-eb09ad489786",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f9650485-ac5c-4537-9df1-931b1569c05e"
        },
        "item": {
          "id": "8bc5c350-5edc-4ebb-8c65-94ee5289101d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c0a6a2f3-3931-4e29-8e73-3f1e2ed8839e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 542,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2111c34a-90eb-45c9-9d19-8d292c4ef322",
        "cursor": {
          "ref": "26f31440-1d7a-47f0-8fe8-285e39917e7c",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f9b40388-87c1-4d5a-b4e6-96fddffee937"
        },
        "item": {
          "id": "2111c34a-90eb-45c9-9d19-8d292c4ef322",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8816fc30-c83a-436a-b99a-849544f93c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8813eb-8cd1-45c9-9094-cab7f128f18d",
        "cursor": {
          "ref": "c37c8f52-25e8-4b5b-aa33-83a852789edf",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "725fb1d9-7229-484e-bab3-aad5d3e3b281"
        },
        "item": {
          "id": "5e8813eb-8cd1-45c9-9094-cab7f128f18d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d1fbca70-702e-4b37-a1ac-4696ece4b1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0e04df-bbc6-4f07-b2e2-15847f009edf",
        "cursor": {
          "ref": "fb0f1704-99d5-42b0-b63d-6cebfbd97f14",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0c394e8a-0af9-4121-9e23-7f6f1ce3e6b0"
        },
        "item": {
          "id": "3e0e04df-bbc6-4f07-b2e2-15847f009edf",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7b012fd1-9036-4127-942e-e7bc3d80f74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de74b998-d3c0-4594-b4e7-8fa13d6dec13",
        "cursor": {
          "ref": "649d2825-eab4-449c-a525-7c2ad4f8053f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b6f2fda6-dbd4-4078-95e3-f4180b0763de"
        },
        "item": {
          "id": "de74b998-d3c0-4594-b4e7-8fa13d6dec13",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "14ff8430-2ceb-410b-97aa-4abea3383821",
          "status": "Created",
          "code": 201,
          "responseTime": 3061,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "5ed107ff-e967-4e19-9e82-c164e7fa501b",
        "cursor": {
          "ref": "0e3057c2-379b-4416-8090-34981343ed53",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8c6bf38f-559a-4f63-a769-07ac813ce53e"
        },
        "item": {
          "id": "5ed107ff-e967-4e19-9e82-c164e7fa501b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "42396485-462f-4ad3-99fa-3cc426adda76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f861edb-e931-4d18-a656-9668eb04ec17",
        "cursor": {
          "ref": "3a788daa-5631-43af-b530-72188543fcbb",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5b34aee1-1b2e-4411-81c2-e7985266153c"
        },
        "item": {
          "id": "6f861edb-e931-4d18-a656-9668eb04ec17",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f97d0740-3834-48fb-9a63-6d7dd5175465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e29a5b-9a82-4123-ab18-930d5af2b163",
        "cursor": {
          "ref": "a66a328d-6b66-4c64-8746-f7518007f983",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f608bdce-dc44-4a97-bae1-40943f592cb3"
        },
        "item": {
          "id": "60e29a5b-9a82-4123-ab18-930d5af2b163",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c949e5f7-0d83-4bbe-8e1d-15374383e585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1704e01-cde6-4e3c-81b7-cb889b48a25b",
        "cursor": {
          "ref": "d7fdf1f3-8f37-4b1c-9c3d-2ecb36357224",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "49ba116a-78b9-4a4e-90c7-ca648fcc9b1a"
        },
        "item": {
          "id": "b1704e01-cde6-4e3c-81b7-cb889b48a25b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e4d12868-518d-49a2-aff1-8f561954615b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e412b1-d858-4bd0-b617-2b84ccbf9faa",
        "cursor": {
          "ref": "54ec2cc4-c1c3-45c7-80bd-a677fef4859c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "849b1fc1-013d-49f1-9c0b-0b9ddda04d13"
        },
        "item": {
          "id": "81e412b1-d858-4bd0-b617-2b84ccbf9faa",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "15d3cabf-484a-42cb-9240-947722bb6670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3269b3a4-1397-4b39-834b-361d167bceb5",
        "cursor": {
          "ref": "eb710a49-a8b5-47a4-8389-1efe354657b3",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1527ad6b-0862-4d71-acb3-811bff43fd6f"
        },
        "item": {
          "id": "3269b3a4-1397-4b39-834b-361d167bceb5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6ed6534a-30a2-4a9e-9f62-965a76c1f58b",
          "status": "Created",
          "code": 201,
          "responseTime": 685,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "42cd1e48-0a4f-4f90-877f-4c2cdf056f26",
        "cursor": {
          "ref": "52513c7f-4cb9-4cce-852b-447ec77bc2f8",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "54ff0474-995e-464d-bfdd-43ceb708985a"
        },
        "item": {
          "id": "42cd1e48-0a4f-4f90-877f-4c2cdf056f26",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "fc998e62-4f0d-44f5-9d31-c842cab8e192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10182f29-817e-4f7c-b1e3-d46f98ecc831",
        "cursor": {
          "ref": "b90ef0c7-545b-4f7d-ad7e-93816a6ed645",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d03dc290-fb95-42f3-b1ec-730835e19cf4"
        },
        "item": {
          "id": "10182f29-817e-4f7c-b1e3-d46f98ecc831",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "73fa995e-b3cb-42c6-ad0d-a585e368b061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7aa1871-e9d2-49fc-b38b-baeefe878a1c",
        "cursor": {
          "ref": "647d4ec8-576d-4e1a-a7db-e4f4795da932",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "505469e8-1b93-40d3-8422-aab634176e9f"
        },
        "item": {
          "id": "d7aa1871-e9d2-49fc-b38b-baeefe878a1c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ad75afaf-77d1-406f-acc4-d33b92315e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501fe457-29f0-4659-b785-592ff859dcd1",
        "cursor": {
          "ref": "3aec8743-7ca4-4720-b24b-014df043cfec",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "eb73ae4a-fc21-47f9-abdd-448ba8511733"
        },
        "item": {
          "id": "501fe457-29f0-4659-b785-592ff859dcd1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "feb3e5e4-21f3-4b67-98ce-aff07aabb41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07057a7a-18c4-4d67-bf5e-c7e5e110d91e",
        "cursor": {
          "ref": "b095933b-e530-40c4-95e1-a2e86f2394a4",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3710acf3-4ddc-418d-a327-7b65d6bc22e9"
        },
        "item": {
          "id": "07057a7a-18c4-4d67-bf5e-c7e5e110d91e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8e2095a9-b488-41ca-8154-a1ec5fc7815c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb1ef3e-a486-4148-a03d-eef9838e48b6",
        "cursor": {
          "ref": "70bff58d-9faf-45a5-b3f1-0467f9bc6857",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c432581a-0dde-435a-b8c5-3ffcebac4349"
        },
        "item": {
          "id": "3eb1ef3e-a486-4148-a03d-eef9838e48b6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bde6f054-41ac-4435-be9e-8d209747485e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b1ff4c-89dd-40cf-8602-1a9dc36d8531",
        "cursor": {
          "ref": "2476c4bd-0426-49b7-ba4a-8e650bf021f2",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fe6300bb-f3ab-438c-a635-90dd20ba4d93"
        },
        "item": {
          "id": "e1b1ff4c-89dd-40cf-8602-1a9dc36d8531",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "59ea7e7f-6328-44ae-9a71-32bdcc0891c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437d82f1-f46d-4f38-b6ba-e848b105a9ee",
        "cursor": {
          "ref": "dc644f6d-7898-4415-8090-979590f3a3ba",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ab9c97e5-5fe6-47e2-88af-a9617ebb42e1"
        },
        "item": {
          "id": "437d82f1-f46d-4f38-b6ba-e848b105a9ee",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f2d4ff79-5603-43aa-a81e-cdc2e442d311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2029d1-14a2-4e4e-95e3-96954942c67e",
        "cursor": {
          "ref": "f015fe37-5849-408b-8187-869f61c6f25b",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fb454813-d4b0-4c51-97bd-0776ed3b1d90"
        },
        "item": {
          "id": "ad2029d1-14a2-4e4e-95e3-96954942c67e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "68326f21-a37d-49ae-aabd-f52a2aeca5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "26cc41ea-559c-4b34-952b-79e86114ead7",
        "cursor": {
          "ref": "d73f4b17-82dd-48f4-aabc-43e6d2e2d6b4",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5bb1cf22-e2f8-45af-8e1f-72266b9c2449"
        },
        "item": {
          "id": "26cc41ea-559c-4b34-952b-79e86114ead7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "56cfbd8e-84f1-4fcf-90eb-e20a37f96392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "75ead6b0-b1e5-48c0-a6bb-e64c3be4ee86",
        "cursor": {
          "ref": "aa5085a7-7806-4eed-b717-1327acfb4339",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "00782be3-2d1d-4a08-9912-2419b0d05559"
        },
        "item": {
          "id": "75ead6b0-b1e5-48c0-a6bb-e64c3be4ee86",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0ed2846d-26d0-4148-b2a3-cd36926e3ed2",
          "status": "Created",
          "code": 201,
          "responseTime": 1025,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eedd42-1fa2-4133-8e9f-a73060c6c958",
        "cursor": {
          "ref": "4aff3fd8-8c11-4582-8613-d9ff748158f3",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "00ed2798-5083-4b0d-815f-aba3f65614a3"
        },
        "item": {
          "id": "d3eedd42-1fa2-4133-8e9f-a73060c6c958",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "876b9d7e-8a0b-41d1-8df9-d62046e96455",
          "status": "Created",
          "code": 201,
          "responseTime": 667,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab66512-1d99-4d2c-a402-5aa2bfa2589b",
        "cursor": {
          "ref": "682fcb63-c64f-42d6-9171-7e64d3c5663c",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "735e5d63-3c95-49a7-8ab3-03c6e1a02c8e"
        },
        "item": {
          "id": "5ab66512-1d99-4d2c-a402-5aa2bfa2589b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d7bf4712-90e3-4a62-b8c3-33d8c109e635",
          "status": "Created",
          "code": 201,
          "responseTime": 462,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d1d3a60-3805-4cd8-b4c2-eb092f80a41b",
        "cursor": {
          "ref": "200a1b2f-493a-4bd1-acc4-d2da3fcdab02",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "63479c69-22d0-4f1f-904a-f6d7c05f5f62"
        },
        "item": {
          "id": "4d1d3a60-3805-4cd8-b4c2-eb092f80a41b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7fa82528-11a9-4c33-88fc-fec31ef1a7e4",
          "status": "Created",
          "code": 201,
          "responseTime": 544,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "054365af-5bae-4575-aca7-d151e7374765",
        "cursor": {
          "ref": "fadd03da-0c66-40c6-b625-ffd648c9832b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0bf330ae-1a5c-4066-98ff-407ff83f5f13"
        },
        "item": {
          "id": "054365af-5bae-4575-aca7-d151e7374765",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e202a078-f50c-47d7-b77a-54af6bd0325d",
          "status": "Created",
          "code": 201,
          "responseTime": 541,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b66866-4db8-4c44-9da2-924749e3ea90",
        "cursor": {
          "ref": "f67445db-ec0f-4ae7-a64c-9c2e0f2c3805",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c2050078-b2fd-4b7b-a023-843b828bf587"
        },
        "item": {
          "id": "a3b66866-4db8-4c44-9da2-924749e3ea90",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c9b521cc-2a85-40a6-a70a-7474992e0cb7",
          "status": "Created",
          "code": 201,
          "responseTime": 978,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03aacf5d-4a39-4182-b29a-74c38c811673",
        "cursor": {
          "ref": "393a06d6-33e3-4580-942d-dc634077d1d4",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b699d1fc-bed1-467a-97a9-231a33e7c9b6"
        },
        "item": {
          "id": "03aacf5d-4a39-4182-b29a-74c38c811673",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "565312c6-7b46-4ac2-8ede-881dfecf7aba",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "03aacf5d-4a39-4182-b29a-74c38c811673",
        "cursor": {
          "ref": "393a06d6-33e3-4580-942d-dc634077d1d4",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b699d1fc-bed1-467a-97a9-231a33e7c9b6"
        },
        "item": {
          "id": "03aacf5d-4a39-4182-b29a-74c38c811673",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "565312c6-7b46-4ac2-8ede-881dfecf7aba",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9805aa89-c843-4729-a38a-ecaa9d9b4685",
        "cursor": {
          "ref": "9e26a1b1-85cf-43bb-ba58-8b3d36257e07",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "691fe3e1-01eb-4bcd-a9f4-9285296f79e5"
        },
        "item": {
          "id": "9805aa89-c843-4729-a38a-ecaa9d9b4685",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "92cf478f-06a0-4adc-ad45-082993fbede0",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "64231f14-b545-4373-a260-51d5ac432c50",
        "cursor": {
          "ref": "03a3d33d-999e-4cbb-9430-b8f71936123c",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a4164dd6-d314-4b7e-b11c-5c5cee2a889b"
        },
        "item": {
          "id": "64231f14-b545-4373-a260-51d5ac432c50",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "571e0c47-7b08-406c-bd12-40070d9d7273",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a2a0c77e-91d0-4dde-8227-7aa222be3f8b",
        "cursor": {
          "ref": "30555e91-98f2-4e8c-bd7e-c7acbe7498f2",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8f031557-2cb3-4774-a2c2-19fea53e3441"
        },
        "item": {
          "id": "a2a0c77e-91d0-4dde-8227-7aa222be3f8b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ebff109b-f002-4aac-96bd-17dfacd750c3",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "adae93fa-b603-4a18-8106-87c4c5142fd8",
        "cursor": {
          "ref": "e9cb35ed-77fb-44b1-94e6-a4ea08df7bfb",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7853782b-7838-4c24-abf8-128c54e6889b"
        },
        "item": {
          "id": "adae93fa-b603-4a18-8106-87c4c5142fd8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "adcc1e4f-109b-49ff-a2e9-29b32abd9d06",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "8fbdfa10-4ed6-4335-a384-5949ec08e431",
        "cursor": {
          "ref": "b3e3f1f8-860c-4f94-820f-edb17d0bef30",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8e963f6a-1de8-44e1-b42c-5483fb7a2c25"
        },
        "item": {
          "id": "8fbdfa10-4ed6-4335-a384-5949ec08e431",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2e90d25b-e7ed-45c2-a006-51e748b1bd63",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "04588b4d-ca5b-47bf-ac33-2d0426d66150",
        "cursor": {
          "ref": "add5eaf1-db46-477d-a5d2-b9a336009db7",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "779924bf-0294-401f-a62a-bcbce12b2ebd"
        },
        "item": {
          "id": "04588b4d-ca5b-47bf-ac33-2d0426d66150",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "93c24587-d4da-457c-8d81-f9d8c13b1f42",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "80df5a5a-7168-48eb-9fd7-0c65eb45b895",
        "cursor": {
          "ref": "73621c43-a5f1-40ee-ab16-8ce9b255bcc5",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8d514dce-f9e4-489d-a2f1-6fe4756fdfcb"
        },
        "item": {
          "id": "80df5a5a-7168-48eb-9fd7-0c65eb45b895",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "06c79c4f-2e0f-43df-a281-f7479bb9775b",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b63194e0-0263-4899-a3db-0b4cebfe1c48",
        "cursor": {
          "ref": "2d131605-8151-448c-99f4-56f40b897c45",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "75a1a457-0309-4047-9323-02aee87bea31"
        },
        "item": {
          "id": "b63194e0-0263-4899-a3db-0b4cebfe1c48",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "76864943-fa44-41c6-a482-cc00d09708ab",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "8bc28a6b-41e6-4afb-8455-321ca16a766c",
        "cursor": {
          "ref": "bda1d8fd-82ad-446c-ac3f-4765d611c7cf",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a926c686-364e-4747-8441-d3db17816801"
        },
        "item": {
          "id": "8bc28a6b-41e6-4afb-8455-321ca16a766c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7b64b2f1-148d-43ea-b31d-6d0297247e6c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8871b069-1027-4ba8-9653-e741a8e42da0",
        "cursor": {
          "ref": "094bd08e-74bd-4c69-8287-89c193be6ecf",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "83e4abed-a99c-48ad-b455-bf7098bc9759"
        },
        "item": {
          "id": "8871b069-1027-4ba8-9653-e741a8e42da0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d56990b8-d622-49f4-8c44-c25cac3ef502",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "91caa429-80d7-4408-a43b-59ed74d6ac20",
        "cursor": {
          "ref": "a833b90b-8d5a-4620-8345-f2e86cc586de",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9d71c3a4-7b13-4a05-a365-89fda76a0aea"
        },
        "item": {
          "id": "91caa429-80d7-4408-a43b-59ed74d6ac20",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4b33c4d4-fa2b-42d1-a32d-234c76fa2694",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "70ad8d9e-648f-405b-9931-705937b44e12",
        "cursor": {
          "ref": "f507f417-2dc6-4ec4-89a7-566401f84140",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0f15c9e1-3108-4193-b7c0-749af6bebc68"
        },
        "item": {
          "id": "70ad8d9e-648f-405b-9931-705937b44e12",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4786a386-d7b6-463b-b7ea-f5fb72f3d14f",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c20b9efa-afef-482e-858e-87725a8fe9da",
        "cursor": {
          "ref": "199cd337-56bc-41a2-8917-5dee1a3a5865",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1a98528d-aac7-433f-98e7-5ac05b051c24"
        },
        "item": {
          "id": "c20b9efa-afef-482e-858e-87725a8fe9da",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "27e686c7-53f1-4c0a-a0a1-a2772f28ab4b",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "0e7d4bec-a30d-4116-8fe1-9a1f92e4821e",
        "cursor": {
          "ref": "63d33a6f-3c65-4922-840a-1f96fd29746b",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "379f88be-b959-45b5-8ffd-d434dc49648f"
        },
        "item": {
          "id": "0e7d4bec-a30d-4116-8fe1-9a1f92e4821e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8668c456-05fe-4a94-8324-c77cbd7a6f23",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3fac5f68-e66e-4aa4-8e1c-27e0f9a8bccf",
        "cursor": {
          "ref": "feea2c16-5050-4e53-ab0c-90e2df1cc700",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5cf9b786-d2ba-461e-a94b-b435cfe4eb28"
        },
        "item": {
          "id": "3fac5f68-e66e-4aa4-8e1c-27e0f9a8bccf",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "46b1e3b2-35ae-459a-933d-ce23be5178a1",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "596ead39-f5e9-4fdf-a3fd-345332840b4e",
        "cursor": {
          "ref": "45f53563-6670-4dbb-bfa1-b8785598ce69",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c9acfa07-bd62-4101-a3c7-fa52f9d02384"
        },
        "item": {
          "id": "596ead39-f5e9-4fdf-a3fd-345332840b4e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "be5d04d0-2e3c-498f-9947-a3c8bddd2702",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "89b26072-c3b0-4380-be5d-d0bf5693245a",
        "cursor": {
          "ref": "d13a4ebc-d048-4bab-8c1f-8ae17701f263",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "47711e53-2999-4398-9431-a2545d281a43"
        },
        "item": {
          "id": "89b26072-c3b0-4380-be5d-d0bf5693245a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "eee2cf20-bf21-43ff-b184-f98746c0d552",
          "status": "OK",
          "code": 200,
          "responseTime": 275,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "2308d5d9-2df1-4854-8443-035a47e9f55e",
        "cursor": {
          "ref": "8e65be6a-0225-41b0-8289-120cc8761743",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7f83a81a-f420-47fd-98df-785b88b0376e"
        },
        "item": {
          "id": "2308d5d9-2df1-4854-8443-035a47e9f55e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cfe618d3-0f00-4f51-b9bb-eeb1d0b0794a",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "282db7a9-3975-44d7-9eed-5521f8b23a09",
        "cursor": {
          "ref": "13df229a-205b-46af-b06e-f904239ac355",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "546fc848-4f2c-405c-b378-715a1e533fff"
        },
        "item": {
          "id": "282db7a9-3975-44d7-9eed-5521f8b23a09",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b0f6f17f-632c-4a18-8dde-2377e47aa53f",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c30703b2-84d5-4bca-aa08-5a0455c5632d",
        "cursor": {
          "ref": "1cfa6ea8-cdea-4588-9b96-98439d4ecca5",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7a5c6d96-ebed-4d33-ba5f-6eb66db7660e"
        },
        "item": {
          "id": "c30703b2-84d5-4bca-aa08-5a0455c5632d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2303d77e-fb2a-4049-9bc8-beaa6be2ba12",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "417a6dab-82d4-405b-bbbe-715a8c68371a",
        "cursor": {
          "ref": "a6e3ebd8-bfb5-406a-8045-73fef2f74219",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4ed01dc3-6b0b-47ac-ab22-7f99d9a32783"
        },
        "item": {
          "id": "417a6dab-82d4-405b-bbbe-715a8c68371a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ae65526a-0414-412c-9ee5-c4a76c226ad5",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "a7ba6aa9-d9e5-4eac-ba88-8e6d824b8604",
        "cursor": {
          "ref": "41e5a0cf-8efd-42dc-a675-a73ce0881e12",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ea949d72-1a5c-4889-bc01-4f4f2f760b8c"
        },
        "item": {
          "id": "a7ba6aa9-d9e5-4eac-ba88-8e6d824b8604",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "83933690-18a4-450d-9dde-30fd45ae3cd4",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "f6035f0b-78c5-4de3-9cb3-404f20169b73",
        "cursor": {
          "ref": "2e834ae8-3c79-4847-ba64-65cf173da03c",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f5558960-6075-45c9-a9bd-5d5cf7d199c3"
        },
        "item": {
          "id": "f6035f0b-78c5-4de3-9cb3-404f20169b73",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0933a371-8402-4c09-b932-b44cdc89e30a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "aa9ca5fc-28c1-467a-9319-57027e14fee1",
        "cursor": {
          "ref": "b6a6150c-b9fd-4791-b8ad-7e49a30da323",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "15bd0f42-7c63-44b5-b411-5b168492d8f1"
        },
        "item": {
          "id": "aa9ca5fc-28c1-467a-9319-57027e14fee1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6efa1d05-d150-4efe-b588-eaa9b1e0e30f",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f5412f47-b07a-4c48-b301-d20e135969a7",
        "cursor": {
          "ref": "62022d17-1abb-44a8-a033-61cf34d57f9c",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "900f5208-df44-48bc-9919-cdc4036079e1"
        },
        "item": {
          "id": "f5412f47-b07a-4c48-b301-d20e135969a7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "597af182-8573-4aba-a718-a58779fc5acf",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "5a7c520b-d870-421e-8586-261f8c475be7",
        "cursor": {
          "ref": "8c7b2e19-48bd-4592-9632-e5df86187332",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "50e03a34-a717-43fa-8655-7044c0a3a8b3"
        },
        "item": {
          "id": "5a7c520b-d870-421e-8586-261f8c475be7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "64108db7-28b2-45e3-a4ed-da13502d163a",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "c8673fd8-1e88-4721-820a-9316883d5bf4",
        "cursor": {
          "ref": "ded97029-f8b2-4226-b124-b9a1ddbfe0e0",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3304e9bd-bee1-4d27-acc7-d5f78e215c21"
        },
        "item": {
          "id": "c8673fd8-1e88-4721-820a-9316883d5bf4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "864ee9bc-fe86-4aa3-a6b4-70422f38754c",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "0d38e2db-3724-47d2-aeb7-154dd83ea636",
        "cursor": {
          "ref": "38d757f3-f116-4387-8c99-7b838d3bd027",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1666ec6f-9d2d-42fb-a094-696eb3f96ad2"
        },
        "item": {
          "id": "0d38e2db-3724-47d2-aeb7-154dd83ea636",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e2d16b9a-541f-4393-80b8-5b02a7e5c2a9",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "4fd39edb-1214-4c2c-9209-cd1ee279e6bd",
        "cursor": {
          "ref": "2a70fea4-fd01-44ab-a95c-8c4836ab734d",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "01b73946-de58-46de-abe8-fdfa64da92b5"
        },
        "item": {
          "id": "4fd39edb-1214-4c2c-9209-cd1ee279e6bd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "95121a8c-c354-46ee-a155-23f1a68648da",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "102ea6fe-d755-4966-b522-536acd84789c",
        "cursor": {
          "ref": "ce888bef-dbff-45eb-b17d-8252adc72e37",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1be2392e-7c87-486a-a2fb-8d0215d8b622"
        },
        "item": {
          "id": "102ea6fe-d755-4966-b522-536acd84789c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "02f31b53-5711-4233-8089-86aab2a12e2b",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "fde6a2ca-4101-4d31-842e-d3e091953fb5",
        "cursor": {
          "ref": "1bf801f8-2876-4b34-9e66-7eb618a177db",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "63d5defb-f207-49f7-aff8-f2447250e58a"
        },
        "item": {
          "id": "fde6a2ca-4101-4d31-842e-d3e091953fb5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1229c634-f258-4d63-b39e-653548999990",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e4f0c5f8-28ed-4824-a7d3-fd3579cfef65",
        "cursor": {
          "ref": "65ac8522-eea1-4db5-a72a-1dcb34b15557",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ce8c2450-3f86-4204-99b8-b24e503f5585"
        },
        "item": {
          "id": "e4f0c5f8-28ed-4824-a7d3-fd3579cfef65",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "789dbac2-32eb-42cf-a2cb-1b87479bdd78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb5774d-11d9-4555-b90f-f5a0af2a8f5c",
        "cursor": {
          "ref": "a21048ca-693e-4369-9ba7-52ebbf7d9e6e",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a4a3f8c4-94c2-4095-a754-ae002b3685d6"
        },
        "item": {
          "id": "6eb5774d-11d9-4555-b90f-f5a0af2a8f5c",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f1c15641-0d17-4325-ac79-96de0dc29a44",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 21,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96216198-1e04-4e33-a882-16ce19caad18",
        "cursor": {
          "ref": "ac4f153f-7357-4d33-8fb7-9868640b6dc7",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1a664015-6753-4cb5-aa7c-c2b77f3361d3"
        },
        "item": {
          "id": "96216198-1e04-4e33-a882-16ce19caad18",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1d9f39e8-a29c-4cb9-a1b0-8dda034374bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96216198-1e04-4e33-a882-16ce19caad18",
        "cursor": {
          "ref": "ac4f153f-7357-4d33-8fb7-9868640b6dc7",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1a664015-6753-4cb5-aa7c-c2b77f3361d3"
        },
        "item": {
          "id": "96216198-1e04-4e33-a882-16ce19caad18",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1d9f39e8-a29c-4cb9-a1b0-8dda034374bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79ea8d8-f3af-479e-84eb-0d76a8c9e29d",
        "cursor": {
          "ref": "7668ad5a-adee-4644-b62b-4e7c8cfdbe8c",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5263502b-5df2-4553-83c2-53f7a49b8cb5"
        },
        "item": {
          "id": "b79ea8d8-f3af-479e-84eb-0d76a8c9e29d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "64c29836-2d05-4a21-9f88-0041da2c0ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2bd08f-d91d-45c9-a519-fe9604faff67",
        "cursor": {
          "ref": "4c0a4614-f0e8-48d9-bb51-9ac9388f9828",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cc8755ae-4ce9-45a1-ad06-d15f58b0a265"
        },
        "item": {
          "id": "0b2bd08f-d91d-45c9-a519-fe9604faff67",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "80c4d09c-edc9-40bb-a99d-ca7298d20f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd419d7-8f73-455d-85a9-08378a81861d",
        "cursor": {
          "ref": "b22e729c-32d6-4a67-a823-f81da5bfc7a4",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "af7ba531-7771-4992-97b5-13a595a9385a"
        },
        "item": {
          "id": "dfd419d7-8f73-455d-85a9-08378a81861d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fecb8542-faae-4cd9-880b-9e76635dbfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6aeb9f-33f1-4481-9030-8242fb18a793",
        "cursor": {
          "ref": "7ef850d5-66dc-4b0f-9e61-e0210cfbe3b7",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bca31f7e-e73e-4bdf-91a9-3b8f8612460d"
        },
        "item": {
          "id": "7b6aeb9f-33f1-4481-9030-8242fb18a793",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1c43e722-bf96-44dc-b668-323ded7e693a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4c794d-d6c9-4aef-b45d-581efa9faceb",
        "cursor": {
          "ref": "97d464e5-9686-4fe4-9f5d-8eb41815b4a8",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fcb2dbe7-4e33-41cf-a625-bcd6c3a24ae4"
        },
        "item": {
          "id": "db4c794d-d6c9-4aef-b45d-581efa9faceb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ae200958-c508-4d6e-830e-358d333e9faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3f2c62-a17c-494c-aa03-61a96cedaedc",
        "cursor": {
          "ref": "2857f81a-d26f-4204-829d-303e7f857856",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "96366bf4-d41a-4718-b0aa-f814f2b7c491"
        },
        "item": {
          "id": "dc3f2c62-a17c-494c-aa03-61a96cedaedc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a43595c8-3bba-4b32-a27a-857ecd4b127e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1993,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721bc6d9-0f92-482d-9d8d-a7c3cce60a94",
        "cursor": {
          "ref": "f474f12b-1800-4701-aaca-67d6decf090e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "069dadb3-4cb5-48fd-89ae-fa46488747ab"
        },
        "item": {
          "id": "721bc6d9-0f92-482d-9d8d-a7c3cce60a94",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "63aa476b-3d88-43b2-9a9c-8ecdb94c37af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa40cd9-78f3-4f85-9958-fc7a1c225752",
        "cursor": {
          "ref": "0a719c61-80e4-45e1-af7d-04df9455f674",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6e289eed-a5f8-4b26-bc28-428b184cb926"
        },
        "item": {
          "id": "faa40cd9-78f3-4f85-9958-fc7a1c225752",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d0fe0afd-d815-498b-a6ae-8affca2b3b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2056785-d0d8-48e9-85ac-c96035e0f416",
        "cursor": {
          "ref": "6c816e53-79e1-4212-9a8d-3c18d73efebd",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "817cdd6c-43fd-4e77-9fb6-8d69105a8104"
        },
        "item": {
          "id": "d2056785-d0d8-48e9-85ac-c96035e0f416",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3443cb34-d23e-4266-ac29-9ced08034af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ac4729-dff2-455c-9029-b569fbb40c83",
        "cursor": {
          "ref": "0c4ebf6f-f0a7-46db-9985-19acdd76b49e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "46872030-cec7-41f5-926b-b9e3886c05b0"
        },
        "item": {
          "id": "40ac4729-dff2-455c-9029-b569fbb40c83",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "35aa1e3c-597f-42a0-b586-dcdc7d5cb2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe6b68b-5bea-4ef6-9188-447d0d9605a5",
        "cursor": {
          "ref": "fa58e9af-4a08-4041-b709-9e2fdc6d82db",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "eef98027-9529-44bf-8d10-9036d48f8368"
        },
        "item": {
          "id": "9fe6b68b-5bea-4ef6-9188-447d0d9605a5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "812764d6-7203-428b-a358-1ccc6bb93459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ad0dc6-d4fb-4e55-a399-5519b0045e40",
        "cursor": {
          "ref": "3a845da0-dbe7-4910-96c1-41af8bbe1d17",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "125fcaab-8356-4077-ab8f-a5236674a31d"
        },
        "item": {
          "id": "90ad0dc6-d4fb-4e55-a399-5519b0045e40",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5a3841a2-582b-4277-9229-1210b5d52e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b6c5e5-2382-4bca-a5a6-598c33f1cf7f",
        "cursor": {
          "ref": "41b8d38e-95c2-497f-90f0-c77a4e32b3f2",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d66251c8-61f4-4f6d-bcf3-f469441da42b"
        },
        "item": {
          "id": "22b6c5e5-2382-4bca-a5a6-598c33f1cf7f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5bf26df5-dcad-4c8b-9490-8e0a7e31590b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b18992d-3ad5-40b6-9014-a3cdd27da901",
        "cursor": {
          "ref": "5a9c29cc-3202-4440-8d03-8f445ae3d480",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ff9847ec-3f58-4454-9308-90e0b98ad12a"
        },
        "item": {
          "id": "7b18992d-3ad5-40b6-9014-a3cdd27da901",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5706ec1d-6a70-4f90-99a2-85df367f43e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca1beff-2294-416b-a97f-42db84e4ca3b",
        "cursor": {
          "ref": "a2f0c5d4-5871-40b9-905c-09737e8752ad",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "292ac2df-a282-485c-99ca-862314fc50a6"
        },
        "item": {
          "id": "aca1beff-2294-416b-a97f-42db84e4ca3b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6f8be3a9-7a83-48b9-91da-13a9a0099f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff56718-5b16-4817-9b8f-5a879eb6cc6e",
        "cursor": {
          "ref": "4127a02e-a8db-4eed-a63f-ba026c4ad177",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "427cc43d-c679-4e97-9b92-5a55749a919b"
        },
        "item": {
          "id": "aff56718-5b16-4817-9b8f-5a879eb6cc6e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "694460d3-dbe4-4163-9d7b-4ef662b60085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c27871-d247-4fae-8869-81f8f530ef2c",
        "cursor": {
          "ref": "067a0941-424f-4644-9ad9-173c043571ef",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "66596cd1-e90c-4202-9286-fd12db18439d"
        },
        "item": {
          "id": "48c27871-d247-4fae-8869-81f8f530ef2c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "633796f9-1c70-4908-b94a-7dcd933b84fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 826,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d941d3-494b-4e89-b7d1-b77e21cf848f",
        "cursor": {
          "ref": "332b654a-048c-4a88-ac5b-38ad2da56ba4",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "68849184-7971-4634-a5b5-34ccfc9fe033"
        },
        "item": {
          "id": "a9d941d3-494b-4e89-b7d1-b77e21cf848f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1612cd5c-3a91-40b5-84f2-22e51e5dc5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67beccbe-4410-442e-937d-57f6eeb48e2f",
        "cursor": {
          "ref": "35267f60-614c-41c2-8348-46ba59dd4ca2",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f8b0f061-743c-4a03-9213-9afc3123a37f"
        },
        "item": {
          "id": "67beccbe-4410-442e-937d-57f6eeb48e2f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a11ec917-2945-4520-98f9-58b253a2c112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a493af75-9db6-4a33-8975-b73c0f7d6c0a",
        "cursor": {
          "ref": "ba01f544-d6fe-4aeb-be51-6c442c463c2b",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8173b4d9-c08b-4e81-a08a-11d1deb2ea48"
        },
        "item": {
          "id": "a493af75-9db6-4a33-8975-b73c0f7d6c0a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ad8af7f6-2611-45e3-9d20-9b5acc046290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacc3b0b-95dc-4d82-bb36-9e7b088bdf84",
        "cursor": {
          "ref": "ef4a1a2e-b8a9-4e44-aa6b-f42e00b194eb",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "42af2471-b78c-424f-8f02-8b85eb6ee765"
        },
        "item": {
          "id": "dacc3b0b-95dc-4d82-bb36-9e7b088bdf84",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f368856d-234a-4804-b3e2-1598bf66a9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 461,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba4e259-89bd-426d-bdee-a07a79532c51",
        "cursor": {
          "ref": "0aa540a7-adff-4b01-bdc6-f71582c5a110",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1114ca27-30a3-4d0b-8cfa-c1a38a9095ba"
        },
        "item": {
          "id": "fba4e259-89bd-426d-bdee-a07a79532c51",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "40102a57-5a7c-4cff-9236-25b97ec93c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13120b33-04a2-4443-b567-2d89980e4774",
        "cursor": {
          "ref": "2f92e8b3-b152-4e93-9369-0f6d0e3b05ac",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e92d685b-66b1-4412-b8b6-06585d8103dc"
        },
        "item": {
          "id": "13120b33-04a2-4443-b567-2d89980e4774",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a8a5347-9da4-4bf0-8aaf-69011de92382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0361d6-6f7e-4a93-8dfb-5fdae1116979",
        "cursor": {
          "ref": "871491b4-0e68-4be6-916e-24e27463338e",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "eb4ab04a-0e74-439f-86de-a4640574861a"
        },
        "item": {
          "id": "db0361d6-6f7e-4a93-8dfb-5fdae1116979",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8ee2ad88-1ee9-466d-a70d-e9cda105f223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6d5713-6051-4e4b-8366-abfb83b6842b",
        "cursor": {
          "ref": "404502f9-72d5-4d87-b7d2-88ed36bf57d1",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ade8a261-6a53-4f77-aecc-efacc696852f"
        },
        "item": {
          "id": "4e6d5713-6051-4e4b-8366-abfb83b6842b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b1aa7c75-1ece-4ddd-804d-648d3b5348a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 590,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe4bebe-4158-4068-a618-fadb14b074ef",
        "cursor": {
          "ref": "1d55d390-a256-4dac-9560-abc54131c452",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a8161ccb-dc85-4a8e-b307-0d0c0f38dd75"
        },
        "item": {
          "id": "2fe4bebe-4158-4068-a618-fadb14b074ef",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f6083d15-ebc2-4263-baa4-70444a68f68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a9688e-f8d0-4f0c-ba27-71df0315b137",
        "cursor": {
          "ref": "284993e3-8499-42f0-95a7-56396a66fc75",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c26a3b34-06e5-4cb0-901c-e11ee45c026d"
        },
        "item": {
          "id": "d9a9688e-f8d0-4f0c-ba27-71df0315b137",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3aa7a384-7a6d-44c0-bd28-7e8ccdb6624d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db8f80e-16ad-457f-96b6-7ed29c600818",
        "cursor": {
          "ref": "9778796c-2c60-48c4-8d2e-c0b8f0cf7e92",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0962a2b3-2d11-4667-9587-a12a0f3285dc"
        },
        "item": {
          "id": "7db8f80e-16ad-457f-96b6-7ed29c600818",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "13083eaa-384f-4a44-b9c2-dbf6ff1d4478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abf4a5e-9709-459f-8e23-e21d9f02b849",
        "cursor": {
          "ref": "ac77833f-0bed-40c2-b85a-8aad92b171e4",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c4a4126e-4d2a-449a-8a2f-4a5f91448681"
        },
        "item": {
          "id": "9abf4a5e-9709-459f-8e23-e21d9f02b849",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "eba47e95-8279-4895-9955-434878f233d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6577bf18-6e5d-4533-b434-6c6ca07cd262",
        "cursor": {
          "ref": "58e00a4c-186e-4d9c-874e-07320329af22",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "92b5fbaa-7409-40a9-9495-96587fbc44b1"
        },
        "item": {
          "id": "6577bf18-6e5d-4533-b434-6c6ca07cd262",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1c81f32c-8e7c-408a-ae99-51018f6412ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7a6bd8-94fe-4506-b300-78991895a4ef",
        "cursor": {
          "ref": "e4ee234c-a64e-4121-afee-2fea33e60210",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c3ebd2f8-3c8f-4225-a099-0fd31bbefb3f"
        },
        "item": {
          "id": "4a7a6bd8-94fe-4506-b300-78991895a4ef",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "04ea41bb-5587-4890-9865-8c07f6e7cee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7237fd6e-a450-414f-95d3-1a5d2132f1b3",
        "cursor": {
          "ref": "9c5a61ae-1a22-4d4a-8b40-09adc791ce6b",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c0e095bc-b13e-496d-a886-64e5a1b270f4"
        },
        "item": {
          "id": "7237fd6e-a450-414f-95d3-1a5d2132f1b3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "46a67fb4-07bd-485d-ac64-cb50bfb3b085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 487,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7bd8e5-53f9-4a1c-bd5d-badeabbc7ea0",
        "cursor": {
          "ref": "c48c3952-9034-427b-bab3-e8493438474d",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "253aaf70-f58c-4f05-b370-6f72a248633a"
        },
        "item": {
          "id": "ce7bd8e5-53f9-4a1c-bd5d-badeabbc7ea0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3b53a84c-0966-4a59-91a9-aa2791a15ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c41c3f4-afbd-4120-933e-c725603f9c92",
        "cursor": {
          "ref": "83c8f979-d7b1-4388-982c-c9f6c2aca06c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2b6287c8-e4c6-4a29-b64c-9004646747a5"
        },
        "item": {
          "id": "6c41c3f4-afbd-4120-933e-c725603f9c92",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f0cfe9a8-5993-4d81-afd9-2830e0419db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d6c26b-4a4a-4308-af66-6afc9658703e",
        "cursor": {
          "ref": "4ba5f5cf-0741-4626-bdf9-fb8fd6fed26f",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8f7f73ee-2a55-4fad-b69f-01ab94c17e49"
        },
        "item": {
          "id": "65d6c26b-4a4a-4308-af66-6afc9658703e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ef0525cf-b48f-42a8-aa6d-95cb74482763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1500,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97564e82-a907-4c3e-8bc5-530ec59b0bac",
        "cursor": {
          "ref": "5f8e4769-6436-4ed5-ba5d-db130f10ef5b",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8f9625aa-0f72-47aa-9e4b-1a8d955d394b"
        },
        "item": {
          "id": "97564e82-a907-4c3e-8bc5-530ec59b0bac",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "12716d97-c808-4944-b08d-c5b7760d2f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 366,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c676db7-8c03-4bd7-8dea-b780904ee0e9",
        "cursor": {
          "ref": "dc90482c-09ab-4f10-bfb6-82437736038a",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2c43235d-8496-4524-9a2d-4e8d7a2d4dd8"
        },
        "item": {
          "id": "3c676db7-8c03-4bd7-8dea-b780904ee0e9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e5e9bd72-7c30-452a-8f7b-fb3174f02595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 427,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde123a5-14df-4672-895a-5fa5e7d9842c",
        "cursor": {
          "ref": "53d39781-f5ff-43bc-8e98-b822bcc8e795",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0e6e98ea-9a09-4292-a897-54058f14259d"
        },
        "item": {
          "id": "dde123a5-14df-4672-895a-5fa5e7d9842c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "002ee32f-f539-4eed-990a-6399960d4f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2138,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f489a64f-984f-45fb-b84d-254be809926b",
        "cursor": {
          "ref": "bc81dcab-e05d-41f3-b182-f76bf92bae89",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e6bd43e1-6d51-46dd-ae11-12c3c534f39d"
        },
        "item": {
          "id": "f489a64f-984f-45fb-b84d-254be809926b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0bd2b490-0805-4ede-a764-a0c2946b03d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 370,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2322cfb5-69d2-4f99-96a6-5c78a7a701b9",
        "cursor": {
          "ref": "34ee2c24-236d-45b2-8b5e-f248cae70392",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b87a4293-29dc-47f0-9119-fa0cb7c5ac6c"
        },
        "item": {
          "id": "2322cfb5-69d2-4f99-96a6-5c78a7a701b9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b1f612db-efba-4757-a055-4760a2ba9b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4274f98-c89f-48d7-8667-b7f06980d3d5",
        "cursor": {
          "ref": "166efd35-bd6b-42c5-9d6b-7f147cb2ffe4",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7b39ca59-ba8f-4bbd-a656-2380661cc57a"
        },
        "item": {
          "id": "a4274f98-c89f-48d7-8667-b7f06980d3d5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "deb633bf-2592-4062-b6e5-bb81436ba9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a683384d-073d-4a24-971b-afb9c8708a78",
        "cursor": {
          "ref": "90f1e94d-e6c4-474c-aa74-8c17521d0b13",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1a0bb399-0ae4-4c60-83c5-05c8d9a573d6"
        },
        "item": {
          "id": "a683384d-073d-4a24-971b-afb9c8708a78",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ce51ec81-2c31-49db-be89-2c6b8d1f8f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ffa43d-cd7a-458a-a8b7-b481dccdfee7",
        "cursor": {
          "ref": "63ea4746-8491-45ce-b243-1d1282666cce",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a4e77832-c5cb-4af5-b4f4-7441a2ad561d"
        },
        "item": {
          "id": "89ffa43d-cd7a-458a-a8b7-b481dccdfee7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6dc73039-f181-458f-8c55-0958afbe5f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdb47de-e1c8-4618-8fab-55cd37626e32",
        "cursor": {
          "ref": "4cab12b2-df1a-4c7a-8cc1-1b8466937c33",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f773035e-8d42-4dad-96fd-b088a53b0e0e"
        },
        "item": {
          "id": "acdb47de-e1c8-4618-8fab-55cd37626e32",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a9ccc031-1521-49cf-8173-972f39d383f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d9587f-7e57-47e7-ad5d-29b18aa08dca",
        "cursor": {
          "ref": "97d5fdcd-280e-44d7-9318-06afd2d927f7",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c824f1c0-1371-425c-92e8-d51690aa28cd"
        },
        "item": {
          "id": "76d9587f-7e57-47e7-ad5d-29b18aa08dca",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d5a13817-6114-4682-b24e-8b53e5f8fa42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 294,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a07d60-d5c3-4711-8831-62fd080bd4db",
        "cursor": {
          "ref": "9c0fe37b-5245-463b-873a-1484456f95bd",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "acf8a4ce-2c5b-4a9f-b559-c7e1d0559aff"
        },
        "item": {
          "id": "49a07d60-d5c3-4711-8831-62fd080bd4db",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fa7423b8-4fcf-4a0e-b934-4a0f6d5fb91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296337a3-ccc9-4095-8416-17e9de5ecdba",
        "cursor": {
          "ref": "f89dc3d0-4b79-41a5-8dd7-6105750d77cf",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1988990f-76d3-48fe-ba8a-dd4eacef5d57"
        },
        "item": {
          "id": "296337a3-ccc9-4095-8416-17e9de5ecdba",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c89da0b9-1260-4ac9-8e55-c6cdc3926571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcb5321-6124-4c88-be5d-a5ac13761fed",
        "cursor": {
          "ref": "e9b094ac-4f16-4312-a868-663b5ac05088",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b202ea88-f07c-408d-a0f5-aaf0892944f7"
        },
        "item": {
          "id": "2dcb5321-6124-4c88-be5d-a5ac13761fed",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "831398cb-66c4-40ad-9046-363b4509abbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa6b77c-adc7-4bad-a66b-3ee99ab0471d",
        "cursor": {
          "ref": "b59f5e06-63d0-4cc5-b02e-3ad4f7358fdf",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2d1d35d9-029b-4314-b297-9c717e8dd390"
        },
        "item": {
          "id": "0aa6b77c-adc7-4bad-a66b-3ee99ab0471d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9bd65a9e-bdf8-4858-9c26-76349150e882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750f778e-cfed-421d-a6cf-f2b99b4d1333",
        "cursor": {
          "ref": "658d85f2-e0b4-417a-8547-f8183af12804",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1ecb0cac-5e64-4c78-8f0a-7e0518c4e1c3"
        },
        "item": {
          "id": "750f778e-cfed-421d-a6cf-f2b99b4d1333",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d6b8ee9b-1f9d-4be8-89cd-7ded89381b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 455,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db36a8d-ab84-4b8f-bd28-c124933c9f48",
        "cursor": {
          "ref": "fb588803-f064-4ef2-87d5-6e0271781929",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0e0e9d90-580f-41cd-804d-91140f457f86"
        },
        "item": {
          "id": "1db36a8d-ab84-4b8f-bd28-c124933c9f48",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "462357ab-0b8f-4c84-a1cf-e9b6f175be0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d408eb41-9944-4354-9556-8bc102335b3b",
        "cursor": {
          "ref": "59c8499e-9d6a-4955-9d78-df653081cd86",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "50d2f6e3-3441-4093-b8f1-65b1cbe60519"
        },
        "item": {
          "id": "d408eb41-9944-4354-9556-8bc102335b3b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ac10b582-a864-4818-bf1b-fa2da1d13c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 343,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171c90b4-7181-420b-9ccd-5cf378b885fc",
        "cursor": {
          "ref": "30cdba51-7159-4cb5-bdb1-0fe7d1ff4759",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "47f0914a-51aa-4367-9685-bbd1cd97826d"
        },
        "item": {
          "id": "171c90b4-7181-420b-9ccd-5cf378b885fc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fc865e35-2461-4198-8060-994be279add1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92916404-f9ae-4864-b244-9784a4ef6d3c",
        "cursor": {
          "ref": "48441bfa-b14d-41e6-aee9-424544fbe574",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "65fac2e2-e128-4881-b948-88c58a2ef922"
        },
        "item": {
          "id": "92916404-f9ae-4864-b244-9784a4ef6d3c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9205c209-5276-474a-8950-fb82e32fb033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 422,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b5505c-4ed1-40c5-8e98-6429c056504d",
        "cursor": {
          "ref": "8c0bd58c-a44d-4692-bd92-20f6d93f8335",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f6a6a104-2648-4cc4-b7d9-10636c85efe3"
        },
        "item": {
          "id": "b9b5505c-4ed1-40c5-8e98-6429c056504d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fdc7e10d-89e5-48b5-bdbe-e592f4cbf2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98d795a-8c28-48fd-8739-b0754a6aabbc",
        "cursor": {
          "ref": "32d2af2b-c93e-40d5-abfb-811f1b338e34",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0f3556bf-e786-47ed-9634-edf9dae595b2"
        },
        "item": {
          "id": "e98d795a-8c28-48fd-8739-b0754a6aabbc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "84a1f0aa-77c0-443b-b012-80f47227cdd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d2c82a-35a9-4da4-a8b1-f2d492f1f0cd",
        "cursor": {
          "ref": "a5d09586-f921-45e4-bfea-c50f6255cce7",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c35109d4-7874-4d9c-88a2-f31514436d13"
        },
        "item": {
          "id": "37d2c82a-35a9-4da4-a8b1-f2d492f1f0cd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7efb33ef-7cd1-4106-887e-27800d2251b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae82f8a-5653-42b4-8209-1f8042795a09",
        "cursor": {
          "ref": "e3061e1c-e4ee-4ec5-830f-ce2db0d0cb6e",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "881984be-694b-4998-ad05-e80355aeb11c"
        },
        "item": {
          "id": "fae82f8a-5653-42b4-8209-1f8042795a09",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "eb771b55-c8eb-47d6-b2bd-32e1af5e0834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46c45c3-aa32-42a0-b9e4-e4e0c1b236fd",
        "cursor": {
          "ref": "dba6ea52-f4cc-45df-aacc-4c35f1c51d32",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c2fa537c-07f7-44b2-93b4-fc47d1a78307"
        },
        "item": {
          "id": "a46c45c3-aa32-42a0-b9e4-e4e0c1b236fd",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e2dd0322-3910-4269-9cf4-3a04f34b980c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee62944-cb8b-4828-9991-f8cc545e457b",
        "cursor": {
          "ref": "f3745019-3403-401c-8709-a05bd293d313",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d74fa6e8-353f-49d9-bd15-e44537fc00c2"
        },
        "item": {
          "id": "bee62944-cb8b-4828-9991-f8cc545e457b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e137af3e-afcf-4355-9bfb-461c096a9d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf45a21b-3348-46f4-a91d-11966545ac52",
        "cursor": {
          "ref": "e38271ac-e9c7-4075-a248-64d2f1459024",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a783695e-c7c1-4f6e-93e3-1ab58a7b0748"
        },
        "item": {
          "id": "bf45a21b-3348-46f4-a91d-11966545ac52",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ac218585-8f72-4ebd-8d1a-ede2724c7251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 590,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e8fba4-8a17-4daf-903b-ace5b58d383c",
        "cursor": {
          "ref": "b408a353-4958-4939-8559-2d86fb62d7af",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3c6a1b72-6b77-4d2f-8f87-cd30c5b088e7"
        },
        "item": {
          "id": "27e8fba4-8a17-4daf-903b-ace5b58d383c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ea3a4978-d3cc-4a84-a1e0-62adf23fd711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ec6fc1-2052-4b9f-9d84-6f5f34c175cf",
        "cursor": {
          "ref": "91bf082c-77c9-47cf-9796-a20141c3c942",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c7c9caf9-a416-4165-9eff-360978cdda92"
        },
        "item": {
          "id": "42ec6fc1-2052-4b9f-9d84-6f5f34c175cf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f55679a6-f5e2-4d4b-b9c9-88a1039754d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d676fa-a8d7-40fd-ac4c-83a5d7fa244c",
        "cursor": {
          "ref": "a97bec3f-a42b-48d1-833d-69825d5f8789",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e57bd35d-392e-493d-87fe-4efb6bb7f752"
        },
        "item": {
          "id": "77d676fa-a8d7-40fd-ac4c-83a5d7fa244c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c79937fe-4141-436f-a2f9-a44503173448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff5262a-b12c-4a9a-8366-b3cc4bc95589",
        "cursor": {
          "ref": "c41d99b8-b9ad-444d-8030-546d929558d2",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dea2a605-6ea5-4d5b-84c3-b2ca24e7b4f7"
        },
        "item": {
          "id": "eff5262a-b12c-4a9a-8366-b3cc4bc95589",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "09483681-f3e4-4754-a670-70bd8f3f4dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40032ea-77c1-4f38-8e59-dcf4cb3bfb94",
        "cursor": {
          "ref": "18877edb-d269-4aa0-b56a-2f6433cbb68f",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dcb056b3-e636-4e6a-b947-f7ab5ee71cab"
        },
        "item": {
          "id": "e40032ea-77c1-4f38-8e59-dcf4cb3bfb94",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7a770c10-c949-46af-85ae-7126c773319d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed78f0f-ead8-4378-8182-38d7ed984bb6",
        "cursor": {
          "ref": "9353bd98-8586-4f8c-962b-4170784fd5fe",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f63bbc40-9b34-498e-809c-aa2e27290c01"
        },
        "item": {
          "id": "5ed78f0f-ead8-4378-8182-38d7ed984bb6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8706e806-c01d-44e6-b4cc-b1168c478407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a603c841-aeea-4de7-b562-a3b89b813c4e",
        "cursor": {
          "ref": "dab9c21a-ee78-4631-80bc-e8408f112e6c",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9a4db003-fb6b-44ad-b855-cac93dbc9e1f"
        },
        "item": {
          "id": "a603c841-aeea-4de7-b562-a3b89b813c4e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "45c6b431-490d-4da5-9aaa-10a2e232e935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253900c2-b01c-49aa-88bb-61847d76a7ce",
        "cursor": {
          "ref": "2f632831-54f7-48ec-9f1c-91eb36e5fcc2",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "41ca4190-64e4-4121-a575-b0ac36bef3bc"
        },
        "item": {
          "id": "253900c2-b01c-49aa-88bb-61847d76a7ce",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ac8912aa-7034-4792-98b8-a69b77f3ca1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b9ff80-8b01-4e52-aec9-0249a648f4a1",
        "cursor": {
          "ref": "0f57cc0d-2622-4cc6-92b7-e198d6f10a88",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d07c46e6-623d-49f9-82ba-4b1b41a836ad"
        },
        "item": {
          "id": "e6b9ff80-8b01-4e52-aec9-0249a648f4a1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f7e3161a-03bd-4ea2-8120-34fc82d45147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429c264a-ddca-4685-b23c-2e304d487fa4",
        "cursor": {
          "ref": "10c542d8-3567-4774-894c-19f563e6c7b3",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "117af0d7-d7d9-469f-917e-0cdad11c7b48"
        },
        "item": {
          "id": "429c264a-ddca-4685-b23c-2e304d487fa4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f5d158aa-4fa7-4453-babc-c1168aebc18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d0ba49-6b4b-48f0-a5ff-1a5d0d734dce",
        "cursor": {
          "ref": "ef0343a5-6cff-41d9-bf2e-598f0809448b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8841f098-285e-40a7-bb73-d34203b8cdbe"
        },
        "item": {
          "id": "b5d0ba49-6b4b-48f0-a5ff-1a5d0d734dce",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ec1b4388-265b-4c26-943d-bc89818d4808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbc3efe-d450-4b62-af2c-c758134909e1",
        "cursor": {
          "ref": "a0180f44-166f-4f0d-a3c5-d6bb84823f50",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5e0199f6-1261-400a-9d30-b75da5c0b031"
        },
        "item": {
          "id": "2dbc3efe-d450-4b62-af2c-c758134909e1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f2519c2d-37f2-4866-b47e-2f3aaa4024a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae15738f-aa17-4dbe-a90e-a7550d16ffae",
        "cursor": {
          "ref": "e881609d-5735-4573-8f5f-f36b81d08a1c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cfe93d5f-702a-43de-a2dd-e8358900b6e9"
        },
        "item": {
          "id": "ae15738f-aa17-4dbe-a90e-a7550d16ffae",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9ed9d6f7-7036-4ce3-be0c-7597dff90b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4810dc21-b01c-42e1-bc6b-57932a97567d",
        "cursor": {
          "ref": "f55ead6f-75f3-4348-8527-63bb9cff9411",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dc11339e-1aec-438f-b364-253df67e2edb"
        },
        "item": {
          "id": "4810dc21-b01c-42e1-bc6b-57932a97567d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b63a9a7a-a2c5-4028-8d55-0c8fd603edf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fac66db-d388-4d28-942e-0811259ee570",
        "cursor": {
          "ref": "f866428f-87ca-4e1f-9dff-25abc7d7f3bd",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "33ec9c8f-1bd7-47b2-ab2b-e6b2044ffd64"
        },
        "item": {
          "id": "4fac66db-d388-4d28-942e-0811259ee570",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f74ac7aa-6422-4647-a669-0f0d5c5897c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8116a0-b58b-445d-8a93-1635819a39d5",
        "cursor": {
          "ref": "52741105-3dad-487f-be43-3b0a46952d56",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3e194140-cb1d-47d1-bbca-c2ecaf6dc9fe"
        },
        "item": {
          "id": "9c8116a0-b58b-445d-8a93-1635819a39d5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "30cc0da4-4e1f-42c8-adfc-725abebb622a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411381e4-578a-42cb-b8bb-8cd1b83ec254",
        "cursor": {
          "ref": "e467e0cd-bfd8-4c73-ae56-7837401cb108",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9f968052-e0d3-4106-a87a-04830d79d20d"
        },
        "item": {
          "id": "411381e4-578a-42cb-b8bb-8cd1b83ec254",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "556087cc-2659-4e41-91d1-943e83546165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc66193-861d-45da-9cb1-1cdb0eb812fc",
        "cursor": {
          "ref": "2f71fe8f-d543-477c-9a6f-f98b7bb62443",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "db419349-96b2-4d56-aa0c-12d47eade1bd"
        },
        "item": {
          "id": "7dc66193-861d-45da-9cb1-1cdb0eb812fc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9c5aecfd-0fc1-41cb-b888-660bb92f364d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f66c8da-1706-4d06-911e-1193c2e19a30",
        "cursor": {
          "ref": "a6cda7c1-9ded-47a0-aee1-45d2f886eafc",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d6d3e486-1a67-4207-a9f2-591e91adf00f"
        },
        "item": {
          "id": "1f66c8da-1706-4d06-911e-1193c2e19a30",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bd2dfbf6-e785-47fa-97ba-66f0059b5faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587475ff-78c4-4817-8208-2ecdec2e0bcc",
        "cursor": {
          "ref": "acf0d9b8-481b-4720-85a1-0b19f5c92fd0",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "026ad60c-c803-4ed7-9b05-8828c66d5940"
        },
        "item": {
          "id": "587475ff-78c4-4817-8208-2ecdec2e0bcc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a2c711ed-bd86-4ffb-961d-57d328591dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415d5092-5edf-4554-9f6f-f284d3441e68",
        "cursor": {
          "ref": "bad0bffb-3432-4756-ac56-18eb53995590",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8ee84899-5d0f-4b8b-8887-da248c36d1ee"
        },
        "item": {
          "id": "415d5092-5edf-4554-9f6f-f284d3441e68",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7376439f-c8c4-45c5-894a-70b6644c9203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0220178-0e82-440f-9158-f50f02d91cb0",
        "cursor": {
          "ref": "9209ba9b-ede8-400d-8caa-9e03cc457d07",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "887c620f-f012-4a60-ac8c-f0c8f4c8148d"
        },
        "item": {
          "id": "b0220178-0e82-440f-9158-f50f02d91cb0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4c8826d8-12c1-4840-b39f-caa5f2d38212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea18d57-4d89-4ea3-b430-edaa4302a0b2",
        "cursor": {
          "ref": "a38f36b9-96db-498b-9987-ba20a7376f14",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a815027a-d2db-4284-8bc0-645fc068cead"
        },
        "item": {
          "id": "fea18d57-4d89-4ea3-b430-edaa4302a0b2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8aec9439-f656-4e91-a7bc-8b7bacd5b171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb590a7-53fd-470d-970e-d530ff52c143",
        "cursor": {
          "ref": "6ba84ff0-293d-4e32-aa01-b57ba3a7036a",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7dad4c51-151a-4bf6-8a8c-1eed0ee79748"
        },
        "item": {
          "id": "7bb590a7-53fd-470d-970e-d530ff52c143",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f724d899-c9db-4a79-9fd8-f367ad358014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e941d564-ef5b-4f72-965f-edf661191cac",
        "cursor": {
          "ref": "77a27e6a-b69f-4342-89e5-134a0300819c",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cb27e177-9ae2-4aaa-97f6-25f539e48244"
        },
        "item": {
          "id": "e941d564-ef5b-4f72-965f-edf661191cac",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2a01a093-d4df-4607-8f11-0d7b1e6700e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f4853b-b76b-49b4-bc0f-f6a7adca1ac0",
        "cursor": {
          "ref": "e20687e1-a4e8-40c1-9cd2-f82bacd94b84",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a70d302f-9c8f-4c8b-87d8-f50994d25b96"
        },
        "item": {
          "id": "46f4853b-b76b-49b4-bc0f-f6a7adca1ac0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d8c2025b-6c9f-4e5c-8f95-905f17bb1871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc50f28-b180-4529-9b1d-38eeae4c3c30",
        "cursor": {
          "ref": "4207a551-c6af-4272-be11-ecc7bbed8b79",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a26d0687-5806-4b7a-9aef-d3f723c62f46"
        },
        "item": {
          "id": "3bc50f28-b180-4529-9b1d-38eeae4c3c30",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f76954e4-395e-4117-9076-409cfbe31692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8981f910-9832-4bac-888c-934e33d2fddd",
        "cursor": {
          "ref": "8fa5d4b0-f44a-44fe-b3e4-e0a5f1f4e1a5",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "05ba867b-34fb-4446-a30c-323d61a344de"
        },
        "item": {
          "id": "8981f910-9832-4bac-888c-934e33d2fddd",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5ec30910-fa3d-492f-a570-c68535171c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8672776b-fc70-467e-a54c-87086df0530e",
        "cursor": {
          "ref": "ca1e332d-8096-4f0e-a202-59ae05f77800",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a065868e-47aa-481a-934d-fb926ebf4fc0"
        },
        "item": {
          "id": "8672776b-fc70-467e-a54c-87086df0530e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d5620bf8-e9c9-4896-94a6-93f31f10fee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28755ea2-ef92-4e4b-aba7-02ec6dad539c",
        "cursor": {
          "ref": "78acff8c-f1a0-4b8c-9f73-1bd516058485",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ae7a12be-289b-4944-8c98-ab8c56e0c78a"
        },
        "item": {
          "id": "28755ea2-ef92-4e4b-aba7-02ec6dad539c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4ef55d0d-9bc0-46f8-a627-183085c16206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cc898d-0890-485e-828f-425c8f6ee17c",
        "cursor": {
          "ref": "901744c7-dae0-466e-8147-e0a66bb1b024",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "63740955-ef7e-48b9-a549-c78a3d3ae971"
        },
        "item": {
          "id": "39cc898d-0890-485e-828f-425c8f6ee17c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a1bf49f6-6578-4ac2-9204-250c299e737e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a98921-79c3-41c6-a5f1-34a0460aa908",
        "cursor": {
          "ref": "0cb3098b-5a2f-4932-8f81-5c5203f31983",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "faa27850-4ec2-4a2d-a6c1-30cc6cc7eae4"
        },
        "item": {
          "id": "18a98921-79c3-41c6-a5f1-34a0460aa908",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "12443db7-01a8-43c1-9009-fdd4f82f0776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce1ed51-a16c-47ab-9d6b-32e5a4344706",
        "cursor": {
          "ref": "ac159cd5-df51-48a1-b13f-d2aae4dff00b",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "34deb020-92e7-45d3-8b7e-2eaa51722cb7"
        },
        "item": {
          "id": "8ce1ed51-a16c-47ab-9d6b-32e5a4344706",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b5dda550-a8a7-4694-b866-603325328043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d0293-ecbb-4d00-ad83-7d5410a016fa",
        "cursor": {
          "ref": "80f8e257-6b09-42ba-a2eb-f1439b13987b",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2fb6acd4-d5f3-460a-92e3-11fcbc71ce15"
        },
        "item": {
          "id": "cc0d0293-ecbb-4d00-ad83-7d5410a016fa",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "420f3da1-2b2e-4f48-a660-60ba9796b0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec033752-e14b-4f17-a106-047a9358b15d",
        "cursor": {
          "ref": "42590685-bf34-4a24-b6c7-9fc62756f1f4",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "bf4cf49f-df12-49c3-af26-22d116a1ce07"
        },
        "item": {
          "id": "ec033752-e14b-4f17-a106-047a9358b15d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "66b1a843-7431-46f4-97d0-f090cc567126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aef4c1d-6b7a-4799-8b8b-aaeed424eb8c",
        "cursor": {
          "ref": "e3069c0c-c19b-43c8-9bf7-cb6e5de5527a",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5a0b0f6a-ded3-4ce6-ab10-e82ab4704e36"
        },
        "item": {
          "id": "3aef4c1d-6b7a-4799-8b8b-aaeed424eb8c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6bdbe7c9-041f-424c-b056-122addb20fd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8421c4-6b49-4b1b-a816-7a990c6c452a",
        "cursor": {
          "ref": "a2cd975d-ac50-431a-834a-21306520413d",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "29c66b9c-86ff-41aa-8c9f-f17cf5974329"
        },
        "item": {
          "id": "7e8421c4-6b49-4b1b-a816-7a990c6c452a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ad25b3f3-af1c-4106-b0d9-b072b7248562",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 335,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38831a68-e12e-42b1-b293-97ef584b09ba",
        "cursor": {
          "ref": "d8d972e0-f2c6-4ab9-a16f-390ce180231e",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "339c5c63-09ee-4d55-9e18-9bc359654957"
        },
        "item": {
          "id": "38831a68-e12e-42b1-b293-97ef584b09ba",
          "name": "credentials_verify"
        },
        "response": {
          "id": "39859979-763b-44c1-93c6-e8723f94441f",
          "status": "OK",
          "code": 200,
          "responseTime": 874,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df791ab4-3806-4d27-9e2e-c1c10289210b",
        "cursor": {
          "ref": "7350d7cf-be9c-49af-b007-6985ec9a52c7",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6286623b-4a01-4ab0-9db0-a508c4961d51"
        },
        "item": {
          "id": "df791ab4-3806-4d27-9e2e-c1c10289210b",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "7e067d40-9636-4be5-ab86-85cf3fbf4934",
          "status": "OK",
          "code": 200,
          "responseTime": 839,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa53709-0f99-4944-ba13-477a118ae664",
        "cursor": {
          "ref": "2f51e7fc-859f-43ae-91cc-e25292ef0cb3",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3d7533db-c07f-4ae4-96a1-c675058744a0"
        },
        "item": {
          "id": "caa53709-0f99-4944-ba13-477a118ae664",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a2d47d24-744d-47df-87fe-24b9822737f2",
          "status": "OK",
          "code": 200,
          "responseTime": 2554,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551c46ef-319c-4ff5-8a0d-26d595ceceb1",
        "cursor": {
          "ref": "ec7c2d33-9bbf-449b-b793-7d4b6619e5f8",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4f7779da-6884-43e8-ab6d-3454e6fdb832"
        },
        "item": {
          "id": "551c46ef-319c-4ff5-8a0d-26d595ceceb1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9833302d-ce6d-4c28-8296-b171eef41b9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551c46ef-319c-4ff5-8a0d-26d595ceceb1",
        "cursor": {
          "ref": "ec7c2d33-9bbf-449b-b793-7d4b6619e5f8",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4f7779da-6884-43e8-ab6d-3454e6fdb832"
        },
        "item": {
          "id": "551c46ef-319c-4ff5-8a0d-26d595ceceb1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9833302d-ce6d-4c28-8296-b171eef41b9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551c46ef-319c-4ff5-8a0d-26d595ceceb1",
        "cursor": {
          "ref": "ec7c2d33-9bbf-449b-b793-7d4b6619e5f8",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4f7779da-6884-43e8-ab6d-3454e6fdb832"
        },
        "item": {
          "id": "551c46ef-319c-4ff5-8a0d-26d595ceceb1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9833302d-ce6d-4c28-8296-b171eef41b9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5cf992-e177-4b4a-b2a2-4f67104f1e5f",
        "cursor": {
          "ref": "fa7305ea-fade-4a32-9a90-b62d1d1690cd",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "05df4edc-bfc4-4032-8619-cc8c8a24453d"
        },
        "item": {
          "id": "4b5cf992-e177-4b4a-b2a2-4f67104f1e5f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d7a1bf24-aa29-40f8-8d1f-741f0742eb1c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f3ec11-3cae-485d-9f95-7823411f5b62",
        "cursor": {
          "ref": "e3acf104-8dbe-466f-a946-a2f9c080889d",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce7053fb-8ad5-4333-b7ab-7756421a4a73"
        },
        "item": {
          "id": "32f3ec11-3cae-485d-9f95-7823411f5b62",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c91857c9-9fad-4845-a583-9944a8d4fc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "32f3ec11-3cae-485d-9f95-7823411f5b62",
        "cursor": {
          "ref": "e3acf104-8dbe-466f-a946-a2f9c080889d",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce7053fb-8ad5-4333-b7ab-7756421a4a73"
        },
        "item": {
          "id": "32f3ec11-3cae-485d-9f95-7823411f5b62",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c91857c9-9fad-4845-a583-9944a8d4fc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "05437ad8-9cd1-4185-a48e-8c1cafdc8ff7",
        "cursor": {
          "ref": "bbb73a69-b31e-49f6-b23b-c42cb7a58913",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9d5cb92c-d80b-4b3f-9627-c6b56916663b"
        },
        "item": {
          "id": "05437ad8-9cd1-4185-a48e-8c1cafdc8ff7",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "17bdd1ea-9736-4839-9b46-2df9549a0ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3983ceb8-ca00-4ab3-8805-4ec11825e3e6",
        "cursor": {
          "ref": "620f6b61-9cd6-46dc-8f41-d08c81163e1b",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4665b619-c1bb-461c-b993-a7feb4ed686a"
        },
        "item": {
          "id": "3983ceb8-ca00-4ab3-8805-4ec11825e3e6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "233610f3-340d-4fed-822c-95376bd65dbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3983ceb8-ca00-4ab3-8805-4ec11825e3e6",
        "cursor": {
          "ref": "620f6b61-9cd6-46dc-8f41-d08c81163e1b",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4665b619-c1bb-461c-b993-a7feb4ed686a"
        },
        "item": {
          "id": "3983ceb8-ca00-4ab3-8805-4ec11825e3e6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "233610f3-340d-4fed-822c-95376bd65dbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddc2dbc-baf4-4805-919e-d83f88dede7f",
        "cursor": {
          "ref": "acda05c5-3b14-4d0a-9c48-4f967247afa8",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "741ce434-5ff9-4bed-8cbe-8195f87682f6"
        },
        "item": {
          "id": "fddc2dbc-baf4-4805-919e-d83f88dede7f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8144fb84-046a-47ac-a213-83174fa81c71",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}