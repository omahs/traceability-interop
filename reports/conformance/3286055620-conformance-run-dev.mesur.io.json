{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "84f5e9df-1806-4d6d-ab2e-0d83f81ea61a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "de877088-6c86-4fe3-a223-6a82e5fb8af6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "839b9c61-d581-43b8-b2b1-116fca35b182",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6c7a2ee9-c489-4e68-944b-0499096f049b"
                }
              }
            ]
          },
          {
            "id": "508170d4-4164-40b2-9db6-83998c07e7fb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d4303e80-9e6b-489f-adfa-5a9dcc63474c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c9a2118d-c1cb-41cc-950d-2e3d8ec0ac37"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c01d4e16-3238-4ff0-b3e2-de2f25ca2499",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1cd05be1-26d3-4e30-9b4f-1b3bd70f89fd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1acbc995-e3c6-474d-9d72-816b2fe9ca1d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bb7952c-f171-43eb-be02-6d547b1ad0c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c94f43c-bf43-46ba-844c-f437d88bad6d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1cded9b9-7a98-46c2-99f3-a58d4f7a81d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3bb7178b-3ad1-4a32-b4bc-d08f4d6fa85d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0a1d041e-43e8-4af7-90d8-92e05c941386",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb371f7f-661c-4f8d-a4f0-7b14608ea49e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44958762-c031-4c23-ba4f-fcf06e947ce1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8b1547e8-bce1-4300-8b1a-fc639a38c1df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0564c226-d0c0-4ddb-9574-19927b33fc9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ca0887c-a738-49fe-9828-95ba4efeaf36"
            }
          }
        ]
      },
      {
        "id": "a155f4dd-58ed-4b4b-8771-cdcd3e1daf87",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9c3fd4f7-b44f-4555-9206-ec58034946c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22fc8ec2-b722-40d4-a022-ec98b915414e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "85411a70-40aa-488f-b957-9f0d1f31cac9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1676ef8a-d1a2-4cf7-9a4b-7a510f37858d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "583cce24-4e2e-49cb-8158-40f39c0af605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4dfd06-0c04-40e5-8a61-92313d1fafce",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1daa1cd6-b301-4850-898f-c7c09f1f87c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c305bc64-9a6a-4685-8c7d-9354d7ff2b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66b2bae-1655-4441-a5a1-d8e3cb4c1d92",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b123ea3-f2d9-4279-8b7e-1f1019e54226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd727904-040d-4c39-bf29-be55697b182f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a7dd7d3-ccec-4d4c-9f2f-133fd75e60a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74a81955-fd58-4fce-ac43-7453eb1337b0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087f4f82-0768-458d-bb37-69cfb53bb7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e89cbd15-8445-4827-aadb-a647529b60f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a93c15-876d-45b5-a35d-bbe09dd5d0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "741c346e-a0e7-430a-a74a-869df9bc1746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb9694b-7592-409b-a48b-77ebfbb79d66",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137e822c-b09d-4898-9665-0fa6c895a2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfd6400a-ddde-45fb-8069-ebc91d17e3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23aa25a6-8e23-4fdb-a7a0-ecc413e143db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c3409287-1cf6-4b99-957b-162b1c749d6e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b239057d-a65e-4c4b-9c4c-64ec255d7ae0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14cfdf67-db4f-4c17-bbb1-6edd289f7f60",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9d8d1e0-1fbf-4ef7-b937-5551d2f413c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "26c62a67-64f9-4381-bce3-61bdf3ee332f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ea5e72c-8fc3-4ce2-b127-29da29dafd1b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "05d15c2b-28a8-46f3-91e4-7c5f7b7a5978"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20b6af99-4efc-40e4-8d35-6a0da770813c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "946e0aa0-959d-405e-b8a6-bba83ead56f8"
            }
          }
        ]
      },
      {
        "id": "c3c3e969-6ec5-4bd4-82a1-692a77ca9c74",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e7890628-ac8e-4ac2-af8d-812a50375221",
            "name": "Negative Testing",
            "item": [
              {
                "id": "945740c8-1391-4959-80ac-c7f639554d55",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d09f7b58-1eee-4587-836d-9efd694903db",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a865fe-464f-47e5-9829-0a7b8daa3a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5adc60b5-61ad-48ee-a48c-681f1b2ca545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0829d5-ef8e-4122-9cb7-f431f9f0bd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af49a382-0f70-4ada-8760-40cd6c6f46eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ad07e4-fcf9-49c6-9a3f-be1ef7f37caa",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffb2b70-e236-4f78-b3be-3e7c2b4b393e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b956b6c9-62b8-45d0-be35-d98bc562b143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad952a5e-c2aa-4ddb-a1e0-ff9f432f6e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92836a71-e89e-4966-9c02-a54205db3999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81200d4f-4213-426b-a1ef-39fa0c25fbf3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c276999-1862-4935-b2d9-7f470e56c069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a768bc5-69b4-44f3-a447-cdf5d519e566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360a12b4-208a-454b-bb67-7dfbd5e9818f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "137636bc-28ef-4fc9-a51f-502495ff1e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cd982b-2291-40c9-9b40-87552901bb11",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d278b5c4-8454-4500-a40a-65576d950a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c0e10c-0b6a-4f11-b566-e1e55e66aff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66449a0-8088-467e-b41e-d57e6ec0bbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6750f27d-7770-481d-b0ed-fe35751f217b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377ab586-d459-44d4-ad60-d109e02a0863",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed38f246-5396-4f6a-ad9b-5684231d4f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa28b7c6-1b76-40e6-86f3-8e68abb90a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71130e30-7f31-421c-b3c9-c17499b22796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "078982a8-69e6-4363-916b-522e499426e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a3458c-f843-4384-a963-a88de28b5a37",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9581553-74c1-4b56-84bb-d78f6f411969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7500b4-e811-45a6-980f-36a5aff8235e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ce2d80-ac57-46a0-8bfb-70040235f881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aac07391-d544-4118-98df-92c9d85fc372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd64007-4cac-4697-8ff9-f49950b6efad",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e33b3ba-a9f9-4ffd-8c90-92658aa25325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1db2cc-55ad-416a-a841-772c8de1ce8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6df3e2-c439-4f76-900d-190798cc8534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c03e563-a905-406e-9222-eedb47628ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3ba071-bbe1-4002-8c3e-b7ad2679860d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1cc97a-7683-441c-b13b-fe0af2fd2610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a5482a-8dd0-42ca-9b77-ac29c12e22dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502881a6-9ad6-4248-a594-b5adfccb98d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0df03fc-18f9-4ad9-b807-fc4ee3cec6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bafd6f-a7ac-440d-ae4d-0e3fc60fbdbd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31039f87-0b46-4c99-b92c-15193075a15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd6c98b-5434-45ae-87b8-757f3f78d44f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f78bad-c91b-4c11-8333-1b3f7f5823f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd0a7596-62ec-432a-8a0d-fd54aad50ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228ce3aa-de39-443b-881b-6c742bcdef86",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe22441-bc06-4db0-a74c-acecd4ee8e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d853de5-578b-47d8-8433-a2a672e51aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6896de12-a7f3-4c75-ae7b-724c9775c934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1cbf7c6-d519-4afe-9c2c-3ababbf9fbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7dacc68-2062-4315-8bc0-5dceb45cb941",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1d2783-f304-4a37-83bf-09f285d6a172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d140c25-501f-460c-8fb1-201668d7b333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5f6ba8-54ca-4d87-98bd-794e7b2b7d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d861ef03-a2a9-4aa4-bdad-174cad90a71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da267ff9-24fa-4ec6-a51a-696f741690bc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ace6d3-54c4-4b3f-b4a4-60e3ec4a7436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b109fba6-ebf6-4b2b-875b-87b519e89960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbff376-fb63-4820-8218-ea546f873273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5716077c-d989-4190-a324-8a2d957f3ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb1041c-2ec7-4cd1-b4bf-f4b398ff35eb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e6e52f-d90e-4a80-bb52-e2451002d198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d43a63-9d05-40a3-b27f-c1a5809c620d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473b0f10-f962-48e9-b682-de707ec5e2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2429593-a630-4b36-987c-9fd106c8d72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ae054d-f3e6-46bd-b6e4-33060456874d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a305b262-e19b-47b8-82e8-a0ef8a854ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8291e7-2250-45c2-bdbf-35a4f063e5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b21f87-ca43-4ce5-a4db-f9964a4e93cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a14f9c19-aebb-4b3b-8dc8-cc41bcc70daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f8d7c6-edf5-4677-8b23-c66e0678f70e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4c577e-9e42-4e83-bb69-e248268712bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb6a15f-f927-492a-aec2-7dfcb5934ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98570996-f46a-4830-b35f-b35bee42ab2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cca80265-44ef-4915-bea9-91c12423ba77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983847da-3366-43c9-a631-1ff1cfff7ed7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f169ce-7604-45ea-8d8a-5ab9f0900222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fbaa989-3bae-42bb-b741-c60041fa348e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72620496-dd89-473a-9288-3ac992c0a459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f606a12-96cd-4df0-811a-4305bef2b8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87493eb7-7696-42eb-b07b-572ba6d32301",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1af4541-1cc1-4976-ad56-912afc7316eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e649db5f-3820-4307-b6ba-3f82193a3946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35290133-86cd-4dcc-a957-ded2bfe11e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49c03fb0-561d-412e-b88e-97b1ec325810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded506ce-a6a3-47a1-a547-c72f30b969d5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6c0e25-f98a-4da3-a7b9-871e8033f904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef24659-f576-44d9-a2eb-e436c0727690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fca8eb-5b04-4e2c-b7d4-d9bb6452b1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b76bab0f-70f2-4bb7-aa7d-506052f65743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4279439f-ee13-4d12-9159-aaf02b611ca5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691f27b0-af2e-490a-803f-ce16b0c688ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee36ea1-34a7-4855-97e2-e52233d672b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c1c5b4-6779-4d90-9ba6-ec9b447c6ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d0a0c4f-0538-4d01-827c-313d287ddb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5308c8-24fc-4452-8726-7d9f1ea127eb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a88b23-d03a-47ca-8991-2db29eec0ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee609e1-f3a6-4a39-a715-651659aa9018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd340d0-dfb7-4263-b367-3a3e0f44e2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a18de4b-875d-4733-a8f5-33a22cd35918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f6088d-1159-4dc9-a069-bbf6611d5e85",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b5a468-8dc7-4b89-8f6a-af27cf041b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f19ed3-2621-40f9-a873-c0941858876c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1036036-2593-45ef-b25f-097bcdeb9267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aecdbef-5f72-4034-9ee6-b208e2a9b159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3890ba85-154a-4ae0-a79e-6c8454d57125",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa6aa13-41db-48ea-9c27-00045ce23272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c4204ed-ddd7-4220-b61e-3b58dcf835aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f45bdf-6871-412e-9960-3a7f0f791547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "039587ea-cfc6-4268-afa4-2b0bc6280879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f62aeb-5037-4a16-9fdd-d70a953b6ec5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552d8eff-8c28-4dd0-8bc8-6750cc3e28b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f17d93-054d-44e5-947d-0334d2b32c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bd7326-379b-4d98-b972-eff7cc703deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e5b0504-90fb-47f6-a2cb-d15b161dca8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1f1f65-54c7-4903-b836-61ad7a53fe19",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e530e65d-4080-48d3-912a-8cce350dc423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a0500c-c4fc-4190-a0a9-c9ab5c8ed927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d233bfb-d2b7-4306-aba7-3925d36e6487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b613b99-59e7-4d58-acd3-a8cf1cd23b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a945a9-ee31-42b8-a0a8-afb215f51e89",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c6557f-ef13-4ab6-ad1d-749d9dcc66bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2ca959-b882-4ae7-acf8-41b52d32bd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300f00ce-a81a-44ef-ad81-36e4b2f0ae9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3098cf-9eb1-4a7e-89d3-07897c9a025c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6433e5b9-5cee-4232-a350-ca6fda8ec1eb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5f6073-4760-4571-8448-15c9d2dedd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67ca90d-0ec6-461a-b496-977b35f19d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7c5856-082d-443c-913e-447100fa58e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a828dac-f031-403a-86f4-15edefb0ddff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa12bc23-cabd-41a5-84d0-19e595506a21",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e42d9a8-1d5d-4456-911d-a4a358269a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5591b395-18ef-4cf3-abd4-8b9fa0cf3d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f43345e-f355-4762-9ed3-095a49e64225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "36b8d997-2ee3-49d5-87c4-461c57101bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b29e5a4-a066-4d7a-9d81-60cc9d21472d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92707322-a36f-4487-914a-6be4cc8335ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ae351e-a86c-4151-9669-2a8cfd143e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fdc06a-0193-46aa-89c6-413405f1b601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0dbbeb-338e-48b0-95a5-787bf85c2e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f4a1ea-480b-4f86-9d9d-e0f15b1ae32d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738f47fb-eb13-46d7-99fa-5d599f3b8ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bc539c-a398-4ac7-acab-121ba8d7d8f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9aae34d-42b3-4576-b609-ce50cf3f6d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23b176c5-3085-49e2-a646-c7bcfa354fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2472aecc-8f88-4544-92cd-0059c3c91ea9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c68b578-c1f3-4a09-8ab3-b686560710c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8980301f-7a49-43d9-a856-f50a3ea19b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e00f11e-8b8a-4eb5-92bd-8e525eca6c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a60202-ddab-4dc5-9285-7983b52513ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb06e6f-fe1c-4f81-ac77-0712f498ee36",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b810ca-8219-4072-8eef-9cc8be8289af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecce8a05-17ce-4e9c-8cfa-d882aa9d4b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bdde50-b9f2-4fcd-a04a-621c1e0f868c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "63b0073c-1ff9-4abc-896e-0cd20d9c3127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29546b0a-57e9-45a5-ab15-bb4540e8aa18",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d425bb-f5be-4760-b7c8-14cc9f33cfdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f35921-9569-47e9-b772-c21d40899fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e75f748-7de1-494b-8c4a-72640a086836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37122402-f123-48dd-a3bc-1ee09f435974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf08f810-6860-495f-84ee-4d30c563245d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d85d417-b5d8-4506-a38f-4fc359f72a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec75745-ac81-4e9a-a774-597ef7b4288b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fa329e-b3c4-4a9d-a7e7-2458f9c64d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2fbb41-4d42-4fa7-8d57-2419954c6458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23728d4-484f-493f-93cc-416b5214cf4d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b73f07c-8e1e-4de5-b5b6-878b42fbefa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d854abc-8cab-47e2-8f0b-3b2894a09f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a17ce3d-c9ad-47bd-a3d7-aa26a71725ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb455c0e-852b-4819-9cd5-034109960c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717f4148-c211-4746-9b97-46a3aa268d21",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7003ddd-4b5d-4a76-b6e7-06126769ea98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18dfba99-a99b-43a0-aad3-d88a6488e94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba76b96-e8b5-4278-98b7-7dc8d27eee84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fd4e4b-4bd5-44db-a95a-b72a81caffe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77e2c4c-a62e-4bc9-9f5b-a97f8951e1d2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf9b86d-449b-456f-9141-c53ea71eb782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e6ef458-b949-4c06-9c3f-f7eb5d25299f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004abfc3-760d-4d23-885e-145638e8647d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "856c8a40-1e1c-4714-8153-e844764f0cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd630d7-6b76-47f2-a59a-647f45c7190b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d525f3e-4732-4985-b026-e8aca7c71e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c11db96-bcde-4e10-a140-cab2975cd618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37322f2d-84dc-4f84-af23-9518809b5392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7527e49d-6dea-4356-9790-5319ccab4568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3ec5f1-85d3-46f4-aa7f-137d23903ea9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1bd420-8bb6-469e-9efa-67c31f2df838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9931cc0a-c83e-4249-9ae1-bdf391dea18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179a369e-b762-41b9-9b67-5c61e3428776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8611acf-7625-4fee-b9dc-e10ea754bf58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7dcb32-9187-4586-aaa0-61153e1aa060",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "213db4fd-3b7f-43da-b9f8-816c87afe7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4915380a-de45-4274-92e1-8d944b27ebff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31afd562-e02c-4734-8b02-d857d4b93694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad92aaee-0c93-4c3a-8b1e-678e2168bcbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846d854f-583e-4b4b-89ad-81608a825f30",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4050003-d105-474e-8444-de104de1afb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f7e732-1a7a-422f-b317-cd7c244cd1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87583a49-9aff-4be5-acfd-2d58c35a6baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e00fc044-9ddc-4d63-a3b6-c66ebcc3c128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5857ada9-8c6a-4b22-bc53-2bb627064d43",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c301d63f-4af3-42f6-8701-a04bd94d71aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac1464e-e0d6-48cc-a7f5-31794b39362a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70811faf-4591-4220-868f-f2d6128ff59f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b5d0cd-b33d-4f9c-b233-4c697c82e816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85402837-9aab-498a-9f98-1b02aa3e65f1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccddad1e-2967-4f69-b0b3-66a5c41bfa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82dac61d-1c8f-49cd-8b0a-2171f5967467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a7c104-7475-4b8c-a397-22861d099e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5c43c93f-f103-4ea5-a16d-8ae440eba5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79461761-622b-43cb-b6e0-f60b83781a5f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542a8f02-3798-463f-bd2d-9104703974a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979dcd6a-a742-4d04-bf9e-9e9b0baab77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0285a20c-ddea-42d8-a7e0-c80a8b048c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6aea08-2420-4ccd-8fee-821b1a207244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf654266-3d91-44c8-aedb-6ef676665fe4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b4729b-f026-45ad-b54f-cdd923b207b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b064bd26-16df-489e-84d2-17e5ba7a853f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0124a61-e209-4486-8389-af3631d6ab56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0df9702-15f7-4c97-9c3e-461406a402cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a917f5f5-1a3c-43a4-b18d-8f0543fb839e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9212b89-1e88-4984-a79a-eea6868598da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5292497-c0e0-44f4-ae46-f225be71bb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05f3209-e0ac-4779-a5c4-dafca5bf9fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8c6576-e199-4e41-9cc8-4d8cda5b0926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a6f0ed-c662-493b-81f5-07ef2cd25306",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cd8f0f-110b-4cc7-8425-ae4799cb7358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e90a6ba-885d-40fb-9b56-c8fea0ce6ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e8fac5-ac2c-477d-aac3-c694d4ba6789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9e0335-2dc9-430e-b340-48702fcf4fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b560f3b-29b8-41ce-a6c8-5a5e254e109a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c6f409-eeed-47a0-aac5-c101fee7c80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c96f2ed-64d8-4156-bf1d-0f149089efdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54357a8-0cc3-46be-96fd-05a4b9b63b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af5b8dea-61e3-40cf-aa17-a8556c4ea1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44e09d1-e55d-4e88-9151-bee0f9e4c490",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819fa31d-c443-45ae-9ae7-01b519425504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e01c6f-a377-4fa3-b10f-31ff100842c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3203b915-ee82-4893-ba94-558e390ec2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb75d86f-757e-455c-af6d-bb62120ac3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57bf964f-8b66-4338-a8ce-2b78b12340ea",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad729b5c-69f1-4ab0-8a40-aafa12df77ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c79f12-9f1c-4ff9-b5f7-29df04f31bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cafd9a-bc41-4978-b607-03b544246fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71b70973-4a2f-4cb8-baca-2719868b25b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846a5432-0b63-4e5a-8358-2c9fad00ac78",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cd710a-9488-42d6-b75b-1e880840f2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182f7d9e-c63b-48aa-ac41-867dd24351d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2997d27c-4caa-4409-8fbb-47cc1455bcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e53ced8c-121f-4d0b-ae5a-396ccfb4a9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d7eac5-d296-4692-9c13-d80fb3577433",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d926602f-3102-4ec4-9e98-2e475e3a3cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b861035-7486-48ba-bdc4-d6e571b55feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a444686-5969-4ae8-ad01-db43c5a5bf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "80e34b1a-44a8-4319-a8ee-bc22bfd63c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ee8be4-5caa-417f-8a43-9b3564bba112",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7c5f42-9af5-4fbe-a458-ea6ec01f1aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6a7363-9d61-4626-829a-6402b36d0470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3b8c24-8135-4d4a-a630-9683661e7f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "98d06b6d-63a8-423b-83f2-70a1d8f647f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27588195-ce5a-4f85-ade0-f4eade0b2916",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6feead56-ecf1-41c5-a4a0-7d9d02a45659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc74810-d175-4bed-8b6d-ef38befe972e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a252400-27af-4afb-bbec-f2299eb29237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e543bde-74f0-4508-ba68-04d3172c487d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5698de-f8ea-43a6-9be0-4d30709d29f4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b064dd6f-781d-4e18-bd2d-9b7bf2bb4491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc570f97-a3cc-4b56-90a3-e92874869522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fc66ee-3b25-472f-919f-9ebf97277963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2775036-cea3-4155-ba1b-871d342c8563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebf81d3-b4df-4050-bec2-c539f873523b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3b13fe-7f06-419e-973b-f7cdc411dd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10880fc7-c60b-42f4-8749-906c1c14fbef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5130837b-c6f4-4efc-9723-d7b970d51000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c98c200-46a7-4e1f-b18d-b3b290f1d3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1337254b-4ce5-4964-aa07-9e80d2a68b96",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0970611-61bf-46c7-9d9c-98625a941254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37dceda5-243e-4107-877d-3c85b189ce95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aae6e85-18a2-40e0-9658-d56715df47c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d4828ebe-6703-46fb-b5a8-635e9f10a499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d43234e-0c07-4abe-af85-98fc44879808",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a234a0af-60d9-46fe-8fa8-7ca88bb705b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8fdf051-0670-4ef4-bb9c-ddb63f699494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ff575d-1369-4d73-8064-84d350424f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a88b63c1-5eac-4a43-906e-621a2e6b5d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d0929b-27eb-4840-9109-43429fe89582",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8c1a55-da66-4653-ad55-f08a87b84602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e122b1-e4e6-4c35-bd35-baa623bdeb14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d5ca4d-1d5a-48b3-89a1-dc15ba27a518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d69b8d2b-c787-41f0-b238-1cb3d109bc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d039c05a-7791-4d4b-a6d4-4b41732863a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a47de9-810f-4a02-91fe-0ff554d480f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8285ffd4-8959-48ab-a53a-2a682c7c5527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21622248-a86a-425f-bef1-b4426df3d3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "59e50e79-1cfd-4d5b-89b1-3bd1066a39d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957978f2-af4c-4dce-9219-c3e051ba6d10",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee73e539-b995-42ff-a49d-234665682a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0286ad51-0648-4269-bc19-94dc150cc57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd081993-c846-4f17-8b48-26af06761dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "099abb24-75e2-4ef0-a1ab-fd954f70e57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d776b34-ebe5-4993-9be4-66366f6cda4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09741c09-9c60-48e3-96e0-b55d31b5db49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f72835c-1d80-412f-8009-5de348cfc45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686ca261-0c9e-4869-aa05-16233591b71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "06f9e4b1-d669-40fe-b53d-fb0483c1cc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbfc0cb-36b9-421a-94cc-e00176993f3b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b47c449-92e7-48be-96c5-e24db7c7b453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8acbc454-ee62-4640-841f-3084b0e4ed25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663e29ef-7ff2-49d9-a6c3-5aa48d84aa46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "11a99454-929c-4f52-b11e-194d91b168b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0622bc-3599-4664-82ce-c2e76be74b53",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd6d2d8-f306-460c-add2-88a56b87be3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a83c0f-1f64-4310-9b09-26be5c9420fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae53fa6b-7d1e-49b0-a365-e4f9d36bf78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "69ee33a0-626e-4583-80e4-a8c7681b93d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688685b3-183e-4580-98e6-f408011bb504",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91cf205d-d346-4d4e-9190-5b88bdfe79b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74541fd7-1dc3-46cc-b5b9-3cb28c109601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b01212-efc6-4cad-b41f-e02a71dfb179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a42acb0-27ed-496c-8f03-337018fb2944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02df6be-f31d-46ae-bd32-fcb00ee0337c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e1b41b-a771-4a73-97b9-8d77591b8eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a94d1c6-6120-4245-8e6a-6f2288fe53cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ede276-82de-4468-a3f4-2ad13f6af427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "323efcc6-1344-49ab-a715-ce560f50fe5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293d26d8-a454-461d-9a13-d8abca2e7c7a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a856adff-f1c9-4f67-a823-80b1025ca6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ad3028-e7bf-44ac-aeab-2074492dad16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae3099a-91b8-4f88-a6eb-f6aba026f316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eef4f312-c374-448c-a561-d201090991d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e068c615-a745-4698-93ab-254af03cc39b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6effbaa2-d1cf-48ac-a4ff-d31637f73632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43279b8d-b2b9-4847-ae78-eb1ee7d46f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e97a14a-1b06-47d0-8b74-af81b26750fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b5ad7c-6428-4c86-ae9a-1ab22325cc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ddd7bb-19f8-435a-ba98-1fe3f16d5d51",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff73e910-5a7b-41c2-b94c-0221bf3fb247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea42fe45-aaac-438f-8437-d86717035c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54a3202-8413-4416-88ad-9f3c8fbecaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a410303c-bd19-40a4-a9e6-32c99522feca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba717c14-ec4e-4ee6-aa4d-82ecaa6df224",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25953774-f185-4391-b0cf-dcf0351cd3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bbd5579-eb44-4447-8eb2-3d8364a327d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ac2dd0-ff71-4d8c-94d1-e956032ce463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c77e946-6792-4e73-b03d-a383436967a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1c06db-558f-4906-a0c9-4f4360beb983",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72497ff7-618c-4c26-bd00-b92afc04a635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9808199a-79f9-49f2-9f0f-3a7547865538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc6cdb3-2a55-448c-b6a3-3af96f43b202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eabad6e-f463-4ab9-bea9-269931a589e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e22907-1c47-49e4-8036-631d7b4037ed",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9843d43e-9f62-4d68-a4aa-9930bf0e60a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd667cc-e169-4bd6-8d02-f3fca27f2025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a860cf-1ca0-40e6-a6da-4139859edcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94cd1d6d-e006-4638-b6fa-ced41412de54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f235dda-3398-4cf3-af26-9426fb442a6b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c11bc5-8a3a-4619-8809-21d94500046c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060a5d0a-60a5-42e8-88cc-78fd9ade96e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cfa370-a7bc-4e0e-b3ff-9c51ec0e8078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50de3ce3-7acc-4c33-9833-d8718eba670e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0eb463-aabd-4115-9812-48df0e742607",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00163de8-5804-43fa-8ccf-7e5d068be384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d34b2f-0252-4033-a014-c6a64dec43c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3ae443-6917-407a-8ac3-a42e860c863f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1af62dfb-17de-4b5a-9c3d-36df22571451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a28077-3fe8-44aa-8d0f-1c4650d6cac9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a3b8dc-c4b5-4636-b774-82b2efaa1dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d43ca95-13b9-4e22-a9d7-8d5a437266ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cf0ea3-b313-4b0b-b824-831dc068bdde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6cbfed-5fc6-4fcf-b7f0-aa855ed1997a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142274e0-08b0-46f0-8928-fb591a98eae8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42378c1a-b747-4286-8883-8521ddbc5856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5192b3-0834-4cbf-acf0-9f3458cc84df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affbb1e8-924f-4ec8-84eb-96a5da0d3eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6ba5f6-1368-4ff5-885f-184046a516d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a35bfd7-286d-416c-a18a-bf471b3a7bb1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeb0891-fa6e-40a8-9632-b3d8ce6be0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0b5ae9-cc37-42d7-96f8-de1e600032c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41771216-9369-4944-9230-873dbc894082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "587f4a19-0f4a-4ad4-8730-6e0f60742998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3027885c-f23e-41d5-bcb9-195c1116c36e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336d7d8c-84e4-489a-8686-c1ed30f53b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5adeefe1-ea5d-4ef1-acdf-a13922de203c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c885034-b24b-42ea-81a8-c07c8c3118c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12604284-b8d8-4283-95ae-aca6e7694ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a55c3b-4bf4-4d0f-91a1-0fef1e6791f1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ec33f3-096c-46dd-9c3a-b0c4eed3e470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907ed505-060a-4692-b972-b687530f8a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92715b39-3d0f-4f57-bd50-b250a846cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46a09237-75d4-40f0-a7f5-c4dc3ff53df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f547135-8f4c-4b30-9e76-bca521b5c606",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f98f2b-787f-454b-92d5-648c976eae7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac629eb-054d-4f71-9b3d-f9da7df61355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b471161d-dee6-4687-ac36-a403b335226e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82989cae-9089-4c48-b8df-17da0b2840f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edac3638-3b29-4601-952a-e36a5998e4fb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ea28c4-7d0e-41f2-a1e6-daf73094cd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c873df-44d4-4778-91f5-90498d538410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15166028-1eed-4bdc-8331-c6362d36fa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e78f91bf-f888-43fd-adbb-cef590e0267e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c740bcf-ee7f-4bfc-9a03-8ba75b7404ae",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9af1895-564d-4ef9-bcbe-b7b6273a32ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ab4ae2-f832-4e5d-bddc-457b23bcbd4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03f2189-ec00-4b53-b08f-51797003e8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bb9296-6ec7-4637-9fe4-2a495f8a9213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f74345-d62a-40b4-b864-eb1fcc28b3dc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7570ed7-0676-43c9-a6e3-233ffd229f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a9536f-5f81-4e72-a1cd-c4799fcb3958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97840ef-733c-436a-8965-7c7d55e0f36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9444074e-1f8e-48bd-9b6c-9b5eca88ad22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c1a751-b1a3-47b4-beb3-22937a439c36",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32a751b-5423-4b1b-9951-f8aa6993d782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f09d8f-b2a9-4b0e-9a19-5f5e98ebb368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d876645-51e8-4c64-878d-dab40dae30d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2ea972-eb4f-4131-b533-98fc77594a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe48a9b-70eb-4941-b7a1-f9a2a527d2a7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150bfabc-2289-447f-a610-6c7fb79520bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bf31dd-f603-4572-bea5-784ac3432534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b6a664-d25e-4a11-9fb8-6a0cd5ad434f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26ec7442-8314-4dcb-bc4a-92107632c68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434af70e-07b3-4765-80bf-254e4ad5e2cb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5574520d-6d2b-4849-b5a4-d6e880d8b4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2bac640-1e69-473e-98d0-92680dbdf1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1284bb-2e68-4280-ad68-716f2c2a1936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dab1baf-f2f0-4c4a-bbde-6eff4afd72fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e431b6c-c332-44a9-af72-245d4af44bdf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2238ed42-c3bb-49a8-ad8e-aea57b6833e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a555c97-eb9f-4006-88d3-5db9285fe2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7dfdcf5-c291-4bc7-87ae-aef463564fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3b33f5-5412-4c81-9700-37da69e4c565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27f68df-543e-4a0f-aa3a-8a9b2517f351",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d52122b-0b70-4f56-84e1-a21e7082edea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35f64cb-053b-4a58-bd3c-435125d08172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2172e17a-2dcc-4d0a-bfd0-e577285a07ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8402cf84-0ac9-45db-a86f-fb64d43d3589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fff62b0-2e20-458c-9e17-71ae382f6ad0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec1f02d-eaa2-4ad8-8e62-90891898225d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb291af1-725e-4a49-86e2-f354549b2996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8be3eaa-dd47-40f6-8e12-530553ff004f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "af5ec6e7-d87e-41cb-a4c4-699fdf1bf12c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c3e166-5c7a-4c07-8634-3508c1d2ddb6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498b102f-b6e4-45d3-bf8f-2db2b6ebd20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd20fea5-a520-4f7d-a927-8e6051919b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebcacc9-2797-4ae9-b48c-df2ad9b67f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "605af58e-b364-45aa-af60-92f51089f417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90e89be-2778-4e74-9818-a265f58247af",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a41f782-3986-4125-bca6-0a9eab9271db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7dc98b-b0b0-49c9-a4dc-423296756537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ac543e-7a30-434a-a32c-6361dd9aa77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "36b118fc-6601-4c06-b36e-aa449a1dfc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668166a2-f678-4044-99da-92a92c633df1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f065476-4a33-4a36-ac0c-65f9cfd8fe70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5156946b-dab5-4a76-9c6c-07b7d42f81f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a13935c-e647-42bc-9493-234778b465f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "844cbf36-b8d1-48f0-84f8-49f8e3d5fbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb168c9-1211-4204-9262-8d4bcedf5a42",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d0472e-1119-47bc-a2e5-8e7337213f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a32805ef-d493-41b2-969a-69928a6aea2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13444db-5722-44e4-a466-460af846fe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb485d34-cf2c-49ca-8dca-6bee36be1608"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3c4406db-b804-43b5-a19c-da8c1cc0f133",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "492e137c-b776-4823-b305-dd6ba2f81e9b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca4564d-2116-4a83-9b39-6452b94336ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0be1ccc-26e3-44ee-bf5c-094565336fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74a93a2-a131-4ff2-a5c6-0bcbc4d37b50",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b612ec69-342d-4ef8-ac32-b5d831197ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff22cee-fb0f-4b79-adeb-41079fad0ca6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c7ba0f-6b33-43c1-bf06-e2417d46097a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a2e6b2a-cd38-4825-97d6-6a3fdd42f63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad38ab3c-94b6-4dd0-9c0c-f0d6ec8ff049",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "922a201c-1449-4c74-a502-3aa05fea99a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca75da4a-413d-4d98-bb98-576e532633a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a1e1726-c3d1-43df-b39a-3ebd27bf29e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "def7b8c2-3766-4f9c-96cb-7ff62edee7ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5550c64e-7c90-4507-9337-85045b51ed0e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c478b1d-1c96-4101-b5c6-68856cb1ad57",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "54135927-4271-4f55-9f7f-bee1ef7a5768"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c5c332f-b43a-454d-a37a-13e6dfa86523",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2bf4fbec-dfd2-4a1c-9a12-13c989adbe39"
                }
              }
            ]
          },
          {
            "id": "02016693-4f2a-4ebe-a79e-69172678cd0b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aef3b9a8-627c-451c-aba6-89886e4c314a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76fefa42-193e-4516-9f8f-7d8da92acac5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "991565f0-5829-47e1-82d8-11f878697f4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "529f2584-2c1d-453f-99bf-f6c4cd994d19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "84db01e5-cc45-4899-9737-442da8eefb20"
                    }
                  }
                ]
              },
              {
                "id": "c54e0539-0add-48d0-ae54-a7b7874b6def",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cab43f48-be34-4632-8a83-e8b40f0e49a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5d7e839-642f-4a5d-ab43-6be78bc759e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccd24423-ba0b-4b76-8882-529386c43e1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec9b1138-3564-4084-928f-70e2187d6b83"
                    }
                  }
                ]
              },
              {
                "id": "9e1624c6-3043-4b32-af36-8129245a2506",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e9fb309-ba40-4eba-a4d9-5cccac866b62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56a29ede-2a8f-4697-8c74-12c311261ea7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e615e028-2e89-4a1c-8335-b8fa8e3add5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ab7cf33-abe7-4ae6-9e2c-fb6c30e647b9"
                    }
                  }
                ]
              },
              {
                "id": "d2722d2f-a66c-4904-a566-a4f053e36f53",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "019c79a1-a512-4a27-a109-307f60d8a5ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78c65c78-a33d-458a-83fc-d4992e2f85b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ade79a8-cca8-495c-9663-e8548228f0fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "beb1609f-d871-4ac2-b528-0ac9b2d9fc78"
                    }
                  }
                ]
              },
              {
                "id": "474ae9e7-e4ca-46aa-af5c-fe7ee68371ce",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eeae1408-cab4-4d15-8455-353236845163",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "72165789-e0bb-4558-ad97-9ca6d6a34fb8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94c368f6-a210-4f3a-832f-64e108893a19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b80f9826-88f1-413c-ab89-85768903455e"
                    }
                  }
                ]
              },
              {
                "id": "1333a182-d0fd-4c10-8784-94cd68d86913",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "673de02e-1a5e-4bc1-b57a-67463cc52b7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5009571b-76de-41a3-86ed-33b7e00af7fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b408f67-a232-40a5-a060-21f2c9286eef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c67f2eef-83f2-4bee-b489-957e0a3d9dfc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b33e104a-78d9-484f-81c4-dd0fd0642707",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9cb0be2-0200-45b9-8948-59cb25c18b0c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bda21bf3-725a-464e-8c7c-f652e0fe0da9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56104ad6-e197-479d-b9a1-4331e293335a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab1ca3fe-b789-441e-bea0-656d1e84862e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6c82c82c-2588-49a1-ab76-0b0cc99c1286"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0040fe1a-ed2a-465c-b737-ecd293a6dfe9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29725925-a78a-4223-be6b-5d905f5e4439"
            }
          }
        ]
      },
      {
        "id": "2cbdbc11-67fa-4707-8f01-d78bf65c5803",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d7876bbc-a874-449a-8193-90afd2c0a5f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2b216c4-a3be-4537-8ff8-bd96eb4e5f70",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc61627e-4920-462a-a98b-fb1623649fc5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd34d272-5dbe-45c0-adc4-5c18dcf66b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863aa8b1-4460-45ea-a574-9f52fd6e6605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00aee384-19bb-4f3b-bd3c-121c165dff61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a57961b0-7d13-4b4f-8f2e-67b438587013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c91553-162c-47a1-a8d8-7496f7af4474",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4dd8d0-23bd-4264-9b6d-00b3c6870959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274f179c-4b0f-4da0-b495-a17501b207a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9af98d-320c-4349-a9ef-46cae8af4556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f320c35b-da11-4181-9289-3d99a246436a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970aa9ce-c10d-4be2-ba58-392c17af9382",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2e9036-f3c6-40ea-96ad-9f2ae836f1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd18250-2d10-45b3-b7ee-1434d6e2929c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0645c7a8-4d8e-468c-99f7-f50d44531086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a13d064-ba42-49a8-8c33-ebe8b2ea0ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281c9ab2-9923-403a-b572-a2e5c2f75f07",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b444ea1-2747-4e27-8b1e-f20119bd2ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e119e40-49df-4f88-a8f4-38ec65840b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064100ad-26f5-4779-9d2d-432013a30874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f23fb404-89ae-410b-a160-6e0da6c5e752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77e757f-6f20-4e2c-a637-806bfa8a93a9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5efd6820-d5dd-49fa-a148-10b1f40d95e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2990f9-f58f-4891-a12f-d36e64866732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69356a63-ea4b-4c97-8983-cc473151e24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1812dd61-14b0-4f33-a106-0f032ee9eb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a6fc9c-69f0-4b83-b8db-e55750170b1a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49f72c3-bfd4-4f50-89e9-4140f5e6adfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94dbc634-a6f7-4fe9-b755-513e10fb2e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13f5dfe-840c-4f65-9cc3-c72cadf7d6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7085911c-efdb-4a9d-95c0-2794f370800d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5169c787-317a-4dad-89dc-03c35870a674",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b00c62-eeec-456d-b346-f115a810aa8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6775a2-590c-4323-8fa0-f9e96b8184f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bfd847-169b-481b-b166-d75c738e820f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8227cdfa-742f-44ba-8085-54bba68e7994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2efb9d8-9289-4405-afff-efe7f9761846",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2caad9-ffe8-4018-b0a8-dcffdd8f38a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf0118c-ed63-4510-abff-9a891c981ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76671189-e176-4ef8-8e46-1f9df4320deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "841a9520-a753-46a3-9ad3-4e013ec7a2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d789594-cacc-4398-907c-7e346e1e11fd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760b14c1-7719-4066-9a37-72010c35886b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2934e511-5e71-46f9-8b0a-20b165426de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8ba36b-3888-4ba2-8727-2a6581ea56b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef7060c-0c1d-4197-a355-6ab684c36828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44f83f1-cec7-48aa-b7f2-cbd0343d2664",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba2752e-27c2-46b6-a7d8-7ceda8ab6fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62b940d-f9d4-4e4d-a6fa-8397c1d27466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309650c9-ddde-474c-a4a3-237e0d3e1584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6ec23d-74cc-426c-ad08-89de04245fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d886049-9222-42f6-83a1-24dc5f398c11",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a4024c-c2fa-47be-b011-f65f08665f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba002fc6-6e5e-40a6-9b04-4a08ad2e25b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9d7207-1f35-43e6-9279-ce21155790f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4b25e911-99cd-41d5-bc61-ba932b4165cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b611e76-3326-4952-bdac-a8d5f749590e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f86b5f4-6e61-461c-996b-fbba0626c8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa08ac1d-1ca9-437b-8673-4c0fe153c9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdf0714-479b-46ee-a72f-b92f589fc140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96d331a6-98ba-4ac9-858d-863a4d856eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6250e65c-c6e9-4f72-9813-12c454b960c4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97849b94-7e4d-4111-b899-5da512dda985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a2fdec-0b53-4652-9581-dcbef2a7edc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661ca3de-5ce6-465d-b12b-7b09c462565c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfff881e-e55c-47e8-83bb-6e9f4a9e7288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa15244-852d-4d51-9112-9f7191bd950f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a236522-d90a-4fe1-b3d1-5e0e546266e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1233bd4c-a837-4edc-bd0a-9bf8734f3aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa27130-da44-47c0-8cb4-35af308fc881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "da9a1d4e-8dc3-4a75-949c-2d41b1a1d228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f74276-e4a4-4e4a-b589-8bcd28678a0e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e4784d-48c9-4a89-9238-72ea80a0d504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58af5b3b-2167-4136-bacf-e534dee26126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cc7741-16d1-4147-a133-24b3683a40f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a493ea39-dfb4-4b49-b353-59ed705f1d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3089709-4489-4ad8-9ba3-060a2befa317",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722886c3-ad51-437e-abe9-7e55375a2049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad4e2ec-54c5-484d-ae4c-9ca731442212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9593e8a8-7c77-4150-b3a3-ff660a54b2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "97e0b1b7-10da-441d-ad29-1e5007863142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521596db-8bcd-4d09-a387-11474e089215",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df454e39-2421-4e28-8f4d-c8c1af6f4d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a03a8d-470b-4afe-a6f8-a5509c4bad1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60b8bf0-c265-4dc1-9b70-b2103abca0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0da366f3-7411-4d78-9d8d-e0b06cfd1b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1838b4e-93fa-46e2-baba-554fd61716f5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445f1b93-35c7-40ac-abaf-d5cb99d6b9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e14fff5-af4d-44ef-8e9c-8e0b305d98b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0cef2b-dca9-4f2c-bc9b-1e5f79de5b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6643cd-fb71-46bb-a49c-4d72168256dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ffce19-bb13-4f36-b28b-9f7eb0928f55",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebc66ed-43bb-41c5-8615-19e8735bc3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052efe4b-0fe0-495a-ae5f-ce5cae54dff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62da0682-1ca6-4875-95cc-b6aa9a6065ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1c2ade-d6c6-4e53-9cc0-b5c03edb2029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f296a2-68d4-41c8-ba09-b7adcb422eda",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592565a5-8832-4042-9784-ea39390e480a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f9eb41-cfa1-4323-862b-fd0e256f9ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013d1c06-6e79-497d-bc47-d693adfc752d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c40d84-34a0-4fbe-b253-9de421166806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a246b86-0f16-46e3-a17f-cd1c9798d457",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390b6bab-ce75-4821-90d8-5da7d865fbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18981177-807a-4c95-be37-6735b18101fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16ee5ba-a609-4847-b9ec-324a18475964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc754cee-9fef-4f21-978e-477d8baef62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a525d60a-b04b-4ad7-8786-95ba814dde9c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362c36ce-ab6d-4623-a5c3-04661854b1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e8a333-c8e8-427f-823a-fc8a0eabfb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba18f16-3698-4893-9055-35997db9341c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c83fba71-f48c-41c0-9315-8d4c08aa6f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e1eff9-9e83-4225-b153-974e16963cf6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6503cfa-995a-4a6d-9842-48b0b7a5eb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4096f977-120f-48a8-b589-3e5e40fe1062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1ffabd-969f-485d-a1a3-ce36fbf71b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08183a7f-10d7-45bd-a728-2dfb75ce3658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b05cd8-16ca-4158-adbc-f87213e599a9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccc6965-0245-4903-8b39-946b1bc5c79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490ff386-f41c-4ce2-a0f6-312b83bb82be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f862a000-a096-4433-b807-251c9b9a4bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "143d9ecb-2f18-4bd7-9bd0-6911526dec47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2965bc5-4b38-4ab9-992c-3b08a7bd823f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315d9404-88de-4085-afd1-acbc35bad27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34a054c-7332-4688-9c62-6ea59a48f48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58677593-2778-4226-8c14-b74aa65b4dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f1316d-02ce-457a-aade-3d20cdc1cbbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd9d690-bc2d-4f83-8474-058f75480b5e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb1f133-ba82-4f96-8b6b-8ac773e025ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e94e3b-1c3a-4208-9d66-92e947488525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a695ef99-29f7-4984-82c4-44cec1092a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf37b109-345e-459f-8157-7741fcd992ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a9c5b4-0984-4273-a68b-86fa06a23ff8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6769c3-557f-4808-a3f8-559a297bb5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86474c55-3d89-43cf-b615-ee9286d3cff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edba968-7a02-4fce-8a36-7aec939bc628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3baacc4a-5117-48c7-acdf-f96eb85d28bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ba6ec3-9fc4-478c-93a4-a064355f36bc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e0f5f8-66f4-474a-8ba3-f94764dc1554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6b7d5d-6198-4f96-a87f-3ac7b745b0b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d599a300-5013-438f-867e-0ba9602abf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9925ba12-2593-4f38-bc86-184661759499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71af2b7a-2cd0-4054-bf41-fbe407054956",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ecbc3a-5a4a-4c3e-b51c-f96652ad35b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f497b276-b6d7-4f24-b97b-3271b3026bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64dac5d-583b-4648-9c2a-fd5a9f9e49dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63880321-5075-4e05-bf9b-2ed563e916ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e063096c-b241-46bf-8fdd-5dc1fd4f0c7c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7126f7-3f88-4d72-85c0-a8cf3e587f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc5f70b-c580-4523-879d-3dd97962fa57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e906853-af0e-4c08-b647-02439a731674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2357aa83-d224-4e68-b1cc-6728279026e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2e7511-d4ff-4ac9-999f-397dea70bf14",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e864f7-4bdd-4629-80f1-633cb8ad4ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a5bdbce-8c89-4358-b1e8-4bb1215feaba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd33892-92de-4f75-8de1-b30a5bd6a100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5926e28f-c0bd-49e9-b9e6-5908488b0de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4134e7-170f-42a2-b8ef-3784383514b5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d684d4a0-8514-4481-be3e-5a2f586a2b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251b6bed-3a97-4501-8f0b-f2e479d90573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b4b34e-001e-4510-8f82-e3fda9eabf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b85b42-e725-44d3-918a-d70464baeffc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3fb14671-6146-4d0e-8b34-26693942676c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "17875fa0-e4ad-44de-98f7-99d0dcef1b4c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c45706e-71e1-416d-a303-7c79f97f3877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ea5254-369d-4050-9819-e43d2c94ea33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d8328c-6234-4c9f-9c72-9c10b6d5cd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e02a9767-b82a-4818-8320-b39465d7dc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51739760-5902-4573-a718-964f6151b09e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f971a7-8432-4149-911e-91433f7d377f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3aa90c81-88bd-43fe-afeb-6f31bf4c23ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6806ee12-88d7-4c75-a331-008058027a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e3c0d33-c55b-476e-97de-f5bc7d0334f9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8ea2387-e9b0-4a78-9a9a-766b812b480d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "675f0dbc-e218-409c-b89d-f5423a0f39a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff45dbc3-0a34-47f1-bb1a-1aedf0c427bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53f1fa55-a6d3-4279-b70e-4cb993bb3a00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "097473f0-8430-4156-b908-edb551cd0659",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec0650f5-795a-48be-ab1d-88e3c7e11611"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e03739f1-0af8-434a-8454-c42550e68b74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f480f93-6c40-4f07-94de-2c9ceb3f8b76"
            }
          }
        ]
      },
      {
        "id": "8a62ab44-e005-46d3-a6ee-69b213e7bf46",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a7c590e5-63ad-4779-929b-0ea257a32c9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1aa6e8b5-fa55-4266-89f2-f3b49c9ab068",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8f8f4274-8003-4deb-bc03-a6dfee4b0127",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a86f463-6ba4-47c6-9da4-d450c36fcb88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f984bda-8f35-4891-9fb9-450ddebc9387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f480dc7-2a65-45c5-85b3-57d3ddf7a2b8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def69548-329a-4c9b-8c90-f17c818f6388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1362ef-4db9-466d-805c-bb583cfde658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55a7185-5112-461e-b99c-fe84b742f400",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65df557f-9eb2-4cb3-9149-f4da4c0d49fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4685848-692b-4efc-8596-88ce629ed739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da48fb95-d7ab-4c32-9274-3530437092aa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90aff89-2ec9-49f8-b474-27cf40a677d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d64b0c2-a022-42fa-a764-9c1b8caa54ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029581cf-1b8c-403d-8426-7ad789133107",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eccedcf-6406-4236-aea1-0e23fdde246c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c8824e-076d-4f93-8533-deaaa7be6eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ac8a73-70e4-4e25-a2f1-b4bb84e3f6e6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511f79ab-5d14-4503-a87b-469ef5d16c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8f901f-00b7-4fed-a9d8-b810b6fea525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7044dfd1-0272-4498-9538-109714a5a5fc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7b28b5-924a-48e0-9336-7b3f4726eb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a9ad29-9f00-40e7-b950-315b25d8ee24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761610e7-b9e4-474f-9cec-d2a6d7bfeab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82e478c-70bf-4825-af80-dd05cc8c0973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33524fbf-2c59-485f-8a13-d0813ea979a5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a4b92d-4f24-487d-a8a1-5f25298a24c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf0e270a-3a3d-4348-bbab-3580469ff1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0543e7fe-72be-43a9-8e10-c18d883312d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb8cbab-eec4-465f-8f74-5f1949c2fbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9fba8b-04e3-4628-a124-abd6546b1c81",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2c8a54-d5ac-4e14-9e10-1e222798d61f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f51a9e30-9204-43d2-b6b8-14332bf5ca91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb40b4b-f4a1-416c-8976-5ecaeac07e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5477c2c8-fd46-4e0a-a760-b97743a25c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6a2f09-1a6e-4368-9824-ee24894b003a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997e6d81-e94d-4ea6-a196-855e6b5ed508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06137600-17ae-41db-a424-4bae2013c329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d98fe5-1274-46cf-bc12-1f9c63f9d786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc5e67a-6636-406e-826c-74498f3601a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f85e5c-32b7-4e38-9f62-5b4e0eb6cbfb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d3e11e-8d1b-494e-bef1-06fd19c31bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cbbdfc7-9b94-4886-a160-d836d76f0138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b59d94d-deeb-4631-8899-2a4a8887060b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb487616-d8ee-40ca-a939-e116c419a888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdae195-00af-405f-b343-fda822bc69b8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e5289e-c606-4d6d-8727-7e756114ea9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9314eb75-346a-4fc2-985f-d004f82ba5fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ec0cac-ad6a-4429-9639-03b02c3e50da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c3c15e-c970-4eee-9da2-7213d9219d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fa7485-68b6-4c7d-8e51-50af503f9f1c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a59ff2a-c9d9-4ded-9229-62824e9d24b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f70b59f-6a85-4ea8-acb8-839b42227953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36110d9-40ae-423b-b14d-8063642077f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b781278c-ec35-4fb8-81e9-b3c7fc8aca23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6a5563-b362-4b2b-b781-be65fa3f1344",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c9594e-5685-4eb5-a6ca-f1c3f2388600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a812338-2e66-4340-ad69-46f953478254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcd6f07-7b12-4b66-8ada-9310fc7aa7d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b796d1-aafe-474e-9b86-9bff3c8f6d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac578aa-8011-4528-9015-625031f884a7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1c4595-e7ad-4922-865a-d6e82fe7ce2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cfdd208-cd36-479e-8f75-aaf8a2cc0187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddaf381-d2d9-401e-9aa3-c84582911966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8bbac9e-de2f-4412-a034-860b4ea8e388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482499f5-d9b7-4560-b16c-1a1f07040e8b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff2ab52-6196-4f5f-bd1b-dfcdda155073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7fd74df-7cee-4166-b9e5-302a17af6848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c515f7f-c7e2-4b23-bdbf-9966cbfe5dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ddef55-9171-4d38-abcc-d2e4f533597b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2da8b9-6bcc-48d7-b838-09d11074e9a1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cb7838-6bcc-4589-9cfe-d9142cde896e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "624e22c2-1d7b-46cb-ba8e-6689fbefd076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95eb62f-f5d4-4107-a4e0-589d9599cb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4d0b1e-70a3-4018-a465-4c9704edfee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78181d1c-3274-4d04-9462-3951689c04f6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c5ca1f-51f2-4268-b7cb-4220acf1822b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dd4f73-5a0b-4f4e-81e7-b2f87a58e711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c11bd3c-b371-4198-a223-25ecbb13cbe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1745271-2975-4dc4-a6fa-a43c74aef2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a649c82-a206-4a73-a2c7-418ffc0876d1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02baf2f-8ba0-48fd-9c0c-b826ddd81d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7d3d4e-f325-4e08-b5e4-1d1393cf1e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec95701-5cc2-4d05-b63d-230ebcd4169e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e8e928-bbe6-4b96-98b0-64c19b3eac86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad63e42b-0899-4534-b3bc-afda2ec2eb54",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ff2196-2625-47b5-82d9-43ed5a93226a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e06627-f10f-4113-8442-23d0f65cc4ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e81f0e8-9b84-48e3-9d9b-fa05424f39af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee0619a-2730-45f8-a84e-072c890caf8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd60e08e-df59-46f6-b980-0c3457ed39ad",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6dd754-a86d-4a0f-befe-257cc74160c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fadcde3-f478-4cf5-8917-028130296139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251e1873-f57c-4020-8437-c2466dafa3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3087b20-5577-418f-bf06-cd6047b065ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f435dc-b06d-4d33-9243-4b7fdd0c7818",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493fa0f2-5275-4277-91e4-223daed41c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c1e2b6-63e5-4e5d-9e40-c52402ffc3e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701b33bb-85e7-4e46-9937-a8d47d4111b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6149a9a0-05c6-4103-8a6f-42b726b6c755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc284b5-f869-4709-9f09-45c8280d104e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd507526-6eb9-4c81-b0aa-7b7049092239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ce92e6-d7bc-464c-9bd2-3d5e8a1b174e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1838f9c-940c-42fb-8805-ee2fb0f8c90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366f0519-8a50-49fb-9a58-639a43caa1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9a0061-5fb2-4985-8147-2888b0fbfcb6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90b53a8-88ee-42e4-8272-3f4afa233ffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd5e1457-5de5-4b09-8ad2-711bd375c6a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bb2d18-49e9-4c55-b581-d5d63d91c182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42069b9c-59a0-4736-b850-9e19323297e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39731c54-5104-4fcc-91e4-24c1b462f0b8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885fe513-711c-423b-8d4f-1161ba523c1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d30c5a-1268-4401-9675-78e28dc6729f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a42983-bcf9-437b-9e79-03e31b3599f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d2eb58-0b54-4cdc-9b85-4701ebdaa637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d528107-9c41-4f19-b27d-ff23d2bee923",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27004be-749e-40f3-ad49-9687a12732bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d72180ea-d720-47f3-9df6-41f791d14be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70093705-a4cc-489d-b5cd-ca6e065ace94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a84683f-592c-409e-bddf-aeedd4b1156d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0a3571-888d-4174-9b90-37b518f44538",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0379c8f1-3cb4-41e6-8868-3b0283730750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb72ada6-294f-48ed-b3e7-c1ca9d34aaa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "751dad76-df89-48ac-b2b3-1bb6a8d6c167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0453b39c-ccce-4567-9098-aac2ce546347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972030ee-0d34-4c9b-ab0b-ca5f7cad9f21",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4da39c4-7887-4ef4-9532-2853a14abea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec54ede-9765-4b04-872f-c5ce81d67d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe78d65-1177-4fa1-b0bd-8cd66a63c0e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a56d579b-cc20-41fc-8d2a-bf5d71062288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7c742f-a4ab-4931-80db-e315a7326ba2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac3a1aa-8aac-4352-99dc-fb763df610ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05d3895b-4edc-4410-861e-234b85fe386e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cc1507-0a36-47cf-b109-1ed0d065f0f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdaea90d-7410-4a52-af1f-98f99a4618c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f172e1a7-c6e2-4bfa-ae27-58b647c735f9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093be2f7-efa7-464c-b6a7-a44644b2a70b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37117837-c871-4c39-bbbf-690fa76a38ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650a7329-f283-4dff-bde4-8b5965213e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0d3e52-59ed-4c1e-8e66-38d897127c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51750133-2df9-4f8b-ba85-1636934840c8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb75be70-173b-4753-93af-928e8b18d532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9326163b-8d9b-4f3b-b820-2d78dd964079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e4a118-1627-4b64-b297-f5ca555fad9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca68be4-6d3b-44ea-88c5-b1f2635c4a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987709c0-e6cd-4be5-ad79-1e9818af8fb4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb2fcc8-5803-4fe7-a0f8-9c1062d42b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7440532-0516-403e-ba20-0fe11518a89c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2c38aa-d430-40b8-b108-94dc39fcc848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc4174d-75a2-4b66-ace2-d6e84e1c2534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a31fc8-2a4a-457d-bfb4-78297d124dd5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8af36e-9143-489a-b48d-8321ea96ca4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d543f59-2356-4326-bb21-a2243f18fbf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "430f7693-4e69-4fad-a207-b7d5006c6e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2299a9d2-20c2-4a0b-a701-71892889afe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129878c9-68c0-4f25-9f1e-132a5523249f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19b4760-6684-4b61-89ca-a9442a6a6816",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39ab4ac7-537a-41d2-8356-d569f4ae50e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df39dfd1-9d65-4bdc-bd75-898fef39b2ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a458ecb3-e2dc-455f-8a3b-54f3676e269d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48061c60-a906-45a5-b198-c5801775e797",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b5bb01-22ed-4d58-b744-0ded24cf8170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfca274a-4e56-4954-abd6-b05fec6419e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964e89ae-896c-4fe0-b261-027cdcbf3fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834b266b-186b-4307-82c8-ecf45647bb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29447de6-63ab-43c2-ba25-b1ec6b85d95b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c6d2e5-bbff-4d7a-8754-2d99074e5e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c517b0-0781-43f2-a490-254237b8fb9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a09fe6-1d83-403b-9991-58d5c88f2694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b8e09a5-ed14-4330-a06b-2573db0cec4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72907498-2b6d-4715-bc4a-8b1649f83e65",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcceb5bb-52db-47e3-8981-3ff01d66e0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc51232-5fbe-4306-8334-c94e834cd9bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a42355-4c9d-4972-8e44-f353edc67ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9af6d8-0ae8-4d54-b9f6-aa60271a4adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad56ab25-9132-473d-b77e-d5eb6e7f9ead",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa786d43-7f7c-4beb-b882-ea2191792b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82954205-2504-4fdf-ac43-b55a787aae17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68be8f24-169b-490a-a02e-934d127e18eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eec571c-2e6c-42d6-a5f3-0fd3956ebde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab4b3df-f198-4550-8fad-fce4f8bc13bb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db152bea-3bed-4fdb-907f-b0bb6c5eb9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da464b44-caac-4cc6-bc25-0b0d31498a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc044b4-fe16-4cce-be56-bd90bac02875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664b0178-100a-4972-a1a8-c463c25d8e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2783c0-d0a4-43de-a53a-7253cd0f7d0d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc0177a-afe7-422c-b3f6-433d8526c17a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11854ec3-36dd-4843-8dae-994ab249a460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a76df04-8cae-41e3-96ac-627381ab2e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c2317c-970f-4150-a260-486baa412951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa159b3f-8912-4835-86fc-5f56b3fe2f02",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127b2a93-77a4-4d09-a65e-dc39412b2a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd57f5d-ba7c-4b41-9c9f-33f70c7922d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456786c9-50e2-45f2-8d7e-e0ba6a65ba0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ea0af7-4b83-4f3f-9e6e-8a4d01b337f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d5072f-559a-4918-9d27-b4b9d8121d91",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60c2dd8-0d05-44db-8a11-708073d9a605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481934da-9c93-426d-9dc0-46d655a15370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6781e478-b41b-43e9-969e-0fa2478aa7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f01dd6-a117-486e-865d-2dc66ba79734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e043f36-e4fa-4657-bcfc-568adcccc09f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5249aed7-62f0-4275-a944-d767aee85cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c868d4cc-ce11-4481-bc9f-d400440d1750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9511ff08-ef22-4502-a896-f5b52c45ef58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994ba979-6079-4599-8ee3-e1e449a93b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69da61f-4307-4878-9251-8eda7942e6da",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b03e352-b5d4-469c-be03-199bfb4253f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5fbe9b-f77e-494f-b28d-f171490893c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aacb1ba-f9ab-4f54-8e9d-35467c719083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5d9854-a8c0-4caa-948e-977aac48c200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5829070-52f5-49cc-932e-f34b3b867f4c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9c3e95-8381-40a2-822a-22b8b253bd42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b7c542-d1ed-4e72-8e54-b6d4c293a692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "722707d8-cf69-49d3-a777-a48131fb3a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45771739-7aff-49d0-916a-83608bf94601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e8d26f-4147-41cf-b43e-62149902eb9d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55460ed-ad1e-45c4-85ac-29b749936e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2aa691-5de1-4c64-87a5-4ed75ef99450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41c2cf8-1480-4d85-90f9-2baaee3020a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5983caf1-3b39-4926-8590-b3ad7f35d6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0493c6f-2d99-42c1-aff5-4697bb510626",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf39268c-8903-48bd-a8ed-4428c2355e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af38e57-d12f-4a06-9ee6-ee898637842a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a9a69f-b4d2-4e04-8789-03bb0f796ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855b8927-53fe-49a3-8001-6f089339cfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebcedaf-6b59-43bf-a28f-093910f0e488",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f43299-3c5b-4ccb-be5a-f58579d95e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda0bdbb-c79f-4fed-86e2-812fecf0c873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3eee31-b0d8-401e-ba6c-2cc5740e9e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea936a0-5267-4495-87c9-0ca7ca09f156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280f1611-60da-44d9-b7df-6dcec8ec5972",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd83a9b7-5d8a-4373-8d7f-fb83282c065f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe28c873-62ad-4148-bfc1-fe234e3976ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac99be5-3c39-4381-a601-5da706f70a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bfd53a-c737-42e8-beba-0d3921e34f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3098dfa3-06d6-488d-8699-d696b161ab6e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8842c8cf-7a79-4979-ae90-7a12d5483545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1f394e-1c8b-4dc3-a20f-0d3ea20dcfea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4402c1-bc6d-4637-9c9f-0f2289f1b0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24349c58-11af-42b2-989c-742561850abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8921bb-db56-4cc8-8fd1-d214885b8aa0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37f67ae-258c-43fc-86bc-87d98e839aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34e00c1-b284-4af3-bc8b-b945d5475b62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9205f545-60c6-4bff-b767-50d03aeccf8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97b00bd-6e20-4972-a91a-82ff7e38264a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd7e6de-8223-4baf-8111-107633d25787",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3a9dba-e486-4732-b2e0-b4a7ad68b918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "632cc155-da3f-4f35-bc15-fac525bae178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bc8306-f471-4fcb-abeb-e48f6e257af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65428378-4ca8-4147-b81a-747d2a5c20f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2953699f-1b39-4af1-a8fe-b007587dfc8d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fd2dd9-4f61-4a01-abeb-5531673c3620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74b8f9d-4209-472d-aff1-1204b430b41e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c5066c-7b18-4b28-8529-2c8e3a2ea53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60ba032-cd2a-4ebb-9aa4-7f8d2a09e838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224a6628-628c-4830-9b76-13ea518fa9cb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bef7635-a80c-46d2-af48-2c3d657aefeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfeab242-df2e-4edf-97b8-38aded727362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0119010e-8052-4568-912e-568dbb3507ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48f6d42-1f16-4b74-891e-30b1dd09f3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ecc0a4-a334-4444-951d-3c7169851ac4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6817fece-049a-4cc2-9ca3-06a922b54c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b6fd60-bae9-4736-b35e-24afaf149ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86660cdf-fb38-4573-b674-882c5c009031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35596dfd-5ff0-4126-ba84-7d48d729b620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e553379-d03c-4270-aa6b-2f39f846df74",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb80f4c-c7da-4d5a-bf42-68aa2f7b0e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1617583-24d2-43df-8e6e-cfedd8ff9a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdcc512-8128-4796-a61e-e80adb97caa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fa5716-c179-4213-ab5a-2b1bc95d8dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549a188c-8ae1-4dab-82ce-f62c0e1884d0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8a76a6-c76f-46c1-92a3-dbc3405eee5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312f8df9-5292-4273-82dd-320d5df25b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b9b0fa-f556-4256-b887-c1c1654758b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb0c42b-a386-4834-a9b2-0db5550d8473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26155a95-a4ed-4641-bf84-275966e5b2ef",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579d9067-2173-40ff-b2c9-73eb459f85b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfa23c6-e794-4903-839b-6db7e123f681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35b3e0e-ddef-4e66-8985-1e1c730c7714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61efd35a-065b-4b98-8d31-0156a9075e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213d15ea-3043-46be-a287-66f744ee8024",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850c4cf5-283f-4373-9617-9ca2e3c88305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5214a8-edcb-48e0-b0fb-689cbac54302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fba956-42e2-4006-8782-6a0ec5e6ddc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d920768e-0ff7-416a-90c4-ce6eac9612a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56fd8e5-290f-426e-aa17-4bc58c99e95e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9428f1d1-f71a-4e50-a6a7-54d0516d614a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656d3ae1-904e-4585-804d-cbf223ecfd31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73daae37-a5b8-4b7b-a7bd-75a423d136d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28f8567-b102-4c9f-a631-343e548c3057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f14f88-9444-40f9-838c-ddb9a46c6a37",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfc1dda-5526-4689-8d65-b1e32682a9c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9966212a-51b0-47ec-b459-84b634a71465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6495f605-8f2c-453e-8c2c-d60b1eab2f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906791db-4a88-4601-885d-2a1264289676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cc8cac-341f-467d-bda7-6880206a7fc1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e88481-804a-4d9b-9967-317841689fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78399240-952d-4b26-a45a-6652e1557d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8cf90f-9822-4ef5-9a6c-3f45369ff948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f415140-4aca-4162-94ef-431f6ec1d959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545c37b4-f811-4d57-8ac9-6cec1a2cbbae",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe5fe16-cc2b-43c0-a84d-a1f8397c5767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9112f936-daba-4c95-a833-d9be0cb0496d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0675f3-83f7-40cb-99cf-5cdaa7ea26fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40de6c17-943d-4f16-91af-8ea87d5ea737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9bf0c1-89ae-4523-b916-1a77c08244d9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa883fd4-f6c7-41c4-9fe2-5284aa08304d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0d330c6-f88e-4571-b8d1-b605b9d90af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654bcde4-b348-4228-a4bc-97fb8eb0fec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd595d0-2999-41ab-9dc6-0207bce5ad07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf38ae2-25b5-47dc-ad1e-710bc31acab9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2092aa6d-6456-4516-ac31-16dda4d1ad88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c201b2f5-1d33-441c-b6b4-306fd1bbc6b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0107f732-347a-4822-a907-5e632b79f1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4139c1ac-d62b-4cb6-9a37-f454b66b33fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2b38ef-1468-4bab-a0c6-5952ad293059",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c24545-1880-4d45-8007-d14830ef09fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9997ebaf-8c97-44af-a0e7-c394797b8bd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72833219-7e42-4c36-a679-fb8357289023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd062cd-6bd7-4fc6-9269-6222be045ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577fc6c1-1d4e-4180-a3bd-929dc030a719",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b12d494-bd55-41f9-b9e7-1a88d08bb8ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89966fc6-73d3-479e-bee9-1b57c098e9a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32334853-e4c5-4075-986d-229028a15b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b77527-3740-43d4-ba42-899d56aece65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094676c4-b0fc-4a4c-aac1-07a6556dbbf6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a523a2-a49c-414e-ae5e-580e4b069a0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbef7eef-3860-4d5b-9883-ed4f41f7b639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b217b7df-6811-422d-bc73-d846e553445b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b344e8b-67ab-46ae-b0c2-8d110255f2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7884d75-821b-4bfc-a582-8811de60bec6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ae416f-0b9f-49de-ac05-2149b9a1aa10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b2f0365-bf30-4ec5-91e8-fdf81f5f8f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8f6dd4-d7ac-48fc-861b-9622c3a2be2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614f4382-8dc7-4ff5-af6f-3513ee7b4454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c5b8cb-f8e9-47c0-a7e3-e23564250f38",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1677756-a138-4e1f-bee7-daaf6c047e41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53a497c-e756-4f5f-9c05-be6ed3164c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dfbb8b-7401-4a6e-8869-3ec4306922c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf09dc24-282d-466f-86ce-9f5b2fa28111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bbcbe0-aeb7-4c8b-ada3-dbed2e4c4413",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bd37b2-1141-4461-ade3-3f39f902dd47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893b5031-55e7-4789-9baf-c7d8e9296c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ed42b6-e9a2-4a9b-b44b-d160c49b30aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5bd487-8e1c-4753-bcd2-d7aa54c4866e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1b0729-1d86-4eef-b363-4862ab6e1ace",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42ea3da-8b70-4257-be44-5ed438013e49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87f38e74-5952-42e6-8b9e-f3f398cef266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9528959-22d8-4674-9349-97bb98120c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e63ec3a-362a-44bd-a090-b085e053e115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78ae41a-0305-4d9c-ab59-c32d6865ffe7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7a8d21-50d6-4723-b29b-da69892a7d13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05bda6cf-cce4-4d56-983a-26f79d8be8b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "312e850d-7ea0-46a2-b455-df368cdddcea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c618557-66f7-4aa8-87f9-8d56b562639c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1808e9da-5cc8-46f8-ba87-a73167bd0adf",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed6db53-c5c8-4fea-bfc8-d252cff7ebf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05edae34-7f36-4ca8-9168-7f2834276108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0414d4-dd08-4bc7-9eaf-7eb73920f641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1402168b-0f2b-4d11-a32b-553b90727f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95db7a6c-7641-49ac-8cca-d3fa93ec53d9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ad74aa-9604-4377-9392-8bee93e8343f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ea871c1-6717-4087-be56-59dd48c20dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2634f3fb-40a9-4a0d-a5e7-a59dbfa6444d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df089fd5-7448-423e-911e-8331c3cfbc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f414be8b-7baf-4858-b1f1-a905d6cf2aec",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d43b01e-638d-4be3-9481-c7a47a84f205",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f0b66e7-1bdc-49d8-9a8d-88f9a1a8e65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710ed6d2-e856-4787-822e-eb7659d7a814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54cf1618-72c2-4f17-9f73-6ec25f1bbcd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e790a63-8fca-469f-9e36-497fedaf09f3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f657cd5-1d2c-4e95-a8a6-9efea2883dc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "190861d9-b71c-4468-ba69-fed3286bae20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ac890c-e9da-41ef-9b3f-1dce07900b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66596384-4e90-4bfc-a182-68cdbdbe15c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f76ef2f-1a1e-4d03-817f-afac52601e8d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608feec0-693d-4e9e-ba60-ae2ec719d9b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79aaaed5-5abf-477f-a66f-86317a1ac1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa519ee0-e66d-45f0-b3d8-aaa94711c30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ab62ed-be3a-4cc0-b9f7-316b41b4d87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8c9516-f96c-4c98-a220-e75459a5c869",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b83d8d-c103-4bd0-9b20-7885000f4569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ccda712-cfd4-49ea-be10-829c92e55ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a45ef38-2fa7-4f64-9e75-4159313c8127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a564d7-8448-4f9b-b71a-82bb00aae970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb580aeb-6846-4a2e-98a6-4ba0be0b2910",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a22f2f-8685-4286-9bd1-010e617680c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12cea3b8-36c2-4a37-891d-d94ad7b50238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7651d1f-0d13-4e05-8617-c9db3536030e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee65843-9a0c-4b71-811c-3fba53ad744f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccc21f6-0009-4805-bcc6-6abc8345fb8c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1a2f1d-52b9-4f1b-a4cd-a248357457dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af9dc04b-f341-4bc8-9ccb-0f6b0e8c64e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89897061-069c-4b1b-a462-89c4d1bf66e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a82378b-eb00-4ee3-9869-32b0c5581b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411ac562-e0cd-446e-ad3a-9fced8921d6a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbce6988-0d27-41a0-a1e4-a68f5ab72228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85c759e2-d99d-4443-a948-ceaf028f5437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf87d6a-460e-48f8-b466-ec6adcee6b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba26348-c2ee-47cd-a8aa-d3e2f29b632b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb14dea-a41d-452e-a9ff-597bf5647c20",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2501542-63c8-43e9-bab4-f7ded41c4666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f653f86-b11a-4ff7-abfb-62b884d8e5b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "101ef16c-729e-4c2f-9fad-07d8eb8e7f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fcf4c7-d345-45a3-9b88-31183d89c011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b74ff1e-8301-4eee-a15d-ceadd1525aea",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16c500d-e8f2-430d-b5af-3a9e8a29806b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c219e8fa-6b93-48a9-af0a-523e9503aa54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ba2676-7ec1-44a4-8a9b-61cb4d1aabe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557f10eb-6cb7-4e93-bd9e-c5211a68568f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d880ec-ebb2-4ac8-87fb-917c3b4b71c1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69cf41c-67e4-49e2-af40-7bf3b6f9e504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f250f09d-00a5-4556-8bb2-031cea380e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "523a4099-122d-4c6f-bab2-8b6b74f627af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bf0dc9-e6ae-43e9-ae16-41b7fd381a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d0e386-6343-4d07-8623-be125e68a615",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191b157c-c158-4ee9-89ae-74d59d6bec44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e46a1548-f9a4-4bb7-8422-bf78be5ba23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead797a6-66c4-460e-a105-9c40360e8469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e655b5-993b-4489-beab-cea163b82f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd4543c-644c-4e11-8c24-f454c4a19cff",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939ae064-589b-422b-b2dd-106309b816b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "285cc771-aec3-49aa-ab6f-15efbcbba0f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbbf44f-7fe8-49ec-9fc0-bbc97ccf996e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be031cb7-d86e-4a16-bd0c-b0ab2a6641d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4234e0-a6db-4584-bd89-155d104ef8d6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c402c756-ea79-4831-9f99-89e9ae98fa4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af276f4d-ee74-4717-b74e-28860f7467fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef18abe-2084-49d6-a0dc-bcf02199a6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4171af89-5e1a-4c8e-9cd2-fa067a055575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a63d82-1884-4342-8ebd-cc3fd7439e35",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd7091c-f0fd-4abd-b5b2-2ca6a14f9f4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9559cb79-7b64-44b1-b2f0-ba03d26f18ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d3e066-d908-404e-9081-2659b5011588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2abf09-4f03-484d-a2fc-94de7b580d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d40c622-6332-4eb1-94e1-3f2a942a88b6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f832af-d5a2-4a3d-9c49-2057cd295ed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dfb3dea-8099-49ea-8b4f-29448b01e17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "943abee0-0899-4b51-b944-dc3693979793",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9468d7a1-ce6f-4f0a-a6a2-e65b0dece48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d20ae4-7ba0-4e29-b3eb-b81eaf1cccea",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd12624b-0b34-438f-a995-944980745ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a79e8b83-925b-414d-9149-c6e0649fb37d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced3e2c8-7873-434e-9971-45dacd127ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39268f97-0629-45fc-a412-3f61961b9abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744719ab-0edb-46fa-a797-ca5bc0b14268",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef29206a-88d3-4ace-bafc-d9817b847ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136e9ca4-ca6b-4e40-b108-a0fe5ea59d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d75849f-8239-457d-8965-c94fdc18b0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd907f5b-f2c4-4e15-8cd3-7938b0be56b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60843a9a-8763-4fdf-8e4e-53fab5160db2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebe470a-28f1-46a3-a8ef-3e9dd59ffa7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93844d5d-a3d1-4acb-a5bc-e97f1d438761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7093139b-903b-40f7-a027-5bee98b1b28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46941f7-a98d-4cf1-89ea-214d15597a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4ae11b-70b7-45bf-a2af-de3c9f6cba45",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979e3b04-79e8-43fe-b0b4-0d73d695964f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccdea9b6-46a0-4445-bcaf-51cc66cca5ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a7dba6-7599-4b51-b6ff-26cc4944c606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c627c8-5f7a-457a-8261-1e8cecb6fc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd52b1c-325f-45bf-a762-f5805301c0b6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847d7cab-675b-41c4-9d3c-f2cfb652aa71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4220678-42d5-4255-a1ff-11ebf8f7900a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92760fde-6e3f-42be-8828-69d4e732c1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d210c761-f161-46fe-ab95-76fb7b85ae25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccab278a-1cf1-4ee2-9f56-5cf70cbfce68",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da00d64-a205-4356-8bdd-3cf57ac5ff2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c544ddf7-e117-420b-b471-01d7e4514d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee75e04-ca61-4f62-a53f-baf005f750c6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4631b38b-cdc1-4b3d-8e64-62d9d66a7f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e342473d-f65f-4ce1-a79f-8d93a77b1590",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c4402b-f35d-41c6-9a56-52dd288e7e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b83767a7-ef19-4e69-a036-3070e1b5fd52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bf5e0c-4ab3-46d6-a82e-4d2e39b8184d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d53fcb3-65b9-4509-9a35-d6fb9901968d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5fdae50-9a2d-47aa-9f8d-09fec7d38ed9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "099187ec-519b-46ae-8eba-d0302c0f99be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e273b9cf-ead1-4697-adb7-b1e4f922c509",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b03bd1c2-90a5-46a4-b4b9-f8efc74117b8"
                    }
                  }
                ]
              },
              {
                "id": "c583a712-941a-460b-87ed-67f05086fd3e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e183fb04-cb8f-408b-803e-4f516fd422f8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f5ee51-6ca2-42b8-8de1-2a3dde093bca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4c30414d-cfad-4e36-9478-037d033981ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8587d1-4111-45ed-958f-76614440f8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdfa3ec1-e0eb-4804-80b9-732ec9e3f26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6150dc-6c0c-448a-aa4d-4507ef14428e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65120d3e-c15a-4470-b559-21f02b208a58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "34f8b85e-24b3-4439-91b3-e4c313905c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "255d39b2-9e44-4c4f-85a0-ea8106da9d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ffa66c0-fa2e-46ba-87d5-56ef99f872a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d171b51-b887-4405-8ea0-ff1faf21105c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87a36fe5-2567-4f20-b1f6-a8525b33f5ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97c8de77-59a5-46c1-b77a-782e7b7964ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bcf9a68-750b-46d0-8445-6ec6bfaa83d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "c21ba01a-e1ef-4353-9cfd-0e5fe3dcf7c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d029f11c-e773-465a-b7ec-6e56d392dcc4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8911248-db95-4fa4-a936-3289f0584794",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "771d8975-0bc4-496a-9135-e973d507a37a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "123125fe-bd1d-43ca-a425-8b2ec14e8b94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1245373-0d90-4060-815b-d42082d423bc"
                    }
                  }
                ]
              },
              {
                "id": "0d788fac-2f21-43c6-b5c8-3e9adc8f1af0",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d2fbeab-152b-43d9-950a-4dff41d00100",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f99b4554-f294-495e-8d51-d7d1f9b7bff1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abbcb4a5-b8ad-46be-a794-40a830c6c4f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2708d146-cd23-49d9-8b58-7154a70d14f4"
                    }
                  }
                ]
              },
              {
                "id": "8bf611ae-5079-4157-9e72-e02dd009b3a5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1144661f-2325-4521-afbe-da68720d8b43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b34aea5-b84a-425a-87a9-7f37a198381d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4afdc2c3-6c43-43a5-87ea-e7e58e47b3d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c67d8d77-d2fa-4699-8ae2-ca047cc7ec25"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70911979-2386-4d89-970b-8dbe6ae498cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e1558416-d921-4359-bdb6-6bf9bf10d81e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bfe11a8d-f4a7-4df9-9c97-ef8eb67b89dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d3338b1-1adc-419c-b37d-b3548fc6163f"
            }
          }
        ]
      },
      {
        "id": "ec8aca2e-eb83-4daf-aa82-2abde253073a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f6c1411f-1b7b-4447-9622-0c5562a17251",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da099d42-fc9d-4311-8be7-3a078e81cb0e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8035e0d-130a-4c0a-9ea2-75ff92a36efa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577882b7-e8ee-4d04-b41d-9ae4d5ae3f6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5cc63367-3f06-4c9b-b97a-2c9d002e8803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55168ee8-a831-4204-998a-1cee5c5d42f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37f7b0d4-d6d2-4aa0-989f-e12708868958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f91192-93f9-4d34-a24e-15625f55cee1",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167dab80-4a13-409c-b078-831a35df9c69",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ce663019-9709-43a0-929a-9176aa3ae530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8317152e-aa50-4079-bec5-db09026e29da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8b54e7d-1b5f-4f77-acb5-d28655face82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "531ae3d6-21dd-431c-9dd8-c2b0ed931bc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "697cb902-296f-4106-9b7f-d10848354dfc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85a7a286-d899-45eb-b0f3-f5a9189e5e4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2dc1abe-1eb7-448c-b43c-4afdd80ce952"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c7e3618-bfee-4703-b064-4e85724fff08",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc8b1a5e-a38c-4fc7-b6db-0ad3b7f7e9f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12c93f4b-e0f5-467e-802e-53161d7f8c3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13361e46-bfb7-4116-84fd-608a6028008b"
            }
          }
        ]
      },
      {
        "id": "227c3218-bda4-4de8-9fbf-bb1acabfe171",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7dae2120-bab9-4041-a8f0-a84ba1f9f9e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74e0d5c1-3693-4e6e-b79e-93670df40cb7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1875f57d-651e-4076-a740-83b6145b6e94",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a3e7e3-6538-4239-8262-5f03ea8b706f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1d018be7-6c66-4052-a4a2-9d94b9463680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7f2c50-6814-4fd9-bf2d-923ad27c5971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b1749b7-e862-4c56-8b07-5713772c56f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcd21cd-6e36-4d6c-b5ac-303958452a62",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150e0d4f-a7f7-4a35-92fb-c25f293f9123",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "83dc6e37-89d6-460e-ab09-f3b78e475e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a87c0a-e9a6-417e-b2af-4b785401d3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4163bf2-73de-428f-987b-d13bc46e4585"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6bc14f6-fae0-4284-a2b3-b5061dc39e32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ae07263-ccb4-4f09-b7f9-d2f7003830bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9dfc53a-5328-4fd7-8043-605e9b1b0b62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8975abc-8856-4873-928a-ee631f038eed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4ab305c-5a80-4d94-b847-008123e6e8f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "22ae4de3-76ff-425a-878f-4bce7de53166"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f456ecb8-177b-402c-8d04-a97a46527b15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6368e86-0a82-443d-9023-b82707d61785"
            }
          }
        ]
      },
      {
        "id": "2b08cb9a-3185-4c5e-83a1-bcffb065bf79",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e9776707-cdb7-4c2f-bd18-f388adcd49d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1e0feab-bb6b-4b55-9c52-a5f1e65107a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63161c48-7732-459a-8db3-d7217e3649a8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1826330e-0cd5-4603-99b1-e0237de3e35a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a77211dc-9dd4-4e51-a811-a43d3541eeda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38b62be-9ae9-46e1-a390-321963cd4216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3120c180-f22e-4467-b5be-3486eaa86306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac8fdfb-efa2-4715-b60e-476a6ee69489",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7f4934-ad8c-4776-8bcd-9aa77bac83a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "db50bddb-df5c-4902-b47a-0e40bd94f7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb256ddf-0c1d-49ba-9ed1-619587ba5e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d631d29a-0af5-4742-8607-a5f9ccad45fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "731a3b53-9605-4ac6-b6ad-54e2ef62344c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6f8d1f2-eba5-4bdf-a51f-13e2af28ef41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdff06de-efc7-4860-bbd3-5b5058b74046",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a73defd-e38a-4fd1-bb03-81a6a66abbb1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b05de0c-3fa6-4a3c-be9c-21b0173fe3f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "97825c20-8657-4ebb-b3a9-80c559a4a5bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2faec25e-c656-497e-be22-81032406cb3c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb69f200-5d57-4afd-be01-860080ae5126"
            }
          }
        ]
      },
      {
        "id": "ee6d1152-d324-4268-85ee-a70313a32681",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "096b6e00-a050-45e4-93e6-00686c0388c6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9afb13da-4422-4390-bc2b-c01ecedb1628",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a2bce19b-677c-4a40-b0d7-bcde2baecbaa",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9517945d-5652-4875-9404-3d68dda80771",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d24f5bbb-5f09-4394-bb61-9799c0f48b73",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 196.44230769230762,
      "responseMin": 7,
      "responseMax": 2825,
      "responseSd": 379.6919811080438,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666227348169,
      "completed": 1666227410098
    },
    "executions": [
      {
        "id": "de877088-6c86-4fe3-a223-6a82e5fb8af6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c51e705d-66e1-4fab-a1e4-ac3be1b50e8f",
          "httpRequestId": "7490f2c9-6079-4911-9faf-2a31b66bcc73"
        },
        "item": {
          "id": "de877088-6c86-4fe3-a223-6a82e5fb8af6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "78c491d6-fe0a-494f-a696-e493f97d4793",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 0
        }
      },
      {
        "id": "508170d4-4164-40b2-9db6-83998c07e7fb",
        "cursor": {
          "ref": "c9d3943d-967b-4363-9b0b-48a804072433",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b1b594ed-adcb-45aa-b8cb-0df36ea6a4b3"
        },
        "item": {
          "id": "508170d4-4164-40b2-9db6-83998c07e7fb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d0b6ce95-dc28-49a5-a47e-ef7513862714",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1acbc995-e3c6-474d-9d72-816b2fe9ca1d",
        "cursor": {
          "ref": "fce9de4b-9136-4010-8555-3e27984d6132",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a432ed40-1d0c-4bcf-9db5-1882415a571e"
        },
        "item": {
          "id": "1acbc995-e3c6-474d-9d72-816b2fe9ca1d",
          "name": "did_json"
        },
        "response": {
          "id": "570bdc51-d379-4bd2-b204-57e312101843",
          "status": "OK",
          "code": 200,
          "responseTime": 1164,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85411a70-40aa-488f-b957-9f0d1f31cac9",
        "cursor": {
          "ref": "03ef8fc4-5350-450c-b117-7f16184bd984",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9798bd2c-0ed4-45ba-89b4-07e8fff46a48"
        },
        "item": {
          "id": "85411a70-40aa-488f-b957-9f0d1f31cac9",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea6c2a29-8af5-4b8a-b83d-7c783171ad22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85411a70-40aa-488f-b957-9f0d1f31cac9",
        "cursor": {
          "ref": "03ef8fc4-5350-450c-b117-7f16184bd984",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9798bd2c-0ed4-45ba-89b4-07e8fff46a48"
        },
        "item": {
          "id": "85411a70-40aa-488f-b957-9f0d1f31cac9",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea6c2a29-8af5-4b8a-b83d-7c783171ad22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4dfd06-0c04-40e5-8a61-92313d1fafce",
        "cursor": {
          "ref": "1f1201a7-2f6d-43ba-8363-fa654ea7e86a",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1a6774a6-396f-4710-83af-1ee6be25cc6c"
        },
        "item": {
          "id": "9e4dfd06-0c04-40e5-8a61-92313d1fafce",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8e571be0-902b-4c8e-8fc6-bb1c1db20559",
          "status": "Not Found",
          "code": 404,
          "responseTime": 302,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66b2bae-1655-4441-a5a1-d8e3cb4c1d92",
        "cursor": {
          "ref": "fe56854b-ad93-4cba-8aea-13b5a4c9b6a6",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "50c4b868-d8ee-4141-98f1-4a57acecfb68"
        },
        "item": {
          "id": "b66b2bae-1655-4441-a5a1-d8e3cb4c1d92",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d25c9163-e7c9-4187-af39-a5b40eb4e496",
          "status": "Not Found",
          "code": 404,
          "responseTime": 27,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a81955-fd58-4fce-ac43-7453eb1337b0",
        "cursor": {
          "ref": "e151731d-5e65-458b-8c7b-023904892587",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8ae33759-7b0c-4f85-9d36-a1ef06207550"
        },
        "item": {
          "id": "74a81955-fd58-4fce-ac43-7453eb1337b0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4c52926f-637d-43eb-bdf3-24d3ace46627",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb9694b-7592-409b-a48b-77ebfbb79d66",
        "cursor": {
          "ref": "fbc86631-03d4-40cb-b4b1-97c00d9a2f17",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0443024f-f5e9-446d-b1e3-f70742c04a0c"
        },
        "item": {
          "id": "fbb9694b-7592-409b-a48b-77ebfbb79d66",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c2a38222-d793-45cc-92e7-4b5e2ce41768",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb9694b-7592-409b-a48b-77ebfbb79d66",
        "cursor": {
          "ref": "fbc86631-03d4-40cb-b4b1-97c00d9a2f17",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0443024f-f5e9-446d-b1e3-f70742c04a0c"
        },
        "item": {
          "id": "fbb9694b-7592-409b-a48b-77ebfbb79d66",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c2a38222-d793-45cc-92e7-4b5e2ce41768",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14cfdf67-db4f-4c17-bbb1-6edd289f7f60",
        "cursor": {
          "ref": "e2fd525a-98b1-4d3d-99bc-7f6190ba1820",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0e7b8e61-f446-4406-b6e0-e7be03899cc7"
        },
        "item": {
          "id": "14cfdf67-db4f-4c17-bbb1-6edd289f7f60",
          "name": "identifiers"
        },
        "response": {
          "id": "9e45f4e2-c855-4d3d-ba9f-76ad63c2fb96",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09f7b58-1eee-4587-836d-9efd694903db",
        "cursor": {
          "ref": "981fc347-46ee-4be4-97dc-3865d84e7e37",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b0d01605-7eaa-482a-8149-7887bbdf5811"
        },
        "item": {
          "id": "d09f7b58-1eee-4587-836d-9efd694903db",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1a061031-1041-427d-86b8-c4bbb1468554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09f7b58-1eee-4587-836d-9efd694903db",
        "cursor": {
          "ref": "981fc347-46ee-4be4-97dc-3865d84e7e37",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b0d01605-7eaa-482a-8149-7887bbdf5811"
        },
        "item": {
          "id": "d09f7b58-1eee-4587-836d-9efd694903db",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1a061031-1041-427d-86b8-c4bbb1468554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ad07e4-fcf9-49c6-9a3f-be1ef7f37caa",
        "cursor": {
          "ref": "6b63f8d6-4179-4b89-b7b5-6e2ec73a532b",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "67e29e60-3de9-47f1-a744-950ccafceca5"
        },
        "item": {
          "id": "d3ad07e4-fcf9-49c6-9a3f-be1ef7f37caa",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dffc93b2-56cd-421d-9440-2965baf1804a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81200d4f-4213-426b-a1ef-39fa0c25fbf3",
        "cursor": {
          "ref": "71b87ca4-0de7-45d1-ab38-02e503fa373d",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "34cf17b2-7e6f-48e0-8a9b-55ce79babb12"
        },
        "item": {
          "id": "81200d4f-4213-426b-a1ef-39fa0c25fbf3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8e166968-b3c6-4d49-9fd0-c9c811a64f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cd982b-2291-40c9-9b40-87552901bb11",
        "cursor": {
          "ref": "e48d32a4-6a20-4de1-afcf-88b3eb2da690",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b6ec564e-678c-4379-a920-b3e187a47c34"
        },
        "item": {
          "id": "55cd982b-2291-40c9-9b40-87552901bb11",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ae9ef1ab-b64d-426a-a03e-b4e58f9308f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377ab586-d459-44d4-ad60-d109e02a0863",
        "cursor": {
          "ref": "70cc5da3-6d52-4732-8b36-98d913fb057c",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "76b06447-e7b1-4944-a319-446bcca4fefc"
        },
        "item": {
          "id": "377ab586-d459-44d4-ad60-d109e02a0863",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f39baf8c-d9aa-45fb-9643-777ff328672f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a3458c-f843-4384-a963-a88de28b5a37",
        "cursor": {
          "ref": "e2a50fc6-29ee-4860-a963-eda43568ec68",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fc2a71eb-c682-4529-b7bd-beeb142d9afe"
        },
        "item": {
          "id": "16a3458c-f843-4384-a963-a88de28b5a37",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f4fb9dad-ba00-4a4e-8c64-eab3f4299bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd64007-4cac-4697-8ff9-f49950b6efad",
        "cursor": {
          "ref": "a095478f-85c5-4fda-b334-493684496145",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1b963067-4c1b-432b-9339-11c1e24ce4e8"
        },
        "item": {
          "id": "acd64007-4cac-4697-8ff9-f49950b6efad",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0a25664c-1cc3-4a59-bb88-55c25c677d14",
          "status": "Created",
          "code": 201,
          "responseTime": 1429,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "cf3ba071-bbe1-4002-8c3e-b7ad2679860d",
        "cursor": {
          "ref": "6b3f4821-0503-4f58-a3b0-c276aea0d4de",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c0e1435b-d5d4-400b-ade5-a6b2aca4fe94"
        },
        "item": {
          "id": "cf3ba071-bbe1-4002-8c3e-b7ad2679860d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f68ec465-5cc2-4fc1-a607-b5220a06db0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bafd6f-a7ac-440d-ae4d-0e3fc60fbdbd",
        "cursor": {
          "ref": "fe1e4bd8-5e19-4db9-9680-8dae958cfb03",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0ebe5ebf-9281-4a4a-9d4e-08ec2add3bc7"
        },
        "item": {
          "id": "f7bafd6f-a7ac-440d-ae4d-0e3fc60fbdbd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2109955c-a8eb-4d27-b85b-c5e32712e185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228ce3aa-de39-443b-881b-6c742bcdef86",
        "cursor": {
          "ref": "48a5b7af-815f-4b1c-a89c-ebca82761f40",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "18b91a94-84fa-4ba8-a560-c358a7270a6a"
        },
        "item": {
          "id": "228ce3aa-de39-443b-881b-6c742bcdef86",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "887495aa-04e6-4c41-9220-0e9be9c06089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7dacc68-2062-4315-8bc0-5dceb45cb941",
        "cursor": {
          "ref": "707a5efc-3665-4c88-a49e-e43dcc46167e",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "22054029-83a7-4ebd-a7b7-cdb947b48ccb"
        },
        "item": {
          "id": "a7dacc68-2062-4315-8bc0-5dceb45cb941",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "79f6138f-b429-467f-a5f3-c36c6fbb9ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da267ff9-24fa-4ec6-a51a-696f741690bc",
        "cursor": {
          "ref": "68c5d791-92c7-4414-bf53-235a9cf09451",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0a66e19f-d2c1-464a-9a57-6ac753b6e256"
        },
        "item": {
          "id": "da267ff9-24fa-4ec6-a51a-696f741690bc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "42db7954-0206-408a-a22a-08815111425d",
          "status": "Created",
          "code": 201,
          "responseTime": 569,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8eb1041c-2ec7-4cd1-b4bf-f4b398ff35eb",
        "cursor": {
          "ref": "92465522-a06c-485d-88c3-03f96d3dc2d4",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "61efcb90-81c4-4315-a819-5fa940acd346"
        },
        "item": {
          "id": "8eb1041c-2ec7-4cd1-b4bf-f4b398ff35eb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "591dbdd3-2ae6-4a97-aa90-7f472cd28c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ae054d-f3e6-46bd-b6e4-33060456874d",
        "cursor": {
          "ref": "36b512d1-b4f5-4719-ab9f-5986ad5d23fc",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e45f847b-e5ea-4a0f-8050-a506c699c8d0"
        },
        "item": {
          "id": "30ae054d-f3e6-46bd-b6e4-33060456874d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "522902bc-37bc-4df4-993a-618c56fcca82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f8d7c6-edf5-4677-8b23-c66e0678f70e",
        "cursor": {
          "ref": "5dd71863-832f-4368-bfbd-01ff9aa3bcce",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "016bdc25-580a-4af0-bbf8-b40860a57304"
        },
        "item": {
          "id": "f6f8d7c6-edf5-4677-8b23-c66e0678f70e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d666660c-6450-46a0-ab3e-778d71b76217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983847da-3366-43c9-a631-1ff1cfff7ed7",
        "cursor": {
          "ref": "d8d49424-e007-474b-82d8-9d2641d5fc4d",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4ace9df1-10cb-4f62-a3ad-bba347953a91"
        },
        "item": {
          "id": "983847da-3366-43c9-a631-1ff1cfff7ed7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "496fade1-666e-41ac-aa98-7f51663599ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87493eb7-7696-42eb-b07b-572ba6d32301",
        "cursor": {
          "ref": "0c6cb76b-8f4b-4dac-aaf9-e3116cc0589c",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "235f6f17-b6c1-414d-8bb1-b66eaafb7fe6"
        },
        "item": {
          "id": "87493eb7-7696-42eb-b07b-572ba6d32301",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a9242bae-2948-4b8a-a6cd-594ffc435d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded506ce-a6a3-47a1-a547-c72f30b969d5",
        "cursor": {
          "ref": "38c9205d-b3e4-458d-ae5c-d9250772e5b2",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "07baf2a1-6ed6-4469-9726-0d92207ccca8"
        },
        "item": {
          "id": "ded506ce-a6a3-47a1-a547-c72f30b969d5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e93399cd-6ab3-40fa-817e-6c9c09aea314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4279439f-ee13-4d12-9159-aaf02b611ca5",
        "cursor": {
          "ref": "9b149353-937c-44bc-9e79-9835335f6314",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5773f9dd-b25a-4b73-91ad-4693b286d229"
        },
        "item": {
          "id": "4279439f-ee13-4d12-9159-aaf02b611ca5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "817acbee-894a-4dc0-aa32-70d51deaacee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5308c8-24fc-4452-8726-7d9f1ea127eb",
        "cursor": {
          "ref": "88a43527-8978-4e39-8302-376abed2a8dc",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "26c06f87-8049-4589-9850-c6ef224e1934"
        },
        "item": {
          "id": "ce5308c8-24fc-4452-8726-7d9f1ea127eb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "517bbb84-eee5-4cde-9860-2fa47bdca416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f6088d-1159-4dc9-a069-bbf6611d5e85",
        "cursor": {
          "ref": "ec97183f-ae7c-42d9-afa0-dd1bf9bfb406",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "69d9c3aa-337d-4ad9-a18b-b2b909a5adfe"
        },
        "item": {
          "id": "d9f6088d-1159-4dc9-a069-bbf6611d5e85",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "24a4f3bd-1070-4861-be49-a2690eed154a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3890ba85-154a-4ae0-a79e-6c8454d57125",
        "cursor": {
          "ref": "f9a04c22-d46b-42c5-9d9c-e98a85d21781",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d649ca0e-6bf7-4d1a-9b4c-317b19159853"
        },
        "item": {
          "id": "3890ba85-154a-4ae0-a79e-6c8454d57125",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8b1ff665-8bda-43ca-93f3-d4a067113968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f62aeb-5037-4a16-9fdd-d70a953b6ec5",
        "cursor": {
          "ref": "7078a724-3f4e-4734-b9ee-dd718283ca36",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3e881b7a-6cf7-48f1-a307-859b32e5c576"
        },
        "item": {
          "id": "f5f62aeb-5037-4a16-9fdd-d70a953b6ec5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bb0b70e4-673d-4079-a23c-0e1ed0ae2219",
          "status": "Created",
          "code": 201,
          "responseTime": 722,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "9e1f1f65-54c7-4903-b836-61ad7a53fe19",
        "cursor": {
          "ref": "8c4ba181-ef46-4f3d-b2b6-33ded1dfd12b",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1dc8beb1-25b3-45dc-a703-bc3179f53c66"
        },
        "item": {
          "id": "9e1f1f65-54c7-4903-b836-61ad7a53fe19",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "80dbc9c2-1b57-4086-8425-67d32700d432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a945a9-ee31-42b8-a0a8-afb215f51e89",
        "cursor": {
          "ref": "7a2842d8-6363-4761-89ef-3e9e0d6c0cb6",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe2634dc-3663-4d82-9297-79369911c377"
        },
        "item": {
          "id": "80a945a9-ee31-42b8-a0a8-afb215f51e89",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3d0dd775-fc88-4a64-855e-4e1f6dac3de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6433e5b9-5cee-4232-a350-ca6fda8ec1eb",
        "cursor": {
          "ref": "f797ff33-f6fe-4ff0-b8ea-28222cae17fc",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "99d87a69-ef82-4716-8844-9abaf10b127b"
        },
        "item": {
          "id": "6433e5b9-5cee-4232-a350-ca6fda8ec1eb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "947741a9-f1be-4358-bc1f-b08b0a210e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa12bc23-cabd-41a5-84d0-19e595506a21",
        "cursor": {
          "ref": "dcbd1567-cde8-486b-a65a-e6348e33af28",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "55e92976-a312-45d6-ae17-8f25b8e915d2"
        },
        "item": {
          "id": "fa12bc23-cabd-41a5-84d0-19e595506a21",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "eb68076a-29b2-4a76-bf56-e7238f5e2e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b29e5a4-a066-4d7a-9d81-60cc9d21472d",
        "cursor": {
          "ref": "ad937802-b2b8-47e6-a07c-0de5b48cd5e0",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "32491dab-80bc-4daa-a57d-7ff403d0d1fb"
        },
        "item": {
          "id": "0b29e5a4-a066-4d7a-9d81-60cc9d21472d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "aa7c1dc5-bfe6-4e69-a7f0-d706bee2ca72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f4a1ea-480b-4f86-9d9d-e0f15b1ae32d",
        "cursor": {
          "ref": "81e2faef-f1ad-4032-a8d7-7257f35bdeb8",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bb683ee1-baa7-4d49-8f7d-ff9b42de9175"
        },
        "item": {
          "id": "64f4a1ea-480b-4f86-9d9d-e0f15b1ae32d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "dcccd868-d70c-49c6-8ac5-6867fecfeb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2472aecc-8f88-4544-92cd-0059c3c91ea9",
        "cursor": {
          "ref": "b1e3f98a-f8a3-4ab8-b6e7-4ab1ed8aa5ca",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "80a43b66-612d-4faa-8682-aaacde0d079f"
        },
        "item": {
          "id": "2472aecc-8f88-4544-92cd-0059c3c91ea9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b27ecaf1-3048-4d55-86e0-e5d8a2f56e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb06e6f-fe1c-4f81-ac77-0712f498ee36",
        "cursor": {
          "ref": "824671aa-1c99-4f51-9536-69ea23591327",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "affac7a2-dc39-40a7-9450-6b299c9280ea"
        },
        "item": {
          "id": "6fb06e6f-fe1c-4f81-ac77-0712f498ee36",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2f48f125-45f1-410f-87a0-220b3e7dd5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29546b0a-57e9-45a5-ab15-bb4540e8aa18",
        "cursor": {
          "ref": "b7bd3bab-0043-448b-a8d8-381f0374fdd9",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2dd28194-a827-4e11-a0b2-2a465b40e89a"
        },
        "item": {
          "id": "29546b0a-57e9-45a5-ab15-bb4540e8aa18",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fcaba75a-f414-4ae9-b861-0c044cdbe86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf08f810-6860-495f-84ee-4d30c563245d",
        "cursor": {
          "ref": "425f7675-56ad-4376-92ed-a577944702a9",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "79c78ca2-9e21-444c-9f5b-7311a3700def"
        },
        "item": {
          "id": "bf08f810-6860-495f-84ee-4d30c563245d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4ba16802-0195-4e6c-98e0-3703566bc491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23728d4-484f-493f-93cc-416b5214cf4d",
        "cursor": {
          "ref": "a27f26a3-b065-4218-8049-e01a08c7247e",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5c9d8235-ca26-4325-a37e-e9d5ea79b3eb"
        },
        "item": {
          "id": "f23728d4-484f-493f-93cc-416b5214cf4d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "aadbc3f9-b934-4332-b36e-dc8502da77ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717f4148-c211-4746-9b97-46a3aa268d21",
        "cursor": {
          "ref": "cc228af8-b8d9-4190-ba24-814747f95f21",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c0305a6b-c283-4b9e-b6ad-30c3df4d2456"
        },
        "item": {
          "id": "717f4148-c211-4746-9b97-46a3aa268d21",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e283f2f1-ddcb-4dd5-a387-4260f3a2898f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77e2c4c-a62e-4bc9-9f5b-a97f8951e1d2",
        "cursor": {
          "ref": "1f8f6cb1-21b4-412a-bb17-ddce49158502",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "47a5096b-55db-4197-ac80-311c646dee0a"
        },
        "item": {
          "id": "c77e2c4c-a62e-4bc9-9f5b-a97f8951e1d2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8fc7ae7c-da4b-4e73-91d5-36ed9bd7e61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1194,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4dd630d7-6b76-47f2-a59a-647f45c7190b",
        "cursor": {
          "ref": "95f72e65-496c-43d3-9889-4975d86dbf47",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c3fbc566-65fc-443d-afc0-854892670f82"
        },
        "item": {
          "id": "4dd630d7-6b76-47f2-a59a-647f45c7190b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1230d8f6-81b0-4907-8c17-39878a2b65e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3ec5f1-85d3-46f4-aa7f-137d23903ea9",
        "cursor": {
          "ref": "34b62c51-da88-4b03-8dd4-8ceddad5f847",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a15c8fbb-4194-49c8-b3dc-29a1c0ff7f02"
        },
        "item": {
          "id": "cb3ec5f1-85d3-46f4-aa7f-137d23903ea9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "668a1244-dcc5-4fcc-8b6d-f8189d1290d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7dcb32-9187-4586-aaa0-61153e1aa060",
        "cursor": {
          "ref": "dcb7340a-5c4e-467f-95a2-ee44c655230a",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b3d6ae8d-341e-4cca-8bf7-1c37bc1df38d"
        },
        "item": {
          "id": "ba7dcb32-9187-4586-aaa0-61153e1aa060",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "727ecde2-930d-4fdf-9c89-e17904148791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846d854f-583e-4b4b-89ad-81608a825f30",
        "cursor": {
          "ref": "26a03182-0568-479b-95d5-a3660ab2e11f",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3062d274-d65c-486d-ae4a-06b666398122"
        },
        "item": {
          "id": "846d854f-583e-4b4b-89ad-81608a825f30",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7622f12e-16cd-4106-a072-532fcdcd9368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5857ada9-8c6a-4b22-bc53-2bb627064d43",
        "cursor": {
          "ref": "bc7d618d-38fe-4bad-8e24-4eae8834104f",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "50bb1c40-b77f-4ef7-9e20-667fec1b2f37"
        },
        "item": {
          "id": "5857ada9-8c6a-4b22-bc53-2bb627064d43",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4eaf31b2-df1b-4314-b0f6-9bb56a91f0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85402837-9aab-498a-9f98-1b02aa3e65f1",
        "cursor": {
          "ref": "353ea698-8a4c-4b97-aaee-3a70d56b8113",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7206000a-e46b-4b10-b7c1-a25f9221314a"
        },
        "item": {
          "id": "85402837-9aab-498a-9f98-1b02aa3e65f1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9e4381c0-6a0c-4a4e-a541-6995865a83c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79461761-622b-43cb-b6e0-f60b83781a5f",
        "cursor": {
          "ref": "b7a0f7c4-e4fd-464e-86a6-b35e3598b8d3",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e7a5de88-374c-4619-8bff-c08862d24e19"
        },
        "item": {
          "id": "79461761-622b-43cb-b6e0-f60b83781a5f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5f11821a-4b7d-44c9-b136-1533aef66f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 993,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "bf654266-3d91-44c8-aedb-6ef676665fe4",
        "cursor": {
          "ref": "de687097-a188-40db-905c-73f0d362a6c0",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "aad9d8a0-ecfd-4372-b2c3-f10657ebeb9b"
        },
        "item": {
          "id": "bf654266-3d91-44c8-aedb-6ef676665fe4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cd259182-68b2-4107-947b-b4771da1af46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a917f5f5-1a3c-43a4-b18d-8f0543fb839e",
        "cursor": {
          "ref": "989f6506-8ca3-4080-a99d-9944532a50a8",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "900c2136-38ad-4f3c-ac14-f808a96449a1"
        },
        "item": {
          "id": "a917f5f5-1a3c-43a4-b18d-8f0543fb839e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b8650fb9-636b-4fd7-9582-9512f54dd131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a6f0ed-c662-493b-81f5-07ef2cd25306",
        "cursor": {
          "ref": "54937f2f-81bd-4e62-a045-c7c5a2feb5c0",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1a2f20ba-1f8d-4c3d-a9e8-34f0580853c3"
        },
        "item": {
          "id": "d8a6f0ed-c662-493b-81f5-07ef2cd25306",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "803ef5c9-8ed6-49e6-a983-4a66fc40dab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b560f3b-29b8-41ce-a6c8-5a5e254e109a",
        "cursor": {
          "ref": "ec922b15-fb91-4a59-adc1-e5b642922923",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a0e83420-e76c-48f2-b25c-439a29e9de37"
        },
        "item": {
          "id": "7b560f3b-29b8-41ce-a6c8-5a5e254e109a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ff8d1643-e29b-4052-a1d7-318a5a81d46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44e09d1-e55d-4e88-9151-bee0f9e4c490",
        "cursor": {
          "ref": "983592b3-4646-4ef9-92ee-c8f125583593",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "29a9c48f-5514-4db5-8ecd-e6774170dfd6"
        },
        "item": {
          "id": "f44e09d1-e55d-4e88-9151-bee0f9e4c490",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6450e691-e3b8-4f05-9c98-47400a708014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57bf964f-8b66-4338-a8ce-2b78b12340ea",
        "cursor": {
          "ref": "e09d725f-6374-4865-bbcb-f516b477011d",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7bbc8d09-0140-4b3f-a4f0-0ed63069ffe4"
        },
        "item": {
          "id": "57bf964f-8b66-4338-a8ce-2b78b12340ea",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "acb9cbfd-9ed4-4df5-8aaa-2c8650033f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846a5432-0b63-4e5a-8358-2c9fad00ac78",
        "cursor": {
          "ref": "32069879-97c0-43fa-b165-1911126acdec",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ba5949fb-4849-4d8a-8787-21915c55045e"
        },
        "item": {
          "id": "846a5432-0b63-4e5a-8358-2c9fad00ac78",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "54d2cfa7-db85-411b-9a0c-d97b14b480c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d7eac5-d296-4692-9c13-d80fb3577433",
        "cursor": {
          "ref": "1825bfce-9878-43f5-862a-7bfb95e00546",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "736ddd66-edc3-44a9-8bea-7001ca39ced9"
        },
        "item": {
          "id": "46d7eac5-d296-4692-9c13-d80fb3577433",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "451a590c-9991-4696-bd35-5d14cf70f45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ee8be4-5caa-417f-8a43-9b3564bba112",
        "cursor": {
          "ref": "addc26d9-001f-4bc8-b4e3-1bc560bb44a2",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "28ae1e5a-de8d-472b-b6cf-779010a33b73"
        },
        "item": {
          "id": "f2ee8be4-5caa-417f-8a43-9b3564bba112",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3c575341-f980-42a6-a0f0-8bf4def0d327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27588195-ce5a-4f85-ade0-f4eade0b2916",
        "cursor": {
          "ref": "42f52ee3-fb4f-4b2f-a68b-832328ee04f1",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8b6f04e1-7300-44cd-b21d-5ca778935faf"
        },
        "item": {
          "id": "27588195-ce5a-4f85-ade0-f4eade0b2916",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8630a8c7-8d75-4a75-864b-361e9d6a183c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5698de-f8ea-43a6-9be0-4d30709d29f4",
        "cursor": {
          "ref": "29646dd9-2a57-4176-8453-64c68d72974d",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2bb91bc8-8de1-461d-92ca-829bbd6dc099"
        },
        "item": {
          "id": "dc5698de-f8ea-43a6-9be0-4d30709d29f4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1eb37fc8-61d0-4355-8fc5-3862854e6e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebf81d3-b4df-4050-bec2-c539f873523b",
        "cursor": {
          "ref": "6e264112-db23-463a-ace4-405f31d7adcb",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f98f91e0-bdbc-4b54-b019-7f0f87d323a5"
        },
        "item": {
          "id": "cebf81d3-b4df-4050-bec2-c539f873523b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "97155c88-d394-4f35-9536-a457685e38eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1337254b-4ce5-4964-aa07-9e80d2a68b96",
        "cursor": {
          "ref": "7ce40731-a8db-48d4-b542-587ae1906148",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9c5bcfc4-00c5-4854-b8ba-8e1775eb4891"
        },
        "item": {
          "id": "1337254b-4ce5-4964-aa07-9e80d2a68b96",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "df20a789-c8bc-4417-8752-5c02dc6dde02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d43234e-0c07-4abe-af85-98fc44879808",
        "cursor": {
          "ref": "74b53827-a24f-4aff-bc4b-877dd89ec475",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "78eea629-7d89-49c6-a980-8efbc0a91f9b"
        },
        "item": {
          "id": "5d43234e-0c07-4abe-af85-98fc44879808",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "283c6b00-6c90-430a-b455-b015fc1b9d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d0929b-27eb-4840-9109-43429fe89582",
        "cursor": {
          "ref": "5e45b262-e1a2-455e-9f56-1ccf9f0e2d18",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "43e23217-fffc-4597-846f-08402b57f8d0"
        },
        "item": {
          "id": "f9d0929b-27eb-4840-9109-43429fe89582",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "60269714-cd3d-4057-ab64-6c2c39833dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d039c05a-7791-4d4b-a6d4-4b41732863a1",
        "cursor": {
          "ref": "57abe2c7-820c-4328-845b-30ac3e9ba5bb",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8d082051-84bd-42fa-abeb-cfad3accb1b4"
        },
        "item": {
          "id": "d039c05a-7791-4d4b-a6d4-4b41732863a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e40a6e3c-ea71-4951-913a-71f137407277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957978f2-af4c-4dce-9219-c3e051ba6d10",
        "cursor": {
          "ref": "560db614-3262-4249-b75d-7a583863bca0",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "42638427-22df-4f3d-ac18-7c01ae20d954"
        },
        "item": {
          "id": "957978f2-af4c-4dce-9219-c3e051ba6d10",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8415aa10-ede6-4ccb-961a-94bff6d4fc34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d776b34-ebe5-4993-9be4-66366f6cda4c",
        "cursor": {
          "ref": "ed236ad5-cb44-43db-89a2-78527fb0dcef",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c3c94cb0-4323-4481-9136-e518337bbb3f"
        },
        "item": {
          "id": "7d776b34-ebe5-4993-9be4-66366f6cda4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "93dd0f03-e62a-4b61-afc3-09cb29de4ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbfc0cb-36b9-421a-94cc-e00176993f3b",
        "cursor": {
          "ref": "1360afb0-c4ea-4623-84f5-185048517ac2",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5eb87cc7-d985-412b-9fdf-1303c4be4880"
        },
        "item": {
          "id": "cfbfc0cb-36b9-421a-94cc-e00176993f3b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "37ca5ddb-af68-4c7d-9466-b74d59ecae3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0622bc-3599-4664-82ce-c2e76be74b53",
        "cursor": {
          "ref": "ea34296a-76a7-4455-a4ac-cc74efda3e0e",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "98fbd823-455b-4b47-89f7-fbebaf937b83"
        },
        "item": {
          "id": "7c0622bc-3599-4664-82ce-c2e76be74b53",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5d3eefd1-dde5-42ab-a6de-564e6ac000c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688685b3-183e-4580-98e6-f408011bb504",
        "cursor": {
          "ref": "fb43314b-6e52-4caa-915d-8c172f4b26e6",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3e2f74a5-db1a-4455-b623-8065425306bc"
        },
        "item": {
          "id": "688685b3-183e-4580-98e6-f408011bb504",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cdab706b-59c1-4356-81d2-cc6454ea7280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02df6be-f31d-46ae-bd32-fcb00ee0337c",
        "cursor": {
          "ref": "2a45ae77-7c4b-4161-9c55-dfeb3a33e52f",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cf04ee6b-523d-4e5a-9c44-3f2aca11f33d"
        },
        "item": {
          "id": "d02df6be-f31d-46ae-bd32-fcb00ee0337c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b7a88fd5-45e9-4794-8478-8768407c066b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293d26d8-a454-461d-9a13-d8abca2e7c7a",
        "cursor": {
          "ref": "b14e2602-3e8e-404f-981e-3081cd2417d7",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e82bf4fe-1b86-4dbe-86cb-1d048751d690"
        },
        "item": {
          "id": "293d26d8-a454-461d-9a13-d8abca2e7c7a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3eb7232f-d5dd-4063-bc6a-429ef4d2eaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e068c615-a745-4698-93ab-254af03cc39b",
        "cursor": {
          "ref": "ec62247c-f3cd-49cc-87e6-ce5944eff2f1",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9259284c-88f6-4edf-9703-bdaaff59b070"
        },
        "item": {
          "id": "e068c615-a745-4698-93ab-254af03cc39b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4e121380-7f06-4bc0-b11b-a33aa07a0407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ddd7bb-19f8-435a-ba98-1fe3f16d5d51",
        "cursor": {
          "ref": "7aba68d3-132f-48cd-8f45-7180a8cc26bc",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4991da83-2aec-4e07-ab83-9c21042da0a2"
        },
        "item": {
          "id": "76ddd7bb-19f8-435a-ba98-1fe3f16d5d51",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "20424f30-c159-4e95-81ce-938b74bdf977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba717c14-ec4e-4ee6-aa4d-82ecaa6df224",
        "cursor": {
          "ref": "c0d64524-3bf4-47d1-90a7-9712eec1369b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6b80390e-a220-4337-a90c-e7e16e56fc2b"
        },
        "item": {
          "id": "ba717c14-ec4e-4ee6-aa4d-82ecaa6df224",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a81eb008-3a0f-4d70-bbe4-65ec30cbf901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1c06db-558f-4906-a0c9-4f4360beb983",
        "cursor": {
          "ref": "904ba3a9-36c6-4350-9b58-34f257dcab5c",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "54efdee0-04d5-45a1-b8a4-22d6cc3393bb"
        },
        "item": {
          "id": "ce1c06db-558f-4906-a0c9-4f4360beb983",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "75055ca2-9725-4295-9596-d5a24d70e963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e22907-1c47-49e4-8036-631d7b4037ed",
        "cursor": {
          "ref": "c6238a99-2656-4bb3-bf7e-f51f8eb8c84a",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "bc3a893b-5942-4732-aa80-f467023f3635"
        },
        "item": {
          "id": "84e22907-1c47-49e4-8036-631d7b4037ed",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8ad911d2-5a26-470c-9247-6dbce3ccc927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f235dda-3398-4cf3-af26-9426fb442a6b",
        "cursor": {
          "ref": "8a6c04ce-0d85-41e6-a99d-8e3455a22896",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6ccafff3-2d9e-422e-bfa9-8ec7a6e28255"
        },
        "item": {
          "id": "2f235dda-3398-4cf3-af26-9426fb442a6b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "564c4b32-6c10-4304-920b-717346b035c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0eb463-aabd-4115-9812-48df0e742607",
        "cursor": {
          "ref": "756e06d3-62ae-4c89-86b9-95daabf6373e",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4ee08e3f-08fc-46a4-9fcf-8895ff3f40ae"
        },
        "item": {
          "id": "fd0eb463-aabd-4115-9812-48df0e742607",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6cdd9fab-3863-4e46-b7d2-9892e9b1d330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a28077-3fe8-44aa-8d0f-1c4650d6cac9",
        "cursor": {
          "ref": "71dc6c23-1533-49c3-b495-ae81643cc0bc",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c80d0813-e608-432a-8206-c24fb6ede750"
        },
        "item": {
          "id": "d3a28077-3fe8-44aa-8d0f-1c4650d6cac9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9c3150ad-57c7-4be2-8711-b1461eeb8268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 631,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142274e0-08b0-46f0-8928-fb591a98eae8",
        "cursor": {
          "ref": "bb7e23c6-1f85-4984-a654-6906705855c8",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bfe54719-442a-4155-86f4-d96295b6d653"
        },
        "item": {
          "id": "142274e0-08b0-46f0-8928-fb591a98eae8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b29646ca-fbea-4f68-a826-0c9f5c76648e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a35bfd7-286d-416c-a18a-bf471b3a7bb1",
        "cursor": {
          "ref": "9a760867-cd48-4e5e-aa5f-2145e022f27a",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ab912579-d5bb-4ada-b87e-8d34a1ebed42"
        },
        "item": {
          "id": "8a35bfd7-286d-416c-a18a-bf471b3a7bb1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1f0ab324-d56d-4c7e-80c1-2c15e11876ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3027885c-f23e-41d5-bcb9-195c1116c36e",
        "cursor": {
          "ref": "1c64260e-3bab-4c91-b048-cb315e629696",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7598909a-a41f-4873-9ad8-b9a0bc2b89d3"
        },
        "item": {
          "id": "3027885c-f23e-41d5-bcb9-195c1116c36e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0ddf7d46-d336-4ceb-961d-ee02a19a4914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a55c3b-4bf4-4d0f-91a1-0fef1e6791f1",
        "cursor": {
          "ref": "60a25465-cefa-4667-8375-1ee54e51e3c6",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "abc98853-31f3-4ed9-b27d-5598df458475"
        },
        "item": {
          "id": "e9a55c3b-4bf4-4d0f-91a1-0fef1e6791f1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5a32aa19-fa72-4a58-b286-85b29bec814f",
          "status": "Created",
          "code": 201,
          "responseTime": 492,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "4f547135-8f4c-4b30-9e76-bca521b5c606",
        "cursor": {
          "ref": "651e470f-2807-465d-acc9-ecb16ebc3e8c",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "937fc1dc-bc09-464c-b45e-96b37acebbee"
        },
        "item": {
          "id": "4f547135-8f4c-4b30-9e76-bca521b5c606",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e2f96d61-197e-4d92-93ac-7b2f1c0ffa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edac3638-3b29-4601-952a-e36a5998e4fb",
        "cursor": {
          "ref": "2117cbf4-580e-4150-963e-9cf6765eb47a",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8ddea66a-89be-4324-8943-de7d2ab61de6"
        },
        "item": {
          "id": "edac3638-3b29-4601-952a-e36a5998e4fb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b0df03ff-aa0d-49fa-9006-c780abf1c7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c740bcf-ee7f-4bfc-9a03-8ba75b7404ae",
        "cursor": {
          "ref": "8f5c8f32-5193-4c0f-b80d-a2df7ffbfa11",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "73ef97af-9bb4-4a98-9948-6d76148bca4a"
        },
        "item": {
          "id": "3c740bcf-ee7f-4bfc-9a03-8ba75b7404ae",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4b737041-2f5d-4e8a-a766-c4881e86e3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f74345-d62a-40b4-b864-eb1fcc28b3dc",
        "cursor": {
          "ref": "711c9388-57c3-4e62-ae1d-50de1f824096",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8f8d1ab4-20b8-4334-b65d-4de948eab11f"
        },
        "item": {
          "id": "20f74345-d62a-40b4-b864-eb1fcc28b3dc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0ca45fe1-e8d9-4c17-9ce0-cff703bf7ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c1a751-b1a3-47b4-beb3-22937a439c36",
        "cursor": {
          "ref": "72490a61-9614-4b17-8362-e8bb1efa4456",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9cd059bb-f87a-4009-9c63-04cbbfe34262"
        },
        "item": {
          "id": "e5c1a751-b1a3-47b4-beb3-22937a439c36",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bb83f880-3497-446f-9c98-0b0226759692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe48a9b-70eb-4941-b7a1-f9a2a527d2a7",
        "cursor": {
          "ref": "e76f2f0d-5b68-4637-966e-4c1cd5aebb96",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3300f386-a095-4475-b002-3e5fa03319fb"
        },
        "item": {
          "id": "3fe48a9b-70eb-4941-b7a1-f9a2a527d2a7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cb472b68-083b-444e-be40-3666aa7ce871",
          "status": "Created",
          "code": 201,
          "responseTime": 634,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "434af70e-07b3-4765-80bf-254e4ad5e2cb",
        "cursor": {
          "ref": "f708c735-fbed-4479-bc60-f194b2afb788",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c9a20f54-1a08-4d0d-bade-015962ec159e"
        },
        "item": {
          "id": "434af70e-07b3-4765-80bf-254e4ad5e2cb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f7b35aed-5a79-4869-99a6-6f464dcf34b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e431b6c-c332-44a9-af72-245d4af44bdf",
        "cursor": {
          "ref": "8abe6392-11df-4c46-b110-f382e5af5322",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c2900165-2659-40a3-be5d-a6bc6819a66d"
        },
        "item": {
          "id": "5e431b6c-c332-44a9-af72-245d4af44bdf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f261a041-abcb-409c-94f4-78d9a049e3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27f68df-543e-4a0f-aa3a-8a9b2517f351",
        "cursor": {
          "ref": "54e530bb-30d0-4ea2-8a92-221b0335092b",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b0b5cc89-f18f-43c6-9dca-5029d5ed0584"
        },
        "item": {
          "id": "e27f68df-543e-4a0f-aa3a-8a9b2517f351",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4348855e-c956-4bc1-b82b-89f7b7b921e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fff62b0-2e20-458c-9e17-71ae382f6ad0",
        "cursor": {
          "ref": "1afd3aa5-ffaa-4227-8bcd-bd3ec7c25866",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4af36704-8359-4285-9677-db2babf8937e"
        },
        "item": {
          "id": "4fff62b0-2e20-458c-9e17-71ae382f6ad0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5fc29b58-e182-4029-af53-8d4bdf5a5a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c3e166-5c7a-4c07-8634-3508c1d2ddb6",
        "cursor": {
          "ref": "adb99033-b3ab-4789-b9df-9db70dce0ea7",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "47cf7142-129c-4d2d-9862-e4b0d6d64764"
        },
        "item": {
          "id": "b3c3e166-5c7a-4c07-8634-3508c1d2ddb6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a874e74c-1685-4f8c-bf09-cb6963f7e82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90e89be-2778-4e74-9818-a265f58247af",
        "cursor": {
          "ref": "e2c8f6e9-9626-40ec-a681-9b979a5384e9",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "83dea304-3163-409b-928e-64c269ecaadf"
        },
        "item": {
          "id": "f90e89be-2778-4e74-9818-a265f58247af",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "38759378-cac7-4f70-bc41-2a13f9edb513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668166a2-f678-4044-99da-92a92c633df1",
        "cursor": {
          "ref": "2c3e2e5a-3ea8-4094-a12b-b7f5556fcbfa",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d2bd6108-33a4-4ab9-81dd-863f36f4e87f"
        },
        "item": {
          "id": "668166a2-f678-4044-99da-92a92c633df1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "78a83bc4-e295-4525-bf5a-ff6e00506d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb168c9-1211-4204-9262-8d4bcedf5a42",
        "cursor": {
          "ref": "9481a416-c6d5-43f4-95ab-b55593c3e691",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d12f2fd5-e5f8-4a5a-bda3-ffdf332e43e3"
        },
        "item": {
          "id": "bfb168c9-1211-4204-9262-8d4bcedf5a42",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "be33e991-8467-4976-a0b9-757f6814796b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492e137c-b776-4823-b305-dd6ba2f81e9b",
        "cursor": {
          "ref": "e1ba840f-99d1-4f63-bc48-ba00156299b3",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4ca9bfd4-40ed-47e6-bdf5-21af7535f8c5"
        },
        "item": {
          "id": "492e137c-b776-4823-b305-dd6ba2f81e9b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "124961d2-3b66-47df-9922-7e5d59a3bd8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "aff22cee-fb0f-4b79-adeb-41079fad0ca6",
        "cursor": {
          "ref": "ff296084-3398-4c44-8abf-d522878b1e59",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "425cc93f-0356-4358-84bd-26b5d309bf09"
        },
        "item": {
          "id": "aff22cee-fb0f-4b79-adeb-41079fad0ca6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "fe56cf93-948e-4a94-bef7-c12ef0274465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "aef3b9a8-627c-451c-aba6-89886e4c314a",
        "cursor": {
          "ref": "afa3bdfd-f1c5-4752-92b6-d55c08c9b791",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1556d622-ee96-4c8c-abdc-bb6fb831d833"
        },
        "item": {
          "id": "aef3b9a8-627c-451c-aba6-89886e4c314a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "13f204c9-3d93-4c14-9c15-01a3445d95d7",
          "status": "Created",
          "code": 201,
          "responseTime": 1430,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c54e0539-0add-48d0-ae54-a7b7874b6def",
        "cursor": {
          "ref": "c9ed4690-8aa3-4c53-8df5-7e4543299edc",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "20af7f69-1e29-44e8-be00-0cbeceb9f674"
        },
        "item": {
          "id": "c54e0539-0add-48d0-ae54-a7b7874b6def",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f5d5399e-06d6-4562-93e3-32f59ec9110c",
          "status": "Created",
          "code": 201,
          "responseTime": 1159,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1624c6-3043-4b32-af36-8129245a2506",
        "cursor": {
          "ref": "c11a45b6-b9d2-4c82-820b-98ac45938b58",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c114abc1-3dd1-4870-92c4-c194340a9a6d"
        },
        "item": {
          "id": "9e1624c6-3043-4b32-af36-8129245a2506",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e15a5818-4fe7-4741-ab4e-99b5807a918b",
          "status": "Created",
          "code": 201,
          "responseTime": 713,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2722d2f-a66c-4904-a566-a4f053e36f53",
        "cursor": {
          "ref": "11e275ef-fa05-43f4-bea7-ce22976d3033",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ac0d86a9-71ba-4564-9322-5b67334547c2"
        },
        "item": {
          "id": "d2722d2f-a66c-4904-a566-a4f053e36f53",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "474a4e40-075c-4a0e-96d6-49d94fc0a3ef",
          "status": "Created",
          "code": 201,
          "responseTime": 424,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "474ae9e7-e4ca-46aa-af5c-fe7ee68371ce",
        "cursor": {
          "ref": "5b73f2f1-7cfe-4322-a8bb-97b20883b9bd",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "609f87e5-2265-438a-983d-9128ffcdce76"
        },
        "item": {
          "id": "474ae9e7-e4ca-46aa-af5c-fe7ee68371ce",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "22c30d61-9653-4aa5-99fa-c1eb2861f4e4",
          "status": "Created",
          "code": 201,
          "responseTime": 914,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "1333a182-d0fd-4c10-8784-94cd68d86913",
        "cursor": {
          "ref": "c1862d18-7ef6-4133-a64f-13bfd8efed15",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5a8d9243-2e96-4e2a-b0a9-a45e0afde44c"
        },
        "item": {
          "id": "1333a182-d0fd-4c10-8784-94cd68d86913",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "181011f1-2f13-44db-8de0-f53ada27c0d2",
          "status": "Created",
          "code": 201,
          "responseTime": 623,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc61627e-4920-462a-a98b-fb1623649fc5",
        "cursor": {
          "ref": "f199b4eb-b653-49a4-b9bd-db34a3d536c9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3af1662d-2b5b-4200-801e-018031ac3e8d"
        },
        "item": {
          "id": "dc61627e-4920-462a-a98b-fb1623649fc5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "82ef2912-f468-4769-aa91-2bdb21ae1072",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "dc61627e-4920-462a-a98b-fb1623649fc5",
        "cursor": {
          "ref": "f199b4eb-b653-49a4-b9bd-db34a3d536c9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3af1662d-2b5b-4200-801e-018031ac3e8d"
        },
        "item": {
          "id": "dc61627e-4920-462a-a98b-fb1623649fc5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "82ef2912-f468-4769-aa91-2bdb21ae1072",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e4c91553-162c-47a1-a8d8-7496f7af4474",
        "cursor": {
          "ref": "0196dc0f-6ab1-49fe-b7d7-bd2521cdd20c",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6b5bc2af-7095-441a-9c68-7adb28146320"
        },
        "item": {
          "id": "e4c91553-162c-47a1-a8d8-7496f7af4474",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "001813d7-0181-46c4-98e2-030e9ffb4b32",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "970aa9ce-c10d-4be2-ba58-392c17af9382",
        "cursor": {
          "ref": "5a9e1f24-f2c8-4f97-aea7-352c5588d180",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "56a0cfb6-9388-4e29-b8f9-68f4543bde6c"
        },
        "item": {
          "id": "970aa9ce-c10d-4be2-ba58-392c17af9382",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "df535d7f-8b08-4b76-9578-928f2171dc31",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "281c9ab2-9923-403a-b572-a2e5c2f75f07",
        "cursor": {
          "ref": "d836c5c5-0254-45c7-a715-1abb612377a2",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "72b07bae-3b3f-497e-bbe2-7900add49e0f"
        },
        "item": {
          "id": "281c9ab2-9923-403a-b572-a2e5c2f75f07",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "06e0b09b-7ed2-415e-b10c-48e08c9ee6a8",
          "status": "OK",
          "code": 200,
          "responseTime": 242,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a77e757f-6f20-4e2c-a637-806bfa8a93a9",
        "cursor": {
          "ref": "ac6a31d2-7557-4367-a855-d7b6690cf452",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a1902e5c-d5ed-4154-a920-9ae288a5b80c"
        },
        "item": {
          "id": "a77e757f-6f20-4e2c-a637-806bfa8a93a9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "39fbb13b-7045-485e-97b3-738898d8ed4e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "72a6fc9c-69f0-4b83-b8db-e55750170b1a",
        "cursor": {
          "ref": "68097406-a8fb-41a3-a8c5-ccd8ece332e0",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "04401129-aeb0-49ca-853b-923df5043047"
        },
        "item": {
          "id": "72a6fc9c-69f0-4b83-b8db-e55750170b1a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3f505344-11a6-4b29-b5bf-b9dcac320021",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5169c787-317a-4dad-89dc-03c35870a674",
        "cursor": {
          "ref": "4207e12d-942b-471f-ae60-1901a22d5dce",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f198a65d-6b7c-4a07-b871-e579f8b93094"
        },
        "item": {
          "id": "5169c787-317a-4dad-89dc-03c35870a674",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2e6dd4f8-f78e-442a-b005-8bb5d937a3ce",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d2efb9d8-9289-4405-afff-efe7f9761846",
        "cursor": {
          "ref": "be2f3017-61b6-4b06-a680-552dc11e14c1",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8f3e1d88-a48d-44e3-8a38-fe0bef092f6a"
        },
        "item": {
          "id": "d2efb9d8-9289-4405-afff-efe7f9761846",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "41cdc3e2-a8ca-45d8-a12f-aa75ebb3228f",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6d789594-cacc-4398-907c-7e346e1e11fd",
        "cursor": {
          "ref": "2b3555bb-c795-479d-aae9-01d26a5d4604",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "113f9094-086a-4dd6-b9a6-daffdc39fa20"
        },
        "item": {
          "id": "6d789594-cacc-4398-907c-7e346e1e11fd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5c303096-7a1f-45ef-a748-1dbad78a6c3f",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c44f83f1-cec7-48aa-b7f2-cbd0343d2664",
        "cursor": {
          "ref": "6137c77d-f8f4-4107-813e-77e6514bee3e",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9e2304fb-11f9-4f97-bc48-d2d033320a2b"
        },
        "item": {
          "id": "c44f83f1-cec7-48aa-b7f2-cbd0343d2664",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "15d4daec-89d1-43e3-a59d-57f0683fc474",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7d886049-9222-42f6-83a1-24dc5f398c11",
        "cursor": {
          "ref": "6007f27d-aa50-4427-b723-c328406c4b1c",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9af04d1e-c120-443d-9722-74239707fa7d"
        },
        "item": {
          "id": "7d886049-9222-42f6-83a1-24dc5f398c11",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1606785b-40de-4fd6-8024-2c253db64380",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0b611e76-3326-4952-bdac-a8d5f749590e",
        "cursor": {
          "ref": "cf926c3a-25f6-4fda-8822-75a172385c72",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b91749fe-3105-43f1-869b-e411fd365e9c"
        },
        "item": {
          "id": "0b611e76-3326-4952-bdac-a8d5f749590e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0d22545b-d013-41dd-97ee-76df86f335c6",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6250e65c-c6e9-4f72-9813-12c454b960c4",
        "cursor": {
          "ref": "e170a0d4-7f9a-4557-a6ec-a9b3d8b9ecd4",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e281ace3-095a-415a-92bb-051e05eba600"
        },
        "item": {
          "id": "6250e65c-c6e9-4f72-9813-12c454b960c4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "45342667-d991-42ce-b5de-fe7da7f28dae",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "cfa15244-852d-4d51-9112-9f7191bd950f",
        "cursor": {
          "ref": "43159dc7-8de7-4175-8398-996863b64e8c",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7cd49f80-7312-4a17-bbdc-e618a40f6496"
        },
        "item": {
          "id": "cfa15244-852d-4d51-9112-9f7191bd950f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "abc352c6-d8b0-485b-8e30-0348c2147b3f",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "30f74276-e4a4-4e4a-b589-8bcd28678a0e",
        "cursor": {
          "ref": "9482ceb6-2cbc-4ea4-9ec7-b52d5a615a91",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "71d5f227-f485-46e7-98af-18dddd6f028e"
        },
        "item": {
          "id": "30f74276-e4a4-4e4a-b589-8bcd28678a0e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6d5ff4fa-02b8-46a8-ae83-73e4cd3b6722",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c3089709-4489-4ad8-9ba3-060a2befa317",
        "cursor": {
          "ref": "6b079a90-43ad-4d38-b517-8c9892153381",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "832daec0-e440-4b1b-9cdd-1392e9514810"
        },
        "item": {
          "id": "c3089709-4489-4ad8-9ba3-060a2befa317",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a1bd129d-7af7-441a-a696-52a09feb1616",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "521596db-8bcd-4d09-a387-11474e089215",
        "cursor": {
          "ref": "866fe40d-552c-466d-8cff-9a7279c7ff81",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fe715d56-5a9b-4d52-b4b7-f612aa60d3fd"
        },
        "item": {
          "id": "521596db-8bcd-4d09-a387-11474e089215",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e882c2b1-2612-4017-96c6-1e1c0e049e17",
          "status": "OK",
          "code": 200,
          "responseTime": 25,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c1838b4e-93fa-46e2-baba-554fd61716f5",
        "cursor": {
          "ref": "af00280d-8383-4e1b-bf7b-0868de4cee11",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cd75a7b1-1b18-45b8-8827-e732d43bc791"
        },
        "item": {
          "id": "c1838b4e-93fa-46e2-baba-554fd61716f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d1fc8205-6448-44d5-893e-283a9e58647a",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "81ffce19-bb13-4f36-b28b-9f7eb0928f55",
        "cursor": {
          "ref": "000c69bc-b3ee-47e3-b0db-ff0acc5ecc28",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0cc4f1dd-c12a-4123-8b64-d1a0a5b76804"
        },
        "item": {
          "id": "81ffce19-bb13-4f36-b28b-9f7eb0928f55",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b9fbe222-e977-4e31-a5da-be3e73feb636",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "28f296a2-68d4-41c8-ba09-b7adcb422eda",
        "cursor": {
          "ref": "534c72a8-ebdb-4b4e-94ca-5b3582af5fdd",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "57fd69d4-baf4-44ce-97c2-856e7aaf0e81"
        },
        "item": {
          "id": "28f296a2-68d4-41c8-ba09-b7adcb422eda",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2bf84f2c-bbc0-4d9a-976d-e86cee1d12d0",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "0a246b86-0f16-46e3-a17f-cd1c9798d457",
        "cursor": {
          "ref": "633d3bf3-568c-41bc-833a-4fce44f07335",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "09081eeb-9e3f-4bda-b3e5-242f4761594d"
        },
        "item": {
          "id": "0a246b86-0f16-46e3-a17f-cd1c9798d457",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "821a72cb-140f-4c13-ab06-9b3e796163e8",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "a525d60a-b04b-4ad7-8786-95ba814dde9c",
        "cursor": {
          "ref": "b47a2528-0d66-458e-a97f-7362d804de4c",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5d07c745-7e23-4d27-a13a-2a6e8e902666"
        },
        "item": {
          "id": "a525d60a-b04b-4ad7-8786-95ba814dde9c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b60d64ce-d1ef-4a36-b190-289a19cf4f9b",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "93e1eff9-9e83-4225-b153-974e16963cf6",
        "cursor": {
          "ref": "7b24b7ea-687f-4f89-9de1-0434a6f86c23",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e8660cf0-5457-4357-a53f-4a163d3b5707"
        },
        "item": {
          "id": "93e1eff9-9e83-4225-b153-974e16963cf6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8aab2fd6-cb8b-47ae-a13f-317062c9cb4e",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "62b05cd8-16ca-4158-adbc-f87213e599a9",
        "cursor": {
          "ref": "26130b57-d118-4aad-bc81-3ec687b03fad",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "31cfdb14-3b70-45d3-88af-5ab353c2b60c"
        },
        "item": {
          "id": "62b05cd8-16ca-4158-adbc-f87213e599a9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "88bcc050-49fc-478a-aa1b-c21db061ecb1",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "e2965bc5-4b38-4ab9-992c-3b08a7bd823f",
        "cursor": {
          "ref": "b3ce8124-6438-4e8c-9728-eaab3b936bbe",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a4977f8a-755d-44dc-b686-660f271b03f8"
        },
        "item": {
          "id": "e2965bc5-4b38-4ab9-992c-3b08a7bd823f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5cb0e4ce-ee31-4cab-b457-314e3bd5dab9",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "dbd9d690-bc2d-4f83-8474-058f75480b5e",
        "cursor": {
          "ref": "f0dbfd7d-ae7a-432c-83a6-ffc803cc31d4",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "79104ad8-9a8d-4512-9660-bc6473259ceb"
        },
        "item": {
          "id": "dbd9d690-bc2d-4f83-8474-058f75480b5e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d5d3f7b3-7e96-4988-8a7d-ae6f07fcb7ab",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "54a9c5b4-0984-4273-a68b-86fa06a23ff8",
        "cursor": {
          "ref": "e46c726b-2e07-475c-b1ab-6699e4708bbc",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "043ca589-d63d-4558-9063-c97bf0a293d4"
        },
        "item": {
          "id": "54a9c5b4-0984-4273-a68b-86fa06a23ff8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4db94d30-d7c2-4394-bcd9-23646788e188",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "66ba6ec3-9fc4-478c-93a4-a064355f36bc",
        "cursor": {
          "ref": "f163435b-df09-4cb5-a1d1-654f272a0d42",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0b045c04-5e59-4f9d-afc1-088af6a06170"
        },
        "item": {
          "id": "66ba6ec3-9fc4-478c-93a4-a064355f36bc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ea769ceb-71fc-49de-a927-6c237221e1d0",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "71af2b7a-2cd0-4054-bf41-fbe407054956",
        "cursor": {
          "ref": "261eeded-c62a-4133-8508-dd48dbb529ac",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9c84ceb4-84cf-4f60-a81e-34c1d04a6282"
        },
        "item": {
          "id": "71af2b7a-2cd0-4054-bf41-fbe407054956",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e279bfa7-5023-4a2f-a2e0-b5647829c334",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e063096c-b241-46bf-8fdd-5dc1fd4f0c7c",
        "cursor": {
          "ref": "57e983b9-e68f-4433-9039-90e041305ca0",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2b4b1de0-4f3b-48f6-b8c4-236f896d87c2"
        },
        "item": {
          "id": "e063096c-b241-46bf-8fdd-5dc1fd4f0c7c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5cf1a541-c365-4a70-b5cd-2251db982556",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "dd2e7511-d4ff-4ac9-999f-397dea70bf14",
        "cursor": {
          "ref": "930766ef-c4b6-41e8-a2f9-2c9938e89f07",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f23049ce-8cc3-4856-a774-f59875b4f44e"
        },
        "item": {
          "id": "dd2e7511-d4ff-4ac9-999f-397dea70bf14",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "658aeb96-0a36-45ee-b212-0924226ed074",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "fd4134e7-170f-42a2-b8ef-3784383514b5",
        "cursor": {
          "ref": "4c87f353-aeda-41b4-8e0f-780cc4dd7c3c",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "09d8d21f-847d-409d-a554-fe77ab84feac"
        },
        "item": {
          "id": "fd4134e7-170f-42a2-b8ef-3784383514b5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f6fbdccb-0ed1-482f-9be1-207309ba7f23",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "17875fa0-e4ad-44de-98f7-99d0dcef1b4c",
        "cursor": {
          "ref": "ddb17bec-a751-480a-ab1b-908e8d20b7a5",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3f6df607-e994-4952-80c3-ecaf32425bc1"
        },
        "item": {
          "id": "17875fa0-e4ad-44de-98f7-99d0dcef1b4c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0b566601-4723-40d7-aff1-3910936fcb4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51739760-5902-4573-a718-964f6151b09e",
        "cursor": {
          "ref": "84914229-f5a5-49ac-909d-ef64d0531156",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e7df52b5-9f93-42f1-b7a1-e953ca8151da"
        },
        "item": {
          "id": "51739760-5902-4573-a718-964f6151b09e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "8bfd0b30-74fa-4203-bd7f-254e2097fa85",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8f4274-8003-4deb-bc03-a6dfee4b0127",
        "cursor": {
          "ref": "9c886a04-835b-4f25-86ab-dfa619a4a1dd",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "675c71d2-1b96-4ec9-b71f-5a2b81d5a1be"
        },
        "item": {
          "id": "8f8f4274-8003-4deb-bc03-a6dfee4b0127",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "37e92f8f-b714-452e-86a6-235429ae2bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8f4274-8003-4deb-bc03-a6dfee4b0127",
        "cursor": {
          "ref": "9c886a04-835b-4f25-86ab-dfa619a4a1dd",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "675c71d2-1b96-4ec9-b71f-5a2b81d5a1be"
        },
        "item": {
          "id": "8f8f4274-8003-4deb-bc03-a6dfee4b0127",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "37e92f8f-b714-452e-86a6-235429ae2bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f480dc7-2a65-45c5-85b3-57d3ddf7a2b8",
        "cursor": {
          "ref": "344e20f3-468d-47dd-b099-fba416d5b599",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e34f4c1f-4eb5-4bf2-b646-c627aec567b9"
        },
        "item": {
          "id": "5f480dc7-2a65-45c5-85b3-57d3ddf7a2b8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bb4c8d17-389b-4e41-81a6-f85c8a400c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55a7185-5112-461e-b99c-fe84b742f400",
        "cursor": {
          "ref": "cb3d89f6-8902-4ce4-ab18-b4d330dae400",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "89a947d2-3a11-47c6-8ac9-1bc1ecf31429"
        },
        "item": {
          "id": "d55a7185-5112-461e-b99c-fe84b742f400",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3762f30e-5273-4834-a606-3fdb1b9bd8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da48fb95-d7ab-4c32-9274-3530437092aa",
        "cursor": {
          "ref": "123b8288-179e-49e9-8da9-a3243a6eb329",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6b75e5a1-bd5f-469a-b8bb-34e2004007c1"
        },
        "item": {
          "id": "da48fb95-d7ab-4c32-9274-3530437092aa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b0e6af78-cb99-4475-8a5b-2ab8dd67e6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029581cf-1b8c-403d-8426-7ad789133107",
        "cursor": {
          "ref": "f19e3f0d-6554-4c58-afba-757f79433419",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e1981ea6-b3ff-400e-ae6a-b1cc72afb88b"
        },
        "item": {
          "id": "029581cf-1b8c-403d-8426-7ad789133107",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5ed9f4aa-82d7-4895-b7c5-1eb6c72decc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ac8a73-70e4-4e25-a2f1-b4bb84e3f6e6",
        "cursor": {
          "ref": "25c1252d-0b25-4c3a-8de4-108c414eb3c9",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bdc9804f-bf22-407a-9ea1-fcf0dc428227"
        },
        "item": {
          "id": "67ac8a73-70e4-4e25-a2f1-b4bb84e3f6e6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cd667164-57de-4abb-8fc9-d74116fc87e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7044dfd1-0272-4498-9538-109714a5a5fc",
        "cursor": {
          "ref": "76e0f619-b923-4c6e-8b66-af2280784c85",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5e384922-8afb-4b6e-8c59-af2a24156a2b"
        },
        "item": {
          "id": "7044dfd1-0272-4498-9538-109714a5a5fc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b06dd0da-84e2-4cef-8c08-da9ec65dc141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 791,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33524fbf-2c59-485f-8a13-d0813ea979a5",
        "cursor": {
          "ref": "42388578-9700-4568-a5f6-16c8c60a1d8e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "46ea6198-1103-4ff5-a859-212aebe064d5"
        },
        "item": {
          "id": "33524fbf-2c59-485f-8a13-d0813ea979a5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d026eb5a-958d-4562-b448-812bf913c63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9fba8b-04e3-4628-a124-abd6546b1c81",
        "cursor": {
          "ref": "c6a532ac-8dcf-4e33-a49f-7ceac5d47630",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "489509f9-1a66-49c7-9021-91eace56bbc7"
        },
        "item": {
          "id": "6e9fba8b-04e3-4628-a124-abd6546b1c81",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9c40de61-84a8-42a0-8bcc-3ad154ef7cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6a2f09-1a6e-4368-9824-ee24894b003a",
        "cursor": {
          "ref": "ecc55e05-d590-414d-a999-b7057f43a1c1",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6ce32024-0951-4ffd-a794-b5c6bd73bb09"
        },
        "item": {
          "id": "4a6a2f09-1a6e-4368-9824-ee24894b003a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2bc1621e-d2e1-4460-a884-d246019e4517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f85e5c-32b7-4e38-9f62-5b4e0eb6cbfb",
        "cursor": {
          "ref": "ba002c58-7871-4bc6-a1a6-7b12476d6fcd",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "19d6ff1d-ad78-49d1-b082-9fa2930f5b91"
        },
        "item": {
          "id": "48f85e5c-32b7-4e38-9f62-5b4e0eb6cbfb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d9ba1cb1-f2cc-428d-bfa1-7fe5a7eed66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdae195-00af-405f-b343-fda822bc69b8",
        "cursor": {
          "ref": "40d2f351-7409-4081-942a-5c48a6f8abc2",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c81aa94f-abcc-4a82-8303-1604c43532ec"
        },
        "item": {
          "id": "5cdae195-00af-405f-b343-fda822bc69b8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fa526149-3507-4ec0-94ba-cde5b28e001d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fa7485-68b6-4c7d-8e51-50af503f9f1c",
        "cursor": {
          "ref": "190c2293-803c-47e3-af3d-17b01fec335d",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "537adca5-6be9-42fa-878c-c50941d18534"
        },
        "item": {
          "id": "85fa7485-68b6-4c7d-8e51-50af503f9f1c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7dbb48aa-0496-4021-97fa-b0e795ae45e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6a5563-b362-4b2b-b781-be65fa3f1344",
        "cursor": {
          "ref": "e7692cf7-76d1-4430-a777-e0c86e0f1e47",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3c99ee83-490f-4ffa-bce6-18c196685620"
        },
        "item": {
          "id": "9b6a5563-b362-4b2b-b781-be65fa3f1344",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "33fd418d-5894-4707-80d5-a535da2e70f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac578aa-8011-4528-9015-625031f884a7",
        "cursor": {
          "ref": "b98e9cc3-d191-47e0-87f8-5db7a16f5da6",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "68ba79c9-9b1c-47ea-b6dc-215765cd04d5"
        },
        "item": {
          "id": "4ac578aa-8011-4528-9015-625031f884a7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fbb47a4f-e385-44d1-9126-3280f31f9d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482499f5-d9b7-4560-b16c-1a1f07040e8b",
        "cursor": {
          "ref": "9e43aedf-8513-4636-85f1-b284e2e00599",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "05517ce3-ec71-4e4b-880d-7e1e40d57ee3"
        },
        "item": {
          "id": "482499f5-d9b7-4560-b16c-1a1f07040e8b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d6f055cb-8035-4822-80af-ca7b339dfe2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2da8b9-6bcc-48d7-b838-09d11074e9a1",
        "cursor": {
          "ref": "95ae0559-f463-4705-80df-54dd22aa83ea",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1c88490e-7654-4255-ab74-934f908a928e"
        },
        "item": {
          "id": "ff2da8b9-6bcc-48d7-b838-09d11074e9a1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "05191619-8468-4cd9-8c0b-a5e849f9e636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78181d1c-3274-4d04-9462-3951689c04f6",
        "cursor": {
          "ref": "e2d2d3e6-ce88-4d6a-9a07-57111703bb51",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1110c434-f4a2-4177-80a4-d0c6f34b5e6c"
        },
        "item": {
          "id": "78181d1c-3274-4d04-9462-3951689c04f6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "715ae965-49d1-4994-8bdd-095c0bda2bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 969,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a649c82-a206-4a73-a2c7-418ffc0876d1",
        "cursor": {
          "ref": "7bd74928-bc4d-4be9-a8f5-e4a8fef9837c",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a9d57d8a-8179-42ca-833e-44b4cf3f577d"
        },
        "item": {
          "id": "8a649c82-a206-4a73-a2c7-418ffc0876d1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e64f8c50-596f-40b1-9b1c-b7fa55bdfabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 604,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad63e42b-0899-4534-b3bc-afda2ec2eb54",
        "cursor": {
          "ref": "fbeff103-1aa2-4d18-8adb-64a1ba65a291",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "98a31802-f600-40a6-89e8-76a30e639503"
        },
        "item": {
          "id": "ad63e42b-0899-4534-b3bc-afda2ec2eb54",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bf47fa7c-d621-4f82-94f6-1b8d344c2309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd60e08e-df59-46f6-b980-0c3457ed39ad",
        "cursor": {
          "ref": "fe21a290-f992-42ca-a0ac-d9d7d1bc6be5",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "07d570ce-4c70-4e08-8082-b371822ed0a8"
        },
        "item": {
          "id": "dd60e08e-df59-46f6-b980-0c3457ed39ad",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "13cbfa06-9f06-4fb2-a46b-f5948d6ebbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f435dc-b06d-4d33-9243-4b7fdd0c7818",
        "cursor": {
          "ref": "c4455053-213e-4f1c-bb86-14eb65f8dc3a",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3601853c-1acb-40da-b1ed-5a55e42723ff"
        },
        "item": {
          "id": "f4f435dc-b06d-4d33-9243-4b7fdd0c7818",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5ab2244e-722b-4019-8a61-3473029fdd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 400,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc284b5-f869-4709-9f09-45c8280d104e",
        "cursor": {
          "ref": "88b570ad-5a92-4cef-9af5-8ae6d8caa19f",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9616a7c3-59dd-4904-9c37-9e78881fb41e"
        },
        "item": {
          "id": "1fc284b5-f869-4709-9f09-45c8280d104e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d7aef6b3-6b52-40c2-9cc7-f38d561ef617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 543,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9a0061-5fb2-4985-8147-2888b0fbfcb6",
        "cursor": {
          "ref": "07e9b5be-b6fd-4d77-8847-73549d55bfa1",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "8c51c13f-24f5-478c-91ef-ee70dd5eb17a"
        },
        "item": {
          "id": "bc9a0061-5fb2-4985-8147-2888b0fbfcb6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e5859987-08de-4616-a620-03ad7691036e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39731c54-5104-4fcc-91e4-24c1b462f0b8",
        "cursor": {
          "ref": "92aac3aa-6b4f-4df1-9cf8-de7408f218f6",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7f70c305-3383-410c-8121-0efbdca9cd62"
        },
        "item": {
          "id": "39731c54-5104-4fcc-91e4-24c1b462f0b8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3ba987a0-caf6-4f8a-89bd-8c68a8f30f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d528107-9c41-4f19-b27d-ff23d2bee923",
        "cursor": {
          "ref": "f173b207-6bfc-4a40-ba1f-c6ed042a79b6",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8f63b80b-9888-4686-b8c7-060b5e5f5e97"
        },
        "item": {
          "id": "0d528107-9c41-4f19-b27d-ff23d2bee923",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ec42f809-edc7-42f5-b96c-3694d5e73d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 653,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0a3571-888d-4174-9b90-37b518f44538",
        "cursor": {
          "ref": "02ce591e-2d98-4c35-a4b1-f9d70bb26724",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ea606be8-80d6-44eb-a639-cd1e9ed067b3"
        },
        "item": {
          "id": "fa0a3571-888d-4174-9b90-37b518f44538",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4c3dac2a-2d51-4b2e-86e7-f2f5377a029f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972030ee-0d34-4c9b-ab0b-ca5f7cad9f21",
        "cursor": {
          "ref": "84755406-81f1-456c-bb73-76a591e061d3",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5a6c0495-d810-4cb6-bb64-28d0f03ca678"
        },
        "item": {
          "id": "972030ee-0d34-4c9b-ab0b-ca5f7cad9f21",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ec2ebcdd-4230-4920-b903-78d3585a81b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7c742f-a4ab-4931-80db-e315a7326ba2",
        "cursor": {
          "ref": "f03b7c2d-3fc4-45c4-b930-e86b1c1f607a",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "198a73f9-d50d-401f-8910-ebe0465a5fd4"
        },
        "item": {
          "id": "ea7c742f-a4ab-4931-80db-e315a7326ba2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b58e6df8-80ba-44c6-b488-f7a9ac50a434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1435,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f172e1a7-c6e2-4bfa-ae27-58b647c735f9",
        "cursor": {
          "ref": "1ca9af34-6c03-46ca-a362-0537399ae159",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c7e7c6a8-243a-43fb-8e70-d3f8ed8bbb30"
        },
        "item": {
          "id": "f172e1a7-c6e2-4bfa-ae27-58b647c735f9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "45b019ab-03ea-4359-84da-3246c72502e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51750133-2df9-4f8b-ba85-1636934840c8",
        "cursor": {
          "ref": "c9d81ab0-6fcc-487e-95c1-c96eab7192ee",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d50c6477-2afd-42e5-aef9-d42947c16534"
        },
        "item": {
          "id": "51750133-2df9-4f8b-ba85-1636934840c8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8a79d39d-6aac-4468-9d5b-a35d2aff0644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987709c0-e6cd-4be5-ad79-1e9818af8fb4",
        "cursor": {
          "ref": "43c68581-0b93-48f2-90a0-c7b2cf9e7d3c",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4f50fb14-9145-4b26-959c-bac33d5ced9e"
        },
        "item": {
          "id": "987709c0-e6cd-4be5-ad79-1e9818af8fb4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "327daf8f-c087-4c1d-8b03-883c0dacd3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a31fc8-2a4a-457d-bfb4-78297d124dd5",
        "cursor": {
          "ref": "4b6eff49-a09f-4bfe-8bc0-64197297fb3d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "467477ab-d11d-4447-ba7c-bd44fd2a5df6"
        },
        "item": {
          "id": "d2a31fc8-2a4a-457d-bfb4-78297d124dd5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "819a1940-b00d-4aac-b3f8-2927bbf6bf33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 834,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129878c9-68c0-4f25-9f1e-132a5523249f",
        "cursor": {
          "ref": "60ce2d1d-b61a-478c-b596-d38c2d8925ef",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f49a890e-f3f4-4df0-a9c4-e6c25cdc33b8"
        },
        "item": {
          "id": "129878c9-68c0-4f25-9f1e-132a5523249f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "22958577-966a-49e5-80cb-c2829c63bd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48061c60-a906-45a5-b198-c5801775e797",
        "cursor": {
          "ref": "a33e1b9c-bfd7-4e86-924b-83be9eb32ed4",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1887f8a2-b12d-4bec-b1cd-e99003976f7e"
        },
        "item": {
          "id": "48061c60-a906-45a5-b198-c5801775e797",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "aaf1a075-2e60-452f-b622-4546167a6523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 605,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29447de6-63ab-43c2-ba25-b1ec6b85d95b",
        "cursor": {
          "ref": "3b60879b-19d0-4b9a-82d1-472503ee0b33",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c6142918-461a-48b3-aaaa-678ec35771b2"
        },
        "item": {
          "id": "29447de6-63ab-43c2-ba25-b1ec6b85d95b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c99e577e-fcda-453f-97cc-4fc64af09468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72907498-2b6d-4715-bc4a-8b1649f83e65",
        "cursor": {
          "ref": "30a8efaf-a9fe-46f1-a02d-e97076a98e9b",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5119b5a6-221a-4a75-a14b-0f38adca441d"
        },
        "item": {
          "id": "72907498-2b6d-4715-bc4a-8b1649f83e65",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d7b7dc26-1157-4158-b09a-52ed19d576e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 463,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad56ab25-9132-473d-b77e-d5eb6e7f9ead",
        "cursor": {
          "ref": "1c391e4c-a3c8-4007-860a-391af65af3f5",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "10760b60-5fe9-498f-b0f5-9536d417fd18"
        },
        "item": {
          "id": "ad56ab25-9132-473d-b77e-d5eb6e7f9ead",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5e1b31b3-7cbb-43c7-a4bd-b63f87ed1cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 379,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab4b3df-f198-4550-8fad-fce4f8bc13bb",
        "cursor": {
          "ref": "318527d4-ec06-4990-9bfe-6c0519444a94",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2b6097a5-d368-47fb-a45e-452c2b4b0ed2"
        },
        "item": {
          "id": "4ab4b3df-f198-4550-8fad-fce4f8bc13bb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c1c6532b-c9ca-4613-b218-1405034be148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 317,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2783c0-d0a4-43de-a53a-7253cd0f7d0d",
        "cursor": {
          "ref": "c824c627-dda7-43db-8931-ede35f68cc28",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "121fd45a-708b-4a45-a698-8a26f3ae0a9d"
        },
        "item": {
          "id": "5d2783c0-d0a4-43de-a53a-7253cd0f7d0d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ec1759d8-91be-4706-861c-251c99b7f10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 458,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa159b3f-8912-4835-86fc-5f56b3fe2f02",
        "cursor": {
          "ref": "925b5e6d-e942-47fe-8a3e-47879c1a2fe7",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5f04d19a-8f0f-4b1b-9786-3fa466d54b78"
        },
        "item": {
          "id": "aa159b3f-8912-4835-86fc-5f56b3fe2f02",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8dd9242b-18cf-4cf2-9649-001a867c3086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d5072f-559a-4918-9d27-b4b9d8121d91",
        "cursor": {
          "ref": "15c9ed21-99e6-498e-b915-8629637d08d9",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ad84f8c9-41ca-4b8c-945f-e65efd6ce745"
        },
        "item": {
          "id": "c0d5072f-559a-4918-9d27-b4b9d8121d91",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fadddff3-e52e-46e5-90a4-c5e40db5d4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e043f36-e4fa-4657-bcfc-568adcccc09f",
        "cursor": {
          "ref": "920ee6f7-c410-4feb-ad5f-851430237df0",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cfd77e92-cef4-49e3-a9db-58974472a0e5"
        },
        "item": {
          "id": "8e043f36-e4fa-4657-bcfc-568adcccc09f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5495419a-42f4-4632-9118-e0a28c21b954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 464,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69da61f-4307-4878-9251-8eda7942e6da",
        "cursor": {
          "ref": "89bc9b34-d843-4816-bdec-a493b9a01568",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bbe7d0af-413c-4ca6-99ed-ebdf70d63f4b"
        },
        "item": {
          "id": "a69da61f-4307-4878-9251-8eda7942e6da",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4837aefc-7b16-43fb-b2e1-7d2aa6a7420d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 524,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5829070-52f5-49cc-932e-f34b3b867f4c",
        "cursor": {
          "ref": "40d60ba9-9b27-47e7-87dd-dc1fddf71e95",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "831f545d-8b2a-4d4a-b4f8-bfabbc392cb8"
        },
        "item": {
          "id": "a5829070-52f5-49cc-932e-f34b3b867f4c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "955f7fd4-5aa8-450f-b004-43ec695b6812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 403,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e8d26f-4147-41cf-b43e-62149902eb9d",
        "cursor": {
          "ref": "88ef03c5-baea-477a-8031-d33601186fe5",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6dc353f7-891e-4455-b2c9-1979c105e6bf"
        },
        "item": {
          "id": "08e8d26f-4147-41cf-b43e-62149902eb9d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "489e996f-df62-49cf-ac8e-bc96ec2952c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 473,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0493c6f-2d99-42c1-aff5-4697bb510626",
        "cursor": {
          "ref": "dad88e82-d886-4e71-8380-3e426d5147c8",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5e75d0ae-4251-4097-9bab-8d9c78c119c1"
        },
        "item": {
          "id": "c0493c6f-2d99-42c1-aff5-4697bb510626",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "486d2e05-a640-4908-a3ee-fe6dffdae914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebcedaf-6b59-43bf-a28f-093910f0e488",
        "cursor": {
          "ref": "ef46efd6-9253-4330-939e-8ec3d867efb1",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f2c51a37-6cf6-4a8b-b0db-7d58167e8362"
        },
        "item": {
          "id": "3ebcedaf-6b59-43bf-a28f-093910f0e488",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "80d16f7d-e739-419c-9930-7d9c1f4eef3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2764,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280f1611-60da-44d9-b7df-6dcec8ec5972",
        "cursor": {
          "ref": "4720f933-6ef4-4e0a-b903-ecf083cef583",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f7f7008b-25ac-44ad-bf6d-1ca2d75ef913"
        },
        "item": {
          "id": "280f1611-60da-44d9-b7df-6dcec8ec5972",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "57805a1e-09f8-4a66-8f47-fa1da57c3b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3098dfa3-06d6-488d-8699-d696b161ab6e",
        "cursor": {
          "ref": "b95091f6-a43b-46c1-b0b9-6b8f98d7940e",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b829345d-ffcf-40f6-be94-914817f2867b"
        },
        "item": {
          "id": "3098dfa3-06d6-488d-8699-d696b161ab6e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3f10a5b7-dc69-4192-86ac-c461d069e991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1565,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8921bb-db56-4cc8-8fd1-d214885b8aa0",
        "cursor": {
          "ref": "b1cb2b69-d260-4c70-8d4b-f66a0fb0d1fd",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0fdf3f91-7ab8-4bf1-8466-881d17121737"
        },
        "item": {
          "id": "7b8921bb-db56-4cc8-8fd1-d214885b8aa0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fa29ff4d-f7b2-4e89-846a-bdcc232e996f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 769,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd7e6de-8223-4baf-8111-107633d25787",
        "cursor": {
          "ref": "2f2a691c-6dd4-4111-83ef-1638f0eded79",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c2dc1fa4-e6a6-4d59-9641-2f9070cbd056"
        },
        "item": {
          "id": "dbd7e6de-8223-4baf-8111-107633d25787",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9145c432-27b2-45fa-8b65-218c4def3bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2953699f-1b39-4af1-a8fe-b007587dfc8d",
        "cursor": {
          "ref": "5da05866-8eb0-4e8f-b1b0-a469aca69c95",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "777cb76a-58c6-42e6-9bec-55eb03b99136"
        },
        "item": {
          "id": "2953699f-1b39-4af1-a8fe-b007587dfc8d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1dedd0db-cd43-4fa5-8f74-c5ecefb92093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 308,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224a6628-628c-4830-9b76-13ea518fa9cb",
        "cursor": {
          "ref": "10896c7f-2803-4f73-ac0a-ee2652cbd782",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "98b93442-4541-4178-a8cc-c48481f77375"
        },
        "item": {
          "id": "224a6628-628c-4830-9b76-13ea518fa9cb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c2a1780c-96a6-4db3-a22a-669f36de96a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ecc0a4-a334-4444-951d-3c7169851ac4",
        "cursor": {
          "ref": "dd439ea3-7ea3-499f-9d37-f89249e2e350",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "db0cb559-ed0c-4dad-b78f-ca69497dfd0b"
        },
        "item": {
          "id": "48ecc0a4-a334-4444-951d-3c7169851ac4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fd2b35c2-0720-4183-a942-7813b16e8d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e553379-d03c-4270-aa6b-2f39f846df74",
        "cursor": {
          "ref": "8160a49b-3b8b-4854-b161-7bdaa42e407b",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a95f1b38-446b-4fe0-b687-44d96719231d"
        },
        "item": {
          "id": "4e553379-d03c-4270-aa6b-2f39f846df74",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7d180fe4-58bb-4680-ac9a-4159edc7fb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549a188c-8ae1-4dab-82ce-f62c0e1884d0",
        "cursor": {
          "ref": "3108d2cf-566b-4553-82a2-57a3d2e1827e",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b7251619-0f57-49c5-b10a-1c3336aaf0b7"
        },
        "item": {
          "id": "549a188c-8ae1-4dab-82ce-f62c0e1884d0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "57a78819-3f56-49db-8b44-f7c81fe8ef85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26155a95-a4ed-4641-bf84-275966e5b2ef",
        "cursor": {
          "ref": "33040934-d022-47bf-b853-203a09165c72",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d0e46df7-5606-4ffe-b592-0a21a3f3ef5d"
        },
        "item": {
          "id": "26155a95-a4ed-4641-bf84-275966e5b2ef",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8724d7cc-78b1-4e01-a2e5-131cec7b3c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213d15ea-3043-46be-a287-66f744ee8024",
        "cursor": {
          "ref": "98611a2b-f492-4e33-8dc7-0b24b5e74281",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2d150b44-e625-42ed-a6ab-484d44c4180e"
        },
        "item": {
          "id": "213d15ea-3043-46be-a287-66f744ee8024",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f40292d6-b8cb-43c9-9b30-9fbf111e57dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56fd8e5-290f-426e-aa17-4bc58c99e95e",
        "cursor": {
          "ref": "9454d116-5619-41ac-b44c-c595f47bc762",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cfed5b66-ed13-40a4-8a4b-b3a6eaf69fc6"
        },
        "item": {
          "id": "b56fd8e5-290f-426e-aa17-4bc58c99e95e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e9cfa9b0-a054-4a7e-b2f7-297db25877b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f14f88-9444-40f9-838c-ddb9a46c6a37",
        "cursor": {
          "ref": "4de3546d-b856-4c05-821e-bc8eb8447e5c",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "044c984e-ec25-446f-9ce3-a9c84b95d4fa"
        },
        "item": {
          "id": "71f14f88-9444-40f9-838c-ddb9a46c6a37",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0d1731af-a832-41fd-8df3-f80b0fba0b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cc8cac-341f-467d-bda7-6880206a7fc1",
        "cursor": {
          "ref": "78668c50-0e99-4fd1-94d0-a2e2cf96ea38",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3d05bb6f-bb07-4aa4-bc96-ea6ed5d63eeb"
        },
        "item": {
          "id": "72cc8cac-341f-467d-bda7-6880206a7fc1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fcd92817-9166-46f1-a430-5e0344389630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 632,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545c37b4-f811-4d57-8ac9-6cec1a2cbbae",
        "cursor": {
          "ref": "7987980e-2e88-4424-b7b6-fe4ce6fd65f1",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e98b41d1-33c6-487c-bdd5-d0f7e3d7f332"
        },
        "item": {
          "id": "545c37b4-f811-4d57-8ac9-6cec1a2cbbae",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e06a3f07-7855-4f1b-85cb-30d5a840b317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9bf0c1-89ae-4523-b916-1a77c08244d9",
        "cursor": {
          "ref": "3eb5c1e0-6c90-4930-b051-d0356c44aedd",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "40f91344-1572-488c-9790-e8355c5522d2"
        },
        "item": {
          "id": "5a9bf0c1-89ae-4523-b916-1a77c08244d9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8b13a154-ab84-47cd-adab-166fea39a95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf38ae2-25b5-47dc-ad1e-710bc31acab9",
        "cursor": {
          "ref": "d341bb13-9a69-43a8-8470-f2f5daa3b32f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2474135e-4a2c-44fa-a8d3-b6f07fb1b2ca"
        },
        "item": {
          "id": "ebf38ae2-25b5-47dc-ad1e-710bc31acab9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6c553849-bfd2-4186-bdd4-e09af358437d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2b38ef-1468-4bab-a0c6-5952ad293059",
        "cursor": {
          "ref": "857eaf90-4b51-44f4-bb1b-87921b6f8a77",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "abbfa888-ba4d-4c02-ba00-3646833376f7"
        },
        "item": {
          "id": "fb2b38ef-1468-4bab-a0c6-5952ad293059",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2b930d13-c2e3-469a-a174-8ff2afff1a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577fc6c1-1d4e-4180-a3bd-929dc030a719",
        "cursor": {
          "ref": "18ee4f58-349c-46e1-aaf7-20f601703843",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a95cd5b1-903e-4318-9076-d5804db02d40"
        },
        "item": {
          "id": "577fc6c1-1d4e-4180-a3bd-929dc030a719",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cfa46094-35ea-49d7-9f4f-42bd222ce2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094676c4-b0fc-4a4c-aac1-07a6556dbbf6",
        "cursor": {
          "ref": "07bac37b-848d-44b5-83c4-cfa41cf34607",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7b7b5fb3-9607-4728-b4c9-72e5eb354549"
        },
        "item": {
          "id": "094676c4-b0fc-4a4c-aac1-07a6556dbbf6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5c93dd25-26d6-49c5-a796-dc5f205aa7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7884d75-821b-4bfc-a582-8811de60bec6",
        "cursor": {
          "ref": "b34668fb-1c1d-4d6d-8967-973740f56241",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bd48b0bf-239e-48b0-b059-c97bbce3d014"
        },
        "item": {
          "id": "c7884d75-821b-4bfc-a582-8811de60bec6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ca843b81-5cd6-410d-af98-c942681dbe13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c5b8cb-f8e9-47c0-a7e3-e23564250f38",
        "cursor": {
          "ref": "97d128d8-5623-494e-a15e-8e84fff6a7a5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "eaf8794c-d412-41f7-9554-7e8be146aebe"
        },
        "item": {
          "id": "42c5b8cb-f8e9-47c0-a7e3-e23564250f38",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7a500bd8-9c5d-4d2c-98f7-f49d3cce12e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bbcbe0-aeb7-4c8b-ada3-dbed2e4c4413",
        "cursor": {
          "ref": "46f21ac6-8fda-4b6e-a500-7facfce814d4",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bd33029f-a90d-477e-bf65-17dd6076ad0c"
        },
        "item": {
          "id": "d2bbcbe0-aeb7-4c8b-ada3-dbed2e4c4413",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "84b7bec3-21df-4831-9ea1-77c66d0d03ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1b0729-1d86-4eef-b363-4862ab6e1ace",
        "cursor": {
          "ref": "579dd97b-c283-4cc6-be28-cea8a0cd1b3a",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "97ef670c-fb76-4ad7-ba3c-e630db2c6aec"
        },
        "item": {
          "id": "5f1b0729-1d86-4eef-b363-4862ab6e1ace",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4e4102f6-6d33-4ff3-b53e-5286d5adea55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78ae41a-0305-4d9c-ab59-c32d6865ffe7",
        "cursor": {
          "ref": "31b3d120-2709-4fb3-b8cc-3a669ef9c2fa",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4cb4255a-28ba-4abd-a80d-754220a832ae"
        },
        "item": {
          "id": "e78ae41a-0305-4d9c-ab59-c32d6865ffe7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "29e309ed-47d3-4979-9995-293dfd361cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1808e9da-5cc8-46f8-ba87-a73167bd0adf",
        "cursor": {
          "ref": "1cdb037d-bafb-402e-96ee-038adabe43a5",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a256448f-12f5-4ec2-8e5d-d2088d1942a7"
        },
        "item": {
          "id": "1808e9da-5cc8-46f8-ba87-a73167bd0adf",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "446748b2-2bbc-48ee-9c29-054a60f6b251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95db7a6c-7641-49ac-8cca-d3fa93ec53d9",
        "cursor": {
          "ref": "b2ef34ce-7a08-4a25-87bb-234e1682d7c9",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "642d815c-cc3a-4199-b924-91e327df7904"
        },
        "item": {
          "id": "95db7a6c-7641-49ac-8cca-d3fa93ec53d9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f6a057b1-776d-4015-a468-003caf2a8eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f414be8b-7baf-4858-b1f1-a905d6cf2aec",
        "cursor": {
          "ref": "be4fcf88-e772-4ea7-859b-c20574883cfc",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e9a1663a-1868-4300-a0f9-17c99af75fb0"
        },
        "item": {
          "id": "f414be8b-7baf-4858-b1f1-a905d6cf2aec",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1ee00ee7-eb0b-48e1-9aa1-82bd6da804db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e790a63-8fca-469f-9e36-497fedaf09f3",
        "cursor": {
          "ref": "da466f73-0d64-44eb-bac5-0041d241aeda",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e2f33c76-2cad-4be4-b194-0097a5fdc1db"
        },
        "item": {
          "id": "2e790a63-8fca-469f-9e36-497fedaf09f3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "50ab01ea-14bc-43cc-a9e1-59e8becb7ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f76ef2f-1a1e-4d03-817f-afac52601e8d",
        "cursor": {
          "ref": "e734426e-7759-4243-94e2-b46edd644c48",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a7589f41-6609-47c1-82cf-fd15a903a631"
        },
        "item": {
          "id": "1f76ef2f-1a1e-4d03-817f-afac52601e8d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5a584adb-c322-4cdf-abca-2e4fb6e3922d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8c9516-f96c-4c98-a220-e75459a5c869",
        "cursor": {
          "ref": "513a5d09-68fe-464e-9888-ffe10043d884",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b485177a-b343-4374-8630-75b04f5bf88b"
        },
        "item": {
          "id": "1b8c9516-f96c-4c98-a220-e75459a5c869",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9a0991ef-36bc-4af5-bf64-333739416ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb580aeb-6846-4a2e-98a6-4ba0be0b2910",
        "cursor": {
          "ref": "04a55fb7-9733-4ed9-b9e9-e4a86f4e434a",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "81f9b680-fadd-4887-aaeb-d2ba7d659452"
        },
        "item": {
          "id": "bb580aeb-6846-4a2e-98a6-4ba0be0b2910",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7dd5fea5-923d-4cd8-b8bb-7d2073e95b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccc21f6-0009-4805-bcc6-6abc8345fb8c",
        "cursor": {
          "ref": "04093c8a-1d76-4108-b9ac-6910f0bf7032",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "692273e6-c757-4cd6-b7b7-f2efd186f55e"
        },
        "item": {
          "id": "1ccc21f6-0009-4805-bcc6-6abc8345fb8c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1e67dc46-1bce-4191-8113-8472bc761edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411ac562-e0cd-446e-ad3a-9fced8921d6a",
        "cursor": {
          "ref": "e8b9c03a-eae3-4fb6-ab8e-bdcc96bbafc8",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9c931de7-e134-430f-9cc8-8a99f254ef3d"
        },
        "item": {
          "id": "411ac562-e0cd-446e-ad3a-9fced8921d6a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "875308a7-4aba-4c54-acc8-b806b7d005b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb14dea-a41d-452e-a9ff-597bf5647c20",
        "cursor": {
          "ref": "413b964a-72d1-4db2-a396-6904acf53997",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d582579a-98dc-465a-95e2-decf6adf280e"
        },
        "item": {
          "id": "5bb14dea-a41d-452e-a9ff-597bf5647c20",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "33fd1c98-a30e-4cc9-90d4-5cd79233aa16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b74ff1e-8301-4eee-a15d-ceadd1525aea",
        "cursor": {
          "ref": "fc0c8ad9-06d3-4bb6-8864-14170068bccf",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cec79f8d-7e52-4ebb-82e8-7218074715a2"
        },
        "item": {
          "id": "7b74ff1e-8301-4eee-a15d-ceadd1525aea",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fd956de4-0f60-4c2d-ad39-6be5f371e9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d880ec-ebb2-4ac8-87fb-917c3b4b71c1",
        "cursor": {
          "ref": "7157bdce-6512-4f60-ab8a-f7ffcea1d3ad",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "19f69a50-29bc-4b04-90e2-a6295c280552"
        },
        "item": {
          "id": "a8d880ec-ebb2-4ac8-87fb-917c3b4b71c1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "31da9bc3-cab7-4d83-92e2-ceb7d534ec20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d0e386-6343-4d07-8623-be125e68a615",
        "cursor": {
          "ref": "905ea368-24c0-4f02-bd07-75c6fa5c26a0",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3ffbfc23-e54c-4faf-8aef-9adf292c93ef"
        },
        "item": {
          "id": "67d0e386-6343-4d07-8623-be125e68a615",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dbbbf0ca-a619-4522-a0d4-b8e0b5eebfeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd4543c-644c-4e11-8c24-f454c4a19cff",
        "cursor": {
          "ref": "b87420c6-4a60-42e4-9647-2e3e72aae812",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d71a8d5f-7509-4aa2-8f90-af8c050bfae7"
        },
        "item": {
          "id": "fdd4543c-644c-4e11-8c24-f454c4a19cff",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "20b429df-5c43-4579-956d-8a193cef63f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4234e0-a6db-4584-bd89-155d104ef8d6",
        "cursor": {
          "ref": "2986eb24-a11b-4919-8f7f-8d67d207a4f1",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "14d4d143-c4f8-4282-b99b-aa2b3523239b"
        },
        "item": {
          "id": "fc4234e0-a6db-4584-bd89-155d104ef8d6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ecd7854a-100e-4344-b6f1-c73d848c2b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a63d82-1884-4342-8ebd-cc3fd7439e35",
        "cursor": {
          "ref": "edc01bc9-09c8-4250-a235-60d2022d216c",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d316ef48-21e6-41f5-b296-81cc78227313"
        },
        "item": {
          "id": "85a63d82-1884-4342-8ebd-cc3fd7439e35",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "adf24c46-a945-4047-b8a3-69e72f0df5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d40c622-6332-4eb1-94e1-3f2a942a88b6",
        "cursor": {
          "ref": "c6a249dd-ba14-49aa-922c-c8f0923be04d",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ab3a2c83-3dd8-4b12-ad4f-ed9a199037cd"
        },
        "item": {
          "id": "7d40c622-6332-4eb1-94e1-3f2a942a88b6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0f0e8f35-d9c8-4523-a426-87b9eb990049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d20ae4-7ba0-4e29-b3eb-b81eaf1cccea",
        "cursor": {
          "ref": "aaaf6182-9942-4257-bbdb-4f61895baa6b",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "84b104b3-0197-49f9-baeb-7ce7af28dd96"
        },
        "item": {
          "id": "08d20ae4-7ba0-4e29-b3eb-b81eaf1cccea",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9b29b4dc-8750-47a8-b375-b63e820f6d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744719ab-0edb-46fa-a797-ca5bc0b14268",
        "cursor": {
          "ref": "9087efa9-e621-4a9d-a806-7534745d4e1e",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "53638332-c92b-4055-8fa9-3336b7ee58ad"
        },
        "item": {
          "id": "744719ab-0edb-46fa-a797-ca5bc0b14268",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e18adbb7-67cd-4dfe-ba58-00b3a6583744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60843a9a-8763-4fdf-8e4e-53fab5160db2",
        "cursor": {
          "ref": "224702ee-5f95-4901-ba06-b2ebbdb72b1a",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "291d318a-0baa-4cba-85dd-fdaae31745cb"
        },
        "item": {
          "id": "60843a9a-8763-4fdf-8e4e-53fab5160db2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "77b8a177-c3d6-4fdb-be6b-071615f1cc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4ae11b-70b7-45bf-a2af-de3c9f6cba45",
        "cursor": {
          "ref": "4245455c-d175-43ce-a964-a252671430e5",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "09a1d0c3-18ca-4a3b-9aaf-0960db431a7c"
        },
        "item": {
          "id": "db4ae11b-70b7-45bf-a2af-de3c9f6cba45",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6ba1eaa1-0c30-4c71-9362-8b7730502904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd52b1c-325f-45bf-a762-f5805301c0b6",
        "cursor": {
          "ref": "4bc8240a-cac3-48e8-922d-b2257361ea3f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1fa1ff14-9c39-4115-99d5-6845069ebd69"
        },
        "item": {
          "id": "6fd52b1c-325f-45bf-a762-f5805301c0b6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "dec8f9f9-a90d-42ae-84bc-568b03f7fc3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccab278a-1cf1-4ee2-9f56-5cf70cbfce68",
        "cursor": {
          "ref": "3c3eda76-5979-4a8c-ad86-fbc16d5310b1",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "db93694f-34d0-4218-9d66-71ffb2ef9393"
        },
        "item": {
          "id": "ccab278a-1cf1-4ee2-9f56-5cf70cbfce68",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1e0a6148-24fc-4fed-8349-5c0a38ed8861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e342473d-f65f-4ce1-a79f-8d93a77b1590",
        "cursor": {
          "ref": "a27c4960-67a9-4246-acac-a73730e41a87",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ef16720b-031c-4d4e-990b-4e8dc88d3867"
        },
        "item": {
          "id": "e342473d-f65f-4ce1-a79f-8d93a77b1590",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a6d05689-6b2e-41a3-82e9-62946de72af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e183fb04-cb8f-408b-803e-4f516fd422f8",
        "cursor": {
          "ref": "dce19a1a-24d1-4630-b5a6-d464683e8235",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "06fc50df-7f2f-4612-a0a3-06daa330ab5f"
        },
        "item": {
          "id": "e183fb04-cb8f-408b-803e-4f516fd422f8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5eb3928d-f1ba-429d-b1cf-2460a7f9f0f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6150dc-6c0c-448a-aa4d-4507ef14428e",
        "cursor": {
          "ref": "81351be8-3abb-4e5b-849d-ab231a13b677",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5281711b-c1ce-4508-8d9f-00ba6c5d1d2d"
        },
        "item": {
          "id": "1e6150dc-6c0c-448a-aa4d-4507ef14428e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f5516f6c-4c61-4689-aa44-73b6105c5b26",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 20,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d029f11c-e773-465a-b7ec-6e56d392dcc4",
        "cursor": {
          "ref": "5c3fa458-dfdf-477f-ae24-7c93d5681de1",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5429b84f-4bbf-44d6-821e-b6f043fa3493"
        },
        "item": {
          "id": "d029f11c-e773-465a-b7ec-6e56d392dcc4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "362b5159-0dcf-4419-8a61-71beac7509ea",
          "status": "OK",
          "code": 200,
          "responseTime": 945,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d788fac-2f21-43c6-b5c8-3e9adc8f1af0",
        "cursor": {
          "ref": "a4e3d122-b653-4040-ad8b-3a178a4052aa",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "94a632fd-251b-4261-b21b-a6b1462624ff"
        },
        "item": {
          "id": "0d788fac-2f21-43c6-b5c8-3e9adc8f1af0",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "c7ab2894-a1d4-47fe-a56e-67df07af6f7c",
          "status": "OK",
          "code": 200,
          "responseTime": 1397,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf611ae-5079-4157-9e72-e02dd009b3a5",
        "cursor": {
          "ref": "d0134774-b6ca-4df3-812c-3f735c8bad96",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "52ff92fe-4800-4c6e-9d3e-95f2d850a87e"
        },
        "item": {
          "id": "8bf611ae-5079-4157-9e72-e02dd009b3a5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ed48f8c8-951b-4560-9de6-1c3d4ce310c2",
          "status": "OK",
          "code": 200,
          "responseTime": 2825,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8035e0d-130a-4c0a-9ea2-75ff92a36efa",
        "cursor": {
          "ref": "d574dcb3-2609-481f-9d89-ca08930820eb",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "389fe853-6642-49e9-8fab-02f861e5c7b3"
        },
        "item": {
          "id": "f8035e0d-130a-4c0a-9ea2-75ff92a36efa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "09155ec4-3a10-4b5a-9f63-007fe81620d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 117,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8035e0d-130a-4c0a-9ea2-75ff92a36efa",
        "cursor": {
          "ref": "d574dcb3-2609-481f-9d89-ca08930820eb",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "389fe853-6642-49e9-8fab-02f861e5c7b3"
        },
        "item": {
          "id": "f8035e0d-130a-4c0a-9ea2-75ff92a36efa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "09155ec4-3a10-4b5a-9f63-007fe81620d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 117,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8035e0d-130a-4c0a-9ea2-75ff92a36efa",
        "cursor": {
          "ref": "d574dcb3-2609-481f-9d89-ca08930820eb",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "389fe853-6642-49e9-8fab-02f861e5c7b3"
        },
        "item": {
          "id": "f8035e0d-130a-4c0a-9ea2-75ff92a36efa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "09155ec4-3a10-4b5a-9f63-007fe81620d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 117,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f91192-93f9-4d34-a24e-15625f55cee1",
        "cursor": {
          "ref": "c1ac0675-4db0-432d-89b3-8850dda98215",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "53ec6e16-1251-4f44-8535-5c387c1b9397"
        },
        "item": {
          "id": "f6f91192-93f9-4d34-a24e-15625f55cee1",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a328a0f5-de40-435c-a8fc-fb867a83c9e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1875f57d-651e-4076-a740-83b6145b6e94",
        "cursor": {
          "ref": "31b2ad42-d61c-48b3-8bf9-511c48ed2112",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d747d337-67ea-4769-8122-915485146829"
        },
        "item": {
          "id": "1875f57d-651e-4076-a740-83b6145b6e94",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9a8501ea-7d1a-4f39-8e46-02afcac2374e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1875f57d-651e-4076-a740-83b6145b6e94",
        "cursor": {
          "ref": "31b2ad42-d61c-48b3-8bf9-511c48ed2112",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d747d337-67ea-4769-8122-915485146829"
        },
        "item": {
          "id": "1875f57d-651e-4076-a740-83b6145b6e94",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9a8501ea-7d1a-4f39-8e46-02afcac2374e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8fcd21cd-6e36-4d6c-b5ac-303958452a62",
        "cursor": {
          "ref": "ae9106a7-0637-4d9b-8925-b6617419eb23",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a64ce5b4-5e4d-4a2e-ac57-b2c7b34c6dd2"
        },
        "item": {
          "id": "8fcd21cd-6e36-4d6c-b5ac-303958452a62",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a1d5ff31-1201-417b-81b4-72c8b69ffa07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "63161c48-7732-459a-8db3-d7217e3649a8",
        "cursor": {
          "ref": "be791bd0-44c3-4431-957e-5d0faa4add96",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7d5c5d7b-1b91-4ce2-92b7-2a2a4fb905c7"
        },
        "item": {
          "id": "63161c48-7732-459a-8db3-d7217e3649a8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1bd96034-04c0-4914-91af-c387159f1560",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63161c48-7732-459a-8db3-d7217e3649a8",
        "cursor": {
          "ref": "be791bd0-44c3-4431-957e-5d0faa4add96",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7d5c5d7b-1b91-4ce2-92b7-2a2a4fb905c7"
        },
        "item": {
          "id": "63161c48-7732-459a-8db3-d7217e3649a8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1bd96034-04c0-4914-91af-c387159f1560",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac8fdfb-efa2-4715-b60e-476a6ee69489",
        "cursor": {
          "ref": "60cb5757-5958-4db2-8d3b-f985fbe46ab9",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "39ef3eb3-c529-410c-b888-2a0b1f65e3c9"
        },
        "item": {
          "id": "4ac8fdfb-efa2-4715-b60e-476a6ee69489",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "0a91beaa-4f5c-4d5d-8cd0-fbb14cf627af",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}