{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3f816ef9-6597-4c7d-922e-9b9c3796ffd1",
        "name": "Clear Cache",
        "item": [
          {
            "id": "606b4d19-5694-44f5-acc4-f80aa0eb7862",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "733f86a8-daaf-4f3f-8713-4d78c8925eed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5a431adf-42e5-486a-8173-643852fd8b2b"
                }
              }
            ]
          },
          {
            "id": "c17b2ce5-0441-44a7-ac4d-4ecaea2451e7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "49c9d77c-013f-4d41-8583-6bff0584bb99",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "79227ee5-f5bd-4dd9-8d85-5ea23c1e6f4b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5e9c9f22-a561-4856-a26a-cfe2b08a4e31",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "14ce4738-8c05-4753-8d72-61290495c141",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4221926a-8a84-4de2-a101-aa6922baa21a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40648fba-746d-46ee-acc5-fd1629f223a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96b3605b-4b45-4a24-af6c-92b543f09077"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3b66d331-5bbf-4607-925d-28dc021b2ba4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8d089a0-b51a-4d98-acea-c6ab795cfc34"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0684914d-f2ac-46a4-8cf9-4b6ff356ecd2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15645470-6328-4d72-919b-5ad4def5a6b9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bdc5fc2-b718-46a4-935e-e968b391746e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "25fe2c4e-f888-45a3-9616-e6ef65bf5142"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0270a607-e76c-44df-b3c3-9c04eb3e98e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34b76bad-d12c-4a49-8cd2-6102bdb85b3f"
            }
          }
        ]
      },
      {
        "id": "bc77eca0-f4ea-4bc0-add4-a6b3ec27aaa1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "27a34f16-21a7-4c12-a13d-f80999651b37",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5124dfba-31a4-4a9e-baee-5beda8181f95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a13a7d9a-7721-47a1-a586-1c3206c60934",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a015f8-3b2b-47cf-b8bf-cf62c799c28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64c7b9a5-8176-4370-b420-5e94ed70d902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfe0136-6a50-4c08-b376-7021e076db0d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95131f1-08df-4c94-8055-e23602cf34b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5efd5514-b07d-45a2-81df-fa27776b1264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da02a9e3-bae0-48b8-8c49-b8aad8b4244d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46381eb5-72a4-426e-9a08-5529ef7456b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c2533b8-616c-4beb-a87e-edef1f9125b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "33938f9f-0d67-4642-8c33-818a93ed87b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a74b148-5d70-43b4-a0f8-2052ccf85d45",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321fbd4a-aef0-46d0-be26-dc0e40b5e73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20a2cdb6-2fd4-4745-bfe0-8929bac2139b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778a1706-ca52-4d4e-aabd-755cb79ef4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e1ba8d-348a-419a-b0e5-578428dc9754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91122f6f-9383-4d07-87e2-1ee81399b515",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17be8e4-e845-49a8-9fc3-129f4d2e3624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21aa8d15-20f9-4d28-a910-9986e8ac3fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbae6a5-17da-4080-9644-7a2f6a46113d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b6fcc69c-d898-4346-b0a3-c9b8da1cc4a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "17f17a76-217d-418a-acc4-9ed7c4723499",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4fc2ea9d-fdcc-4c1b-8840-e433b98b8314",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e5cd9f6-85eb-4316-a054-6c8a95a9352b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ec4bedfe-ca35-49ae-8faf-9fb4f2b6d4d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ff615a8-b901-434e-9275-b803fb811066",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "aacc9e68-40e8-42d6-b94d-db1f8b148006"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a0e6b76-6ec2-46e6-842d-babc6202d7a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a8c06f2-ec56-4111-ba00-abbbadf893a2"
            }
          }
        ]
      },
      {
        "id": "3e3f4553-9e94-4635-b286-6b4ec492978f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fcd91ca1-26de-452f-8d7d-976f21c36311",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4fcf02c-795a-4bfc-8bd7-1d41cbe0d6be",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2818f496-c719-4864-8814-76c40c47573b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28e743a-7105-44eb-ba9d-abb552f03a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3551b3-5e88-454c-9bfc-674922cffa69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c83439-a05f-4cc8-baaa-6f40f6b7828d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "356f3a6c-9bce-471b-bcb7-5b7b242fb318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e717682c-ac2e-42c1-b87c-5028dbdc091b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60739c35-7270-4d5e-adf6-661069f5bea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1055db-2567-4900-92c5-5beb388aa77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8de8eab-6bd2-43af-a85f-80e15083e228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2847f286-9226-405f-bf44-204460767fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411b5670-76a8-4cd4-bfc7-f2e95c7765d0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1738a627-da57-438b-8483-632f04d1536c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fab5c56-d9a4-4222-a7c2-85768f0f7c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8bac7c-7346-4e24-a35c-95b8757feb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b42b2ed-9513-43ae-9c9c-8ad5100b5822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4215c215-ab8f-44aa-8883-b9e1a00c4fb1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f4b707-6d47-4a8b-b11e-af342800072a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa549f3-d773-4885-8606-9a1c57d65d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1509a742-c002-4046-bbc5-df81726c821e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f230fca2-4eca-41dd-a99a-b68584d28318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9394e7e7-8a10-436a-b1bc-148cac61224b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c791eb32-1ef4-4189-9ab4-a48d238dedc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21aff3a-61db-4e76-95ef-b2abfaa1d3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a64ea9f-d19d-41f7-a2cf-d027b7424d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddc4b761-64ff-4e46-8709-e19c85017bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f9ce03-b9c4-49d2-a87d-bedbea0693af",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128792f3-c3b8-431f-bd4b-32b3ed8a53e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9239b9ee-ab84-4b91-9d55-acef49d441a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a4f176-0f29-47de-a645-270c093ce07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbb6fdb8-1158-472f-beeb-23e51368cf34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147f545e-c44f-4df6-93da-60138b4a206a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707b741b-b80b-4eac-8d1c-628a28012992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6c8f0c-c8be-44dd-9c6f-7d9876946229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f07396f-517f-4ec8-9ce3-e3e0df561568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d82f245-b8d4-496a-bd59-b4994d375484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7740dd-302e-4bc1-9e08-2c6a7deabb15",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9198a2d3-82d0-48eb-b219-8241b0a25549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b678018e-96b3-4711-a55a-1ff09b23ab20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1e636b-50e0-4f9f-b829-67039d9c8806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09888da3-f4e7-4223-bfbc-7102bb6bd9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6eb6f13-4819-4521-9700-39d2d5fa6c69",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2672ad-e509-47bd-bde6-9412693c6c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f440669-b9d4-4c08-8ca3-8005fde6c92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af28130f-9bb6-4cb2-9a9a-84617f5df15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e04ff78f-d1a7-4ae3-a3e9-0629b791274f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a72e61c-50fa-47ad-9bf6-13b5ffadf6bc",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dce79c4-2e74-49cf-aa98-37672c7fc0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6445c38a-ef23-4e71-aa0f-4387a67fb8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d411f35-0bd3-4c8d-82be-a631fc4d7290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae0989f7-ccc8-4aa4-8c52-18f52e7e1f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ec401b-6b07-448b-bb82-93232c9de930",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d9d8d1-e77e-4908-bf4c-3816c9e5509a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837077e4-19eb-43b4-a8ea-f537875195f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b783615-9741-467f-b7ea-dde754514b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7951884-caf9-4275-8c0e-d63c166c0edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41f6130-76cd-44bf-9dee-d54a8563e5f6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49f1633-964f-4880-96db-af3148be5d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197a484d-c6c7-479d-a720-cac385159cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c2f0dc-afff-4bb8-bd36-5ac91ce103a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12131b10-5f98-4ca3-90b7-4a73cf885d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f018ed-e656-4395-9782-6e3045c22148",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3a2c69-39e8-40af-af84-5a3093099ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c677f7d1-1b58-4e5d-b50e-6f98c080dceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9a3700-a027-4f86-96cf-580bbdb1857f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19779c93-79d7-4683-92b9-d2d899320230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f51a038-b16a-4548-968d-b9a8de40adf5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d17f66-9548-40d1-af8b-e527a43824e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a8d37c-491a-46a2-8282-76a00f3f349c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46319c90-a7a4-4ccc-b621-7e14d969a130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7342766-b8b5-4e56-a4f2-770ae6cbcf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb9ebf2-5b30-4745-85bd-69c3997e599c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce8773f-e569-4403-8122-fef2d1138415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45c5b84-8d1a-41fd-a791-cf769bbc5649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2077fad2-92d0-40f2-9d35-c9c86297f9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ef9c970-2ea1-48c1-b876-efd988ab381f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22696fdd-82f2-4cd6-b58b-7a355148c38f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4dce40-7c1b-45de-8879-b52f1b7eb7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25ac91e-502f-4d72-8565-2b392988075a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761c9316-5bbf-45da-ab09-877f3c3db071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5423db16-c42e-43fe-9ee6-10af525bdb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb3bb67-bd39-4388-a79e-8a4f37d86710",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3975e7ab-eb77-4ee0-bf1c-d0d643d9e153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09f9404-5b87-4497-9a6f-064dccd8abf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a9ab8a-1f73-4dda-871e-950b0c9ef135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbfa63b9-8814-42ef-aed1-0fb7909ee5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c6e7ca-d84c-4f9f-b09e-7dd86e486df1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be61a791-0ab9-43c8-8331-271f43cfc082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0eb199-b99d-4c1b-a7af-9f3d790ac919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9631744e-6c75-4e3f-ae59-dddca7a74c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "73092226-8ee7-49e4-b7ce-c575ad45a662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c780dd13-a2a1-4e5f-ae0f-6b29f95a4aa0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe2a0f2-f45f-43d9-a3f8-43a50d884ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b887410-31f0-4363-897c-4d1f24b974fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0fdd1a-335b-4722-972f-eb3a6c4cd61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "482e9f80-5355-475a-96f2-ac842797cae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a382b9e6-8a01-4621-a062-ceafcd13ff3a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db21c45-2903-4ea7-97a2-2555466a4564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7022fb4-a9b4-432f-bc20-150e8ed7da7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4808f9-d420-49a8-98ae-304e1b5e1921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcfe9de2-ff47-476e-b433-b48bd8f065b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f5f2f1-3f95-4c3c-a7ab-962dacd5f3d1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff8de5e-0218-42aa-a12a-6f0059aa0a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cbb370e-0c77-4f29-8f03-5a7387c50bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c35928-e42b-4b63-b064-7842fb390340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4034fdbb-c887-4c7f-9706-d4c957017353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30c0c82-1299-4d98-8dc0-49179bb63470",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1d92da-84e4-4b65-9442-4f5f18e95f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7341327c-a32e-4f90-936e-59144beef49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1406ab53-1ad2-4dd7-b6d2-0de4333fb4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ede6d048-bee9-4af9-813e-6d9ce0eaaadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f30044-a62f-43ad-adac-175688670380",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a56202-b91f-4c14-9b27-5aa0471806fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968b8942-d4fc-42d0-8ed9-141e08e8471a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f201d4-6b33-4bae-936e-ec32703335e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43589f21-3143-4def-b856-a0da48c61334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f80f67-07c7-4c09-bfb4-e48ffa7113f7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de95b09-7c50-4127-be77-1dc9a0099e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974d0c48-8a61-4706-97bb-1978fcdeaa19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e615d073-9596-44bc-9653-f50707241318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee4fe41-cfed-49c6-a481-e1f75603c35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eb629c-e3e6-48a9-8e37-871efaebd465",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248da788-0280-429d-8433-f33974c2eb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cff472-916e-46c0-a0d5-8c270844d0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f183adf3-a699-4e27-844d-e33391c1d907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a573a96-6f46-48b9-97cb-2b9ac9579087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fede3b-6265-42bb-85a1-9c03c7aef7bb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c69e121-99f1-49df-998a-ac68e5681c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a2c78d-fe9c-49e2-8257-4421ac14dc71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087d015d-da29-41ca-bf24-985be06aca1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23bbe524-a08c-4fd8-a936-78db581e70a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc20986d-7481-4876-95f6-50e0cc00a994",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64b6dea-dcc5-47ee-9746-7157f9ced1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176d2a95-c4b0-4994-9435-308a7714721f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55322174-d6fb-4518-8f46-60a9c5008491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "261a7161-02c3-45fe-858c-6764fd33fb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46c6de3-397e-4786-8e3b-787955af4e79",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a5b93e-5e31-4cc2-bbcf-cc390a42c211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c8e322-3e82-41bd-b59f-82e50a169f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900f54e3-840e-4e87-8f0b-7e812f8de838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04400d21-bed9-499d-b517-31f0a2f4fb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27676db-d970-48a1-8918-3b3fb0d0625c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa583a4-38c2-4166-958a-cbeff069c03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab0e10c-8677-4b06-b422-132aad8ba1fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d16c25f-307f-4bb5-88b9-b57bd7288bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "683c3def-1977-4b45-ae94-003e2a620495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2c616b-418e-4d01-ac52-be41f317c3ff",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624829b8-17af-430d-b7e2-12da35619d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6081437-a059-44f1-8b98-d850be056e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00d4b2f-2648-4d6b-b1f1-1af08df0e89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1475d958-f647-4feb-acfe-e1a8cc0fa63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ed3ca6-3d06-4c00-acbf-5213e3393c5c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b078b0-45ed-422e-ab4c-194182425a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d63157-53f0-435a-a2ab-5dd4b461bd95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e546733c-4afa-49c0-9912-79df6fb799c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "edb8cc62-2ac1-4a65-8a09-0baa143b8849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec30f61d-a104-4f80-a6aa-825b8035aa60",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8834bbbb-7bfd-4858-989c-7f39c7367d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e250051-34ea-4a14-a275-10a97bbbaf44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab420fb-1437-4695-b588-68377a4b61b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77440494-03f7-4f9f-ae94-34e0d9d07a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b6ffb3-f4b6-4ff5-8985-ec1359c115d9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812a7556-14e6-435b-8796-6e01daa8dc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb535b59-0f83-4098-8d9c-3c3122e9a104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1387865a-1290-44bd-9f3c-16c89e5f327f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ebd266-d5c0-41d7-a2fd-59a210286c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e901883-46c3-4c76-95bb-3738d6edd58c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd566c63-36d9-4c8c-ab26-b6cad0d3f09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be55896c-c003-4b04-91e1-3d33ab10d2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a936b453-5ff1-4fd6-88d3-ecb47cec08a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e607f0b1-0dae-4824-9299-96f78b7ed23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36e4813-b3ce-477c-a4c1-b027dd807444",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665cfa08-b9ca-45c8-894d-2953efdd8054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17028c91-f960-448a-ba8b-6ff40e9527ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38538cda-7bad-403a-b58d-4e72cd0610c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0d29deca-4645-4587-868d-cf303f80a27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cdc2b2-7ef3-413d-a16e-a51584a86b11",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9294dec8-f0ce-4d0c-abc0-40c4bfa3a2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d8d31f6-0c71-4c9e-b1eb-c2f5c31adced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94029602-5540-4168-b301-035e02290b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b575b66-c3e2-4d5f-ae88-89c540087ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b34914-1a59-4930-b626-ac0311b105bc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139a8b0f-cb8f-4a64-a14d-913e3ffaddd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ea6e64-c4b0-40a4-b6ac-c4a5a2e0ab40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56189c0a-05f1-4557-9919-aa4cb50e1126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fead2c78-13b6-4474-a7e8-27b360011d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8608c318-3e95-4139-b09f-a303de6cbba2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fe5cd3-4a3a-491e-a881-9123c05f2b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3130caa-22f8-4c8a-be4a-6c9275241911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3335d3-f578-4a25-81fc-b90bcfb16ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfd37f7-e16a-47c3-ad25-6a4b1d75ceb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78758eed-67d1-4cff-ae17-1b5ce6b0226f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0372825-cfba-4913-8566-38b6fded7f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc530521-d730-4055-871f-b5747759c9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b51ec7b-b3e6-4c34-aba5-55e7678ba37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f7739bd-8a4f-47d7-83d8-f3b7af7199c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1481848-3007-416f-96b7-656f5c755c6c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0faab7d8-6cc8-425d-ab06-ccb5e9503231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268a81ff-cc88-403b-a924-dcafed9ab42b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8e0206-affe-459b-9497-cd1701636b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d171a7a-9c88-4dd9-8b8d-0eb60e67c0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7a9898-2823-4b45-b0a9-933733f4639f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0698de7c-54c3-4cdd-b431-5c44560ebd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff885c3-e848-4248-ab89-b3dd45492cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3d0ed0-8afe-42ff-9c3f-b0ec9b6becbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "335f2023-db7d-4d1a-921f-b8f1b0632de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd288c6-d7cb-485f-985d-83d7a446a5f2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2c651c-d032-4a1a-b98a-8051a6f4d71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3498d82f-7122-41da-8f27-8ef7310bbdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de77522b-ad2b-4de0-9b29-41b8f8f54f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "619dd9a3-ad5b-4a0a-ac07-055c98c3316a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f450b762-6698-4c97-af59-c2eb2e93d4ef",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95303689-db9d-4543-ab19-bcab814f2e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8291d183-eac9-4470-9fed-798b2fdf7f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6376822-d5ff-43e8-94e2-bd1e1cc424a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "06fa1995-8f87-446c-964d-9736af1c50cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe6a13c-4a44-469f-bdd2-3a0e006c3840",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f56fbff-b5a6-4d14-910d-fd21982932b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c872fd3-db0e-4172-b7c5-61b0323540e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d612eb56-37a5-4425-aae9-f3c9c53672cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "94a0d373-7fdf-45ce-aafc-ed2777ba1920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16ab350-d13f-49b2-80a9-b9c913b487ea",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39477046-617e-4641-9df3-0c9290d8fe9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046c80ee-0cc2-4b7c-8791-9a7c373796bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58db8583-4580-4930-8b0e-fbb278577296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5c7741-b8ad-49eb-98ca-b768bb3dcd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222d4ecf-75e1-466b-a616-8ec267c556de",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a6f886-6f2f-4609-b67f-343f4a6fef42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cd1c11-d771-47b9-9e87-e6874384c258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14241cd-633e-4c26-9922-9f9bfae201b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19535fc7-f39c-41fd-8b85-c5c075eca652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e999db-066e-4643-a86f-ff0b5a0618ad",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae582826-b6ad-47ab-a105-55e4cf190be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b057eeda-0016-41d0-92b9-523267276023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55ee37a-c21c-47fc-904e-b7d486d23093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8049659-4c40-44c8-9139-0d549d8f0c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7a63cd-058f-42d2-99b7-d3997ab4ccd3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8da6dd-861d-4aeb-be53-e33d2f9986bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d54cb64-04c4-4445-b41e-ef8d08918628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fdd4fe-fe92-46b8-beb3-cfe5359de649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20f5ae84-60ec-483f-97e5-1050355d5e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae29176b-f756-460c-ab43-208cb7c0fa39",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b60a6ed-c882-4fff-a019-78ff6c976a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76000394-7b79-4da5-a6e9-311f37973270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5807d5-2251-4192-a75a-88885340be4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f99d46aa-2f8b-4191-917a-37a2a523cd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33d1bb5-0c2d-4648-8c2d-1b5efd98bb3e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3eca0e1-1408-4abf-8fa0-358df1e3cef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc19f8a7-f093-4aac-9589-9cb31d6971cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe0e237-0650-49e8-9f6c-338a9b063fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aea7c08f-b306-4a04-b64c-c0539c2e9deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe0b92b-85b0-4626-9e2e-71fa54249352",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abca1817-4686-464c-9f7a-3e450e75d4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e412e6a9-4d8b-4f99-867a-1644ddba28da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2b25fa-fef0-4f65-a319-8eb19c655bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d67d2d-4af2-4e6c-8854-a217114d17ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84138e0-ec80-41aa-8d92-f3daac7578fe",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a091fdba-1ed1-4454-95b3-fdd2d325050c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89a08de-2e71-469d-9c96-5253b788757a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613c471e-6077-48e4-a3ee-2c477f6e3a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "040bf154-7265-4170-98e9-378be1413ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79935e65-c1b6-4955-843a-141601f93fb3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff546f4-91e7-47c8-b952-cc60acc4e943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f78028-1afa-4556-88ae-7a743cee7503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c00258-ed41-4f0c-af38-4a6820b39b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70cbe518-e917-4a6b-8686-f7d0c51f93cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae9111a-b95c-47c4-908c-85278ce9284a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aac50ef-4e40-41eb-827e-da6f12c60da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ec1048-45d1-4e9c-9548-6c895f3dc33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5585a0ab-2434-47dc-bf00-efc9b273b4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3b2d20-ca49-4438-b802-ee6c22882d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8470f3c3-8cf5-4022-98a2-69801247d5dd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecdccc8-6f4c-493e-8caf-0945434b3b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c9b676-97f9-4515-86c1-97865d6159f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc90ac9-c7c0-4357-b9d0-922d1ae9d690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff200a6c-64bb-494b-9492-2aa4615b5ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f350ee2-0e21-41dc-9d32-ebd17f4a9205",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48903562-aaf9-4066-8cdf-a0a9290f96f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5d1922-dee7-4973-8e85-970e5cdc87b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb96844a-230e-4c8c-8c4f-fcfd047e8499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d18caabc-6de6-4c39-b957-9ba2ceab1937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5238f7ec-7e51-40ca-9d0b-65a6bde68a36",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa11555a-fbbb-4e27-aac6-5ed9713377a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f828192d-b5e2-493b-af73-559591b1389c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ccace4-0843-40fc-b317-5c72dbbc1dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e49e80f6-107e-42f1-9994-39a6baefb5ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447368ef-eecf-4852-be81-c41f66e8c796",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24686c9f-3d95-4ed6-859c-31fa5eac2bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf87a65-d5a0-4cb4-b2a3-b71b43438daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a741f0-cd1e-465e-9e55-9a60682ec47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8d220f-2a89-4365-bd98-9e004cfb6aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8e9193-12e8-45a6-beea-8fa82f902ecf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8598e0-8673-464c-9aa6-8f0e87c8136e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96d5f48-f145-48c1-bc8d-6258d525c477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45b2f6e-5c0b-4d97-afff-4eea6e83d06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e83ce9-f48e-405e-bb8c-cacd639762fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20580951-9614-4c0d-9f8a-bc60227c394f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc24a96-cacd-47ea-9ba7-7ee4449d847b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c517272-c808-4053-806a-2420d444cd8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c732fad-563b-4d98-ad4e-647efdfc5d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4198fcb-e2d6-4861-8480-aaa51991d1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d7ef0f-8081-4135-a11f-a91610f2a58e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e52add-5ce8-4eed-a8ab-a11b5bb651a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9485ddfc-c5a7-4d7a-8db6-43e586b76275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43215c12-3c3b-4480-92d1-f1122ef06c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a65768d-dcd9-479e-8da8-7d60be49bacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aefd8a1-f51d-4cbe-9b23-76a8a6382d88",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2aa573-54bd-4804-8bcc-1dcdc8ec2e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e5892b-f4fe-4648-b532-0b69c36335c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcac144b-1b91-4c45-855a-02fe522cc6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a764e791-9bfb-4b20-aabf-05446d064d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca23577b-d169-4576-9218-687e1af19543",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99954851-fd16-473d-bf06-d077935b1d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5e2ac7-9ff3-4b78-b99c-92d887ce1223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a455ac0-522b-4374-a527-b2f4f1721dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "49118d85-975a-4f7e-a7e6-b142f3f8205f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49801e24-4c6a-4b21-ba56-fc0b7e52193c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adbd736-bf44-409e-bd1d-63ee15de88f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7178fb-a987-4b6f-bc81-266e769e5264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0d7dcd-8568-4516-b46a-3dae1b13b2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df9ae190-dedf-4746-8a5e-1e312ecfb3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca9b1d5-5c6c-4c59-82e0-d78bee8362f5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfffd42-bfa7-416c-a145-81ff143087bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93170724-28d9-4168-a565-cea0fb1468c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0fe358-6c8d-4380-88d0-9880b95a8bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef7c0b0-a413-4eb9-b67f-02dc1a30aa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ee5e16-08fa-499e-b5d2-7cf5e4807a67",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ef8350-94f6-4e48-8a4c-41703763032c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4ff283-9ed5-46ef-84fe-5f709fb66e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b84f9a-108e-42eb-b674-68d6770184b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a39752-c692-43c6-9f98-e0a8bebfd4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5e8d8e-2dba-4952-bee4-574f6e20179f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583631a3-af56-407d-a9d7-0949ef3dde0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9979fd66-c002-4238-b449-52cbd72db554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec650a3-47a5-4080-9ac0-84ca05247a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc172d6-a730-4595-8188-c146ff36452f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4675dd6-8be2-409f-afd9-ad0f6b9c6b58",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d617aa63-c77a-4f78-8078-1ae9bd24568d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1443dd8-2bdb-4f3d-8c68-216703b2beae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ebd3ce-b48c-47d7-a8a6-1fb321bcc586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf34f02-3b7b-41b5-a13c-c6607a071124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1a3c2c-7fb3-4af7-994c-c56a2be601e2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e5e48f-6260-4f60-9e49-8aaff2c87d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a782bde4-27fb-46e9-b0a8-d0bfb0605826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c132dc-0c2a-4e6b-b42a-31fadb1b27c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "349857b6-377b-4540-8c4c-20e661e4a5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77aca0c0-8366-4419-a390-8ee39b1ef04f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbbeefd-52ac-4677-97c6-0f4f81a5c2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30162db-6263-431e-9987-400d099695da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24d2c78-1c29-4d5e-af70-59ec1ea90877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94b3a7fd-c9c8-4a61-ad00-52e71def89ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd894f97-a8dd-41c2-9813-869504fc2deb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b67a89-97a7-4aec-8a3c-e729f57db91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f711d71-155e-4f1a-89b7-e37a228327ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c31ac6c-9748-4f32-afb8-4cc0ddb2fbe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "283ab680-329a-4647-a1f0-8802865c798c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa8db35-404c-4b1f-84dc-a47244b18194",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d10189-5415-42be-9feb-4d033e13b318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8755e1-73a4-410e-b774-1b8bc7fe86b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d962d3-3802-4b4f-a157-4d19183442f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a284d6a5-2755-4254-b0cc-aade4fcb7298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea8d247-00ab-445b-8584-22bc3f464630",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b55545-842e-4367-8818-aa0300285a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f1cb1d-8705-46fb-b233-daa25bd42115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa837a90-2f01-440c-9329-58b5711d7c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d666dbb3-ce86-439c-8bf6-5bd48a7d0528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2e798c-6e4f-4373-b3d7-2382081542b2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f76e13-1589-4e45-bd90-22ca9fd43ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf9b60d-2913-4eef-92cc-3595b6974870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23294f7-f196-4357-83e4-0ef3aab8b5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78273094-89e5-4371-b48c-ee72cbe29733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1779dec4-4274-4df3-b20c-a6d1e3b7dadb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d9128e-a1e9-46dd-9e98-71ab643a5015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ed9959-a408-4250-b5fb-ab00450838dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adae9a3e-392d-4ef8-a76d-54ec7929045b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9372d3f2-37e9-43c9-b6c9-39e4f53fc8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2593e09d-45e8-4ee8-810e-bb408257ded9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef7f502-e954-447a-a505-86be050feb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25228e7-327d-4d9f-b4af-d6aa139634e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ef59c9-8c32-4d29-ab18-26cfdc7b8885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc4e138-6167-4a1b-9df0-0f13e65e574e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f504757d-dfbe-4fc7-b51a-578a81e5e6f8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177984f2-76c8-447d-a0b7-42a63f3329c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5962fff6-1580-4d61-aca6-640d7ae09ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf873a2-3936-4125-9e8e-9b39bf03b500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a1c983-aad8-4a17-a405-723ff6899f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4470f2fa-4d7e-4972-a239-2d55a9716503",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d474df7-3574-4a5a-96fb-dffa3c009490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab9102e-458d-40a4-93f8-7db0d5e74728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86318ae-a151-4467-8541-e33763747eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed975b0f-5f2e-4646-bc39-468aa9dd2ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d317cc11-563f-4dd0-a976-7d33a812074c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91952d6-37d3-42a6-9f8a-dda2fad20a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d533eeb2-d684-4255-af44-541bf9c1cf94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c438cbf0-6fa6-4776-bdd3-37df6f36b12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "678d5400-a1c0-4e23-8982-3090aee0d895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4853ac8e-8cc9-4d26-89a2-f9d90433b3fa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e39fb9d-a9a6-4f75-ac5f-18c00428336e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f8e0c5-1405-4b60-81ae-8523ced87b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6888ee-747c-4c81-9b99-df8547536f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f4fb0f-61e6-4dec-a3a0-33cd0b3dd713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5b7265-c755-47a1-b5a6-293dc52d19ca",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8823f6-707b-4f25-afa5-c83ccb1f1d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef6ffdd-ea04-4d60-b12b-bdb21c2c7e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1643ea7b-eb00-42cb-ab59-a7b84b24556f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "702d9674-415c-4265-9827-2a97bf950b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5a7191-097e-4211-8705-3ec24daf39a8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28f5559-8e6a-412a-a35f-a13057c8853b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5066d8a8-5f6b-4cad-af58-b7f3aa955671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b019937c-f0da-445e-b18c-e9b2b915efab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a52c754-76e7-467e-9456-41820f78dac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f391919d-8bf9-4d26-91f8-f24ee2716336",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b6f295-3e9c-4248-9036-7b7250271e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3adf3d59-eab0-4384-89d8-5be75240a341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e283924-84e4-4e87-8c6f-89796e3fc84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c103032-ae7b-4e3f-a185-2daca9010149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa446b9-fa59-4084-b170-016ec5850c21",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51b8b88-d75d-4029-b3df-67a05bcefb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a337681b-c10d-4397-927c-a11e612ba9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca0a7aa-f321-40be-bcc8-aee4c0c99e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81a0b3ff-0134-49f7-92db-e6a180cf5c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0a3d22-4d1e-4a9d-b205-05679d60991c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e951b3-2f9b-419a-a4df-2b30887fa2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd60459-0c7b-4b6a-be9c-27ec34fe0de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bb84b1-36d6-4a69-ad50-8ee2b8464b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02a12ec6-8477-429e-9cb0-09cfbca40751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b933f3ec-d1b9-4ff0-bc53-2423568fd600",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb4ffc5-e807-41b7-9123-f1c0a878ba46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5321b892-b3a9-4955-84b6-cc4e176c4c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ed13eb-6d7f-47f6-8d4a-812b1dc47ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8827f3-b7ca-4907-a2f1-9c3080bbb909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6214e05-d12a-4cac-9eac-b804268a7b68",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c15ea5-7cdb-4804-b0cf-d8fed3c1bb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1306dbb-e2fa-469c-b5db-d94ff5794c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7710ecc5-6252-4389-a592-2fbd3d10ef4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e6920fb-b3bc-4246-8eb7-32e78b39a609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fd0c9f-e95f-46ee-b402-60ecfb367397",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf0dc3a-0f68-418c-ab9b-b355928f9478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4960786d-4721-4686-b13e-1f6c82b2930f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8846007e-ac58-435f-abfb-be2e0ad2cccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "99198219-97e8-4a19-bc92-a1b7534b65ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1043091-7b17-4096-9f88-f85affdbee6a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ce764a-480f-4b10-a3a1-83bc4d2b9e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ea03ca-978d-4787-b72f-b4c10c060371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d3711a-e89a-4372-b3a6-9a7421062c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb1dad5-d4af-4eb4-9eb0-b2d94e4fc74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad3a100-e1f2-42c8-a2e4-25377ed3d133",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "736fb169-aee6-4be1-8164-b209be5f9795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a364c26-d983-4c2a-8a58-8794f3d55de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e80b8de-5e4a-4920-91b5-3db56f49a81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3408fef0-e5a5-4ac1-a268-a8e7493ab8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dad2942-17e3-49a5-be1f-57f2878ccee2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eed5bed-f701-489f-aa1c-a48c2935efa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b68eef-d752-4a9c-a133-27488efb82a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0444a936-8f88-467e-940a-c225ea76dd2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "02a29378-ab10-4320-81de-b403fd1362cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900766b9-a149-4da0-88b7-21273f6e19b2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb5184b-11b1-401e-9172-0c789d074338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "05c1ed9b-e9f3-4a54-95f9-636f2456ecbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3046aff5-d316-4e10-9574-f6c54c08e807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "81dac2e0-2045-49ca-b6fd-998b1831f969"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "38a6e10c-247b-457f-bd4d-f3c4ff26caf6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3069b7e-21bd-42cf-8e8c-ef2cc738f706",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6a5923-8183-4199-a9ab-c72917e1f429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae1f0a61-4914-4fa6-8d09-9cfed47a7370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa95f6a-3e16-4fb9-b068-b48896c0a01d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "119c37eb-0957-451e-92a9-1647167d1aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b898d75-b1e7-4fa0-a135-a8d185e95ce6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf00b66-ee3e-4c96-85d5-145e5c6982c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c432be8-4c33-47d2-b083-8e9cdb04dffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8a158b-eeb8-4a1e-bb46-215cd21a5a85",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5e7fbe3a-a28b-4b64-ac64-f28f82a26ed3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce22dd6a-f2aa-4498-b9f2-58a51b524654",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2df6d41f-a5c8-4d4f-be0b-8c821f950947"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "259b7218-e120-42fc-85ca-5f7ab97a5abf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "724216be-2e20-4e92-8a27-7d01fbcc1e23"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30289982-bd80-42dc-b583-8367c819dfbf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65cb2e31-0eca-44d3-a4e3-78613f417ec2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5db4f6eb-4ff8-431f-9d7b-7eac25c9a23c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6f6f4b4-5689-49a8-8257-09b3db83f944"
                }
              }
            ]
          },
          {
            "id": "5e69e9bc-5359-4eaf-ac6c-d2a13fa84978",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9b261e61-ac9e-45eb-807e-b8fd66dd95ce",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "044be249-c519-4451-9d5a-37296449fbff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9cb8a97-fc47-492d-babd-507e11a3ac4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f833abb4-5112-4b8c-9f10-883adf118256",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0e46c9cd-1fa8-4b6d-a062-d9fb4806baea"
                    }
                  }
                ]
              },
              {
                "id": "4f4fdc63-6225-4192-8227-cbc5e24d2008",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fed3abef-b1d3-4bb5-a1cf-7e6e2762fc91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc3e3f28-a9d1-4773-8479-315d543f42e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11982502-02a2-463a-93c1-2b00c12e7769",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "651a87fc-f53c-4dff-bdf4-92bbbea72cb8"
                    }
                  }
                ]
              },
              {
                "id": "ee29f23e-6aaa-43ab-b7b4-a48b55251be8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b03eb34f-d5b7-487d-ae20-7af90e1d8750",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3c66d80-0230-4c48-b2da-1047348e4b0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5253fd3-c6eb-4d73-a7d0-8a87ffe6e20e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e40ccd32-a435-49bf-9a67-85c63751abeb"
                    }
                  }
                ]
              },
              {
                "id": "51aa41de-b1ea-4856-9a7a-0c4032bf805d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d47695af-1b1b-429c-b20d-0cfbc483c71b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "444c2b61-b4e6-43b8-a9a0-b18c0374245a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fc008dc-1872-4ace-ab96-f459942b375b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7c6cb464-1cb3-47b8-95de-43fe4e83ebec"
                    }
                  }
                ]
              },
              {
                "id": "0194e634-0dd5-431e-8b9d-50d28820d6dc",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "303367b6-d9b3-41b1-8366-a740a4243aaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "138495b4-a4b8-45db-8bf0-fd646c5e324a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "086f134d-7052-4ee6-9bce-14bde88f538c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4aa6c9fa-e431-4942-b15a-26ae2d2f2fc6"
                    }
                  }
                ]
              },
              {
                "id": "4eaad9b4-78dd-4ba4-ba05-f77c6eb395b0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1075c74b-d73c-4303-af76-39998617700b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c140bbec-13c7-418a-9bfa-c753183244a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba26af98-5539-4a38-a16d-a8b68b3e3794",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eb097a4f-2f63-4997-8b47-dc41efde3f99"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6958ca92-23b2-42d1-b940-ee35a0b54ae8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "536274cc-cfb1-485b-bd87-c17ca081dba0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f00ce984-f037-4ee3-bb0c-e4edf576983c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83ab7b08-8d49-495b-8f9d-49d0c377c0b7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "406d2dcb-f309-4300-88f3-6ab6dcea5889",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0b091aba-f2de-4295-aa26-cd184ee026ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "941a3fc0-713e-4adf-b79c-ac1f26639110",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67154af9-6e81-44eb-afa7-8459c023f6dd"
            }
          }
        ]
      },
      {
        "id": "392f0a80-cc68-40e3-b7a6-80a1907012d6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "598faec6-573c-4f56-bfd3-e3ddcd2a0240",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66ef54a6-9059-4fb3-9a32-568e4f2d0817",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c8cac64-fcd1-40d8-80bf-363537976ec6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e220c79-bd4a-444c-a994-d2885731c957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa1fcb7-a060-4fc8-a9b5-9f0df32628e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3e5c5f-3237-4831-8de1-8f377059d0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "57eb3a96-b87d-4df9-92da-a06eaa55312d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1781dd-2b0b-4c75-8889-284e567fc848",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ec8156-d059-47f8-9a44-81ec8087663d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4bbab6-0673-40f6-b588-0749e154b17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72341ef3-bda7-4e5b-9f37-0b6281a3f5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d24d4c-56e1-4a33-b4fb-784dd5e0f708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bde6c60-bd36-4ca0-9ff4-64d5f8a465e1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2683c124-21e9-42e2-ada3-6dc2abd79538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a3981d-80c6-418f-8ac7-9330bf7ffd9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6ef4cb-a166-4edf-a699-cf17a891be5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32e77989-4a96-48b2-9aa8-febc97123f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38c3b74-e516-43e5-9ac5-65a571a4b0b0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203948f3-60f4-4f10-9e37-bc5a24684375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d60386-511b-457d-aa13-8079b0a4de77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedd908e-d524-49cf-a51b-85fad523b270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "565126b0-e65d-40ca-8c78-cb90eb7680b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2e270a-c452-4caa-9995-ed6c96ed47c9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb157c16-9214-4df7-877d-c88cf815fe37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08581bf-6332-4f9c-ae82-37e607b81488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790db6a9-8947-4267-ba6f-6b4dc7d1514d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a541d0-3897-4095-9803-415fae5fe713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40cadc0d-12c4-4875-b07a-7ec5c9a9fb74",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220d143d-ab84-49d3-bd04-a6a3b0293833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa32e5b1-8f26-4c08-827d-5db7895046ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2292a77f-f320-4269-a126-06a3b4b4b834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d228393-aca3-4e84-9d4e-5e13157dbb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f86c6c5-d9db-463a-9f16-6ee1df7b2ba4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbca600-b365-4974-a0da-400c84834666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21197a3-e4c0-4d86-af7a-6f34dacf52e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffca31a0-e382-471a-addb-0077bd1f3e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f5ad4d-be9b-4b0a-8d26-178ab3ce3a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e540c440-9c34-43d7-b96a-c969986c8733",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60aa7c2-485b-440f-a30e-0ffdff28b74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6938dc1a-8d02-4c7c-a562-5afe60e0ba37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffe8aaf-7d8a-4751-934b-17d422a79a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a98663f6-fcd4-42a1-ac0c-942ef22c244f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c918ce-a5d9-4be3-9a1c-73b422b21121",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef90236f-25b3-42ff-9755-9738a3f43c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7970f922-d2c4-4b78-adff-982ff83e31b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47be1c8c-14ce-4646-ac7d-1f75745b4e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bf2327-5228-433f-953e-11a3e95a3a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959a509e-c5e5-4ac3-8302-f5589878b394",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff03e55e-86e1-443e-92d8-6bf47862ba68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9a21dc-57bb-4505-9126-eafbddcde24a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e1a8df-c316-4027-96b8-452809adeb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2e040c-ecab-484b-86ea-c3f4f30a37cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed80170-e9f3-44bb-a80e-7dd5d08303fa",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1279faa4-bfb1-4de2-a7d8-0eb15bdfaeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c415c0-5830-41df-9f24-ebebe0bc364f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3683ad-78b0-432a-88ec-8f819f7c6d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b9320e76-a225-439d-b378-8e23a2920156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c524257-5573-4588-82f9-f3fd6bcc6d95",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38d5f3c-f4d7-4a12-a755-83213e2d683f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a01a42-3489-48b2-af33-c45e4c8f7fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4f7aec-fe54-4b35-9e03-f798e7a995d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6633db0e-95cc-4145-a457-115241543435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb3ebde-3e6e-427e-9cc8-39f58b66b36c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a4554e-90dd-4b6c-a4eb-3643b0d04d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a805791a-7290-4422-9d1a-ad8d7df93fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e51bb9-b533-4472-a141-b691115405e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd38452-2423-4af2-9733-23e24830d058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a4c4b8-9471-4c67-8276-8111feee4be2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6010885e-0f4d-43c6-9c41-e1ffb395407a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc4d9b3-d591-4c4c-9a59-51bf63346da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb807a65-1b02-414b-ab9d-282a5ddaf5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d26a98f-a6dc-4d99-9c54-984b904e9574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746fe942-f4d2-4812-b789-06009f30609d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33c747b-3784-444f-8b29-c5dae0095fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325d0da3-99ef-47ef-b4e6-36b62b933769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f298451-b0c9-49ca-b9a3-c0799ab486aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "66315ca9-4288-4ac4-acaa-552a349df5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872cf5f4-4922-4282-8325-6863c27c6fff",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb47eec2-df22-481d-8cb7-72131d95fe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92415b1-3ce2-4f06-ad37-1d4523014485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ecd878-4b81-487b-a23d-79240bd6e2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf43f0d9-c67a-4637-bfc4-e937b45fce9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68dec0ae-3d82-40fc-bcc8-d93abf166c35",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3badd5-8368-4f59-abad-716f27727630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee856a63-3aca-4060-8301-bdc7f848ad5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba453cd2-961b-44e8-87a7-72014cea9faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8611be9e-da23-4924-a975-9a8967a4127f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf04f313-5fd4-43d3-8207-9ae684e47565",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3e36b3-dcc3-41c1-a96c-e8cb11699a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81b5093-03cf-4c03-bcd9-c4d574b7afaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf97ef78-2800-49dd-ac00-7a2a50f748f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "471d28fa-2de6-4a9e-86f3-6619da25cd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9183949-444d-4fe0-9809-2ec3bd994b2c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f4ab4e-a343-486b-987f-3ba97636e0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f18281-aaeb-43ee-8120-96d03c5d8943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a420ac99-b6d6-4695-8707-5016fc931659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78eb75d5-54f7-4635-a2b6-b6a93ce51a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babe7e2b-91af-44d0-9577-96d1e4c519ad",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020c56e7-22f9-4900-a084-81703832ccc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc27cd7d-73df-4458-95b1-0477407a1e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94575070-9f40-4a87-b10c-4856e1ff2013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "378a8cad-8dcf-44dc-9987-9c7e92f3f645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53dfd48-d23c-4009-ab54-d8a85c8901b3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f1a465-81c8-4f3f-9d62-dc5b78386e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b561632-e574-40c0-9f6c-31db47a08690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3eb08de-6569-4103-9372-e6dd73fc6821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77546a70-1a10-49de-bfe9-f44478b203e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e970f063-93cd-4c89-ba99-d4f45c9e88e8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74344c31-4479-4db6-84e9-b462e56d8690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b85a4fa9-eb4d-48a2-b0ba-6cfc7b8938a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f603bf-d035-4585-b15c-b868918c20e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f9f0e7-e626-4c69-b2ef-da2269c16f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577602b8-c0d1-42aa-9810-69b17cc9e789",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef16e160-69f7-46a6-9f1c-62eb42d5522f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d168be7-fd5e-4cf1-b5c9-8a651090626f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0f4b2e-2252-484b-aa98-16a093afb9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0476d7e-07e8-4d4b-92ff-a3f4656b770c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646130d0-6fbf-4ebe-81a4-cb7fc399879e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5854ec02-bef7-4ca8-b4c4-baf13dcda7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15e84b1-4753-4959-8c82-bd79a067c70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47465eb-382e-46b5-92e9-db06ec32b4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6312acb9-cf1f-497e-8adf-12cb0b71e390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f20fe9-1268-4503-a4ac-c961a47adeb8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db21ee1-cb2c-41cf-a26b-36bc7d8540d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21c9959-b855-4f2a-88e2-ae3edfdea749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9d1cc2-5270-4e24-87ba-34297bce9a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "220800ee-d33b-4d5c-b991-8fe4c6f903b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30eeb10-ba81-45a6-9aa8-49c4f5c3865b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f1643f-78ad-4ae7-89ae-d76b56721cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2edd23-3378-4644-a7e1-2fc557414021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5d8dc4-b41a-41bc-80b8-67a93de6d5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af8dda38-336f-4ddc-bc9c-82d2130507b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62d7c05-b514-4526-a3c8-e177f785a988",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0befb0-2706-4ac6-be3e-19ccb721c58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9107642-6bfa-44c7-9154-037c2d25197c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbc64e2-2c82-4a76-9f10-63c6ea748a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7677c397-ecce-498c-8c0a-3ab1069195cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40636f8b-8f55-4d5d-9822-4c3be93abcf4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651b3af7-efa5-41f1-bee1-4b6820824018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea15615-c259-4a11-aa4c-515d3e809bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9e938e-36d1-4330-932e-c8010fdb76ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81cb6eeb-1e5b-43e6-bd9a-b3e2b0b94a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9f4d2d-9a5f-450c-8487-0cd22be9456f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27767a70-1637-4305-807e-c053eabf9474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ef0ad5-c9b2-4d2f-8766-da3c86dcf0a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f73f553-7b3a-4a0e-98f6-b8d03b63e323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e069fb24-64d4-451c-a8ce-28483566d1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b0bc2e-09c9-4cb7-9287-ab3c456ffee0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ba7c6e-84a9-4c97-ba6c-38fd5f9a829f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84583a7-b275-434b-8592-055d05b66395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c904a2b1-5748-41ab-9a03-9bb0d5ca6e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ae79ef-211c-4be5-adba-2c9ac26f350e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b2987e-bcf9-4174-b765-748ccb07a00c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ad92a0-0288-4c8e-8f4d-76bc16d8b6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563d5ffb-d137-42fa-b9ef-39ded4d1dbdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1380c6df-3fcb-4052-85dc-51291c944e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6afb0653-f7bc-4e86-b7de-89bba5bceb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e6219e-1535-4e1a-9a3b-9e4f20630148",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddaa4f2-977f-4000-b769-5dbff78ef382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4157aaa4-3980-45fe-8596-ae74ef67f204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864667e0-1cca-4f7e-947a-5fc3334c5175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b18b61ee-01dc-45b9-b837-02045f673cd0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "11cf5d92-45f3-4712-b05a-d8448604dacc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2b41247-7187-4a27-ab6a-f97d6af7b7c6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c6655d-9265-4564-a11a-4c1e947cdd5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d26ba2-fac1-42af-aa39-46d3faefdcf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75551300-d4b3-4297-a6a7-f7aba89070f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5b7a34c-89eb-421f-afa2-0810347ab544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d70a852-d6d1-475f-a9eb-60fbf835d971",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a46116c-60da-454e-82f1-bf8257520acb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d4bb4c40-012c-4c10-8838-08ec3c3f0be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad93206e-d340-48ca-a889-7b761f128480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ad205bc-c9a9-4d1e-925f-6ea2ee951f24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "084de6ee-94c5-4de3-a705-42ee27430199",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1911f290-7a69-4b1a-9516-d7faeedbb916"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c39c5cc1-fa5f-4bef-a95c-8cadc65e3551",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23c6f5c1-d61d-4ae6-884c-23ceaf854601"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cbd2b46-3166-4d4b-baf3-da468b2d82eb",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "562e43aa-4ccb-456e-8c81-7188dbef1f9e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbd4036b-2d59-4cc6-9e34-ac54edbc9e27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c96ba5b-722d-4ee2-82b6-2d1484d34f63"
            }
          }
        ]
      },
      {
        "id": "c1b8fae1-cc1a-4247-9db8-7541460dcc2f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d3c75be7-88e7-49a4-b4aa-839a1085f870",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32f19448-b5d0-40dd-bcdb-aec85d2239c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c2d226e5-4af2-4540-96f1-4250e3400969",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2194388f-a826-4f70-aa55-6568abfdcecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7983f28-3295-4a25-bc82-3c15c62b29fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc30a424-5451-4e06-a65d-6dece7b513d5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b241a6f-34da-4ac0-ba3c-4a12d8b59360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f5e55f-0528-474e-9d8f-270afe54a71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185bebd0-d558-4a2d-8456-2500eeab01e8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867d23b3-23e8-47c4-8372-122f0fed223f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ebf788-8a96-4538-bc3f-a67663e55961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c16aa2e-a79c-4da5-acb7-38503c0e5524",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c246e3-fb6f-40ef-bf6c-3f93ef39e81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c196291-91af-4a67-a593-5a6b5f32603f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a06b917-6704-4d16-aeed-be9a44b5e93b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba5688c-fe19-4a46-a364-53a26ce85a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad02e5c-1681-46fc-b41f-5a38824b6e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0147b0a7-4b46-4947-ad38-f4a565db8576",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17554b27-3f2b-49ef-8411-bc2a9692f4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e482e8-44e9-461f-a517-ce5b37b30b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5fec25b-2bff-48b1-8e80-6186e4aa1e63",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41845b35-abec-4d0c-83fa-a76179f3899b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3fbd3f4-a3be-41f2-a1e7-acee560a65c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a978800-c0d7-4879-978c-1b6a456df166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8a315f-e9ed-4ab8-a2e5-1cafc7772b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2767469a-2589-4023-a3f1-5f3f92e02ff1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4198a17-5daa-4d21-abda-863512d171bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5864a29a-58e7-4876-aa61-5ac539bcd81e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc21326-65a7-4488-ac85-fc55cdc71b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc4f5c6-a70e-4205-be94-9daf04ad14dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9f04ef-b913-4950-8b3d-e1bf0d5b3ff6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaceb04c-7405-4577-8b69-4161d02c7489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea7a824-809e-4aa1-8b6c-38f1c970d9bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34929983-1793-4ed0-9395-843ca73685ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ec0182-4180-4941-9ae7-8c4fccab1478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb816c8-cd27-4785-a662-03e721b27bfb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba66926f-4c78-43d5-bf6d-76dd74a59316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68bd5990-0b47-4ea1-9197-02d3c6082407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43631a1-4b58-459f-aaa2-09a3c0e20fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c82ccb-500b-4aaf-b4ba-c3b21c3d8b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f51fdb-8b83-48df-a63b-95b2cac931ce",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1feee182-d547-4170-8cf0-419a525e628d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "080c14d6-d934-439d-8b31-765696613582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d575ef9e-637f-4548-aed8-1a31be50e47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee37226-62d9-4ee6-9ba2-8a549d36d36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437ddcb6-2274-454d-b8f1-b48bb79b4f06",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59efef6-c38d-4319-b975-45be96719e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfadc096-8c4d-4922-a259-1ce1e2de8308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9262d34c-b4f6-4397-8c68-4fc43e60789c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8014890b-f4d6-42a8-b691-df15d2c73ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149f7fc9-77dc-4b11-91a9-f54c53062efc",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebe2805-4526-41b8-bdf6-3014e8d5acf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "181d1ad6-5fec-4235-a662-f06c554a9b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "353ed5a0-c3e5-4001-88b7-8c33e67969bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee374e6-e263-4486-8cab-349dd85aa6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adb4575-5009-4c12-8269-64f11153f12f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121f904b-e975-4f2f-b61f-a6202905a277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f233ea8-517d-46a7-9fa6-07cefe74449c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a77597a-3f5b-43ff-a0de-9aac60e62900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ffe4d3-4cd1-45a4-9d1c-55a6b88e88b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c48119b-c4d5-4f1b-aa2c-5bf006328e30",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbd1003-12c2-445f-9644-f758d4999723",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba19d522-4ca3-4034-8868-e049f8719045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3236e5-bbe5-4ad9-aafe-8fce57c8e526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea75a15-c6e6-4964-8aa6-5254680df906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9fce719-c2a0-475e-9bfb-a4a966e7b53f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d71012-f9cb-44bd-9380-da4edd126e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e5f38b6-824d-41a4-a237-108ccee59b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac5c5a5-185f-4248-b803-da73ab84d10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b18320-60be-4287-9785-12cf7baf6249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d29977-a477-4f67-8302-e537fd5f0f60",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6419110-a0f9-4b39-8a36-1f3445735898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a76db0-1947-4872-a0ff-6cfe8f478351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21430c75-6c8d-4378-b772-9566f1753faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a9cdd8-cedc-4af7-8df7-c0af7df0051a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ac9b02-d6db-400d-94d2-2e46a0384144",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b24184-5ec6-412e-9dad-877d0b5c81a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4f74af-ad20-4ff7-b8ef-ac1218107ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4affe10f-a430-43cc-a645-572ae15ec385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea39c03-0f0e-41b1-b7b8-19a6f8c90bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7810b00-fd20-408a-90a0-2c6ac23cb629",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448811b1-0e47-4c26-995c-a5407bb707d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f2ffef-4e1c-4d88-b293-57c5d76d8d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60272707-94ad-49b0-9a70-f8c88323b8d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6397ec-30c5-4cfb-833a-b9471afb4136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c9a829-612a-4c67-ba8d-8534ee9f28e3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5719831-ff8b-40f6-bc5b-f939c742d690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30f2256-d93e-4629-b8a2-cd2d0525b548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f442fe-f838-439b-afc0-ac75f4672c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ac2e88-862f-471c-acee-ed7d9ba9b4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74070850-9cde-4cb3-b0c0-5aab1db52570",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f77941e-9cbc-4eb7-b07a-6dac83964b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91935f0-b21b-4e96-992e-bc89c754ee3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2310e794-9efe-40b6-bc2f-6f2a0dcc9ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9f89dc-908c-42fd-bcaf-8b41d32bc0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360a02c2-307e-4d64-b28d-bf7ba6877ffd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2172e8-df2f-44d9-806a-5af19e5fc6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99995ade-74e2-4a52-9972-1613af4c3faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49e7457-2d9f-45bc-9dd5-404340618a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a1cc1b-fdd2-4353-b7e8-8a9e1ead4332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8888c7b-ae64-4d7f-8dc9-d223aaebbadd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a328aa8e-fcb4-49ed-abab-3b4e07eced70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65709f1-315b-455b-9678-9e889be6b33b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9ed4a7-be2b-4e43-84ac-0f1d3c1ee37e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9ee38a-27fd-43fa-b2ad-5a22554eb4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7003e38e-d6b2-4a60-beef-4e35272d95a0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448c943c-d880-4e38-8553-e0628f3d6e25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b966411-3349-40dc-a070-6bfbb9629f87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8562bf7-3db4-4232-b42f-41ecc630eb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e402b77a-980d-42c5-b315-02d1fa4c4c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb96487-4bcd-4c59-8e0c-db56d4b9663d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e58ba7-01cb-40c6-aba8-fdd41163afef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "099b1508-d8dc-441f-ad26-db22c0b605bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50825515-bf75-4d27-b6be-a844feb8d6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa056bba-5522-4689-9095-7dff2e9cf0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c71b60-d6ee-413f-8179-0ed7ac03d7bf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9caf069d-fd68-4428-9ff5-1ede03978b43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b2a13e9-59dc-49bb-935f-0f0078f24da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9087f1d5-fcd6-403f-8b8a-9fe372c9bc7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a1c801-4ed6-4cf8-8ab7-bbc1409a3eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d79b08e-46d9-4c63-9302-c847c3b65c49",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6129289-9fad-4ec2-b9a8-253343185500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f20b052-130e-4267-86a9-57bb0aca8c16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f184381d-448b-42d3-b04a-d59a1711f3e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e71a03a-f000-40e8-ad12-7c80a8763169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f7e8a4-0832-4c47-a527-1638835bcdbc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600797ed-8530-48ea-8cfd-07e69d314d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "653b239e-ecd3-4a28-b8af-832d7152cfb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8beb665-76ac-4a59-ad18-a13f65a3e6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc8e2f88-a0cc-44c9-aac9-57828b70e14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abba009-61e7-47ec-8ffa-d46e4a33adcd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38de2d8-390d-40c9-8b06-7d783408e266",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85096d17-7226-45cc-8ec1-e8fe7f81331e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b32dc13-e297-4ea3-9ad2-2a89e9f03297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f471a3-137e-4ad5-be7d-251cbc613367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9bb5b5-de74-4be5-86d5-be1ba532f509",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b148be-0edf-4f36-85ff-727cdd32f93f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4a77b17-1784-4e67-841f-38974c7ae132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5796fa4f-c17a-410c-a2bb-02762979b232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c335b3-7e1b-4853-8c9b-e5fabdddd451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc96747-6e5c-4107-81d9-c9b15fbf7cf0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00aa7953-6548-4d32-b73e-fed9cc87dafc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3df60bd-522a-48d8-aa24-421490d7a514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e2fa47-3ad2-4a0b-8f57-621cd711e1b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667c9d75-ed0c-4ed3-b2f4-ba7b371ced33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7152ffc-bf52-43d5-bda0-9402c51ba9a1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4e6753-3d28-4263-9ad0-76947b085448",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ec2bd4b-7aab-4caf-95e5-a0b12edd6835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca6936e-889b-440f-8ddf-1e42f6712341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e6b0e5c-1fbd-4555-b481-63fe498c1410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cc5d64-e818-42e6-9b2b-56d2825dbe88",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f767e11b-2f03-4e17-9dda-9dcfbe086267",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91dc97a0-64fc-45b1-a2c9-39020d0d1f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cab9159-058a-461a-b882-e0b86486f8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10eb5331-96f5-4a4c-a356-9dd982a327b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddbd1cb-85ae-478d-8b98-6204efa66375",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c89c9f2-27a8-47f0-aeea-776e45198772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73281d5b-b4b4-40f4-bf54-efb50ff9f8e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31537dd-940a-4a5f-9886-cfbf264fdf48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f65346-9418-45cb-a991-559258e5fe5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5feb59-251f-412a-bc3c-b061defc67c3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063e6ca5-592b-4001-a432-f8062f766780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c6da5e-b50b-48cd-9ffd-be2a47d26c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd844e3b-ba1f-4859-a59f-a98bca46b60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c685ca8a-2579-49b3-83e1-535342407ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e26312c-f89d-4e60-8e5e-73a468f4e67d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9578a85-91a2-49b6-8614-d3726080b5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33183003-a7be-41a7-a05d-794b20366e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8cfc60-d2d7-49aa-98ec-597edd6661a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5776d0-4665-410e-a63f-cd441fbc3e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885e9dc0-a99a-44e8-9823-371e472a0f15",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736266cc-b8a3-458c-8f28-da816b5a0bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531834f7-f967-49f7-b2f8-cf76f51300be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c0c4ee-a8df-4232-b4b2-9099056a472e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c4f3754-4681-44ca-9309-a61172708c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5477e22a-daaf-478b-b0b4-037d8834629d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3e722d-810b-4117-a278-ad3e096dd67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7727e9e-b1f8-49e5-b7b1-6b1c21ebfb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61209b2-5fb8-4447-a0ac-31d12fcb2306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d05eb0c-552b-455d-b238-f78b8476887d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b960515d-c98c-4228-be9d-74b47b368b24",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8258b4-3dd5-4691-9e08-446d3e50197f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637daea0-6a02-4bf8-8215-f7d342b2dc75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c27765b-248e-4276-a12a-46069756f275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1697276-98e1-4be1-8211-fde74d3545cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9fedd4-1bdd-4d73-91d0-b2d6014634cc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49cfae5-3bc2-4c7b-9f06-92f8b4863bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f194d9-0d52-46d3-a0ef-7a21f629e98b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "839ad4c1-6f34-4dcc-9a13-d87970b1bc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f784ac-0d0d-4948-9cc8-4d4bc834aef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e855d75d-adfc-4fed-b95f-bd6810060fe6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35ef34e-5191-4ebe-835f-60d6ecdeca72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6875bb61-b2bf-43f3-9807-dfda250d5587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179bb7d2-2c3e-4cc4-93a6-a7304501ea28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83dea07-696c-402d-87dc-91d80f346ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2e00a9-5038-497e-be89-db5ce9ab4284",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b17dbe3-ca88-4ea1-bc73-632a5ac1bfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744e39f3-a36b-4890-9d46-aa5c63028fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5ed109-616f-4f30-af32-63df66d2af15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9ba7b5-ead3-494e-a847-6c48568566ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7009cdf0-d3de-433a-9f20-467a55313930",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6ed9bb-7345-4868-bc3d-c6a125bc025a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31ce43c-13b7-44e4-bc61-2c464a7679e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d020388-59b9-4106-96f4-3115ae51c0e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b998640f-0125-4fc2-8ab0-514b1a6bfa46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd2ffba-504f-4a16-b18b-fdaad406349f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ae983a-0d09-4f21-8712-d83c86cf149f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06566efa-5c3c-476a-aaea-b3dcc383ad1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4413d22d-f1c5-4e8b-92dd-e2c0dfeb081d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15245b2-55c5-4449-988a-ecf6d194dd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051b0682-be64-4e1d-a314-1f9b9931ed62",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496340f6-05d6-431e-90b8-ccff6f04581c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1602f61-31d7-47ce-ba5b-a84f6b6a7a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1387292-43f7-4e1d-a627-840c6abb75ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1209c4c4-45c6-4fb3-b62b-650fd7444b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491350a2-39bb-4a0b-8c86-ae25eef523c8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aab43fa-1d2d-42f2-9910-ec2389b7ed54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049ea9dd-355a-4a24-9e8d-1cdcb203805a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a602fbab-32ac-4dee-a764-c9eb634c3d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1977d22-90a1-480f-99bf-dfb3f3a8beb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca04fa9-4044-455a-9a89-3a34ca71751f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e962c27-06d4-40ea-b4d3-132812ee147c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b3b22c-f1eb-497b-a24c-90c6e5135196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16344419-42bc-4de9-aad9-22cf0b84ff07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf95ad6-6b7e-4695-9f59-6c31da1da6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10113c95-0a98-4f08-9c6f-f82fd831e66d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485e8268-1a77-41db-9561-7b049e04585d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde6bbe1-e675-4552-b6fd-f5bfd27cee42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2828bc9-a3be-4459-8ee6-b77d5bd3ec2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7c8534-7931-4077-bcbc-44b6641a7a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3852c7ae-4ea2-4a8f-ad3e-0e2af1ccf62c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8263c859-2156-4514-a6f1-827145c05c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574243a6-f01d-43ff-aedd-7cab681e3d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e2f476-a945-449c-9852-5a71595e0564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3dceb19-2d20-464a-b790-66cbf239e86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74fafb4d-1158-4a03-871c-68db5423e93d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c067ebf-d975-4c8e-87fc-b6fa9ee2aeec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a9e104-cef4-4586-9d4c-0f01677dd250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984158d9-0fa5-46d0-8db4-3399836eb229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7040aa5b-4fd6-4263-a9e8-be9df45dca51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb9a6e5-b6d6-44f0-9b8e-828484bbddda",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e69b93-e63d-4840-99c0-8fa850f982dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7ee9fa-769a-425b-bf5e-c6ef5e4d952d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8fa9cd-9bf1-4055-965c-dd11391ee50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c41c0f-1e0c-49eb-880a-99e892829256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f3872f-85a4-492d-8355-cb9a297e88c5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37421169-5c43-4aa6-bef7-18ae2f3d4353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06300c39-4608-4949-98f2-8b327db76f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0660266-e5f7-49b9-89e0-3a4510c7327f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ff0037-d520-4e73-b6b7-d92730f2ca5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252aa10f-7485-4b33-80ca-930cb9ffac2b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c0e879-e6f8-4a7e-9840-8f476b581fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad80611-f12f-4a93-ae4f-102e3bce70fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31ff523-4277-4a87-952c-805fde1542f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea31214-3b6c-4d56-a4ef-8a8ea8b74ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1cd13b-865e-478a-b4ad-864c49f436f4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d0e82b-04f2-41c9-bdf4-ef03319524b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78100a02-735b-4b47-8123-5b628930ce61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686445b4-c6eb-4061-90e1-978f2f2ce4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c9da0a-50cb-4d7f-909a-f675816e7720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba6f5c8-662f-4470-bdf9-f2a3cc6e3179",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391afa87-64f6-47b7-bb24-29e17d33a816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8328e31-2554-4950-aab3-f5d4cfffff9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "704c775e-b47d-46fa-9987-266c86f783a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fbd6bd-e877-4a81-b788-d73178e20c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3132c8fa-c004-45db-a68a-970860536320",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc0c904-c714-4667-8634-af6cd19a1eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d0a610-7ebc-4944-9002-2575bb67cf80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3f7031-c3ab-432e-957e-87636f491dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d7fa8e-b95e-4de7-b48d-0ae23d03dce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d83efbb-c09f-4c10-a5bf-079c7a2091b0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee552469-c42c-4897-8589-fd2ddb5f5876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8484d78f-9f94-46e2-86ff-31a804016a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854179ba-f403-4158-bead-4918d489be99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5904a80f-1753-47ba-a6cf-12237c3af4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc86001-f977-4ccc-905e-aab539fe3512",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5aa6ce-36f5-4d84-9e2a-e1405224aab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a327657-da56-49e3-9f2e-99ac05263343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8a051a-5761-4565-b89a-797a72661dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6097e3da-7b51-449c-8eee-c52ed4e1ab86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3652cddd-72e9-4cfb-aed2-81f0f24333cb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8a86e2-e7ed-495f-9ee4-50965d03bbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19be5c27-3f32-48da-89f9-6afce9e5e735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cc6b12-637c-42f2-ad2f-42332eec0037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0ff413-f7dc-4542-9e25-069f8faffb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7893b8ce-35e9-4e68-85ee-628427ae3a9d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808cccc0-e04c-4bda-ae06-c9b2d01ae471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c0c0c1-f9fb-45a2-b5cc-d274610597c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf3d32d-487a-4492-aa50-455cb031518d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6959d17-2606-4ab6-8be9-4d6e0b47171e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c43caef-4be7-4b8c-83c7-bd463a414ad2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e93d208-9aa5-444e-bead-be39bc4b0446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eebd070-203c-42ad-aa31-aba49f30b48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94af7496-5283-451e-b941-64d56c927cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cb5d7e-21b6-4595-bec6-35789d70ebb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c4db37-5d7d-4dd7-a24d-cafad912856f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee858e7-a8cc-4dbd-8886-a7c03db1ae3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b3660d-27b0-4f2b-bcd3-61a6fe367c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a734ad-49a4-4ef2-b974-d711866d49e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91831cc9-b580-445d-abb5-ce8425a0bc55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a8830f-21c2-4deb-85e1-a8823b24f4ab",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce809d8-7846-4d8e-92c2-1e381f6dec83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4109296-9183-403e-b805-ffa6d9c38838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bbc624-7bc6-42df-9354-dbc8850198c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a54d92-fc21-4b4f-bdd6-a51f735b79d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fac9a7-2539-4b0d-8de1-5e2c35762d54",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e9cd49-dca1-4f6a-8e16-dc5e82af261b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "853a976e-542f-4266-9284-435fd9d9f468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e20b24d-7861-4087-b555-23e150248aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a91741-de2d-447b-927e-163efa41f393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c697cc0-8a87-463e-8faa-821862f8c362",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d7c561-df6d-4d32-b77e-dd7fb91650f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799e0c73-9d27-4b32-b690-5c772017e56a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29ea1d4-a77d-4603-80f1-24a3ed33ab41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7e5184-2097-4720-a744-c34ec03ca5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d098569-47f2-4177-8d22-9d66f837dee3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e72735-2ad9-456b-a72c-7d8044e12dd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d8074f9-d66a-4f82-9a5b-afe482538350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9440ec2-8d21-4fbf-96af-0f0eeb4efd31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ffa970-1b73-4ea9-83ac-e030e4040946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25d0ea2-b131-49d8-8da5-eb17e72f0166",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc07da1-dd31-4b27-a652-e5bcaac70bd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de0a3d7-5d02-443b-a19e-d215d6db5216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe04df8-f0ab-49fe-9c57-2d41a534795e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "753fa0cd-aa4c-4487-b2bd-a5dda4aba472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6f4b89-790e-43b1-947f-6b3d1abbec69",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390b63e9-ef24-4e33-b2a3-94b4152b04bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ccaec3-102a-4c35-8598-89bedeb75a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd831b1-1e15-4a21-b6ae-877f916c4dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3eb128-9220-430c-9a21-e9f23ced5b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f922c0-763b-427d-bb49-03b5249a85ed",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4158ed2-9000-424f-ae09-236c0a392fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "170c9def-1da6-415e-9551-801d0b5fead5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b053814d-9f97-4290-af50-485667f8e904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d11500d-d1be-42e9-af95-92c9f8aaabb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dbaa3b-caf8-42df-ac13-1f7418ef1eb3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d7c9f9-0e65-4382-93be-3420766a7dc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0173fc3a-4a91-4309-89ef-42aa52846758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0ddd1d-9346-4825-b6e7-4ceccd19d23b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12d0f1f-ce4b-4dd9-aba0-e6ac93bb5b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5e0314-5fa2-4c8b-aad9-410dfafcf6ea",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef01ab1-d06c-4391-b6e6-e4b2a1e5eead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc27250-e267-42d4-8d09-f8683afd5ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bb4d90-0ad9-43f7-86ed-63d276f3e878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1d7fd8-7612-4f7f-a74b-47d6575493ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a2c1e4-ad7b-494b-83ca-f6630c9d3918",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076b4525-6f39-417c-b166-6b13a9dfe275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f8cb48-b485-40e2-8339-254e40d0d326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb93ee69-5e77-433d-8530-e0309e8cd848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf06ae9-84e1-429c-b294-87ffa6e876db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36a31e6-7d2d-45d4-babd-e2745994cf3a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6608a950-939c-4467-81f9-e7be2091d15c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9095a97-ea69-4b97-91ba-91883ff7c9b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7480c56a-4527-4dec-b330-0c9e4dfbf663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc19328d-cc1e-4675-b41c-65a61afbb96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3afa8c-d58b-4935-a683-654499f002a6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514bbe48-fc47-4cc2-a3ab-9a4d0437f3c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5952b17-0291-4dbb-9d02-4ece93b00060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff20f27-71b3-4f8a-89f6-900cc1622cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c652bb3-8961-4565-8822-80f38c3e465c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7319c5eb-a361-4f2a-96b3-68ed0b41b642",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f324e3-86a0-44b0-b1c3-40421f350b9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04b7e1cd-3956-4706-a098-b139035ab66f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "284f1327-1a8c-4081-bda4-18f9d04bd0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3104751-8832-4ce5-8047-7a4aef03fca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1187a5af-225d-45c7-b8a9-eb35fb5bd0ff",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f326578-dfaa-4d9c-95d8-19e0c8d82ef0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484c2cd5-88d5-443a-9c74-d5cfd0dd05e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c35e3f-0442-4aca-859b-8b6896f35c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c27d79-3c11-4146-8c33-0fe8676255c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3414aeb5-cfcd-4c2e-b69a-fb6bfa8d569b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89067b05-3aa2-4c02-b210-e4d5c562831f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a64fa71-129b-4e00-a7f8-368cf1b10c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85152326-aae7-4529-a108-b26230412113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c7baf9-d9f7-4fa0-9ecf-7f07b46e8f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db111cc0-b469-47b4-a3c6-07ba3cc04b8a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54c3761-84dd-4f90-949f-9117a140830c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4a408af-bb50-4e91-8f4c-d33814d79c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cb2ed6-ea2c-48e6-a117-45de015a2ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2569681f-3ecd-44b7-935f-81fa098a5e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1d3213-5512-4d98-b52e-a50fcdd6aa28",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4152c29d-7112-4946-b0fa-0d75c82a76b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee4a18b-349d-4431-85bd-43ef81def4a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "320f1eb5-1f4c-42a8-85b0-d7cc3c17ba61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2676eee0-727e-4e73-adc5-2c36b3556058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f3e5f0-d8aa-4b06-bd15-d1da89bbf808",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9376c033-ed6f-4270-9206-a05b92bd1a7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0964143-195d-4de2-900d-2c3405094f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07a75ce-4c94-4641-b6ba-9804edd467db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660ff6cf-be57-48b7-b102-87d39b0b7089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dcb5d6-e1f3-4f35-83fa-9658c2d0f5b0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b919822-a9d5-40da-9c64-aeb222abdda6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb8a207-b0ab-4ff7-b83c-d73c4c1ecc15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7786477e-8d5d-42a9-b8f2-315ebf8c6b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb596269-5163-4f3d-a3c7-6fe9f7467cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef043995-cc50-47ad-a51f-3eebc1e16d89",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe31273-5375-40af-8982-a8edcacef59b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "338743eb-0c83-4c1e-ad1f-510103ef159a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded31963-8791-431b-90b7-cc9f02ec0c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3dc64b4-cd7c-425b-ba92-5df68935e431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57ac759-1f02-4f39-9029-43b2f6f9859c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adb7801-db19-40a7-8d9f-9433f3f2e9b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "231f3126-e019-40c1-987b-e8b0a35c109e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e1bb40-ddbc-490a-bfbc-0d35e5a5b890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7beba905-5780-4f65-9f39-acaede7e7d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5132d031-b453-4da3-9116-0a9f8f488a01",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97cda52-b40d-4f3e-810f-af1424dd8ac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8a97603-c351-49b3-bf41-c36985df43fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75ebc0b-930b-4519-98a2-35c399247da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01564c5b-2377-4497-a7cf-e6a76a042cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf3bc4e-10c9-43f0-903b-a6a7b3b99646",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1237d8e2-2ede-4520-a45c-df13ba839cc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79699511-da6a-4092-906c-0a3cb47eb5e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52528418-a53f-4e28-8bb1-4d6fe1c741fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49199323-902f-482b-988c-7d9ad32d6347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd871bd-3df1-410e-88d7-f4526de76a64",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbed550d-a130-4f9e-94f0-3848cc737bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5ba854b-875c-4214-8a3f-f27251920304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2b8bcf-c62f-4123-ab50-6a40fac82cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2a2a9c-a8f2-4cdc-abcc-6fb34c6cf1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0bba55-1245-4009-a392-1a7bdd532b9e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657d2212-5760-42d5-9609-da3edfb9274a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d202d6-70ab-4f65-bab2-77149f901008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a66fdb-a985-4741-9c5c-768752aae95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420896af-701a-4a78-9d0a-3bbd04615147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9d6d58-734a-4513-bcff-4c5a61ed72ca",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962dc09c-06b6-4cc8-8da3-068cae31a101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5fa266a-a012-4e47-bbb5-e70bac796a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b67a5c3-edc8-40bc-ac45-29e25b1dc080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb030a2-56b4-46cd-a72f-a90547a30f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ed4c9a-b10b-445b-a6f4-79272eef5ddb",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb1ff87-26f6-4a32-8aa0-aa9b26e10295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "325d389e-f4ca-4205-a894-e6e2066cd427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023c4ada-be6b-4302-900a-29ac26a61a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5543fbb6-57f3-4986-81e6-eb6131f684a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac160210-5cdd-4b00-9379-b48ef3c83a43",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894af168-6479-4b46-9423-e3ae2e10c610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "806d116d-0e4c-4f3e-afe6-fb30a70d3d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9207d959-d0d8-4f01-aa39-6b6f339a287e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2180dd-3d20-47cb-984f-c082f47973bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61888b4c-9768-435d-a515-2651586321d3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da94ef58-7610-4bf7-a145-6f7b582d85ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26d9b616-da61-422c-99ec-51ca7a6a60de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26de37e1-1856-4e3a-8b00-9231ee5fba2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64eeca5-955e-4e5e-ac5e-988662db6a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6a9293-b5f9-4152-9e07-4c5ea1c1166c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2458aef-1d40-4fd8-abda-02bf584a76fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c695aa-74ab-46e3-9882-d570a23d7d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8d3fc3-1f55-4e8d-ab46-cad36ea8321c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d223a26-ffa3-4bd2-aa4e-72424380c023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4317f8-61e3-441d-a742-b9a7746a3b6f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960174d8-854e-4bcc-910d-45750ec804a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef83a8fa-0361-4733-ac83-876755095c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737ce377-e8d4-4aae-b6d3-53d6a694dee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530f9736-2dae-4180-b651-551aa1cd609c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7898e320-533d-4289-9d0d-c139252c35ef",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36209c44-c0cc-451c-849f-7c2cb70f96c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3aae4b5-eb99-4071-9b70-b5fbb8d32683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f159fc-9c7e-4fc5-a5fc-db6d6b1d1f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b27b4d-8a59-4d2d-bd94-67570572027c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8175e6-6dbb-4e91-8474-a3586b06d118",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf41e2b-f828-4fa9-bbf4-68514fd8158c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d605f7fd-5b17-4d1f-8afc-211cfd4d459e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af0583f-5eb3-45b0-8eb0-af491a4be282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27a6e6d-4f60-47ea-9f84-d455dcc8af1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8e9c08-7fc9-4ff4-b139-c947f70b2d44",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccffcd6c-94d7-4cb9-9ffb-1afd336772c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30b7d0d3-7bd9-4674-8e04-6efb6ecc7a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d328cf98-5451-4857-9b44-b2227aa6d352",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e77086-e684-4421-8549-efeeb20d9d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2adb81-89bc-4aa5-9f1e-b6003040b3e7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e1ba6c-cc2f-4b3d-8664-12e63c9dc34c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00ae1668-c6d7-4534-96da-504f883a4de7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3fdd3a-f3d9-40fc-bbe2-93ff8dec87e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53cb8946-27a3-417c-86cc-008486b9b0ce"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8eb552c0-c810-4724-8b53-3fb605ff2769",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f02da0b4-4958-4617-a506-a1b73777a404"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ed67962-8782-4d2e-b9df-27e8f8196c34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04d2ad46-8462-4d38-b863-623580c7f9d6"
                    }
                  }
                ]
              },
              {
                "id": "a198b5ac-0c01-488b-ad82-29ac5150cf22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ff368e7-c0b2-4d1b-819f-8e79d2c80c1e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4175fe-dc5e-40b8-8d51-5f08edfe3957",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "13895da1-5bd0-4509-8be3-4c0fb4744dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58dbec07-1f16-4c0d-a076-ffc2257e5654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e53f3fcd-27fa-4798-ad12-0b2426fa6d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c71368-f9ed-4903-822e-6294b8888dec",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bf2348-8836-4d7b-81fa-4066d2a3259f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3da1be2f-51cb-49db-b547-748b707d5ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7eb92c1-2175-409e-8d95-4a6dce39d89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "660ceff2-a076-4076-a0fa-3432c2ab762f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f483de5-3f45-4fa0-871f-09457aa6077d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec340b79-f6d4-4bf5-b50f-b1ade2e9e78a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "735e38c7-f64f-4604-976b-ef9163870ca2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08911ab6-0827-4d9d-bb31-61b97f61587e"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "c7079036-00e9-4fa9-80e3-75dbd7247c17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c58b32c1-5f1c-4e52-8f66-f8051ac7494a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b0d2c08-d0f7-4a66-9251-903b83603ca0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f540ac90-f683-4dfc-b2ed-141b4c8d5c4b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "559f199d-f33f-43a1-bcbb-1c7c1dbec3d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5153c3c-f9be-435a-8f0d-8114e000b31c"
                    }
                  }
                ]
              },
              {
                "id": "0edb2dc3-568b-4512-8b3e-b7c299f40ad1",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd53331e-3355-4dba-aee7-ee2192435d21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e347ac3c-431f-4b4a-9028-ddbc4cc631f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a76ba7e-08b2-4c1b-abbd-c875c80892aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "669648a8-61f1-4b61-bdfd-41c32e4acf69"
                    }
                  }
                ]
              },
              {
                "id": "79d9cb4f-aaec-4663-a757-25aee064ebf2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50983491-bf0d-4f9c-98d5-1590365bcd0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d638716-e271-4fbe-8f5e-309a92d9f759"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9b866d9-d976-4955-987f-4645b682f705",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a261182a-bc22-48ea-b3e0-5546d36b7411"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2dd3075c-33a7-423f-9e10-20989d3a8f76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0eec68f5-d976-40fe-aab7-a8313e8ffc20"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0245042-744e-48b8-86e6-a6cbc9346c8a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e1139a5-42d0-49ce-bfd8-b11569bb8fd5"
            }
          }
        ]
      },
      {
        "id": "3f083632-631d-4785-bb09-1431d0ec7d26",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "68d621f2-2b9e-4810-a717-a0437ad2e067",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3897fb49-0489-4156-8bfb-bd9501d1929f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ccfd14f-fac8-4e42-bd2c-795fe64e9c92",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d098da8-4215-4418-81f8-1af6ebe690fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "64ee0e5c-8c9b-45aa-9bfd-f4fca5d3f1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05d9ef6-7f63-42af-8764-494a95305f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c3cd08b-5aa4-476a-b441-a4e131648a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac980be-2a9d-4723-9fa7-ecaef8c5e671",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3724d719-54e7-477b-aabf-28feb3f86c6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cbbaaa87-d73d-46a0-9775-be2f8d2044d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff70bab2-ab16-4e6d-ab75-4e59fc615a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0096a85-9bfc-4bd8-b76a-8e27536f3efc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2e0855f-425f-4139-a707-257e623d0e3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81ed9a44-cc29-4516-ac76-06e8d896d6bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9b82557-6677-4f77-b349-9e91e4492695",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54ad481a-d70a-4b93-9862-ba4ad9ece67d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17034d62-a03e-4fe6-a3b3-167a68e460fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b2e6774e-5473-4e9e-aaa2-03dc41b0c68b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3aea7275-8285-4d9f-9f71-14b84a2a2e44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d21ff9b9-459e-4026-a074-a69fd91f6069"
            }
          }
        ]
      },
      {
        "id": "0c77d3cc-99de-41ca-8566-b1decb6205c4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d1d8b7ec-43fb-4d2e-ad81-e2a6dab5d6a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2dc2d20d-d93d-46c4-9dca-6cc4e319b420",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "079929e8-c2c3-4f0a-beea-b4b92a731c7f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ee59f7-7ede-44eb-8a81-4aab5f0296a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ef96311e-4d80-407c-8ca3-e89c6ea436b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5463ee2f-27be-44ab-b7e4-2b770dde035f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b92dcde-b2ef-419f-aed1-54a748abcd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08462e3-6e00-443b-a911-2b6ded5f358a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79274153-c8e2-4aa8-a105-e6d7b3770e84",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "44aefc0e-1a06-458a-b235-ecc100b4846a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bf848a-f0d8-4411-af8c-91cf29ac8a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0179bfd4-74bb-4cda-9b32-3bedcba1c54c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a46c81ef-e49a-40ca-8e00-d6afa117a6ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76e34ee3-be5d-4062-8b16-7666f593a8a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cdf0304-3f19-47c7-a2e4-5eac138d68f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5aeabdd2-df30-4536-8059-c0a63a8f72c0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68f81c93-8939-415e-91fb-7ccd350cebc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0cd9cc96-98a4-4549-b14d-61218d7a6ad0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f5d5ee8-e2b0-43f7-852b-585ca5c19545",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a05240cb-d787-4ee5-808f-7b0f9e4ff321"
            }
          }
        ]
      },
      {
        "id": "d1f20ff9-8656-40a5-bffd-c44cce0526d3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7f0156fd-c6ac-4b3e-a2fb-8b6ee643e9d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c357a7e1-247b-4277-8882-6db5d0328aa0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b8f85b4-5782-46a1-81a5-90ca53eac025",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f6e4ae-355f-4086-82ad-9ed96fa6dc81",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "976e2331-4719-450c-a2d6-92c88ba37ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9622ec0-86f3-47ba-abd2-316236a2f555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4868f2b7-3500-47f9-b53f-0ec9e56f4bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee198ce-876d-4aba-bec2-d46ef53e2825",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ee2b03-6e9a-43fe-b3c3-9b084961f3cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b57f92fe-02b6-4f82-b1e9-2bc4f169a4b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1c2537-738d-4098-8597-c9b59d18b4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "912b2b11-f685-4e8f-87a4-9816d99f9ea2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d164ab3-27e4-4d93-9f54-792399155fa8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecf60856-f5cf-4f48-b24c-1abe12dc9a3f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d692a109-927e-4a5f-a53f-77c741dff60e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e8670f6-a83f-4e61-961e-9a357311d464"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32d9a387-dd88-4b89-a654-3ceda6309b42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2156ebd8-6da0-4e3c-9c94-17c8a04289fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae421496-33a9-42ad-a8b9-7168e01ad40c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "114b11ee-fe52-42c4-b6a1-d9f890cde500"
            }
          }
        ]
      },
      {
        "id": "a79802d0-200c-429b-a074-ffa4883a9402",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a95d7ca9-213e-4941-b386-06568855da1d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77798876-0e34-4c78-b861-7e40bdb89125",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e6f15536-86bf-421e-8c14-2cd4211aa614",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f207540-bb34-4340-ad2c-8a000a2f2702",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a8e8550-34ab-4bef-ae75-671884b939c9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 184.12307692307692,
      "responseMin": 8,
      "responseMax": 1442,
      "responseSd": 203.89808975543926,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667436610829,
      "completed": 1667436671644
    },
    "executions": [
      {
        "id": "606b4d19-5694-44f5-acc4-f80aa0eb7862",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9f54e07d-6dcb-42e2-9d0e-56dfc051dfd4",
          "httpRequestId": "bf1be7e0-3427-4895-a089-7ac42cbcc4c4"
        },
        "item": {
          "id": "606b4d19-5694-44f5-acc4-f80aa0eb7862",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "700fbdb3-aeac-4243-9875-3ad98556a8a4",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "c17b2ce5-0441-44a7-ac4d-4ecaea2451e7",
        "cursor": {
          "ref": "1477393e-7307-4ac9-bb19-3eb05eb35d93",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bf5b659f-3079-4c11-bb4e-701538cf6d59"
        },
        "item": {
          "id": "c17b2ce5-0441-44a7-ac4d-4ecaea2451e7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ea2c8756-3cae-406b-9964-298caa1d1c0b",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "4221926a-8a84-4de2-a101-aa6922baa21a",
        "cursor": {
          "ref": "32c87324-24bc-4a3d-afe0-382995acdad2",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4c1bf2da-10ad-4f9d-8979-e70f230b327c"
        },
        "item": {
          "id": "4221926a-8a84-4de2-a101-aa6922baa21a",
          "name": "did_json"
        },
        "response": {
          "id": "69e2d32f-050e-4eb0-beba-6378ae9fe0b3",
          "status": "OK",
          "code": 200,
          "responseTime": 528,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13a7d9a-7721-47a1-a586-1c3206c60934",
        "cursor": {
          "ref": "224b5222-df8c-47d0-ae59-ace54a3a6682",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0197506e-dc0b-4702-876d-2d50f5944317"
        },
        "item": {
          "id": "a13a7d9a-7721-47a1-a586-1c3206c60934",
          "name": "did:invalid"
        },
        "response": {
          "id": "09c1b5c2-2b6b-4962-ac9a-788478e14c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13a7d9a-7721-47a1-a586-1c3206c60934",
        "cursor": {
          "ref": "224b5222-df8c-47d0-ae59-ace54a3a6682",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0197506e-dc0b-4702-876d-2d50f5944317"
        },
        "item": {
          "id": "a13a7d9a-7721-47a1-a586-1c3206c60934",
          "name": "did:invalid"
        },
        "response": {
          "id": "09c1b5c2-2b6b-4962-ac9a-788478e14c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfe0136-6a50-4c08-b376-7021e076db0d",
        "cursor": {
          "ref": "a4c69f49-164e-4d7d-b1a2-1b7dbb5a91d3",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9b1173ee-d975-434f-b717-bed31303aaa9"
        },
        "item": {
          "id": "dcfe0136-6a50-4c08-b376-7021e076db0d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e20a8068-dad4-400b-aa4e-a2609641cc21",
          "status": "Not Found",
          "code": 404,
          "responseTime": 182,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da02a9e3-bae0-48b8-8c49-b8aad8b4244d",
        "cursor": {
          "ref": "bfb302c5-98bd-4ee3-a806-7fb7e584ac0f",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "94126d78-8a36-4a41-8026-eee0632e496c"
        },
        "item": {
          "id": "da02a9e3-bae0-48b8-8c49-b8aad8b4244d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9530794f-d4f5-418e-8eec-ac87efffd4a7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 180,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a74b148-5d70-43b4-a0f8-2052ccf85d45",
        "cursor": {
          "ref": "799e4734-e502-4729-826e-279daf09d8ed",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "247d1f7e-80fa-4032-962d-29e142513180"
        },
        "item": {
          "id": "5a74b148-5d70-43b4-a0f8-2052ccf85d45",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f90b9f34-a2f5-4e59-87e1-13572aa81b89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 151,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91122f6f-9383-4d07-87e2-1ee81399b515",
        "cursor": {
          "ref": "4d0d17ba-9e9f-4c14-8321-606c8a446505",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a0b622f3-7ca0-4f08-a492-6567894582c9"
        },
        "item": {
          "id": "91122f6f-9383-4d07-87e2-1ee81399b515",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2eb0a784-0286-427e-ae8d-9943c39b8bd3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91122f6f-9383-4d07-87e2-1ee81399b515",
        "cursor": {
          "ref": "4d0d17ba-9e9f-4c14-8321-606c8a446505",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a0b622f3-7ca0-4f08-a492-6567894582c9"
        },
        "item": {
          "id": "91122f6f-9383-4d07-87e2-1ee81399b515",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2eb0a784-0286-427e-ae8d-9943c39b8bd3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc2ea9d-fdcc-4c1b-8840-e433b98b8314",
        "cursor": {
          "ref": "37e480cf-1c08-4c43-b330-6561eeccdb5e",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b3ee72b4-b363-46d5-81a1-1a989ce42eb7"
        },
        "item": {
          "id": "4fc2ea9d-fdcc-4c1b-8840-e433b98b8314",
          "name": "identifiers"
        },
        "response": {
          "id": "b84d7b55-1069-4584-97f5-48dc025460f4",
          "status": "OK",
          "code": 200,
          "responseTime": 364,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2818f496-c719-4864-8814-76c40c47573b",
        "cursor": {
          "ref": "c2dc1cbc-4725-4635-baf9-ad8bc44077f8",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c1163c97-33e8-4b89-baff-3f4a90300352"
        },
        "item": {
          "id": "2818f496-c719-4864-8814-76c40c47573b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "29a079a5-6b6d-4dc6-a38c-286220429fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2818f496-c719-4864-8814-76c40c47573b",
        "cursor": {
          "ref": "c2dc1cbc-4725-4635-baf9-ad8bc44077f8",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c1163c97-33e8-4b89-baff-3f4a90300352"
        },
        "item": {
          "id": "2818f496-c719-4864-8814-76c40c47573b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "29a079a5-6b6d-4dc6-a38c-286220429fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e717682c-ac2e-42c1-b87c-5028dbdc091b",
        "cursor": {
          "ref": "5f151c8a-c382-4be4-91af-3d30aca7c038",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e2a5f00b-e57e-4f5f-a2ec-10e08d6b6b93"
        },
        "item": {
          "id": "e717682c-ac2e-42c1-b87c-5028dbdc091b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "777dbc03-3ac1-4fb2-92a9-e38a258457a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411b5670-76a8-4cd4-bfc7-f2e95c7765d0",
        "cursor": {
          "ref": "35c377b9-962a-46a0-908e-be1258f57360",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "493ba633-30da-449b-9e5d-e81cdd370b78"
        },
        "item": {
          "id": "411b5670-76a8-4cd4-bfc7-f2e95c7765d0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5789debe-d969-44c6-96bd-b36e327f02d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4215c215-ab8f-44aa-8883-b9e1a00c4fb1",
        "cursor": {
          "ref": "deef15de-0d71-4f9d-a51e-ef674e5f8a4f",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2b02c39e-a35d-45f5-8a08-99fc9368226c"
        },
        "item": {
          "id": "4215c215-ab8f-44aa-8883-b9e1a00c4fb1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cec35030-5958-4006-adb8-67b356ff6727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9394e7e7-8a10-436a-b1bc-148cac61224b",
        "cursor": {
          "ref": "8281d98d-f5bc-4a3d-8bb5-f44307df1f41",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "73708ce0-1d6d-4ac4-8035-9e320971eda9"
        },
        "item": {
          "id": "9394e7e7-8a10-436a-b1bc-148cac61224b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4bb5a5eb-b32d-4dee-b15d-f11deae30970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f9ce03-b9c4-49d2-a87d-bedbea0693af",
        "cursor": {
          "ref": "4a7000ac-d136-4002-a690-9b940f905a43",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9f6fa5b1-c77e-41d6-b275-9aa4e8af6872"
        },
        "item": {
          "id": "51f9ce03-b9c4-49d2-a87d-bedbea0693af",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "766321d0-d282-4978-90db-28ac987f689b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147f545e-c44f-4df6-93da-60138b4a206a",
        "cursor": {
          "ref": "4525287d-78d6-408a-be91-b9ff1d54a43a",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "77dadbbc-5c23-4eb3-8d90-fc439765812a"
        },
        "item": {
          "id": "147f545e-c44f-4df6-93da-60138b4a206a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e38c0141-93b1-48b1-b9e7-34a0dd3bc830",
          "status": "Created",
          "code": 201,
          "responseTime": 991,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "6e7740dd-302e-4bc1-9e08-2c6a7deabb15",
        "cursor": {
          "ref": "9c1b7c95-df13-46a8-997b-c074a820126f",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b70cb5ef-357c-4130-a0ce-45c48e5ec782"
        },
        "item": {
          "id": "6e7740dd-302e-4bc1-9e08-2c6a7deabb15",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "aed8cf87-d321-449a-a741-81c770e2e112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6eb6f13-4819-4521-9700-39d2d5fa6c69",
        "cursor": {
          "ref": "417b52ef-ffa8-4b3e-8ec0-57f75d15d175",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "706bcabf-f2cd-49ae-b06c-f59db1b73f0e"
        },
        "item": {
          "id": "d6eb6f13-4819-4521-9700-39d2d5fa6c69",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3c36ce68-6d50-4b1e-87ee-c53ed23ef273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a72e61c-50fa-47ad-9bf6-13b5ffadf6bc",
        "cursor": {
          "ref": "cddd6a28-921e-4744-94ec-d3f652ee5f23",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a1c0c96f-f68a-4b01-8560-5bb5516fbc91"
        },
        "item": {
          "id": "1a72e61c-50fa-47ad-9bf6-13b5ffadf6bc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "136dbc84-9eae-4e7a-85d8-d82deb96aba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ec401b-6b07-448b-bb82-93232c9de930",
        "cursor": {
          "ref": "b54ded7a-e92b-4551-a02e-5eb360ee724a",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "bff9e809-ee7d-41f8-8ae9-75af0b695887"
        },
        "item": {
          "id": "a6ec401b-6b07-448b-bb82-93232c9de930",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6e52ef8f-d944-4ac6-8760-8305f92fc1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41f6130-76cd-44bf-9dee-d54a8563e5f6",
        "cursor": {
          "ref": "c041b764-1ff8-413e-b4ec-a13838a07842",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "35f3e0e5-ffc2-4f9d-9df9-00cee510e0d4"
        },
        "item": {
          "id": "c41f6130-76cd-44bf-9dee-d54a8563e5f6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c41fea26-a21f-4eb1-bb7c-fbc3215d33e6",
          "status": "Created",
          "code": 201,
          "responseTime": 410,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "24f018ed-e656-4395-9782-6e3045c22148",
        "cursor": {
          "ref": "677bab0f-494e-4a12-897e-05ffecced384",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ee39a7a3-5f86-43af-8f92-042943feedc5"
        },
        "item": {
          "id": "24f018ed-e656-4395-9782-6e3045c22148",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e5f112b6-e578-4d29-86cf-f6610f2adf06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f51a038-b16a-4548-968d-b9a8de40adf5",
        "cursor": {
          "ref": "f07ff359-3562-40b1-b32f-d188c18c5b68",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bb7d0637-ac21-4e74-92f0-88e144c8a6ab"
        },
        "item": {
          "id": "7f51a038-b16a-4548-968d-b9a8de40adf5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fa8ec1aa-96bb-44e8-8140-0f7766cb0852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb9ebf2-5b30-4745-85bd-69c3997e599c",
        "cursor": {
          "ref": "21b19d54-9ad7-4969-aa06-4e6c53a4d1e8",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "15538b5c-bb7e-4804-8353-417524fab4dc"
        },
        "item": {
          "id": "cfb9ebf2-5b30-4745-85bd-69c3997e599c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0517fe36-ea54-437b-9cf9-22eac157adf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22696fdd-82f2-4cd6-b58b-7a355148c38f",
        "cursor": {
          "ref": "c898633f-2294-44c5-bb14-bbccee7c8d32",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2e22a5e9-7432-4750-98f5-04be20a282c8"
        },
        "item": {
          "id": "22696fdd-82f2-4cd6-b58b-7a355148c38f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c5d4e537-b4bd-4617-96f2-d89a9a0da045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb3bb67-bd39-4388-a79e-8a4f37d86710",
        "cursor": {
          "ref": "654a53ad-4ad2-48a7-ac05-70a44195b14f",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "05d59ba2-69a8-4fcc-9d9d-81851d3cc061"
        },
        "item": {
          "id": "eeb3bb67-bd39-4388-a79e-8a4f37d86710",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "345c4b78-696e-4056-80c5-9ca7d943e0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c6e7ca-d84c-4f9f-b09e-7dd86e486df1",
        "cursor": {
          "ref": "2a0ab717-493a-4e70-9e81-02b023a12a6d",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "629730d7-418c-4fb9-8f9b-8bbcbed7e55f"
        },
        "item": {
          "id": "20c6e7ca-d84c-4f9f-b09e-7dd86e486df1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "971cb84d-c177-4682-a413-fd633aa0872e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c780dd13-a2a1-4e5f-ae0f-6b29f95a4aa0",
        "cursor": {
          "ref": "9c06f51b-d578-43a7-a46f-f2f4a2835cc5",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8adab0fa-96bd-4264-b2c8-9fc0dc91a75b"
        },
        "item": {
          "id": "c780dd13-a2a1-4e5f-ae0f-6b29f95a4aa0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7621ab09-c8ef-4f17-932e-e26034ce2284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a382b9e6-8a01-4621-a062-ceafcd13ff3a",
        "cursor": {
          "ref": "ca2b6bea-cb13-4f37-966b-6552c8795f80",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fc528616-9d08-446b-8c94-576cdd4f08ef"
        },
        "item": {
          "id": "a382b9e6-8a01-4621-a062-ceafcd13ff3a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "306b18d4-2092-4bdb-81e8-e4c20124f079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f5f2f1-3f95-4c3c-a7ab-962dacd5f3d1",
        "cursor": {
          "ref": "a38754f4-3dd8-4513-a3d7-384a5d56538b",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8f0384a7-12b3-44cb-a26b-a8099615ef16"
        },
        "item": {
          "id": "b5f5f2f1-3f95-4c3c-a7ab-962dacd5f3d1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "deec2a19-99de-4e27-97e1-0b4ae2c49684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30c0c82-1299-4d98-8dc0-49179bb63470",
        "cursor": {
          "ref": "90b66c8b-77de-46a8-b476-fdf928d35ea4",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3a2c2a82-09d1-46c8-b788-cded44bc3d7f"
        },
        "item": {
          "id": "f30c0c82-1299-4d98-8dc0-49179bb63470",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d033ae07-9ed8-4dc3-b516-874cec712834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f30044-a62f-43ad-adac-175688670380",
        "cursor": {
          "ref": "a1a6b630-aa24-4515-8381-08c4a8820c24",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f597912d-7cbf-4451-9c80-626b53992d66"
        },
        "item": {
          "id": "a3f30044-a62f-43ad-adac-175688670380",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "34792042-e7f4-4db7-82f9-7e3270c50cf1",
          "status": "Created",
          "code": 201,
          "responseTime": 773,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f9f80f67-07c7-4c09-bfb4-e48ffa7113f7",
        "cursor": {
          "ref": "029bdce7-4ed2-4896-a8ed-f5ef69dd7a44",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "90e26b64-fb0a-4079-a020-30beb286935c"
        },
        "item": {
          "id": "f9f80f67-07c7-4c09-bfb4-e48ffa7113f7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "527c701d-cb13-4b27-935c-c9fc4e051991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20eb629c-e3e6-48a9-8e37-871efaebd465",
        "cursor": {
          "ref": "4e4aad54-95f4-4db5-9ef8-7bfa33f05cf8",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2ae2e9d3-bd38-4653-9d8a-e2acde1cf9ed"
        },
        "item": {
          "id": "20eb629c-e3e6-48a9-8e37-871efaebd465",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "877de28f-4552-419b-bedb-6fbe5c9b16ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fede3b-6265-42bb-85a1-9c03c7aef7bb",
        "cursor": {
          "ref": "cd3df1ea-3ffa-4e89-8095-b60cdec42b6a",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b6ec179b-d1b4-4738-8fab-dc5a85678b89"
        },
        "item": {
          "id": "39fede3b-6265-42bb-85a1-9c03c7aef7bb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9274aaca-3446-4748-ae5c-d826e1a94c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc20986d-7481-4876-95f6-50e0cc00a994",
        "cursor": {
          "ref": "0695211c-4cc4-4256-9040-96ebd29d5f28",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "11979a70-5d6d-4585-8c1a-c36b26283147"
        },
        "item": {
          "id": "fc20986d-7481-4876-95f6-50e0cc00a994",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b5167719-9b72-48c1-8027-8333855fda33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46c6de3-397e-4786-8e3b-787955af4e79",
        "cursor": {
          "ref": "d0a98f22-d7e4-4bf7-bb18-21db42b4a570",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "19135004-37c1-4af3-bcb0-f93297a02c79"
        },
        "item": {
          "id": "b46c6de3-397e-4786-8e3b-787955af4e79",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3e6ed71f-eac3-4f78-abac-4986573b95f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27676db-d970-48a1-8918-3b3fb0d0625c",
        "cursor": {
          "ref": "566a967e-426d-4e25-8c7c-ba523eebe3a5",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0ef0ba09-b078-4d56-ab14-ea0fc624ce07"
        },
        "item": {
          "id": "d27676db-d970-48a1-8918-3b3fb0d0625c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9dfec30a-10b6-45fd-9b4a-362c87eaf8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2c616b-418e-4d01-ac52-be41f317c3ff",
        "cursor": {
          "ref": "26e7de43-3adf-4e91-bc89-64e678eb0576",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4850feab-bfd3-4054-b542-d18f04704f99"
        },
        "item": {
          "id": "9b2c616b-418e-4d01-ac52-be41f317c3ff",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dc39b5fc-8335-4ced-ac80-95d2fff28f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ed3ca6-3d06-4c00-acbf-5213e3393c5c",
        "cursor": {
          "ref": "acda9644-c31f-4881-8172-ebce48b20cbe",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bc4c1f08-9c74-4750-9354-bffbcf4d2b70"
        },
        "item": {
          "id": "b5ed3ca6-3d06-4c00-acbf-5213e3393c5c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e7623584-530a-4b57-95ab-ccb7d00c124f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec30f61d-a104-4f80-a6aa-825b8035aa60",
        "cursor": {
          "ref": "244d780b-0a32-4e8c-a2ee-868b198e6809",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a0145703-c276-4e46-985c-ff25bbae0724"
        },
        "item": {
          "id": "ec30f61d-a104-4f80-a6aa-825b8035aa60",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e59980a1-87b2-4818-b6de-a4583b7dfcfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b6ffb3-f4b6-4ff5-8985-ec1359c115d9",
        "cursor": {
          "ref": "99f115f5-45a7-4b11-9d47-4fa1625d37a8",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3829a485-b91f-429d-9413-82711e4a8ed3"
        },
        "item": {
          "id": "e3b6ffb3-f4b6-4ff5-8985-ec1359c115d9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f84fd9bc-0f8f-44a6-9f44-267e40e5da43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e901883-46c3-4c76-95bb-3738d6edd58c",
        "cursor": {
          "ref": "03e979be-24b6-4108-8e0e-87465dcfa84d",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c80b619e-1c54-4b83-a9cf-6a2f3a36e303"
        },
        "item": {
          "id": "2e901883-46c3-4c76-95bb-3738d6edd58c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "497871b7-85af-4ce9-ad2e-d5f6d6cfc1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36e4813-b3ce-477c-a4c1-b027dd807444",
        "cursor": {
          "ref": "d7aacfe8-ba49-414f-bd83-53838b04c7a8",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "89343e1a-ffac-46b4-a706-14c4f39eca0f"
        },
        "item": {
          "id": "b36e4813-b3ce-477c-a4c1-b027dd807444",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "81035763-becc-4495-b99e-f303f71b7380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cdc2b2-7ef3-413d-a16e-a51584a86b11",
        "cursor": {
          "ref": "8ea89e4c-a888-4e82-8209-4ba28dac9d4c",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "32547e12-50b1-4c17-a72d-d84b2dfa0ceb"
        },
        "item": {
          "id": "c6cdc2b2-7ef3-413d-a16e-a51584a86b11",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fc4f9afc-0e2b-423f-a5c6-ddbb9a3d6e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 511,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f4b34914-1a59-4930-b626-ac0311b105bc",
        "cursor": {
          "ref": "1c6e959d-2896-4e98-a696-cfd5cc25776d",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0d340207-2315-4d95-afae-421b181d038e"
        },
        "item": {
          "id": "f4b34914-1a59-4930-b626-ac0311b105bc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3bca3bdb-579d-46c0-87cf-23a5fb1b8afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8608c318-3e95-4139-b09f-a303de6cbba2",
        "cursor": {
          "ref": "6f5c67f7-6cd7-4696-951d-cdb33c33997f",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f330c29e-99c0-4d2b-8eef-b2210a67e35c"
        },
        "item": {
          "id": "8608c318-3e95-4139-b09f-a303de6cbba2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c688bd34-f61e-40aa-99a7-a22558c63a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78758eed-67d1-4cff-ae17-1b5ce6b0226f",
        "cursor": {
          "ref": "131786e8-8247-4615-9ba0-f3ad1d286aa3",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ab1191f0-36c7-48c1-8ff2-94d93928e75d"
        },
        "item": {
          "id": "78758eed-67d1-4cff-ae17-1b5ce6b0226f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "69205563-71bd-43dd-bb4a-f6fa5b4ac6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1481848-3007-416f-96b7-656f5c755c6c",
        "cursor": {
          "ref": "5468e154-1513-405a-80a3-280fa391afe3",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "46998d47-da24-41c9-9231-b3123826ba45"
        },
        "item": {
          "id": "c1481848-3007-416f-96b7-656f5c755c6c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a72562e9-88b7-4465-ad61-42f2a30ceb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7a9898-2823-4b45-b0a9-933733f4639f",
        "cursor": {
          "ref": "a10f6a8f-e703-45ea-a863-6c3a02f958d5",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d0d0d886-b059-4118-af29-6e669493dc86"
        },
        "item": {
          "id": "ea7a9898-2823-4b45-b0a9-933733f4639f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c54a5f42-203f-4238-8a26-dcb2496e6fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd288c6-d7cb-485f-985d-83d7a446a5f2",
        "cursor": {
          "ref": "66c51193-50d4-4d7f-b624-076caffc4933",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "106768d6-df0e-45e3-ade1-6e404cefe136"
        },
        "item": {
          "id": "3bd288c6-d7cb-485f-985d-83d7a446a5f2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "425da46a-55d2-4dc0-9341-5a4dbb91e82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f450b762-6698-4c97-af59-c2eb2e93d4ef",
        "cursor": {
          "ref": "29d7f2c9-189c-4462-a2c7-b97507cca714",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "aa9495b1-d965-4baf-a31c-de110524421d"
        },
        "item": {
          "id": "f450b762-6698-4c97-af59-c2eb2e93d4ef",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bc4ac2da-2988-4e77-82ce-eec59ea456db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "fbe6a13c-4a44-469f-bdd2-3a0e006c3840",
        "cursor": {
          "ref": "dfec708e-7c3b-4f57-a8b5-a2bb9e50acfa",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "14c1bbbf-63a0-4f5e-b683-ec731d4d777f"
        },
        "item": {
          "id": "fbe6a13c-4a44-469f-bdd2-3a0e006c3840",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "21d537b3-4b0c-4b8d-8363-f49ba32a1df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16ab350-d13f-49b2-80a9-b9c913b487ea",
        "cursor": {
          "ref": "4e163e59-dddc-4482-a73a-c8288740538f",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8eb45faa-642e-46e4-9075-0065a3059305"
        },
        "item": {
          "id": "d16ab350-d13f-49b2-80a9-b9c913b487ea",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8da4b5e2-00de-4bd6-92c7-4af446d04563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222d4ecf-75e1-466b-a616-8ec267c556de",
        "cursor": {
          "ref": "62ffed3a-3321-46a4-97c6-75ce233f4b41",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "18922071-efae-4c71-8d7b-63e469b674fa"
        },
        "item": {
          "id": "222d4ecf-75e1-466b-a616-8ec267c556de",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8fea11fd-abb6-4b33-b55e-bcfae876d672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e999db-066e-4643-a86f-ff0b5a0618ad",
        "cursor": {
          "ref": "0f197af1-dbf5-4fd3-8ed2-e40199cf7f03",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ef0080ea-996b-4fa4-9a02-24c3e9fac8bc"
        },
        "item": {
          "id": "44e999db-066e-4643-a86f-ff0b5a0618ad",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0cffb638-1ae5-46fb-bece-39e14638d56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7a63cd-058f-42d2-99b7-d3997ab4ccd3",
        "cursor": {
          "ref": "31fbb14c-a164-4e3b-9aa6-663285b24024",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "94eaf99f-c558-47b5-8c5a-57b8491b0eea"
        },
        "item": {
          "id": "2e7a63cd-058f-42d2-99b7-d3997ab4ccd3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c128eb2c-cd26-4cc9-b0fb-f7cf13e5f7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae29176b-f756-460c-ab43-208cb7c0fa39",
        "cursor": {
          "ref": "8071d8d2-c0cb-42bf-a828-8b98e4324ed9",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "917bc506-28d4-4535-852a-49e9712c437e"
        },
        "item": {
          "id": "ae29176b-f756-460c-ab43-208cb7c0fa39",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bdab8068-e9e2-47c8-8e53-7224ffd925f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33d1bb5-0c2d-4648-8c2d-1b5efd98bb3e",
        "cursor": {
          "ref": "7a1cced8-58e5-43c5-a34b-d125e13748b3",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "42aa9324-c90d-47c5-a6e0-50d96bfe9a94"
        },
        "item": {
          "id": "f33d1bb5-0c2d-4648-8c2d-1b5efd98bb3e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6f35d880-798d-4293-a20f-0b620779834f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe0b92b-85b0-4626-9e2e-71fa54249352",
        "cursor": {
          "ref": "224dca6b-d220-4fd8-9ec3-efde4652d14f",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "96b0667d-e3a0-45e3-b006-6885fc555719"
        },
        "item": {
          "id": "ebe0b92b-85b0-4626-9e2e-71fa54249352",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "93efde88-4dcb-43dc-81ab-37971114ed04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84138e0-ec80-41aa-8d92-f3daac7578fe",
        "cursor": {
          "ref": "1551a63a-0bf8-460d-a80b-b7022030edbe",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0c3543f4-4c24-4379-bf72-17406d8e64ac"
        },
        "item": {
          "id": "f84138e0-ec80-41aa-8d92-f3daac7578fe",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "489adc0a-ef43-4dd8-a152-4d1544420297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79935e65-c1b6-4955-843a-141601f93fb3",
        "cursor": {
          "ref": "2ef76b97-637c-4448-a55f-cdb3abace46c",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "dd2c5edf-eb7a-4b82-921c-aceb152642e4"
        },
        "item": {
          "id": "79935e65-c1b6-4955-843a-141601f93fb3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4f1ae604-608c-4fdc-bb6a-22cc4bdc5beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae9111a-b95c-47c4-908c-85278ce9284a",
        "cursor": {
          "ref": "68c77deb-a187-462b-86c9-776bd5a62e7f",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ce980b0d-1605-40c1-b21a-3fd5e8722a95"
        },
        "item": {
          "id": "5ae9111a-b95c-47c4-908c-85278ce9284a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "99794063-8001-41e3-b973-c0c3169909d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8470f3c3-8cf5-4022-98a2-69801247d5dd",
        "cursor": {
          "ref": "7943e46e-cbef-474a-b0c8-998d4245d3df",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a5faa6cf-ba7c-466b-8524-776d0fa413ba"
        },
        "item": {
          "id": "8470f3c3-8cf5-4022-98a2-69801247d5dd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a08c9214-624f-4f45-899e-ee3175da7008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f350ee2-0e21-41dc-9d32-ebd17f4a9205",
        "cursor": {
          "ref": "4c56f21d-3fdf-4129-a973-c1b67da25c63",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "63f46552-2176-4977-b120-deac1c042ec7"
        },
        "item": {
          "id": "7f350ee2-0e21-41dc-9d32-ebd17f4a9205",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5867d317-da43-4745-8a6a-a2f36f1703af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5238f7ec-7e51-40ca-9d0b-65a6bde68a36",
        "cursor": {
          "ref": "8d91f705-50a2-4657-9038-c09d1c0251b6",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c223ca73-75bf-4e00-9e21-9b819542e949"
        },
        "item": {
          "id": "5238f7ec-7e51-40ca-9d0b-65a6bde68a36",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ac141092-c524-4fbf-98f3-4285c45278fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447368ef-eecf-4852-be81-c41f66e8c796",
        "cursor": {
          "ref": "15b80ec1-6dc8-4048-97e7-952663a5ca5d",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bdc9d7fe-861e-4b10-965f-b3d056f30682"
        },
        "item": {
          "id": "447368ef-eecf-4852-be81-c41f66e8c796",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "82507d05-bd88-4100-815a-eca5a6289242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8e9193-12e8-45a6-beea-8fa82f902ecf",
        "cursor": {
          "ref": "7ec9ca4c-7a61-4b2f-9aaf-4a0ae7446969",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1b7b9c69-5eae-47d1-a5a2-c38bd80574e5"
        },
        "item": {
          "id": "2c8e9193-12e8-45a6-beea-8fa82f902ecf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1264eaf5-3075-40d9-b976-c4b7ecbbe628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20580951-9614-4c0d-9f8a-bc60227c394f",
        "cursor": {
          "ref": "bbbc7679-a1c4-449e-9e6c-711b789990db",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "955ef777-8663-42b7-9f2c-08b458dac935"
        },
        "item": {
          "id": "20580951-9614-4c0d-9f8a-bc60227c394f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0d369dde-9e07-4ce5-8203-b46a4f1cd649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d7ef0f-8081-4135-a11f-a91610f2a58e",
        "cursor": {
          "ref": "de88b87f-0791-45c1-91c3-40fbea8c5726",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2faa011c-ed3a-4d91-bbe7-26a15e0e70e3"
        },
        "item": {
          "id": "d1d7ef0f-8081-4135-a11f-a91610f2a58e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c5e98f88-2801-43d7-9759-fa316d4e63c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aefd8a1-f51d-4cbe-9b23-76a8a6382d88",
        "cursor": {
          "ref": "49c4bec3-b705-4ac0-b719-ceefa9e8ec36",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0ea1f331-94ec-4208-aac8-b19260022ca6"
        },
        "item": {
          "id": "5aefd8a1-f51d-4cbe-9b23-76a8a6382d88",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "81b4cfe0-14ed-4c54-acd9-6d4ee41dc4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca23577b-d169-4576-9218-687e1af19543",
        "cursor": {
          "ref": "43dfa020-484a-40fe-8593-2d3c723f2b61",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e37df6b7-1660-4c2d-a21e-368c6da7642a"
        },
        "item": {
          "id": "ca23577b-d169-4576-9218-687e1af19543",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a8578622-d99f-45ba-a0ba-2b75989f4354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49801e24-4c6a-4b21-ba56-fc0b7e52193c",
        "cursor": {
          "ref": "663f6ec2-595e-48a4-9d02-8e8b27cfc157",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1e0fd4c0-fb6a-4eba-945e-841aaedded69"
        },
        "item": {
          "id": "49801e24-4c6a-4b21-ba56-fc0b7e52193c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ce093c17-cae5-4d9e-8502-4d1af3af1d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca9b1d5-5c6c-4c59-82e0-d78bee8362f5",
        "cursor": {
          "ref": "f5f37372-6982-4ddd-bd29-b9648ea157ec",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "872437bd-38db-4e98-9e72-6bf776c348f3"
        },
        "item": {
          "id": "dca9b1d5-5c6c-4c59-82e0-d78bee8362f5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "184222d2-1394-4ac0-9324-c4ff2fceb232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ee5e16-08fa-499e-b5d2-7cf5e4807a67",
        "cursor": {
          "ref": "31704272-09d7-423d-bd12-2e2f5a07cdbf",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "29c423f1-0855-4956-859c-57a26822ff37"
        },
        "item": {
          "id": "60ee5e16-08fa-499e-b5d2-7cf5e4807a67",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2ec44466-1cf8-49d6-96fe-6d469788cdcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5e8d8e-2dba-4952-bee4-574f6e20179f",
        "cursor": {
          "ref": "a3937af8-27ce-4bdf-bc69-01e0403bfe02",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6be8a6a1-cb12-49b2-9a9a-4779b7440d5c"
        },
        "item": {
          "id": "bb5e8d8e-2dba-4952-bee4-574f6e20179f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "44092f67-d4be-4782-9760-f5ff753999fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4675dd6-8be2-409f-afd9-ad0f6b9c6b58",
        "cursor": {
          "ref": "9503c31d-fc4e-4573-b883-e43f1aa960f7",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "96226cfc-a9fd-4d50-a8dd-d294887a49f5"
        },
        "item": {
          "id": "a4675dd6-8be2-409f-afd9-ad0f6b9c6b58",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "770b4732-7af9-48b6-b82f-bbf6721a83ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1a3c2c-7fb3-4af7-994c-c56a2be601e2",
        "cursor": {
          "ref": "4134f011-b504-4c36-a8e7-a52e6bf9fe5d",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "efab1bc4-54a9-4b4f-af93-915dafa21f2c"
        },
        "item": {
          "id": "2f1a3c2c-7fb3-4af7-994c-c56a2be601e2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ab08c9ab-f848-49f4-8a4d-2abcbffc9224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77aca0c0-8366-4419-a390-8ee39b1ef04f",
        "cursor": {
          "ref": "e883b7c8-e211-465b-a400-ba80196cd743",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ba709366-4a98-4d20-85ec-0b4c8a3b7955"
        },
        "item": {
          "id": "77aca0c0-8366-4419-a390-8ee39b1ef04f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3c66563d-6808-404b-bea9-a19ff4a5ba0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd894f97-a8dd-41c2-9813-869504fc2deb",
        "cursor": {
          "ref": "0fb4f7ba-5a73-49a0-9b09-a1247b28820e",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b5139719-8a28-47fd-a26e-bf279bcf8516"
        },
        "item": {
          "id": "bd894f97-a8dd-41c2-9813-869504fc2deb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "351f91ad-f7e4-4196-8d3c-18d8d1a979fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa8db35-404c-4b1f-84dc-a47244b18194",
        "cursor": {
          "ref": "ef303154-5258-4758-b979-392e626005a2",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f1cd17d5-5cc2-40fe-b426-daa0c10b2fa4"
        },
        "item": {
          "id": "3fa8db35-404c-4b1f-84dc-a47244b18194",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9be99cf3-27be-44d8-b166-d8d7b520e2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea8d247-00ab-445b-8584-22bc3f464630",
        "cursor": {
          "ref": "82c3fd15-3dba-47a3-b541-df7b29efd549",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d336a2a4-fbec-4d3c-9c3a-bb7d0791ea68"
        },
        "item": {
          "id": "bea8d247-00ab-445b-8584-22bc3f464630",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ae9d5da0-a768-4581-a455-f0587807400c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2e798c-6e4f-4373-b3d7-2382081542b2",
        "cursor": {
          "ref": "1d491cf9-4c96-4d9d-8d21-777356fb39bb",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "28e8785e-c0b9-41ad-83af-f4f959fd32fc"
        },
        "item": {
          "id": "fa2e798c-6e4f-4373-b3d7-2382081542b2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "09196021-0c30-4f1b-bc4e-2cfbba4c5930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1779dec4-4274-4df3-b20c-a6d1e3b7dadb",
        "cursor": {
          "ref": "48a111ea-eb3c-431d-ae48-7b023d4e9ebc",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "afd6da86-a094-460a-ba52-2104eec37a12"
        },
        "item": {
          "id": "1779dec4-4274-4df3-b20c-a6d1e3b7dadb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9cba6302-5275-480f-ace3-92643bda8dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2593e09d-45e8-4ee8-810e-bb408257ded9",
        "cursor": {
          "ref": "ce044ab4-86b3-4c2a-b139-6f10e956f5dd",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b03fbfc5-7761-4b3c-a95f-2ec553286e4e"
        },
        "item": {
          "id": "2593e09d-45e8-4ee8-810e-bb408257ded9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ba9b1e3f-ad97-4c68-bf5d-3587e1db590c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f504757d-dfbe-4fc7-b51a-578a81e5e6f8",
        "cursor": {
          "ref": "415c5c1a-beed-45d4-b663-b7667e00dedf",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0fe4a462-12bd-4953-9f95-d278f25419ee"
        },
        "item": {
          "id": "f504757d-dfbe-4fc7-b51a-578a81e5e6f8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e3f4916a-86bb-4ebd-bbb4-d1a85ed1ba7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4470f2fa-4d7e-4972-a239-2d55a9716503",
        "cursor": {
          "ref": "58ac0588-ac66-4f88-abab-33146a8fbd67",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "95d087dd-2079-4111-a3d8-1094bca43c7a"
        },
        "item": {
          "id": "4470f2fa-4d7e-4972-a239-2d55a9716503",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ccae1dc7-f665-4381-acd1-6a2d738bf208",
          "status": "Created",
          "code": 201,
          "responseTime": 616,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "d317cc11-563f-4dd0-a976-7d33a812074c",
        "cursor": {
          "ref": "2b78cf37-7499-4797-9285-019f697f9063",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0c055d74-ca42-4371-a5e0-0c446e02f728"
        },
        "item": {
          "id": "d317cc11-563f-4dd0-a976-7d33a812074c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "29fae122-3875-4cbf-a7b9-3b5bceadaa75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4853ac8e-8cc9-4d26-89a2-f9d90433b3fa",
        "cursor": {
          "ref": "a294822d-9fa0-4517-a888-897cddf25776",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9fb63c8d-ccfc-44fe-bbaa-18a6fc763dcd"
        },
        "item": {
          "id": "4853ac8e-8cc9-4d26-89a2-f9d90433b3fa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "528f6e2a-785d-40c7-afff-ab00694a0653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5b7265-c755-47a1-b5a6-293dc52d19ca",
        "cursor": {
          "ref": "f9d9d793-48f4-4a2a-ac7f-888857645aad",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9b7bb535-1b8b-478d-b362-421ee29f6dff"
        },
        "item": {
          "id": "eb5b7265-c755-47a1-b5a6-293dc52d19ca",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b6f9735e-b732-4b71-aeda-f952311ba60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5a7191-097e-4211-8705-3ec24daf39a8",
        "cursor": {
          "ref": "7ec7c991-13c5-4692-a2a6-68f543a48efc",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ea0fedbd-4441-4111-963c-631f9bd9929e"
        },
        "item": {
          "id": "ca5a7191-097e-4211-8705-3ec24daf39a8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fba8b18f-fd57-4c49-822a-d7fd988f9956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f391919d-8bf9-4d26-91f8-f24ee2716336",
        "cursor": {
          "ref": "78b22690-ec41-4b52-9f8b-9e291ee397cb",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2f356636-e8f8-46ea-8d0d-2de8dc569a38"
        },
        "item": {
          "id": "f391919d-8bf9-4d26-91f8-f24ee2716336",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7b06a76e-d60b-4588-9464-1363e2ceb8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa446b9-fa59-4084-b170-016ec5850c21",
        "cursor": {
          "ref": "5dbb5f7b-7ac0-4372-bc97-661adcab8d9a",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a6c74125-15cc-44de-8e05-ef103495708a"
        },
        "item": {
          "id": "5aa446b9-fa59-4084-b170-016ec5850c21",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "dab08e35-9a30-4bd6-973a-9def46e018b9",
          "status": "Created",
          "code": 201,
          "responseTime": 697,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "fb0a3d22-4d1e-4a9d-b205-05679d60991c",
        "cursor": {
          "ref": "89ca9705-5855-4017-b8c5-c3612609efb0",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "65020b80-428a-492f-87b7-0d33fc3f9cbb"
        },
        "item": {
          "id": "fb0a3d22-4d1e-4a9d-b205-05679d60991c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c0c537c1-2637-482f-83a4-adfdd19fa29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b933f3ec-d1b9-4ff0-bc53-2423568fd600",
        "cursor": {
          "ref": "a07a97f9-67d5-4b7d-8d06-d29d67eb9f83",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "324f9a62-a01b-414a-a169-ade24aba9a54"
        },
        "item": {
          "id": "b933f3ec-d1b9-4ff0-bc53-2423568fd600",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "88e439d2-70dc-4bdc-b170-3c51cad1e7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6214e05-d12a-4cac-9eac-b804268a7b68",
        "cursor": {
          "ref": "38ac0a8e-ae92-4d56-9df7-36b984b6a2c0",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4d24d241-0a49-42c4-af55-37f921758c5c"
        },
        "item": {
          "id": "f6214e05-d12a-4cac-9eac-b804268a7b68",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "91d83c93-7c19-4d88-8e83-f74c708c6f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fd0c9f-e95f-46ee-b402-60ecfb367397",
        "cursor": {
          "ref": "39458153-318d-4943-9976-fb16bbb492c1",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a3b422a8-2f41-4839-ad62-a43e0eed3547"
        },
        "item": {
          "id": "f4fd0c9f-e95f-46ee-b402-60ecfb367397",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "88eae05a-6e20-4417-8e4a-945b4048df86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1043091-7b17-4096-9f88-f85affdbee6a",
        "cursor": {
          "ref": "bfaf2433-0990-460b-be7a-6a2315b1c93c",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "042d6405-22e5-4375-bceb-e63fb8cd4191"
        },
        "item": {
          "id": "c1043091-7b17-4096-9f88-f85affdbee6a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "10bf1ff2-fccb-43e0-866e-cd7de9798421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad3a100-e1f2-42c8-a2e4-25377ed3d133",
        "cursor": {
          "ref": "3def0cdd-e618-4172-8012-f9bcd7c91096",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9a4c3a5d-fefd-4d52-ba51-e5a04f49dac5"
        },
        "item": {
          "id": "2ad3a100-e1f2-42c8-a2e4-25377ed3d133",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "be2f60e9-78fc-4043-93df-2507f01f3fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dad2942-17e3-49a5-be1f-57f2878ccee2",
        "cursor": {
          "ref": "e0425e46-2176-40fb-b014-861ea2db346c",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "632300d9-2828-4b23-94da-475859f600d5"
        },
        "item": {
          "id": "0dad2942-17e3-49a5-be1f-57f2878ccee2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "00eae6de-508d-455e-ab33-b140c666a824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900766b9-a149-4da0-88b7-21273f6e19b2",
        "cursor": {
          "ref": "3b0fe38f-efa8-4088-a6ac-09c894dc0a40",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c50c210a-baf9-42c2-962e-750ee5356926"
        },
        "item": {
          "id": "900766b9-a149-4da0-88b7-21273f6e19b2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b6ec4046-eeba-426f-9b03-cce730f8a0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3069b7e-21bd-42cf-8e8c-ef2cc738f706",
        "cursor": {
          "ref": "648785e6-cd10-4a27-8d3f-b0b10e5f4fa7",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "884b37dd-3106-42d4-b494-3e3c92d16dc3"
        },
        "item": {
          "id": "f3069b7e-21bd-42cf-8e8c-ef2cc738f706",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "268b3d90-fbf7-4bf3-b1ad-5d4144adb782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "5b898d75-b1e7-4fa0-a135-a8d185e95ce6",
        "cursor": {
          "ref": "38cb52fe-bbda-4392-9ca8-10194fade817",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ac66e28b-2439-4ca8-b95f-aecf3fe8ecc8"
        },
        "item": {
          "id": "5b898d75-b1e7-4fa0-a135-a8d185e95ce6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "58926274-6118-450c-a22a-3baed3c2d45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "9b261e61-ac9e-45eb-807e-b8fd66dd95ce",
        "cursor": {
          "ref": "1e6b1e19-e405-4bf7-9552-065c0fee9cec",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fd771f9d-5a3f-439d-a53f-7e26c151f3f3"
        },
        "item": {
          "id": "9b261e61-ac9e-45eb-807e-b8fd66dd95ce",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b0dd7409-238d-4482-981d-2cb87f01f788",
          "status": "Created",
          "code": 201,
          "responseTime": 485,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4fdc63-6225-4192-8227-cbc5e24d2008",
        "cursor": {
          "ref": "08a35197-21f3-41b8-8786-8ea90b88feca",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "144db366-6b0a-4b4c-b2a4-abd967387f1d"
        },
        "item": {
          "id": "4f4fdc63-6225-4192-8227-cbc5e24d2008",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7734954c-265e-4fab-af73-856227ef0a77",
          "status": "Created",
          "code": 201,
          "responseTime": 552,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee29f23e-6aaa-43ab-b7b4-a48b55251be8",
        "cursor": {
          "ref": "878354da-ecae-4c0c-bdb2-98e8087b4ada",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "99fee07d-cc9b-4220-91a5-555031dc99a1"
        },
        "item": {
          "id": "ee29f23e-6aaa-43ab-b7b4-a48b55251be8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d5b486c8-a3c9-4f9a-8c61-47a84b28b542",
          "status": "Created",
          "code": 201,
          "responseTime": 600,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "51aa41de-b1ea-4856-9a7a-0c4032bf805d",
        "cursor": {
          "ref": "848fabe7-5ffb-494b-8d89-3bf73b372412",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "23a8bec8-a4ea-4fe5-990a-dc186f37e24d"
        },
        "item": {
          "id": "51aa41de-b1ea-4856-9a7a-0c4032bf805d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "21d6e7de-c4f6-4463-9911-c59e2b34033e",
          "status": "Created",
          "code": 201,
          "responseTime": 704,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0194e634-0dd5-431e-8b9d-50d28820d6dc",
        "cursor": {
          "ref": "e08bfdca-8a3e-4070-ae2f-8e62c0e0f81d",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "301949f1-6b6e-466e-971d-d43605fcc624"
        },
        "item": {
          "id": "0194e634-0dd5-431e-8b9d-50d28820d6dc",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ef74437b-0eb9-4026-b9ac-e4b43f71a02d",
          "status": "Created",
          "code": 201,
          "responseTime": 646,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaad9b4-78dd-4ba4-ba05-f77c6eb395b0",
        "cursor": {
          "ref": "b8d8ed91-1f19-4062-a382-6dd8b3c31c72",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "46cb549c-b469-4ca3-ac65-048a64cae2fe"
        },
        "item": {
          "id": "4eaad9b4-78dd-4ba4-ba05-f77c6eb395b0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f1c59319-93d6-4041-b3b5-160b5e58ec26",
          "status": "Created",
          "code": 201,
          "responseTime": 621,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8cac64-fcd1-40d8-80bf-363537976ec6",
        "cursor": {
          "ref": "c936ebbd-d5e7-4bce-85de-73cea512ea9f",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b22b06a6-1927-4c5b-b46e-086c71e59dbb"
        },
        "item": {
          "id": "9c8cac64-fcd1-40d8-80bf-363537976ec6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1c91912e-2393-4cfc-b741-50da43dc17d0",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9c8cac64-fcd1-40d8-80bf-363537976ec6",
        "cursor": {
          "ref": "c936ebbd-d5e7-4bce-85de-73cea512ea9f",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b22b06a6-1927-4c5b-b46e-086c71e59dbb"
        },
        "item": {
          "id": "9c8cac64-fcd1-40d8-80bf-363537976ec6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1c91912e-2393-4cfc-b741-50da43dc17d0",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8d1781dd-2b0b-4c75-8889-284e567fc848",
        "cursor": {
          "ref": "10763ffe-89af-4de6-9c5e-7268ce9b1edb",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "49e2bcc5-a853-44c2-9d23-6bedf3240708"
        },
        "item": {
          "id": "8d1781dd-2b0b-4c75-8889-284e567fc848",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7c440eec-df16-46ec-b2fb-6cdf1ef52a88",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9bde6c60-bd36-4ca0-9ff4-64d5f8a465e1",
        "cursor": {
          "ref": "368c4ecb-f629-41aa-adef-56a1570a49e4",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b5ee1857-a377-433c-b9e4-bc5b7f729828"
        },
        "item": {
          "id": "9bde6c60-bd36-4ca0-9ff4-64d5f8a465e1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ddd11b9c-ea2e-496e-963c-dd38f45079a8",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c38c3b74-e516-43e5-9ac5-65a571a4b0b0",
        "cursor": {
          "ref": "c2d76524-69ea-4b0b-928d-5d4a56ab08ab",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ef2cb4e7-e6e3-4400-8d54-9048ce1fba3e"
        },
        "item": {
          "id": "c38c3b74-e516-43e5-9ac5-65a571a4b0b0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "035514a5-f366-4a3e-b70b-8910c2a459eb",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "be2e270a-c452-4caa-9995-ed6c96ed47c9",
        "cursor": {
          "ref": "f61982d4-9fde-439d-a53e-2489d5421e84",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "62be0b5f-1ec2-46fb-beb3-e553bf771276"
        },
        "item": {
          "id": "be2e270a-c452-4caa-9995-ed6c96ed47c9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9dd8195a-28bd-4031-b1c6-d278496660b1",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "40cadc0d-12c4-4875-b07a-7ec5c9a9fb74",
        "cursor": {
          "ref": "397c6c7f-bb27-4170-9199-46eeeb32e321",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f577b15e-db2d-40e6-9145-1094c4ecbedf"
        },
        "item": {
          "id": "40cadc0d-12c4-4875-b07a-7ec5c9a9fb74",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "52d97ce6-5b47-434a-a6ca-7388ac171982",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "1f86c6c5-d9db-463a-9f16-6ee1df7b2ba4",
        "cursor": {
          "ref": "6657641a-7f63-4cf9-b776-5acb22bd6c94",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1bcac979-b8e9-42db-823b-821f185f25c1"
        },
        "item": {
          "id": "1f86c6c5-d9db-463a-9f16-6ee1df7b2ba4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3e2f2919-5e64-49c5-b3c6-a312b3d1b39f",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e540c440-9c34-43d7-b96a-c969986c8733",
        "cursor": {
          "ref": "4b9c94d6-fb7c-468a-86a7-d55cc478880c",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ff46d662-136a-4dc2-9768-a697ac799fa9"
        },
        "item": {
          "id": "e540c440-9c34-43d7-b96a-c969986c8733",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "068fdb9c-0d55-48ee-853a-bf0357053dde",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "a7c918ce-a5d9-4be3-9a1c-73b422b21121",
        "cursor": {
          "ref": "0aa243f3-928a-44cc-93ee-4de0f9a06fa7",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fb88f31c-f361-4d56-92d7-afa7696e1799"
        },
        "item": {
          "id": "a7c918ce-a5d9-4be3-9a1c-73b422b21121",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "598785e7-19c6-4282-b775-ddc4efb1721a",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "959a509e-c5e5-4ac3-8302-f5589878b394",
        "cursor": {
          "ref": "696b1bf9-35d2-43a7-988e-8bcce87a00e7",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f2b4212a-d44f-49ca-ba1a-8c533771bce8"
        },
        "item": {
          "id": "959a509e-c5e5-4ac3-8302-f5589878b394",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a746593d-27b4-4dd1-ba6c-401dd4c05db8",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "6ed80170-e9f3-44bb-a80e-7dd5d08303fa",
        "cursor": {
          "ref": "848976d6-a861-4a2c-a717-560fda8e2801",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7e312346-4ade-4fcc-bf8d-4d47bf28409c"
        },
        "item": {
          "id": "6ed80170-e9f3-44bb-a80e-7dd5d08303fa",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "908e5a8c-9714-40be-8840-1e01942a69ec",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8c524257-5573-4588-82f9-f3fd6bcc6d95",
        "cursor": {
          "ref": "d735e410-abe6-4d9c-993d-aa229db304f3",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "df486231-1278-45ff-80eb-e13545f75f73"
        },
        "item": {
          "id": "8c524257-5573-4588-82f9-f3fd6bcc6d95",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4ca16284-ad11-4eda-b451-d674d9be47c9",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2cb3ebde-3e6e-427e-9cc8-39f58b66b36c",
        "cursor": {
          "ref": "546b538b-cce2-4dbd-aa72-867bd6da918c",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1b940aa2-235b-408f-93b5-7f4ec0f6b074"
        },
        "item": {
          "id": "2cb3ebde-3e6e-427e-9cc8-39f58b66b36c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "207187da-7aa8-4ac2-8569-db56ddd14463",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b4a4c4b8-9471-4c67-8276-8111feee4be2",
        "cursor": {
          "ref": "a36436ba-6f95-4747-a76f-bd985b58f4cc",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9279884c-9dde-4d68-915b-1926a9bc4be8"
        },
        "item": {
          "id": "b4a4c4b8-9471-4c67-8276-8111feee4be2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9d7a25aa-d6bb-4aaa-b223-fb5bbef251a3",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "746fe942-f4d2-4812-b789-06009f30609d",
        "cursor": {
          "ref": "03e57a5d-b66b-46f6-94e5-1d41031db688",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0f5d0941-3fa1-4dc7-bb9a-ddfeaf5c7c5b"
        },
        "item": {
          "id": "746fe942-f4d2-4812-b789-06009f30609d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "513c888a-5ec6-44d5-a488-50e20139fc8b",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "872cf5f4-4922-4282-8325-6863c27c6fff",
        "cursor": {
          "ref": "ad58a69c-6417-4c20-a99b-ad59a4085b4d",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "10bfde05-98d4-40a7-8d3f-c1727c8101ab"
        },
        "item": {
          "id": "872cf5f4-4922-4282-8325-6863c27c6fff",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9f29dca7-f8e9-441d-a812-167ed671a622",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "68dec0ae-3d82-40fc-bcc8-d93abf166c35",
        "cursor": {
          "ref": "7209c9d3-9165-40ff-aba8-1445434a5a14",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "10effb87-9881-493c-a86b-c4859183376e"
        },
        "item": {
          "id": "68dec0ae-3d82-40fc-bcc8-d93abf166c35",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "63af0750-f0ce-490d-8f08-b9873fb84faa",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "bf04f313-5fd4-43d3-8207-9ae684e47565",
        "cursor": {
          "ref": "632d4bce-dbc3-4671-997e-de353969e5d5",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4eaf537c-9794-4151-a890-213a7cd15052"
        },
        "item": {
          "id": "bf04f313-5fd4-43d3-8207-9ae684e47565",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7d0a6ed1-6cc1-49d5-8548-972e4c7a5904",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c9183949-444d-4fe0-9809-2ec3bd994b2c",
        "cursor": {
          "ref": "7f90dcf6-e7e6-448c-8511-9046f719b47e",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "448ccfca-26ec-4ac1-9329-2d76c5d64091"
        },
        "item": {
          "id": "c9183949-444d-4fe0-9809-2ec3bd994b2c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bdc0181b-648e-4fe4-b8a6-5772fa55fa7f",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "babe7e2b-91af-44d0-9577-96d1e4c519ad",
        "cursor": {
          "ref": "73caa984-3c14-4d97-8f42-793fc0a0d0de",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cbe4af36-d338-4777-9107-d9125c4ab04a"
        },
        "item": {
          "id": "babe7e2b-91af-44d0-9577-96d1e4c519ad",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bb0606a8-cea6-4ba9-b887-9feab2ce5fe6",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b53dfd48-d23c-4009-ab54-d8a85c8901b3",
        "cursor": {
          "ref": "a62d2eac-8a75-4407-9992-0d6787960a1e",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b1b3ed1a-299b-49a0-ad6e-216294517016"
        },
        "item": {
          "id": "b53dfd48-d23c-4009-ab54-d8a85c8901b3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a8c341ef-86c1-4d29-9ec0-fe71b6d8245c",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e970f063-93cd-4c89-ba99-d4f45c9e88e8",
        "cursor": {
          "ref": "2b24f51e-66b1-455c-ba2e-54991f673f1e",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2ad4c3fe-2efc-4a55-b2a0-6dc0f55be845"
        },
        "item": {
          "id": "e970f063-93cd-4c89-ba99-d4f45c9e88e8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4c6cc8b5-b1b1-46bd-adad-8c5d37d4dd6d",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "577602b8-c0d1-42aa-9810-69b17cc9e789",
        "cursor": {
          "ref": "a2c9da56-ec7b-42bc-aa86-0f15a025921a",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4a4c36b4-aa72-4412-9097-7964b2c0ddec"
        },
        "item": {
          "id": "577602b8-c0d1-42aa-9810-69b17cc9e789",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7d9989f3-3e54-4a98-9c49-661819f71364",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "646130d0-6fbf-4ebe-81a4-cb7fc399879e",
        "cursor": {
          "ref": "282c35d1-a956-4b5a-9711-d6d1151066ce",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fea6a030-9de2-4442-a56c-f644b4307db9"
        },
        "item": {
          "id": "646130d0-6fbf-4ebe-81a4-cb7fc399879e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4b3975f1-c0ab-4271-9747-44dc99d2028f",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "11f20fe9-1268-4503-a4ac-c961a47adeb8",
        "cursor": {
          "ref": "95808c83-12f9-4ff6-bffb-8abb72476cff",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "396f5937-769a-4cfe-8ef9-f6aeeb79e6cf"
        },
        "item": {
          "id": "11f20fe9-1268-4503-a4ac-c961a47adeb8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7dabe421-4f2f-4150-bfca-9a059624e7e7",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e30eeb10-ba81-45a6-9aa8-49c4f5c3865b",
        "cursor": {
          "ref": "2a7be5d6-01f8-4ac3-b85e-f7382fc78c7d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a105d355-e373-4b5b-a18c-4e7522d25c91"
        },
        "item": {
          "id": "e30eeb10-ba81-45a6-9aa8-49c4f5c3865b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "75261ba5-da88-4341-9cc1-2ad7649bba32",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f62d7c05-b514-4526-a3c8-e177f785a988",
        "cursor": {
          "ref": "f5b9cc7c-93ed-4994-86f9-8d6f937f3c75",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4119cdcc-4564-496e-b921-abea9c2c8249"
        },
        "item": {
          "id": "f62d7c05-b514-4526-a3c8-e177f785a988",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a0db28fe-438d-4d18-b20d-67d58e04f979",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "40636f8b-8f55-4d5d-9822-4c3be93abcf4",
        "cursor": {
          "ref": "7935ca22-793e-4c8b-b32e-bad5df2a76fd",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5d044aa2-7c3c-43af-acc9-520cecbc317f"
        },
        "item": {
          "id": "40636f8b-8f55-4d5d-9822-4c3be93abcf4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1c42a8fd-7eae-48f0-889b-b6477b43fc73",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "da9f4d2d-9a5f-450c-8487-0cd22be9456f",
        "cursor": {
          "ref": "490481d1-9454-4d20-a99f-748c3af5222f",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e3015bd6-e4b2-4d28-8191-387210d5eecc"
        },
        "item": {
          "id": "da9f4d2d-9a5f-450c-8487-0cd22be9456f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "457b8766-68b7-4982-b173-88c242e64127",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "a2b0bc2e-09c9-4cb7-9287-ab3c456ffee0",
        "cursor": {
          "ref": "c516be4b-df10-4ea4-ba67-3f8f1fd1a31b",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3ad6c2e2-9504-46ac-8eba-4e96043745f9"
        },
        "item": {
          "id": "a2b0bc2e-09c9-4cb7-9287-ab3c456ffee0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fab675f5-e9c5-4b0f-b0e6-ceb8982c5216",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "55b2987e-bcf9-4174-b765-748ccb07a00c",
        "cursor": {
          "ref": "6f449501-c7d1-44b4-b677-4eb44182a61d",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "09a060f2-c2e1-4a7c-a48a-41c4c06b3d2f"
        },
        "item": {
          "id": "55b2987e-bcf9-4174-b765-748ccb07a00c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "59c412db-53c2-43d2-8f4c-4ce3cb20d780",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "64e6219e-1535-4e1a-9a3b-9e4f20630148",
        "cursor": {
          "ref": "c239fc89-d386-4593-b849-48f212f79147",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "94b28f28-617c-4dc6-ac3c-80a84eb0794a"
        },
        "item": {
          "id": "64e6219e-1535-4e1a-9a3b-9e4f20630148",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "006f69b9-2d4d-45de-b5ce-7a281c171467",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c2b41247-7187-4a27-ab6a-f97d6af7b7c6",
        "cursor": {
          "ref": "0aa6ce55-5e73-4cda-94ea-db69eea90e3d",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "33f401c7-dafb-4f24-b2bd-8caedc7a69dc"
        },
        "item": {
          "id": "c2b41247-7187-4a27-ab6a-f97d6af7b7c6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2c83f2c5-9cd3-4029-9eb7-44c9329c779c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d70a852-d6d1-475f-a9eb-60fbf835d971",
        "cursor": {
          "ref": "59284805-bead-40cb-a924-d4fa5d2b865c",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d35dcd0e-8d9a-40df-b6ed-df9e58a4cbac"
        },
        "item": {
          "id": "2d70a852-d6d1-475f-a9eb-60fbf835d971",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "94156a0f-3a27-4469-82c9-fd4338dbc163",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 81,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d226e5-4af2-4540-96f1-4250e3400969",
        "cursor": {
          "ref": "71aed371-a068-4eaa-9972-624bc35988af",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f714f477-5b49-4001-988e-f007783fa0bf"
        },
        "item": {
          "id": "c2d226e5-4af2-4540-96f1-4250e3400969",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "86e38ca9-6b82-46a0-a13a-53c1524309c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d226e5-4af2-4540-96f1-4250e3400969",
        "cursor": {
          "ref": "71aed371-a068-4eaa-9972-624bc35988af",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f714f477-5b49-4001-988e-f007783fa0bf"
        },
        "item": {
          "id": "c2d226e5-4af2-4540-96f1-4250e3400969",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "86e38ca9-6b82-46a0-a13a-53c1524309c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc30a424-5451-4e06-a65d-6dece7b513d5",
        "cursor": {
          "ref": "6fb9ff46-d450-4c73-a1f2-18501a9dac5d",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "eb6d0294-9229-48ba-85dd-cdfabb91cb74"
        },
        "item": {
          "id": "cc30a424-5451-4e06-a65d-6dece7b513d5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5b074810-bf2b-4cdf-9c4a-3c63df0f4e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185bebd0-d558-4a2d-8456-2500eeab01e8",
        "cursor": {
          "ref": "f9433384-c723-4d55-8c3a-ab7fdf0764b7",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "30c0d833-5fcf-4809-ac87-bd44e3a36085"
        },
        "item": {
          "id": "185bebd0-d558-4a2d-8456-2500eeab01e8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "69627a59-dad4-49ab-af21-f10043d08801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c16aa2e-a79c-4da5-acb7-38503c0e5524",
        "cursor": {
          "ref": "aad777c6-4954-4852-8685-af70814f35f1",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c1220f9e-fa29-4bb4-8f3e-0bb3c954a20e"
        },
        "item": {
          "id": "7c16aa2e-a79c-4da5-acb7-38503c0e5524",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b1761eb8-3455-4aac-bd0f-ff3b4950dcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a06b917-6704-4d16-aeed-be9a44b5e93b",
        "cursor": {
          "ref": "80170cfc-e152-4135-8c72-c0639b379840",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4e896599-597c-412a-a4cc-fa3940db3bf5"
        },
        "item": {
          "id": "7a06b917-6704-4d16-aeed-be9a44b5e93b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e147f7ef-1162-4b6d-b640-fc1a5aad4abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0147b0a7-4b46-4947-ad38-f4a565db8576",
        "cursor": {
          "ref": "ce71d13e-9b9e-4491-a95f-d63eaef350b9",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b467c585-b29e-4138-9da5-779149dfd838"
        },
        "item": {
          "id": "0147b0a7-4b46-4947-ad38-f4a565db8576",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cf9fbf1e-3ec5-4a1f-9dca-9ac7be6acc84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5fec25b-2bff-48b1-8e80-6186e4aa1e63",
        "cursor": {
          "ref": "79303779-fcfe-43f2-a6c0-2399ff355126",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "98b7bd4f-f22b-439c-82ef-7716a5d062fb"
        },
        "item": {
          "id": "d5fec25b-2bff-48b1-8e80-6186e4aa1e63",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "88e1e5fd-7d23-4477-a7f1-5589998c8197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 892,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2767469a-2589-4023-a3f1-5f3f92e02ff1",
        "cursor": {
          "ref": "674489fd-05a2-4bb4-a485-06f9bbf371f7",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f5e0e52b-b413-48d3-ae2b-a71ea1f649aa"
        },
        "item": {
          "id": "2767469a-2589-4023-a3f1-5f3f92e02ff1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1ed5c582-e20a-4783-8e3d-0497b5486510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9f04ef-b913-4950-8b3d-e1bf0d5b3ff6",
        "cursor": {
          "ref": "8c23de43-b362-4763-a4ee-06bda399b2d4",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7f52e76c-7c63-4c96-a1cd-ba5fbc2674d1"
        },
        "item": {
          "id": "aa9f04ef-b913-4950-8b3d-e1bf0d5b3ff6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dddd69e2-91de-4d7d-aa63-7c865101d812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb816c8-cd27-4785-a662-03e721b27bfb",
        "cursor": {
          "ref": "a1b83d49-4e25-488b-8e5b-a40084557eef",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "139eb35b-b3f7-4336-b1c8-6cbed48169c8"
        },
        "item": {
          "id": "2fb816c8-cd27-4785-a662-03e721b27bfb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "161925fd-bb2a-4ca3-8131-9a44bcce6729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f51fdb-8b83-48df-a63b-95b2cac931ce",
        "cursor": {
          "ref": "fb1361b4-2ccb-487a-9573-8a792f8c6e13",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "987fc2e0-ba62-430e-97da-46ca97b4d08c"
        },
        "item": {
          "id": "63f51fdb-8b83-48df-a63b-95b2cac931ce",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "49f06cdc-386d-44f6-9152-db54f6f3904b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437ddcb6-2274-454d-b8f1-b48bb79b4f06",
        "cursor": {
          "ref": "2e178808-0d1a-4ad4-93fb-a15be5d774a1",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "61d964db-ed84-41e8-b7aa-18e959e0a538"
        },
        "item": {
          "id": "437ddcb6-2274-454d-b8f1-b48bb79b4f06",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bc080868-2d4e-43be-a69f-08b035b166ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149f7fc9-77dc-4b11-91a9-f54c53062efc",
        "cursor": {
          "ref": "9b8308e5-2b29-4b03-b4b3-5066534170b2",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b3e985f6-5a21-45ce-be4f-99ac281ed0a7"
        },
        "item": {
          "id": "149f7fc9-77dc-4b11-91a9-f54c53062efc",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b63ceb0d-f283-4fcf-bc2c-af30ecfe7583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adb4575-5009-4c12-8269-64f11153f12f",
        "cursor": {
          "ref": "bfa5e46e-41b4-4057-9192-eba6994d865e",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "54ef1e1a-5924-45f7-821f-d40e0f920e22"
        },
        "item": {
          "id": "2adb4575-5009-4c12-8269-64f11153f12f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1c9f07f7-4959-41d8-8602-7c751f539d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c48119b-c4d5-4f1b-aa2c-5bf006328e30",
        "cursor": {
          "ref": "a2f58094-0ab9-46a0-ac1c-9c279f68a217",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c92dfe58-f581-4c9d-ad68-b4ff42348eeb"
        },
        "item": {
          "id": "5c48119b-c4d5-4f1b-aa2c-5bf006328e30",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "34a21bb5-af32-42dc-85f6-e78165e7bf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9fce719-c2a0-475e-9bfb-a4a966e7b53f",
        "cursor": {
          "ref": "d88c646c-60ae-4330-af52-86277c137bfd",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "bc6d0da2-8489-4360-9cd3-c5fc418e8e49"
        },
        "item": {
          "id": "d9fce719-c2a0-475e-9bfb-a4a966e7b53f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2ec9eadb-05b0-4b2d-862b-503b28352957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d29977-a477-4f67-8302-e537fd5f0f60",
        "cursor": {
          "ref": "0531b941-456f-4e46-ae1f-25ff9a611553",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8aa00680-0311-42f5-b931-3956c535b082"
        },
        "item": {
          "id": "d3d29977-a477-4f67-8302-e537fd5f0f60",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "33eef817-82b6-446b-9684-0c7026a5208f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ac9b02-d6db-400d-94d2-2e46a0384144",
        "cursor": {
          "ref": "c39c5c0a-4501-457c-9c65-d04c2f45e7dc",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9973f67e-e081-462a-a0bd-067f051c0eea"
        },
        "item": {
          "id": "71ac9b02-d6db-400d-94d2-2e46a0384144",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "576919a1-7bb7-45a2-9db1-8e527dc60f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 624,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7810b00-fd20-408a-90a0-2c6ac23cb629",
        "cursor": {
          "ref": "d3db41ef-dbf1-413b-be21-f7f00c267638",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9a40120f-526d-43da-a8b2-fd48f044d552"
        },
        "item": {
          "id": "e7810b00-fd20-408a-90a0-2c6ac23cb629",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3957b60e-fe45-4f81-b196-97b6ea5a4f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 375,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c9a829-612a-4c67-ba8d-8534ee9f28e3",
        "cursor": {
          "ref": "314ce672-decf-402d-afb5-cb31d570d20f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7faa1d99-c361-43ce-ac30-7c7ffd508947"
        },
        "item": {
          "id": "f5c9a829-612a-4c67-ba8d-8534ee9f28e3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2acd9e7e-db36-48dc-8598-44362d82b473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74070850-9cde-4cb3-b0c0-5aab1db52570",
        "cursor": {
          "ref": "db1b0a26-bbf7-422f-96b4-1c9387c8faad",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "85b9e5d3-6690-479e-acdc-631f8fc28754"
        },
        "item": {
          "id": "74070850-9cde-4cb3-b0c0-5aab1db52570",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b28246b3-ab9f-4f7d-87f2-b58a26976d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360a02c2-307e-4d64-b28d-bf7ba6877ffd",
        "cursor": {
          "ref": "18d64da9-0c35-485d-9139-10ed8343f545",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "43872a36-5ba2-465a-81ca-981d30c3e18a"
        },
        "item": {
          "id": "360a02c2-307e-4d64-b28d-bf7ba6877ffd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d8b3ada3-e531-4237-9ef3-139663a1ebe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 341,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8888c7b-ae64-4d7f-8dc9-d223aaebbadd",
        "cursor": {
          "ref": "cba38ef0-75f7-4631-b99b-75ac8c804016",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5574125a-d320-48d8-ba0b-0c4dbd297664"
        },
        "item": {
          "id": "e8888c7b-ae64-4d7f-8dc9-d223aaebbadd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d90addbd-8a30-4cd8-8893-8c0e9def425e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7003e38e-d6b2-4a60-beef-4e35272d95a0",
        "cursor": {
          "ref": "8ee8aed1-c840-42c2-a6b6-65809adc62ab",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "172c8a73-c986-4a6a-bc6b-5261a0f88b34"
        },
        "item": {
          "id": "7003e38e-d6b2-4a60-beef-4e35272d95a0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "42516b88-5433-4919-bd40-196715c5ffdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb96487-4bcd-4c59-8e0c-db56d4b9663d",
        "cursor": {
          "ref": "7da31ad4-7519-4c83-9dc7-2bbeaaf66549",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b7b628b8-04ef-453b-ae9e-4ab2a6a6e1d4"
        },
        "item": {
          "id": "3eb96487-4bcd-4c59-8e0c-db56d4b9663d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fee3ec07-ff29-4d72-b8e2-438625b112ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c71b60-d6ee-413f-8179-0ed7ac03d7bf",
        "cursor": {
          "ref": "6c97605b-480c-4e36-bafc-264e503634c3",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "55b86e51-5432-4ec6-8bb4-e62592268e8f"
        },
        "item": {
          "id": "a8c71b60-d6ee-413f-8179-0ed7ac03d7bf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8e8398b7-3e7f-47e9-a951-73e3cae2c3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d79b08e-46d9-4c63-9302-c847c3b65c49",
        "cursor": {
          "ref": "e7aab369-c667-4000-a6eb-60c5b0c6cbfa",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "44bf4dbc-3cb6-4984-a6f4-f9fce4278275"
        },
        "item": {
          "id": "0d79b08e-46d9-4c63-9302-c847c3b65c49",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "35707820-8820-4aea-9739-03b9bc1ca6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f7e8a4-0832-4c47-a527-1638835bcdbc",
        "cursor": {
          "ref": "cffe6723-fbce-42ca-84f2-2dfdd228c5f8",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cb09b31d-4187-4839-b73d-dd3a27095fea"
        },
        "item": {
          "id": "98f7e8a4-0832-4c47-a527-1638835bcdbc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d5a07f8f-c56a-4495-b1b7-e136035371b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abba009-61e7-47ec-8ffa-d46e4a33adcd",
        "cursor": {
          "ref": "1606a5c9-eed0-4d2e-974d-1de1c0edce07",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f09e20a0-fb8e-4c1d-9f72-903686a64717"
        },
        "item": {
          "id": "5abba009-61e7-47ec-8ffa-d46e4a33adcd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "25ff620e-66e7-4785-915a-8bbf4ac15408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 443,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9bb5b5-de74-4be5-86d5-be1ba532f509",
        "cursor": {
          "ref": "dce8607f-f3fb-4688-a48c-de8dd529512a",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6b8fbabb-ab72-46f5-9141-17aa73bbad39"
        },
        "item": {
          "id": "ee9bb5b5-de74-4be5-86d5-be1ba532f509",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7129043d-1ebc-4695-b50f-24b30cd9a920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc96747-6e5c-4107-81d9-c9b15fbf7cf0",
        "cursor": {
          "ref": "809f6138-6dc4-447d-b091-18e798bc0a24",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7af66283-b414-42f9-8f51-5d8c70e1152f"
        },
        "item": {
          "id": "fbc96747-6e5c-4107-81d9-c9b15fbf7cf0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "24ad99d6-6e4a-41aa-8c43-112b8bcf68fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7152ffc-bf52-43d5-bda0-9402c51ba9a1",
        "cursor": {
          "ref": "1c1bd563-7e8b-4bc9-a583-a3afb9eb7c61",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5c0f290b-ea7f-4593-a433-c22dbe651afe"
        },
        "item": {
          "id": "d7152ffc-bf52-43d5-bda0-9402c51ba9a1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "00c2f5e4-f576-409d-a966-d05b22a5a3fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cc5d64-e818-42e6-9b2b-56d2825dbe88",
        "cursor": {
          "ref": "a993673e-476d-4848-8cea-1a0f4d13a57f",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cba8ce5e-4f54-4146-8b84-d6dd6de8ccb0"
        },
        "item": {
          "id": "b5cc5d64-e818-42e6-9b2b-56d2825dbe88",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "10decadf-e2ed-4480-bb14-8775fbc44474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 580,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddbd1cb-85ae-478d-8b98-6204efa66375",
        "cursor": {
          "ref": "3889da65-f84b-4661-b434-f7c183a12841",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "af9a97ff-b27b-43b1-8c02-4ce3b43b4015"
        },
        "item": {
          "id": "7ddbd1cb-85ae-478d-8b98-6204efa66375",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a1ef6f4d-6929-4cc0-9aff-6f2b7ea64d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5feb59-251f-412a-bc3c-b061defc67c3",
        "cursor": {
          "ref": "fff84340-fe01-4306-bf22-88b7509bf10e",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f4a35b8e-57b0-43c2-b290-588ee5f97229"
        },
        "item": {
          "id": "0e5feb59-251f-412a-bc3c-b061defc67c3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ed47dc63-4c67-4c13-9a8d-d59cb30caf17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 398,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e26312c-f89d-4e60-8e5e-73a468f4e67d",
        "cursor": {
          "ref": "d6e08133-4d26-4c21-b68d-2dffe142fda4",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b09dbd7d-ba17-44cd-ba42-bb10a974b8c5"
        },
        "item": {
          "id": "0e26312c-f89d-4e60-8e5e-73a468f4e67d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "08c735b0-e65c-4cb6-90a4-e7c89a6c065b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885e9dc0-a99a-44e8-9823-371e472a0f15",
        "cursor": {
          "ref": "3e9adec1-71de-489d-b70b-574bb3cfedc8",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5c11955d-ce3f-4da4-b15d-4d69d480c34f"
        },
        "item": {
          "id": "885e9dc0-a99a-44e8-9823-371e472a0f15",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ae34100a-01b0-4a65-9b4a-5636c6c8b57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5477e22a-daaf-478b-b0b4-037d8834629d",
        "cursor": {
          "ref": "d9b72b70-f445-49b5-a686-fbce71ecdca4",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bbd2d7b5-6021-4aed-a3bd-2124411b51f4"
        },
        "item": {
          "id": "5477e22a-daaf-478b-b0b4-037d8834629d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5d7a8e7e-bbb6-4fbe-babd-c6982df198cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b960515d-c98c-4228-be9d-74b47b368b24",
        "cursor": {
          "ref": "9c52cd2b-e4e4-42c5-8c76-0afa3c90c5fe",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bc77b4b6-a81a-494a-81f5-15ec781d7010"
        },
        "item": {
          "id": "b960515d-c98c-4228-be9d-74b47b368b24",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f1a3a25a-e9f0-4353-b4f0-14aca4533219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9fedd4-1bdd-4d73-91d0-b2d6014634cc",
        "cursor": {
          "ref": "e1160ba3-af7f-4c3e-911d-87d0eb00b74a",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "218dd0e6-ac89-4f1a-aada-55627f2a0951"
        },
        "item": {
          "id": "4c9fedd4-1bdd-4d73-91d0-b2d6014634cc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4dbdccdd-4a23-420c-89bb-e3ea4eca7d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 482,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e855d75d-adfc-4fed-b95f-bd6810060fe6",
        "cursor": {
          "ref": "fc1d8d43-22a6-48d5-8b0d-d5a934c2c4e2",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "52dccce7-7b0f-4f68-b142-f5b299e94f4a"
        },
        "item": {
          "id": "e855d75d-adfc-4fed-b95f-bd6810060fe6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2fac7abb-638c-4070-b73d-a4b92721f885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 447,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2e00a9-5038-497e-be89-db5ce9ab4284",
        "cursor": {
          "ref": "20a005f8-9703-4fae-a892-3331457befb3",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "074d46c1-633c-4115-ae5a-7e7d6e0b378f"
        },
        "item": {
          "id": "2c2e00a9-5038-497e-be89-db5ce9ab4284",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "12b34286-1f3d-4c3e-a5cf-7039e04f4092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 426,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7009cdf0-d3de-433a-9f20-467a55313930",
        "cursor": {
          "ref": "1ef830ad-ee15-49b5-af4e-f21e60bdf4e3",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "250c6895-ed81-4d2d-bb94-4c13675c8243"
        },
        "item": {
          "id": "7009cdf0-d3de-433a-9f20-467a55313930",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "aa59c6d7-3b05-44fc-ab1e-128455624159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd2ffba-504f-4a16-b18b-fdaad406349f",
        "cursor": {
          "ref": "02c3e631-ca04-430e-a0f2-0cd7c5d4fef5",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "10e0a183-a813-4031-9283-b7556b1d8ab1"
        },
        "item": {
          "id": "7fd2ffba-504f-4a16-b18b-fdaad406349f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9c0bdaaa-903a-402e-9e97-f19eca3c0c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051b0682-be64-4e1d-a314-1f9b9931ed62",
        "cursor": {
          "ref": "b620e272-ddca-4c06-8d34-76160db3dc86",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "873efb50-4aa5-43e2-88fe-f53479625c0b"
        },
        "item": {
          "id": "051b0682-be64-4e1d-a314-1f9b9931ed62",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "072b071b-b39e-464f-b248-b39511401c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491350a2-39bb-4a0b-8c86-ae25eef523c8",
        "cursor": {
          "ref": "131d5460-eca6-4737-8653-48842fea1ab6",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5d2c0dbc-22ef-427d-abe7-356d8ad15f78"
        },
        "item": {
          "id": "491350a2-39bb-4a0b-8c86-ae25eef523c8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bc72e8ba-6f20-4c3a-8b8e-85c1d6ccf588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca04fa9-4044-455a-9a89-3a34ca71751f",
        "cursor": {
          "ref": "49f37e51-65ca-4f8c-b105-a55faca97026",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1ef1e7ce-8590-45f6-ab95-c43cfceb69ea"
        },
        "item": {
          "id": "9ca04fa9-4044-455a-9a89-3a34ca71751f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a4f75fa8-6d40-40b9-ad6a-2110343c4d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10113c95-0a98-4f08-9c6f-f82fd831e66d",
        "cursor": {
          "ref": "413eaa16-83af-4079-b4b4-aae7c035250c",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fb10b4a6-0424-47cf-8edb-c285291bf35e"
        },
        "item": {
          "id": "10113c95-0a98-4f08-9c6f-f82fd831e66d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "055b523c-1e71-4297-aa96-ca2678e05610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 374,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3852c7ae-4ea2-4a8f-ad3e-0e2af1ccf62c",
        "cursor": {
          "ref": "699fbf63-733d-43e2-8a9f-fce21d2313a6",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9704e744-1579-492e-8e81-aca408b2b3de"
        },
        "item": {
          "id": "3852c7ae-4ea2-4a8f-ad3e-0e2af1ccf62c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "583ed9bd-4a30-47ef-9566-19effc1ed76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fafb4d-1158-4a03-871c-68db5423e93d",
        "cursor": {
          "ref": "ce2cb923-f2d4-4c08-920d-ec7649112d81",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8a98b5bb-8f77-4e85-86f3-995046e9189a"
        },
        "item": {
          "id": "74fafb4d-1158-4a03-871c-68db5423e93d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "797d9705-9c27-403c-a8ce-c607a3e03774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 296,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb9a6e5-b6d6-44f0-9b8e-828484bbddda",
        "cursor": {
          "ref": "012091f7-3357-483e-91f2-b27aeba68cee",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1d11356f-aa00-4a82-8419-fe47ae2896a8"
        },
        "item": {
          "id": "bfb9a6e5-b6d6-44f0-9b8e-828484bbddda",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3ea090df-2659-448f-996d-fa1233488e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f3872f-85a4-492d-8355-cb9a297e88c5",
        "cursor": {
          "ref": "43f182b5-4551-484d-95b6-71c171b4d0e8",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0cd06e53-4d8e-492f-8ae9-9d3ca76ae28d"
        },
        "item": {
          "id": "d6f3872f-85a4-492d-8355-cb9a297e88c5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "990a007e-c87b-418b-9714-8b74b344479c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 499,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252aa10f-7485-4b33-80ca-930cb9ffac2b",
        "cursor": {
          "ref": "a96c42bf-85d8-4abc-b825-ff162ce57192",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d97b0e07-4771-4f90-8407-64ce0dea092a"
        },
        "item": {
          "id": "252aa10f-7485-4b33-80ca-930cb9ffac2b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1920a7b1-cb1f-4be0-a24f-5d5332bfad06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 507,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1cd13b-865e-478a-b4ad-864c49f436f4",
        "cursor": {
          "ref": "007f6038-d890-4e4c-93d3-45a59e068d26",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "59d94e13-86d4-466d-876b-b06274bd4172"
        },
        "item": {
          "id": "3f1cd13b-865e-478a-b4ad-864c49f436f4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "eb5f180b-01c2-424d-91a8-af6b9ac07965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba6f5c8-662f-4470-bdf9-f2a3cc6e3179",
        "cursor": {
          "ref": "50745744-d0e6-4687-bd25-1635403be47e",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7f0c1900-36e8-4c6e-9c80-50f8babb4c07"
        },
        "item": {
          "id": "2ba6f5c8-662f-4470-bdf9-f2a3cc6e3179",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7f0ae0aa-9722-4d87-9625-c1fd6405d285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3132c8fa-c004-45db-a68a-970860536320",
        "cursor": {
          "ref": "2024e22a-3ee3-4095-9cb3-9d48b64c06c4",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d6a56454-371c-48fe-8bd8-8289cbbeccd9"
        },
        "item": {
          "id": "3132c8fa-c004-45db-a68a-970860536320",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d6ebe0ed-fbaf-4cd2-8d3c-6986f01d5c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d83efbb-c09f-4c10-a5bf-079c7a2091b0",
        "cursor": {
          "ref": "cf480446-1070-47ba-b98f-d5266a5f1234",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d1360bbb-4a5a-489d-bbe4-f4f15d212c31"
        },
        "item": {
          "id": "8d83efbb-c09f-4c10-a5bf-079c7a2091b0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1b8b07e7-2bb6-4e3b-b00e-a971e22393c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 630,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc86001-f977-4ccc-905e-aab539fe3512",
        "cursor": {
          "ref": "307afea1-e2ec-4386-b364-0ae1c0c4890c",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8d1515b1-8879-41f0-b3a0-1488feecd50d"
        },
        "item": {
          "id": "dbc86001-f977-4ccc-905e-aab539fe3512",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "36c8e1d3-f643-4552-a3c3-b80dc97349fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3652cddd-72e9-4cfb-aed2-81f0f24333cb",
        "cursor": {
          "ref": "14a495a2-a0ed-4f92-8028-ec5dcea6e090",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0525998b-37a5-45ac-bdbd-7c0fefed5b89"
        },
        "item": {
          "id": "3652cddd-72e9-4cfb-aed2-81f0f24333cb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3611ec95-8b6c-4082-8ab4-3940c6621dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7893b8ce-35e9-4e68-85ee-628427ae3a9d",
        "cursor": {
          "ref": "700aacd9-a83a-485f-9a47-9e8e722827ee",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d17107eb-cb82-479c-a8a0-03e54b55df98"
        },
        "item": {
          "id": "7893b8ce-35e9-4e68-85ee-628427ae3a9d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "53bf14be-5743-4a44-90d5-cf55258f2e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c43caef-4be7-4b8c-83c7-bd463a414ad2",
        "cursor": {
          "ref": "1ef3ebdf-955a-4d3d-9603-6cc115121f7f",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "90afe508-c870-4112-98f9-f87e20968dc3"
        },
        "item": {
          "id": "5c43caef-4be7-4b8c-83c7-bd463a414ad2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c118c50a-a77f-49d5-a42a-0af83025e6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c4db37-5d7d-4dd7-a24d-cafad912856f",
        "cursor": {
          "ref": "58c7ae27-7a9a-4ccc-a0fd-8f127fc64048",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "82f0a92e-e5c4-4fd3-ac9f-d74443e27f24"
        },
        "item": {
          "id": "c0c4db37-5d7d-4dd7-a24d-cafad912856f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "313ab111-6f23-4341-ab41-c99fdec7d17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 759,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a8830f-21c2-4deb-85e1-a8823b24f4ab",
        "cursor": {
          "ref": "c4fad1fc-5fd8-4370-b1f6-9856f07a50ae",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "987b9a0d-4f01-4aee-bb01-1d798146397e"
        },
        "item": {
          "id": "f9a8830f-21c2-4deb-85e1-a8823b24f4ab",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3aa561a7-e886-4746-972d-cf6b7c882670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fac9a7-2539-4b0d-8de1-5e2c35762d54",
        "cursor": {
          "ref": "94eeec3e-1272-4fc8-95c3-22fb3f49cefd",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "81bd599a-5206-4b8e-969f-74afe850c275"
        },
        "item": {
          "id": "c7fac9a7-2539-4b0d-8de1-5e2c35762d54",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4ff87729-df56-417d-ab62-1d9d9f1ab081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c697cc0-8a87-463e-8faa-821862f8c362",
        "cursor": {
          "ref": "5c65184a-d0ee-41d7-ad3b-a5e4ea193e6c",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "918930bf-6959-4bc7-912c-7af9dbf4e369"
        },
        "item": {
          "id": "1c697cc0-8a87-463e-8faa-821862f8c362",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9837903c-c187-4db7-a03f-9f1403ae664d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d098569-47f2-4177-8d22-9d66f837dee3",
        "cursor": {
          "ref": "7908fc51-9a94-49c2-b69d-1b14ea5625c5",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "314ef773-8c04-41b8-a96c-edce26aa4d15"
        },
        "item": {
          "id": "0d098569-47f2-4177-8d22-9d66f837dee3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6875d6d7-2892-48a6-80a0-6ec1023fbdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25d0ea2-b131-49d8-8da5-eb17e72f0166",
        "cursor": {
          "ref": "ad05b1f6-8b11-4ff5-a9ed-b2861d09d5cc",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "385d373a-9e20-4c38-9598-2162ae67f007"
        },
        "item": {
          "id": "a25d0ea2-b131-49d8-8da5-eb17e72f0166",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "197cba25-ffc1-4eae-ab5b-f38e8abb706a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6f4b89-790e-43b1-947f-6b3d1abbec69",
        "cursor": {
          "ref": "f711a909-68cb-44db-a713-d725fcd77816",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "83c06aee-5a9c-498a-bf45-b59fa191c1ef"
        },
        "item": {
          "id": "cc6f4b89-790e-43b1-947f-6b3d1abbec69",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3a49f9e2-479e-4004-857f-f5c2408e5e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f922c0-763b-427d-bb49-03b5249a85ed",
        "cursor": {
          "ref": "cd3f5d82-4cbf-43c3-bf5e-c0891c91f87a",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4e2f1ed7-e38a-4926-84fc-e8fe59009913"
        },
        "item": {
          "id": "93f922c0-763b-427d-bb49-03b5249a85ed",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4a4da0be-c066-4bf0-bf10-3961039cd122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27dbaa3b-caf8-42df-ac13-1f7418ef1eb3",
        "cursor": {
          "ref": "8f8ea564-f5f2-4f40-81d1-55689d78f853",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2d64faf9-1b45-425d-8819-79344a5759c1"
        },
        "item": {
          "id": "27dbaa3b-caf8-42df-ac13-1f7418ef1eb3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b18749db-3907-4e05-bce4-082f30ccb6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5e0314-5fa2-4c8b-aad9-410dfafcf6ea",
        "cursor": {
          "ref": "c12d5e10-cf25-4497-bfbd-ad1f34fa0abb",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "97428397-15bd-4140-b3b4-283f0d4e9e72"
        },
        "item": {
          "id": "2f5e0314-5fa2-4c8b-aad9-410dfafcf6ea",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6376bb8c-54a0-4e42-9f61-70d73ef75972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a2c1e4-ad7b-494b-83ca-f6630c9d3918",
        "cursor": {
          "ref": "3b7a1b4f-2ba8-4fad-882a-44f983edf483",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "87fe9a46-0d3e-41c3-ac1c-344958db06cf"
        },
        "item": {
          "id": "e4a2c1e4-ad7b-494b-83ca-f6630c9d3918",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8beb80e8-2e11-4093-b443-aa4e47e27174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36a31e6-7d2d-45d4-babd-e2745994cf3a",
        "cursor": {
          "ref": "1bf7a701-f77e-4183-a965-878d684d5811",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f6e0bacf-762b-4593-9265-d780d06635bc"
        },
        "item": {
          "id": "e36a31e6-7d2d-45d4-babd-e2745994cf3a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6de008a9-c226-4f81-b9e5-16f81adaebcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3afa8c-d58b-4935-a683-654499f002a6",
        "cursor": {
          "ref": "15600c26-afe4-4f56-9557-e7306683200f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "33dc5170-3208-4a5c-80b4-38b02b255179"
        },
        "item": {
          "id": "8c3afa8c-d58b-4935-a683-654499f002a6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "315e8943-4e6c-4d41-bb40-7fb8a112ed03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7319c5eb-a361-4f2a-96b3-68ed0b41b642",
        "cursor": {
          "ref": "47af782c-3bb9-4e4c-a8c7-027def28036d",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "eb4f1fe2-80f1-42ba-b580-274497bec366"
        },
        "item": {
          "id": "7319c5eb-a361-4f2a-96b3-68ed0b41b642",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "14257507-e9e2-4574-b004-bb7aeb20a191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1187a5af-225d-45c7-b8a9-eb35fb5bd0ff",
        "cursor": {
          "ref": "b757102d-e944-4892-9aeb-fb7bdff59432",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d7a98163-55e0-415f-8b20-d4c7659d6684"
        },
        "item": {
          "id": "1187a5af-225d-45c7-b8a9-eb35fb5bd0ff",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "23d57db3-2511-47a3-b40e-a0e90d5b9a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3414aeb5-cfcd-4c2e-b69a-fb6bfa8d569b",
        "cursor": {
          "ref": "acb31768-c147-4b24-8cf4-f621a2cfdd59",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "71c6b7c7-6c94-43e5-899c-dbc2b972ad55"
        },
        "item": {
          "id": "3414aeb5-cfcd-4c2e-b69a-fb6bfa8d569b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "67bb1695-8fee-4b9f-8ee6-97729ada327c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db111cc0-b469-47b4-a3c6-07ba3cc04b8a",
        "cursor": {
          "ref": "4d7400fb-65d2-4887-8971-47e6e8ca348d",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8d5faf23-b2eb-432b-8a92-633314a37f22"
        },
        "item": {
          "id": "db111cc0-b469-47b4-a3c6-07ba3cc04b8a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "19a01551-1bac-4f48-9a9c-b6e290b51587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a1d3213-5512-4d98-b52e-a50fcdd6aa28",
        "cursor": {
          "ref": "2b4c9225-4e5e-4411-8b33-2709d481915f",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a5dac2ad-ae04-4324-8183-9a5460c5a05e"
        },
        "item": {
          "id": "6a1d3213-5512-4d98-b52e-a50fcdd6aa28",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d8c71cc8-4b09-4164-93be-8c7b6c4ec4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f3e5f0-d8aa-4b06-bd15-d1da89bbf808",
        "cursor": {
          "ref": "46afa64e-270d-4dc3-9e62-b4b268342771",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eb4600e2-1cdd-48d6-983c-147f02c2c99c"
        },
        "item": {
          "id": "72f3e5f0-d8aa-4b06-bd15-d1da89bbf808",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2b277067-faab-40bd-b651-8f1ff95ae8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dcb5d6-e1f3-4f35-83fa-9658c2d0f5b0",
        "cursor": {
          "ref": "8e12a2c1-f971-47d6-95de-07565e55e94e",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fbc7b810-07e2-4bfa-8a5d-23b9041363cf"
        },
        "item": {
          "id": "50dcb5d6-e1f3-4f35-83fa-9658c2d0f5b0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e55234b9-da5d-4f3a-8b3a-b311208d480a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef043995-cc50-47ad-a51f-3eebc1e16d89",
        "cursor": {
          "ref": "24a9b210-61b7-4521-9aaf-23f1ded49c3d",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "96fada16-ce5b-4da7-b9cc-bf38ada3d576"
        },
        "item": {
          "id": "ef043995-cc50-47ad-a51f-3eebc1e16d89",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0e798882-a735-4d69-9670-3e31944a3c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57ac759-1f02-4f39-9029-43b2f6f9859c",
        "cursor": {
          "ref": "3d3fd18c-a761-496f-b06f-5acdd8c673fe",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8c80c946-3614-49ef-8ccb-de94ebf8d62c"
        },
        "item": {
          "id": "e57ac759-1f02-4f39-9029-43b2f6f9859c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "58cad6d9-24c3-48e4-9d29-2b23be4d2c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5132d031-b453-4da3-9116-0a9f8f488a01",
        "cursor": {
          "ref": "93ab5897-b839-4825-9794-617fee580bfd",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2cef2289-66cb-440d-831e-b0402e29d080"
        },
        "item": {
          "id": "5132d031-b453-4da3-9116-0a9f8f488a01",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a41c769e-2988-4775-913b-9d12608ac629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf3bc4e-10c9-43f0-903b-a6a7b3b99646",
        "cursor": {
          "ref": "50341d46-e136-4950-a843-85371b7aec82",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7b077976-741d-40e4-b961-64e01d48bebf"
        },
        "item": {
          "id": "7cf3bc4e-10c9-43f0-903b-a6a7b3b99646",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e78c6306-6e25-4db9-a29a-c557783c95c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd871bd-3df1-410e-88d7-f4526de76a64",
        "cursor": {
          "ref": "01687022-0404-4309-a42d-ce8d972376f5",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d0927183-3080-45c9-8417-232e5461e300"
        },
        "item": {
          "id": "3cd871bd-3df1-410e-88d7-f4526de76a64",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ca79c632-a877-4e82-b94d-997a25d2856e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0bba55-1245-4009-a392-1a7bdd532b9e",
        "cursor": {
          "ref": "762f47ae-fae4-498a-9dc9-462e3701db3a",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6fe6b2b0-ddc5-4716-a6e3-ac9f465c1165"
        },
        "item": {
          "id": "4a0bba55-1245-4009-a392-1a7bdd532b9e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "99f782d7-11bb-4163-984f-a7e3003ff606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9d6d58-734a-4513-bcff-4c5a61ed72ca",
        "cursor": {
          "ref": "c0b6ede0-b222-435e-a9b5-7a05961add96",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a03d8658-0276-46da-a40d-54eaa81ffad4"
        },
        "item": {
          "id": "9f9d6d58-734a-4513-bcff-4c5a61ed72ca",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3c25c6ae-3c9c-402b-b896-67862c4faa3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ed4c9a-b10b-445b-a6f4-79272eef5ddb",
        "cursor": {
          "ref": "bde2f9fb-c222-4f3b-9f7d-c00a6dba98a6",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c71b1d27-b5bf-4a05-b252-c1c5470efbfa"
        },
        "item": {
          "id": "b6ed4c9a-b10b-445b-a6f4-79272eef5ddb",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cba7be61-07e6-4e89-8552-03914614b806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac160210-5cdd-4b00-9379-b48ef3c83a43",
        "cursor": {
          "ref": "90a794d0-fa87-47f6-8b6f-5d5af099e768",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a31f8e1d-cc4c-4f30-9f43-6e8c624490e7"
        },
        "item": {
          "id": "ac160210-5cdd-4b00-9379-b48ef3c83a43",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b0dc6b8c-5027-428a-9c33-34514e2ed7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61888b4c-9768-435d-a515-2651586321d3",
        "cursor": {
          "ref": "72e779b4-366e-4d66-a75b-413e4958e895",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "535f4439-919e-408e-8161-4eec9f3efb48"
        },
        "item": {
          "id": "61888b4c-9768-435d-a515-2651586321d3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ead43f24-cec5-4e08-b736-f030326ca7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6a9293-b5f9-4152-9e07-4c5ea1c1166c",
        "cursor": {
          "ref": "116279b3-9217-41e0-8be2-972086a5e6f6",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e8f46cd3-db6f-40d1-b67e-b4215152c274"
        },
        "item": {
          "id": "5d6a9293-b5f9-4152-9e07-4c5ea1c1166c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c13d3755-fa19-437e-9dfb-b5e0fb08b5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4317f8-61e3-441d-a742-b9a7746a3b6f",
        "cursor": {
          "ref": "d46a6e30-2803-437a-9fea-5d30d1e4aee2",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d7a707c5-e0ad-4114-8945-4b4914f4b0a6"
        },
        "item": {
          "id": "6c4317f8-61e3-441d-a742-b9a7746a3b6f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b70de7e5-b2b1-42f5-9696-ae735bc143dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7898e320-533d-4289-9d0d-c139252c35ef",
        "cursor": {
          "ref": "9dec606d-d036-4b4b-8945-dfcad82c1140",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "afe26064-f8eb-420c-a6b2-0b34cf432966"
        },
        "item": {
          "id": "7898e320-533d-4289-9d0d-c139252c35ef",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "85e78e33-72c9-4d22-8bc5-fd26162a706b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8175e6-6dbb-4e91-8474-a3586b06d118",
        "cursor": {
          "ref": "a6b172f2-f013-4464-b69d-ffd0a359adeb",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d92c211d-1d72-44ff-84c3-31275f4416f8"
        },
        "item": {
          "id": "fd8175e6-6dbb-4e91-8474-a3586b06d118",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a7b3724e-2667-4e4e-ac6f-33464dcdb4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8e9c08-7fc9-4ff4-b139-c947f70b2d44",
        "cursor": {
          "ref": "b7dbbd21-d0cf-46f4-bbcd-a36383ece64d",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "07647b8d-9c6c-4171-8be4-b996dbb7c220"
        },
        "item": {
          "id": "8f8e9c08-7fc9-4ff4-b139-c947f70b2d44",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "76e4c06e-6566-478a-bf6f-1821956f842c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2adb81-89bc-4aa5-9f1e-b6003040b3e7",
        "cursor": {
          "ref": "2de3a363-c16b-4e54-b0b2-dbe57934d48c",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4e87af5f-b015-4ddf-a3be-adbb9c214b8f"
        },
        "item": {
          "id": "4a2adb81-89bc-4aa5-9f1e-b6003040b3e7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "16ae081d-fb6d-4c8a-a56b-478fb00f257c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff368e7-c0b2-4d1b-819f-8e79d2c80c1e",
        "cursor": {
          "ref": "e1d99cf3-4ec2-4dab-bdfa-08e1abf4c7cc",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d3f21b20-13e3-4f66-b0e2-52732fd87043"
        },
        "item": {
          "id": "0ff368e7-c0b2-4d1b-819f-8e79d2c80c1e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f69563c0-6f76-44a7-9c99-c4b4303b633c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c71368-f9ed-4903-822e-6294b8888dec",
        "cursor": {
          "ref": "4a9caad6-5a14-4365-bf29-ef673e44cb55",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "78227cc2-a06c-4b35-8799-f170ef0a174e"
        },
        "item": {
          "id": "09c71368-f9ed-4903-822e-6294b8888dec",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3b8d96ef-ad5d-4254-bf6e-e451c0dcd597",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 80,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58b32c1-5f1c-4e52-8f66-f8051ac7494a",
        "cursor": {
          "ref": "fd88abfd-757d-4c2d-a7c0-2cdb3676363e",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6d0d9d27-fc49-4185-9059-cf9d34c7f682"
        },
        "item": {
          "id": "c58b32c1-5f1c-4e52-8f66-f8051ac7494a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "49391700-4d86-4799-94d9-03b95fb489f6",
          "status": "OK",
          "code": 200,
          "responseTime": 1442,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edb2dc3-568b-4512-8b3e-b7c299f40ad1",
        "cursor": {
          "ref": "24a769d9-4c6a-447e-8ad5-39dd9ed3074c",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "249d2039-e2dc-43da-b1c6-412335c052aa"
        },
        "item": {
          "id": "0edb2dc3-568b-4512-8b3e-b7c299f40ad1",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "d40462bf-a883-485a-b2f4-8b4bb41c8b8e",
          "status": "OK",
          "code": 200,
          "responseTime": 728,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d9cb4f-aaec-4663-a757-25aee064ebf2",
        "cursor": {
          "ref": "47498c9d-2849-471b-87b0-78a1cb60467b",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ebb649d5-a154-495b-aca8-2ffa259034e9"
        },
        "item": {
          "id": "79d9cb4f-aaec-4663-a757-25aee064ebf2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "62e14dfa-fce0-4e45-accd-838719ab8561",
          "status": "OK",
          "code": 200,
          "responseTime": 650,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccfd14f-fac8-4e42-bd2c-795fe64e9c92",
        "cursor": {
          "ref": "20338d8f-3f3f-4305-8c8b-5805711b95ac",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c9b12874-b59a-4019-b230-00a031c4f835"
        },
        "item": {
          "id": "0ccfd14f-fac8-4e42-bd2c-795fe64e9c92",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e44364b-6b47-427a-a91e-a514a1dd8b78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccfd14f-fac8-4e42-bd2c-795fe64e9c92",
        "cursor": {
          "ref": "20338d8f-3f3f-4305-8c8b-5805711b95ac",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c9b12874-b59a-4019-b230-00a031c4f835"
        },
        "item": {
          "id": "0ccfd14f-fac8-4e42-bd2c-795fe64e9c92",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e44364b-6b47-427a-a91e-a514a1dd8b78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccfd14f-fac8-4e42-bd2c-795fe64e9c92",
        "cursor": {
          "ref": "20338d8f-3f3f-4305-8c8b-5805711b95ac",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c9b12874-b59a-4019-b230-00a031c4f835"
        },
        "item": {
          "id": "0ccfd14f-fac8-4e42-bd2c-795fe64e9c92",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e44364b-6b47-427a-a91e-a514a1dd8b78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac980be-2a9d-4723-9fa7-ecaef8c5e671",
        "cursor": {
          "ref": "9a43dd65-85c9-48a4-8398-140273e61b94",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e1d1ced8-2f31-4f9a-8163-e0af36fb9ad0"
        },
        "item": {
          "id": "7ac980be-2a9d-4723-9fa7-ecaef8c5e671",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "87dbe570-4e38-4b60-bb45-d7f8b626297e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079929e8-c2c3-4f0a-beea-b4b92a731c7f",
        "cursor": {
          "ref": "e3ade766-00c9-477f-9396-7a51ca18e9ea",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a27beb46-9653-422b-9702-5293a80d77af"
        },
        "item": {
          "id": "079929e8-c2c3-4f0a-beea-b4b92a731c7f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "24e5c84b-5a59-43be-b7fd-f178db9d1d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "079929e8-c2c3-4f0a-beea-b4b92a731c7f",
        "cursor": {
          "ref": "e3ade766-00c9-477f-9396-7a51ca18e9ea",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a27beb46-9653-422b-9702-5293a80d77af"
        },
        "item": {
          "id": "079929e8-c2c3-4f0a-beea-b4b92a731c7f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "24e5c84b-5a59-43be-b7fd-f178db9d1d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e08462e3-6e00-443b-a911-2b6ded5f358a",
        "cursor": {
          "ref": "7719eb6a-ae17-4bb5-a4c5-ce704bede746",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8599c1b0-047b-4a0d-a56c-71d44b442ef3"
        },
        "item": {
          "id": "e08462e3-6e00-443b-a911-2b6ded5f358a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9c427b35-32ce-4bf6-a800-4f8397fde021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0b8f85b4-5782-46a1-81a5-90ca53eac025",
        "cursor": {
          "ref": "8f8045f2-3542-446b-961a-fa07eae53714",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b0f46d81-be1b-4a63-8483-899be4bbc0d6"
        },
        "item": {
          "id": "0b8f85b4-5782-46a1-81a5-90ca53eac025",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "38131d46-1a2f-4f31-a4e8-12b25adc2139",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8f85b4-5782-46a1-81a5-90ca53eac025",
        "cursor": {
          "ref": "8f8045f2-3542-446b-961a-fa07eae53714",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b0f46d81-be1b-4a63-8483-899be4bbc0d6"
        },
        "item": {
          "id": "0b8f85b4-5782-46a1-81a5-90ca53eac025",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "38131d46-1a2f-4f31-a4e8-12b25adc2139",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee198ce-876d-4aba-bec2-d46ef53e2825",
        "cursor": {
          "ref": "42833d39-a4ce-4f81-a9e9-8e337abfeb12",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1ad6aef5-7777-4f8a-b5e5-abd6cbef8d1d"
        },
        "item": {
          "id": "dee198ce-876d-4aba-bec2-d46ef53e2825",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "be8d6c63-f401-480f-88e3-5e8fd7b33b1c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 68,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}