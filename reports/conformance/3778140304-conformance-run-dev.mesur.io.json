{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e361c691-d80e-4447-9c2a-f611c99901c8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fb2d9aef-905a-487e-89a0-569e42583037",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a33b4175-c3da-43a9-a062-d53307638fba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "94cf346c-2eb8-4460-8365-d7d6343a848d"
                }
              }
            ]
          },
          {
            "id": "7f3f0d0c-96ef-4bd6-937d-2ac06a28b3a1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb2dbbe7-6617-454a-b8e2-488b45ea8488",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e8821e9f-1a4c-4df9-bd54-bcc2f185de25"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ae10bb46-26e1-40a2-93ea-15522ebaf4fd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "eb97ff78-e501-4047-9c4c-96999aa45ba9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "267e481e-9a8f-4c7c-830a-89a500a04e0f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11962dac-0f88-40b8-ae9a-77544d0751b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f2c83dd-fd17-48f8-9255-f0df473975d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "72d8d9b5-4554-4d41-8324-d79e136ec3ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "712ed457-b9fa-4598-aaa2-38eb84cd81a5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5e496bd1-26ae-40a5-b9a0-caf993fff593",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c315354-11a9-4be3-88ea-fb3d4999e807"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6ead908-7bcd-4111-9c43-bc45cc9a0e67",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "32086d4a-3d23-47f4-a836-cd7672be2060"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dffdf80c-100e-4fb0-927e-ed9c165967b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af0fbbfb-08cb-4b85-a766-852f6f949ab5"
            }
          }
        ]
      },
      {
        "id": "8bbbe783-cc20-4a38-b0bf-30a4a78deed5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cc7136ee-e139-4f24-a29d-5f909b0456b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9863c64f-a7d5-4a54-9315-3dc2e84b7dea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b1d2ebdd-c6b1-4ddb-9cee-a4ec825043da",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b72da0-7f3d-4b4a-8561-ad155eaed537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72c240a2-1764-4d93-8c7f-f70f1b575ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f143fe30-9125-4c23-8e94-7f9296942777",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983f778a-427a-4871-885f-3c81842ce9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d038666-fe2b-4fde-8e6c-160e26efbdcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d927df87-310a-4eaf-b758-b47f387189ed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a302b423-923e-46e0-806d-213438027a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ff5c097-0f5e-42cf-baf8-8f8324bcd1ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "165b2ae4-b5ac-4844-a97d-b5ee0257dd03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec8ef3fc-38a5-4a2a-9dd1-e79034af5f1f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14fdc830-5f33-4db2-b39c-72bff0643b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "551f35e6-8d74-4886-9eaa-e8f0bad92d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8f0ed0-f86a-44e6-a18d-ac9109203923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c89dc06f-2a0b-474b-a5a0-f5c810775c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51c2229-b93e-4e9a-bd85-6ef6db06085c",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac20050-615c-4356-8b58-f6bf180bba1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cabe95a7-3bf5-4c64-817f-b77e63c30840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973ec8f3-00fa-4387-8875-0e5a2d57d549",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "fc645d2e-0c39-4ff6-9132-715d44e4afb2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "84c75c56-f3ea-43ec-b247-bd97b48291c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5713b237-8ad2-401c-9eff-146531bebb07",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf31ae56-8bbe-41fb-a4a0-5f393068be64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "907c708c-7e4b-4d43-bfb3-1a4fdd4b1710"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97c68efb-e9ea-41f7-adbc-64f9b7364046",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "540d749f-4608-4fa6-83f2-cfea58c64c55"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc48e24d-0a3a-48f0-9252-5629a9bb8738",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6be6e871-ab58-417c-8d8c-649a5b1f9cfa"
            }
          }
        ]
      },
      {
        "id": "172b512d-a5ad-4539-b3b3-ce1b2830d95b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "17539ef7-fd08-4e59-b7d3-ffa3a8cbc927",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e41dbe4-43ad-469c-87c1-f8a267f9b022",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c02ef03e-757b-4ffb-ba18-88c3eda84cb5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469877af-ea8c-45ea-bbe9-52c8d2a91ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f94b7fa-ffad-4343-af6d-c6c1c62f352e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54b4a34-cb21-47f9-84d4-a9bf5904cb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00a44d91-6eab-4f98-9e07-d332a7b5d25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f308060f-1166-4b71-87bd-4285387dc1dc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12989141-9df9-4057-b118-e990476a7e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e111a5-a521-4451-8bbe-4f1ee6fc9399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675090c4-9990-45a1-afc5-4fdacc42edd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d86e6ea9-85dc-4c98-8342-9d267b67015d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb65eaf-fe67-49c6-88af-481a61f81531",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589df782-5495-403b-ba03-4e39d376decd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daea8349-413d-43ff-83ce-6e15a559821a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6a574c-cef3-4f84-a41f-478219eefd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbae3a54-801e-46b4-b093-9851c60d1164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e96ea4-d612-49e5-88b6-de1195a38339",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eeb9ba8-9ba1-4d2a-a68a-b30e0bcbb79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc13bad-ee46-4504-b7dd-063d1a2f7771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4de9381-e379-4b58-a040-470b06725a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2820ecd4-1933-46dd-80de-777313e803b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17db80a-43e8-4519-ae21-1dc8d2f9d09c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c977e7ea-e876-482c-aa45-079aa5b897cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09eb3027-a4c0-4993-940f-4542aa4aa737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d310901c-b8ef-4a0e-abb7-b1e71c23fa32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28668ed1-bba5-4883-99b2-dcc46e9df0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f42d7d-2aa1-4f32-93dc-f249850229ab",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7313d944-eee9-4e49-a333-1219ee618235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde3307f-8f28-4bc8-b277-13b224f952fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98377fc1-c2a0-4729-86a8-b8a855e18a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da066d27-3704-40f0-b4f4-0a389f92efd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dc6d32-405c-4484-a093-3cf12ad54589",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883c5fcd-4111-4d63-b9e1-bf689a0e70b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2285304e-432e-470b-a778-c893c84121e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33fe4ad-669a-4bdc-87b1-0c4561c65f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bd06ede-31a1-47a5-96af-7ad95d7b08a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd99f86b-5532-4f8b-bedb-d6f24da42591",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8ef9a4-fd38-4afe-8533-750850304c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162a435a-c98c-4b9b-b6fa-f2cb2120a0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec35ca2d-b6cc-40ad-9cc4-b90fa837a620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cf2e46b-13ce-4402-8078-ee11ac702f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cc819a-55e2-42a6-bb20-616310f30163",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f538964a-6bde-4572-845a-7a1b0c4854da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0795e3-c7eb-4110-8080-c598ebec70e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e651aa7a-c45d-4754-931d-5edbf553592d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "765fbcbc-4e98-42ec-8ccb-ad5222fdba05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beab289d-be12-4669-ac7c-ad95b0c7659e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b657f1-8763-403d-baf4-f8e76e8f06c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25225d1-ec31-477f-a43f-d9b7d5510031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90814e2-42f5-45ca-beda-3c0f39d42105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f087257-30c7-47ac-8b45-3fbcabbe4fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6674ea-36af-498a-ba81-c49074d60283",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822d5886-7c7b-4116-9c5f-d34fa2ede34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea95f64b-4205-45f4-94cc-6ae5437918ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db22dd3c-fdfe-4483-92b1-de5450a41ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73129b12-b352-492d-9bdc-7fce0d9a2851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ba421c-a1f4-49b8-968d-657490cfdad5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e5807f-5269-4fed-b553-aa4c22426933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91eb8a7c-5037-4a73-8242-dcb0ec081b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ad2c29-1ecd-4afd-a581-ddbc65b55643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5873030a-95fd-4631-a436-48755a3026fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca477a9b-09fa-4648-94dd-56157a30a1f1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2365f8-5f24-41d0-b7b9-5c1b51f142e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec48346-cc4b-4e3a-aeda-0c3d9777592a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5194483-ef81-4f3b-a4ca-b0e312b717c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "008a25dc-76b8-4689-a97b-b8ac147db1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bfab85-8576-491a-bda3-18f2e836a00b",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aefc136-af85-4e04-949b-474dec236c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca64f8ff-e0dd-4af1-9ce7-8b2e5450aa10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b922516e-0e7b-44ad-9e1e-748c89aab80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb8ad34-535f-48f8-b8c0-35a76b8d3f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4a9aa8-34b1-4d64-9e2f-c885cecc1d8c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7342fd-adbb-4a78-9c5a-521b3cba8e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7adf23d-3216-427e-894f-ba682c04d315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85690eb7-73ac-4589-8ec4-9acb1ee1adf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37be0ae0-8236-49ff-91ca-cd3aeae017df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd511af2-826d-4627-9cbb-c18007580444",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d5b34e-d75e-4e5f-a281-1bad250fa53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ab914d-860d-4078-a943-18c381d4bb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e67bbe-056e-4dd5-91eb-873ee2f34cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "534389b8-0a2b-44f5-a7d7-b665070c8223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d767c95-029c-4cf4-a196-7cde75eda7bb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569b3207-31af-4657-a5cb-4597ea00bb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a555e6d5-e67d-4fb7-95bd-6c39d0e91be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00d19fe-1b3a-47f2-a255-e8ecaba0546b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3fd34af-543c-4f5a-96d7-f75f1fbf00d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ebf477-80c7-42ae-b144-3db920081ce0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0695ccb3-19d4-4b57-bb72-64212b31a2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5865077f-3475-46ab-a720-757d055cf35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e174c2df-8bb6-46c4-bd80-9cb7cb4430b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f4bd7f5-d9a7-4843-881b-faf7fca0e843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47df593a-d869-4945-ba1e-486f83d4740d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5753d5e-6d1d-41ef-b04f-dbb1e7a80f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5bbba5-a30f-4915-a3a7-0a00a362a365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8e5d32-de69-48f6-9f64-45046c1ba132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ee938d0-c6a5-4a7d-b424-98c39af8eef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bc6a35-6e1c-4334-9d25-cc0a8b5b42a1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3d0b1f-3265-4768-a426-a15d9afc5862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958f97ba-9ba5-41e1-a25d-995c763f4243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f962f7e3-b9ca-446e-a63a-c0517760178d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "351ef9da-b9d6-453e-ac42-0c0ba3330e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff8ac95-f92e-491c-b290-2f1bcedbe392",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1c847f-a8b2-4809-ba48-db0d34db6230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a14cb4-777a-4380-b4f1-b0ec6c7c40f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d73025-d456-4f49-9fe1-d7ef5f46daad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00d9445a-6249-45c7-b4f3-4aa2ce0481c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87493c0-9036-4179-9eb1-51c2ccfefd32",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd96b248-11e2-4c80-bdf7-362653bd32a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb48e76-29cd-4080-82ad-3bead18e6774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332cf59b-9357-4e01-a62c-ecfa4a0f7454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c342601-2895-465f-934e-70ce6b18455b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2129e921-92ac-4a3c-bd5b-a101d3ab04b1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280b7edf-c81f-4aa1-8862-6f70340bdcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989236fb-e578-4755-9f6f-512a87201850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af905bd4-07e4-4d79-a893-058963d3267b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5f6cf2-8d42-4003-821f-e7126ed13f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc235c01-ca33-4dd8-9e4e-e3ee2540ee85",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0820be66-54f4-4c1f-9e11-091b1211d6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790be51b-ff26-4529-a61e-49ae15a3c7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6717a447-fa27-4327-ade4-b1cfe3e4f83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d29da44-4aee-4763-9d3b-96aeb7988fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7387790b-1453-442a-a5f1-b05fc9945e4c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803c60b2-3d72-47ef-8348-825a9eb07bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ad2aed-1daf-4869-9fc5-1cf9d37601e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d512abf-7ead-4d34-9b59-370603e8b035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb10e7f-accf-4b88-9426-5c5f3904a531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac05fd92-e999-4458-b561-30799dcfca93",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d481437-2cfa-44bd-8488-9fb0d98ecf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf0101d-33c6-4391-ad48-a20c5b10c3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88814d45-2f0d-4a44-84ed-62b62fa7b740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "13994934-1c24-4061-9d00-641e2067f3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d768d05f-8ab7-448f-b46d-cd68b5b6cd9f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55359d30-8d40-44be-8718-c38748c79821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f4b59a-b631-4589-940b-6cb00aff9575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c49fbd-5bea-4800-b489-7bf823c31ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5f8048-f2ee-4b1c-b56f-60839a5302b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe95423e-0c2e-4a81-8459-c7ca00107cda",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b549d0-7c1b-4d27-a0a5-6feffcde1673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acfdda2-50b9-408b-b487-ca17a999ca55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599b9d8f-412e-449e-a4dc-e649d0ee1cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b46901c0-3100-449f-9dd5-7965b9c997c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d457262-fe63-44a3-ad5e-219aed20d5f1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c053de90-f08e-45a2-ac44-b30dda6aa622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d872512d-2446-445c-811b-13c0aa24a33a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed720a20-5aa8-418f-b9d7-38f1d3a1cec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca9b2ea-07ff-44ab-a5a9-2805dbd37030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc222b8-c2b2-4b45-b044-5e9036d63bf1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6ff79b-ffc8-4982-83e0-a595d347b768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d6713ee-83c3-4243-94c1-33969caf659f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57749550-d8ab-49c3-a647-994d2c4c4c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1712db6f-d028-4f57-b9b8-d8b779e5e99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44720b87-bc4e-4af7-84f5-d5e453a235b0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126bac2c-b77d-40c6-8a91-4480bc3b11e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba93e81-85f3-469b-abce-417c9bec7b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2780c37-7c56-47d6-a365-2556ef8ff850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea914e4-c5e6-497e-ba5d-b837adfba1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc27faa1-7c58-4e9f-bfd4-bfdac6bb4091",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2bb917b-0b74-4053-85d2-c5c9dc547292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278ef616-2a69-4c68-ba5a-4559a9709f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ef54dd-d39e-4435-878d-33363a76d067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b35a39-ddb7-427f-8336-1f199334b6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b11191c-1eb4-4659-b95b-8ce20babc044",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93216ca6-2475-4290-beda-6f528f88bc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e3519e-4e81-4807-9675-7780a54c5a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0d3c89-bb88-40f7-9a9b-c1fed62bac0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b66f9988-9de2-4e2b-bfd1-884a14c10edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd628ef-8b7c-4bf3-810b-8ecc606322c5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5390efed-eb1c-4829-b172-eb677182d67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce67395c-d6db-41bc-a81c-853826cf7e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714c8d99-5faa-4b60-aea4-dfc1dfa9e88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b59b56-074c-4890-9ecb-c5770dc593bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4016ff23-404e-47d2-832c-178a08b46f44",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db61538-ed4d-4913-9d92-90d2287da20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d04840f-085e-451e-b326-4e76c144aa20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414803c5-4725-4174-b278-d67138930e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1ca4a5-b682-4867-a130-873d7b1428ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee436a98-2c84-4520-b8c6-6d3d080c9fb0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb99e4b-f8ee-45a4-8233-b83f679955d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96a03c9-3ea0-453f-ac5a-972428299ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414a1d0d-e31a-4ad9-8d61-21105d6a2172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b74cd52c-d70f-49a5-8fee-499b346d534d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d914b17-0fbe-4f2d-8811-82b69960c163",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad3f3ee-4a66-41f0-aea2-2fed67fd6081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af4d440-9644-43f9-937f-bfb3d90ff957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f22e83-1678-489d-a5d5-3ef867bfbba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6e3014-832f-4b7f-ab4f-73e7c8357c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2416c646-cb93-48a1-84c0-6dbf211a9b1e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d18f662-5c5c-4ce5-8ed3-0294c8c303a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fba3f85a-9f6b-4bf6-8b2d-49794af8bca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e62189-096d-4b41-b7dd-703d59986312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9c90dd-7152-49f0-9776-b4709feb36e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ce7c92-5f36-4030-99cc-9da91f6eea76",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42377ce-6765-41e1-bfcb-512df7a9b487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8043e21e-7ef3-4a44-8629-cecc328a14a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13343de4-d9ec-42e8-9079-5eaa293febcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13b41133-3d2b-4b8f-b29d-be2424b613bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddb6f53-46ed-4065-ae10-f8b7e35c19fe",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d990b7f-254b-46ab-a81d-f62684ac165e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53967220-8597-41d2-9267-ebe4cfddf5d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcb03fe-4278-4fe0-81d3-0c1b78bc85b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5a522e-0f66-4693-a4c9-2f7ac609666c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0214eed6-1e4b-4bdd-aead-f315c6d2c219",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b0aa22-936b-42c6-8851-d4e63e6ef37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d64a7e-e9ee-4307-a254-365f76f84be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be320cc-33d4-4518-b137-a05ed11660d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "523286d1-e652-4ee3-81ce-54c8855c70de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9580b7c3-56d1-4f73-9b3d-0e10207662f4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b3b9e6-0d47-426a-abe3-81b755d794b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99faac98-0da3-493e-9830-27fc893ce6fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4065eb-aae2-4971-bad9-21dd984cc09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2888f04d-2eaf-48df-aaa4-c7b874dbd47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8ac141-6972-4054-abb3-902371584080",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456aaa5d-2404-4edb-88f5-dd67b71b4afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf68b41-416b-4602-8f74-19ca2d61db0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801eb8c5-3401-4a7d-ac4e-f535db356ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb7eb26-d5ee-41b9-a306-8813add6f528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1b39d6-7548-45fc-9250-9fbe806ba0f8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87772d6e-8531-42dd-babb-56bef2b1a4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5e5ac1-0489-4ae7-b200-7b4d5d46bd81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b408b1f-887e-4eaa-8377-a23c004410fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "38fed185-2361-4788-a847-6b21e62bfbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4b69dc-41cd-4649-ac17-8b01bf4aa67f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a28dd8-e13b-4165-b85b-631af22c6c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408a202d-4406-4d65-8f14-b039c767f633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435b496d-6370-4e91-abcc-afbd628a962a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "559bf4d4-6aba-45cc-9a6a-b23c4785893f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e15c3ea-827b-4437-bd40-93142e2d2556",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c888ae-d908-4d76-b916-2ae3fffef63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9508f88-a3ae-4bff-9415-36ebc54a1c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec1f776-dd25-495b-bc76-d905fda2527e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1ddc56-ac81-4e3d-ace8-6a2bb137606d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cd9fb6-e623-47d1-bad4-8ed8ed46c4c6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9645aa6e-5d8d-4a8b-bd8e-3852e3130dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f33c69-f0c4-4709-b61f-9bf3992af5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0e8839-0944-4540-abe7-8699e658403d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "700d3ba1-335a-4a56-811b-cffe7fdc4115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c7ded8-1a0d-49a2-8f68-3e18d3ca5bd2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3549fc-fa08-43c3-bee6-9db3a75dd26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4006cdb-a4fc-400f-abb4-03327df566aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a300565-3190-427f-9da8-bce957211788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e846c98-ac63-417c-bcca-76eabfc00aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15330483-52bc-499b-af3b-809c3376093a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29126a55-50c4-4975-b4eb-b5faafe05e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55f5744-103f-41fd-9f1b-26cbdfc8939d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0dc277-e1ed-4ffc-ae07-d1be58aaa721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44c77779-6b2f-4c6c-8928-49aa0ae6bd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01448a6f-654a-41d8-92d7-4d89f8c90013",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66aef6b-b62d-44d5-843d-294de01c2675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28aff32c-8f79-4a2c-8e4c-8afb6ba4dbf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea8db39-630b-4b2c-9034-a2022dc10094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf441590-48ad-43d9-bb92-90af9e9aa036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67e2f26-b005-4ecf-94e5-0528a5600554",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce5b8af-6a96-418a-9492-3d8146964a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aeca6b5-e258-45a0-a4ca-d5119fd963e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d733f5-c0d5-4bad-9591-203cbfc013c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85734b19-5838-4ff6-8155-538115dddee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d084d6e0-8ac2-40ae-bb08-e8dfdd5d48b2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864f19a2-cb38-4bae-9f85-704a2387bd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eab2116-48aa-4984-8fb1-5ef74258f54f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5d9d2f-ea67-446a-b1cb-6b7086dc8f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc20068-538f-41df-a619-65f4450c55a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48fa678-ca8a-4a72-a0c8-c6d646aa0df8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd7eb36-c399-414c-8bb3-17c80c4f091c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0048a6d0-285e-43a7-bdcc-0e5318bc575b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ae7a06-8b62-4d73-90a9-2278bdbc4ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e490de-559f-4576-b024-22dc80cbd432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28efa754-e3c9-48bd-8706-af02c9f5155b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d1c0bf-9a41-475f-8190-7dfc30f7a26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c11b52-92c4-4c1e-8490-df83beeab83f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a175c4-f48d-4e4f-b470-c7d934172e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52ed2732-d90a-4349-94f9-9a70442ce0ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5dd29fe-4540-4027-bddd-0205d58ea9d3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98409451-f63f-4253-81aa-46a1f8fe3d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5de188-7d8d-46d4-bc04-c44f6216c3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fb913a-a4e3-4c14-bd16-427ce39d774b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a452a83e-9d74-4b67-8bc3-0914e5d7dd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7958f1f1-f291-48d2-be7f-859a9c5246ea",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc06b9c1-7048-46a8-b3f2-ad74f971c73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e53292-f743-49bb-ba63-4b8b46a4c113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9c86c4-f9bb-4d9e-948e-70b3ad7902a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba449c10-cd79-4cdc-bf62-71c3601d25ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7290ac70-20dc-4dc8-b95a-f09b0a2a9314",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dc2471-7f79-417a-be6d-d3df6f55f358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c41f07-c85d-4328-8b24-3c03afe39235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720c00d8-6bc4-44e9-a382-5a5f0cb85859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5f160f-08b7-4550-9ac0-895a70fce1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6aa36f-6376-4dda-b757-890c743c6906",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2520dfbc-f578-431c-a5ba-84d164cfd6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4f0748-88da-4613-864a-4ef8f5db5fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a903c8b1-993c-4127-9126-8d5ff51f958d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "07e9ffa4-b98d-4e31-9f5e-7c2b478a88ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721f53fd-f9c2-4756-a8e8-618164920ece",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae83ee7b-8413-43c9-b68a-9afa423ba484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16015b4b-f248-434e-a7e3-a6b6f1e15872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094e7a15-3425-4020-9953-7ecbd2bef076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce92cb8e-8beb-49a0-94a4-43227431e47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc1a7ad-8cad-48bb-a00a-a4a54e4321eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad8de06-e659-49c7-a460-17bee9f8e8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8dca67-b374-4eca-8517-7c940c342b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b1f712-ed32-4014-9a63-7f39f39e7a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "511e9712-2b83-4fb4-8a9c-52b594180145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed4f7e8-7a83-4632-922b-207639430aca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9448b1-b81d-4d09-ba0e-a60a17aba674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b87c8b-7a90-4092-99e7-d9d146f61d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb52ed3d-5f86-4483-8035-82c0fd1c6694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ea61e9-aab5-40c0-b083-7ed3bf1b56e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7852b5c6-1706-40ab-a470-c42dd8675c73",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74baab0e-35cf-4142-b7fd-4868f101f6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb1c08b-7843-4c8e-a7fc-faa7b0731c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c7ea65-cb38-4e40-8712-713987c8eaee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4f7d82-aa4c-4a98-9532-8c536be707dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a249af-3f01-406a-aae6-ae63b674c80b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ca1f3f-7e07-4acc-a4f5-4c6c5a909cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e14bfe-79d6-43ea-b69b-16ffff5d8161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a391ff99-35b7-4efb-94ea-802168c179f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "42395f6d-fd44-46ee-9b8d-a15d97f4a30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f545a380-f40c-482f-973b-defedcf055f5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a87797b-67c2-406b-bdcd-0c1aba1b79cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26010560-1ace-4407-adf4-9d44667fe263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d7f07e-3a28-4a4e-b5b5-7e89f73f5fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "598eec9b-146e-4a92-8f18-cc9df9324632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc3cb96-6cea-48c2-bed0-bd603fae73ea",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7740f5-09d4-4fbe-9d42-301620e8251c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5318d5-4a51-4d0f-a4a1-9a6255c05279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ceb65df-ed82-412c-bcdb-b1d84894e3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4393ac2-5245-4470-9a5c-4259342ca4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c07f51-0ca5-451d-9722-b33b4b8db8f3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83d9ab1-08ca-4445-89a0-ceafba9346b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f89ddeb-e4dc-4cf8-bb9a-3ad7cc295a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad55223-52a3-4e50-a355-31e4073a839c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c945ecc8-8487-4d8a-95c8-68fec6120b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc46847e-8065-4430-beb5-3f146227b5cc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4d16b4-d7ff-47fe-878d-e69542879384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ae991c-a60a-4ffd-bf64-a74bcc14300d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c8616d-5746-45f4-80b3-7b0e8df45ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "144b2754-78b0-40a3-9a06-7b6b53418390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cc624b-80db-46fb-880d-9e1e77f0665f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f259a93b-edc8-4558-9a96-2295df09a318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b438b199-665b-4048-adb4-6ac5e87f10d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c64daa-45ff-4cd8-9ec2-859a3dfb5d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89982cc0-3e9b-42d9-8d51-863b6381d76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b7a87b-5266-424e-a52f-1ebd3c0b9e99",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb3d556-cf7c-419d-bd6f-66bcf4203549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e72e0a3-8631-4e43-9e8c-257cce1dbee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14019a49-d632-4092-b88e-ad6388e38ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f257352d-2df3-4019-9d4d-87f9eae55fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6384e6b0-d189-46d6-aeaa-35bcdd75389e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80505884-b764-4178-9985-4a44f40a7dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf0ebce-509c-4b0a-9f22-8ca25609d77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8cbad4-e8bb-4feb-840a-bfe8a549a5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "846e0795-1aeb-4731-8405-936331843df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650931e9-7ff8-456e-b11b-cb02ebfe9a9c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d591e99-dfbc-4265-9496-5258592b9974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa3d8ea-f08d-4275-983d-ab3827accf6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10d4072-69b5-4ab1-9c3f-49e8d88da6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "55ab2262-c224-4be4-8ad8-85dc5097d363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a80196-e693-4cb1-a0d8-8e455acce3b3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccaaabd-677a-40dd-ac0f-990558dec2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fae409-ba92-4187-a0b3-3264b6af7c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a241a23-bb9b-44d0-b968-d47eeafa08c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b72bf4-350e-4fa5-8bcd-4b7adf9a7731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2729c098-5999-4637-8f17-6477877e57e6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e312245a-19b2-4106-b2ae-d5b5e6d82cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e2354d-f8e7-4c36-8d55-43144447651b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a499997-3e95-4f5d-89cb-8ec361be5032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3481964-5bb4-4c26-88f0-8fbf633cf88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb778d65-cb16-4557-ae8a-2521dc13214a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b9bf80-a9ab-4abd-9253-4755f78174c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e093b5-e2eb-4cf6-9d35-f1c046fe929f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23362d8-b379-4c5b-91c2-a4621a803e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94ba7cea-1902-48ef-82d3-e41b98b04501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4cd1c6-a540-4d02-8f87-73e4b38d98e2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f600fe-33f5-4c34-a1d8-896bdfc408cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6069bac7-1ce2-4974-a293-c73939590cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2195d8a9-8b34-4201-a760-eeb68f6d129a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3bdcbb-bbbc-4dcf-8474-50958ea5edf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a888b2-749f-4304-a90f-a324418549aa",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe8d027-effe-4eda-b724-dea04711f334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec86652e-34f6-4854-994b-451cd2d70442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d054e2-ab0e-4095-9e2b-4bf6692fefcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df9bc98d-3b6e-455a-be45-9d2c1995ee95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae7785c-f5a7-47ce-ba3e-b9ad41a12d38",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b962ff5-6c12-40d6-b54e-ac47a46849b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9beb350-4f15-44c5-a337-9938ee93288a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de49123c-0db4-4753-b896-842d66184973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "adf8accb-1b2d-46b5-a41f-6c635c324cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d369299-6950-4c6b-bc31-ea628b3509cc",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf732c1-957a-406d-9786-a550c067c5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "876030db-a3c4-4351-857a-2a11ab100823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58599d9-d1f4-48be-bbfb-101da7c650c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2accfef5-72eb-4298-8339-b50a1973c6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea322e13-2592-4974-ab32-13444fb9de42",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965727b1-4f8f-4c78-a87f-75dc49872f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47d743a-eb22-46e3-a7a9-79cb66d281c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f3cb84-1b7e-4019-a00d-0b2826ac5fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00ae54bf-c794-4396-b7a4-20d102ea1240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4a5621-1135-4bed-8748-f294619bdc91",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8387c2dd-7617-4629-901a-9f132e23f866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d77caa-ba36-45e1-864b-722f797678b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9308a18b-e90c-4b8a-9301-f4a8e89c268c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fade70f8-0a26-4621-b345-2c9206be9119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c4116b-d507-45c8-b7c2-ad1cc4f27bdf",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9879cd8-f0a9-402e-833c-099725d7814a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b93b0f-7117-4fe8-a238-7f8689e3693a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f6529c-1492-42b0-98dc-c2efc79444db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42290c91-09ff-4759-a2e1-77df262b68a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4394de-ed15-45be-8a2e-8ac3a5c75b70",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973c1783-c14d-4d13-b341-ba9eb089cea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf3c138-6ee2-4c80-95dc-2f5df8e30a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c07d25-fed8-4c16-a67c-622fdfe66ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1db86ff3-823d-45d9-a9f1-e1cf98de201b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c621214e-fe4d-4394-ae82-613f81cdb9f9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381bec60-5ff0-46b2-9357-ed69651f471a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7c0743-bf20-42e4-9984-7289c59baef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4b505a-3cd1-46f7-b782-572a759c0691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c95c68e8-1e94-43d4-8f7a-46198627cdc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113cd1f5-7d2b-4391-90b1-50138180f1b8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475acd50-c51e-4f50-bf46-ae8058a25d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0f4c33-a192-47e7-b54c-69383942ad49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f28c95-c8d0-41b7-844a-0040d6322429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c0129cf-b292-471f-8989-f8d81c7fa79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ede1566-e3fa-4264-bd0b-3087434b918a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2345b0a0-1428-4694-a8a8-1d85d0149ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9848a899-2139-461f-99df-c04085371882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18724619-6ed2-4f90-866e-a9c924db757b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb57d56-ac9d-4e75-ba0d-a0e6a6f46056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99eee59-c6a5-48a8-b855-6ccb5f42f87b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e2e042-cb23-4fe7-a004-2d5701fde87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab5b8b3-ec0f-439c-aacb-637219db6df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebc895c-f08d-4172-b5ea-7c0455df8fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d99b2930-e578-4b97-afc9-92a6a7949d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a09e241-f537-40fc-a612-344f1e0622b8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7572e58a-24c5-4681-9850-2baf6078970c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e0585e-caee-4988-9828-712570be6d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96eec57c-16e0-4205-93eb-8f96c5871d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "756b7660-d6d3-4aac-8649-4d7eb16bcbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b33ea05-d5bf-4f0c-aab9-a33e4a71af1f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4ce2cc-eb43-4f20-afc8-bc3b6c0501ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b43e4a-ab98-40a3-a675-77f5a9631362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3ae3c5-b84b-4460-bdc5-80b9e62137f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbdda884-cf68-435f-b417-a6b3e9062151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d270bac-7558-489b-8cf0-f4178a68865a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915c1b8c-a6d1-40b5-9837-70af73dd8280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99330cea-b594-4f55-a348-a426f620dc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a401db2b-2abd-4b6d-9065-f85861e70681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8d2f5d-c60e-42cc-9847-5366deea7cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c9dd54-0736-41fd-a632-b6540a5ffd18",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640b174f-632d-40e4-9a00-cdec3b60f123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccf8d25-aa4e-4805-a768-af6b66c970d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c93e57-33e8-4927-a29c-5ca9f5609a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "05afdaab-ed1e-4c18-bc88-10d61bb2ef75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659503e0-b816-49ca-9b24-36aedea51366",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c330052-db88-4bee-b82d-9409b407cbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760fec9a-5a75-4c0b-9b79-4cd1806419e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e490f660-49f2-406a-96e6-df5e633963a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "23faf1e7-2bc3-421e-a64e-991a4e7ed040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4aa269b-eab8-409f-a0fb-9a7c5c3518b5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dde04d6-232f-4b38-9ae6-eafaa233f777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a018e0-5275-4ee6-8218-358679656c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb7560c-58dd-48d9-beda-1e674baba5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9442954-d936-48c8-9ca6-03490c9e7eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21c8182-07df-4c2c-ac62-e6ce3164a48c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416e7768-5a39-4556-a8c5-d415746986ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ddc91c-ab14-49a1-9383-b0fc60f260fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efc4c7d-7beb-467a-9b23-daf79a043f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb8893f-bd6d-44f3-b7bd-86969c9124c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877caaec-40e3-4303-be6b-88450325dc3b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bb53e0-e80c-4a4e-842b-47e11d8b4120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a9b26080-6c52-4b71-88f4-eb4bdfc3ee65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6511df5-ad03-4c52-ad19-b8e5faf7785a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee67751-4247-45ac-bc9c-99ea6337a964"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee7ef37f-b26f-4329-9928-80e20f178f66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dfc0987f-2fed-4215-a01d-499ca16a35af",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4b26f2-558c-48b3-af04-8a77fa30bb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfea9938-b423-4662-8bb9-19f1494b62b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d79212c-04f1-47cc-bccf-7b9e8c03d5a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "629248b4-69e1-45f0-a437-fe1a1b0e0d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aad68fd-6a51-4ea2-aabe-c7dea31dad12",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a1db14-552a-4dd7-bfad-9a8a9fb90b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae97ae93-a1bc-4f3d-af52-79be3cbfbb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54329591-5073-437c-8219-6bb1e374003f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "bab9482c-8390-4a09-8539-5ff28413ff35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "244a474e-9b54-4bc5-85d5-1d595d4ef657",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b410bf31-1712-441a-8761-8e42740890ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f14c0923-8cb1-40fa-bbcf-485274802c66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbbe0eb1-ef8c-4b1e-81da-fba3e05c486d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5eb87c1-d908-41c0-b113-1c46eb1a5bb3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba383ebf-a035-4052-a297-a163fa72bef9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "88180499-50ab-4e42-a66d-2c632b3eeb1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d158e26-e26c-47f0-a97b-4df40b1deed6"
                }
              }
            ]
          },
          {
            "id": "837c608d-c571-414e-89ae-9ddbe9393e22",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aaeae3de-f72e-4c34-9eba-b425de748554",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9eb7c99-81b3-4273-a491-fc56d1e5a26b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42504f0c-a85f-48b9-a6f4-cc2ea8afb5f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9749a02-60bd-4ada-b1f1-a1d8fac95685",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d9b4f40-202f-40c3-8e0a-baf0b722bd34"
                    }
                  }
                ]
              },
              {
                "id": "bf237fb4-1d4f-4709-8f67-cfcbfab74b6f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df779213-0c5a-4be7-8b03-1af31adc764c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7bf184d7-470c-48b4-9cb0-c999835f582a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9728bef0-80a2-480f-9368-63bc0a2edef3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "987cc022-3edb-456e-a352-92ec67391fce"
                    }
                  }
                ]
              },
              {
                "id": "67534e06-5d87-4b9f-a515-1cb68d1cb0f3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d18256df-fd1d-4833-ab0e-c224bb25f19d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "357a321e-a535-462e-aaa2-e519f08186ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75ae2bff-e796-4d5a-a114-c08b2ffb176b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "14c1ca53-50be-4733-91a2-d0f0b54ed002"
                    }
                  }
                ]
              },
              {
                "id": "f3dd3b9a-0e74-465b-af89-e0899c42b530",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "743aa77a-8242-4503-823f-43086d1dc982",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b1ac433-d587-4197-9df9-5e9283adbe5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3947272e-666b-4021-843a-8ec1257e60f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "75af4249-8649-4881-ae31-96055790a6c4"
                    }
                  }
                ]
              },
              {
                "id": "5f1901a0-80fc-4b25-9c97-3e3fe0a925bb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cadace3-3789-4cfe-9cd6-64d647d65d2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c83d35b0-931d-4a15-a40d-71ec479c11ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c440de60-c722-4584-8034-dde287033e98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7031c36f-f899-4dc7-8ac2-6b15f6d21fcb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18750322-704e-4b84-b2a1-30e1047922bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b596b51-489f-4cb0-a054-9c2d6cf340e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2f790308-6c58-4413-95c1-71b7d1859894",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0517ccd8-e139-4a0f-8111-3a2e4fa4f3ae"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76a120f7-6638-4250-9262-845af9416772",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fb2322f2-6b03-4b8a-ab48-6dde50e54c64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3d08446-5196-4331-b9f9-7e8a91f2cb6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ca33818-5ad9-44e5-b6a8-447d00e0c07b"
            }
          }
        ]
      },
      {
        "id": "ba2cc6c2-fd66-4ecc-87fc-63644557cf64",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e0c147ab-594c-4ecc-bc15-d6acc25b53de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e492559-ecf1-4b89-bc9a-fc1ff490f625",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "80e627ed-52a0-47ef-91a2-55e7bc09664b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc58fdf-adef-4a03-8d8c-949079745384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e629926-5e37-40bd-b666-44dd6d18c8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1c5a93-b15f-4440-82f5-84451695ca8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0110ef-06c8-4c29-ae40-3412ef8f0b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8f9ad6-e2be-40a2-9e2d-ff541e47c313",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ab4542-86e5-4793-8892-418214c2b9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05c942d-3ec0-4de2-9aaf-9531a0cdbed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456d9218-a0aa-4954-a952-3f96a0f8d21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f32439b2-935e-4457-bffc-4cb285eba4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4d8baa-3d45-4401-910f-22ff9fbdc128",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f2c88e-bf37-4c9d-8f78-4c2d308defe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d37986-2c0b-4b25-beac-1799ee8b0737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba65a233-3191-4139-81c6-3f45014de4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bef07718-e016-41d9-90ab-288ec888c5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d0b305-1ee5-4ce9-904f-c11c5f3dc894",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cf94c0-afa6-48df-96c2-c53f84be8436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560b372c-3ae0-4634-8d9f-6a58f512cacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de58d94d-0ebf-4fde-ac43-4844540a4eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "127fd439-7d8d-4c86-8bfe-b23195612143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4dbad2-d783-465c-bb7b-d7442892677f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57be620c-1d3d-4f99-b38e-7875063d8a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701fa844-ceed-405d-b1b7-16daf84fdfc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f79626-4f34-4add-ae65-0b7bb190c69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8471ff9-56a6-4b74-9de9-3aec63b8e020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efd5fdf-b728-490e-b4d1-ddc77fc1757b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f726c674-c2c5-4ac3-8f5c-6e71f15b77d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17730586-0b4e-45ab-aded-0721fbc5a331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3005e36-6fee-4831-9a3c-a06c87708298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6f6dcb8-4957-4df6-bbe0-40799dd646f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d6f74c-7c46-4285-b4ea-cf1434d0dbff",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da3f1b9-0fd8-4954-ada8-22af379a813f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba0b5b5-3f1d-4161-b019-b38dea803c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a016fcf7-52d2-48ee-a8d9-0bc2e4f8bad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "67a32c28-625c-43a8-8ee0-8e695e03ce34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afd265c-8a6a-44b0-a9f5-0a25ff12a33c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9028fee1-d7fb-401b-9446-1dac8528e0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc58a46b-ec93-4d3b-980e-f9338964eb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681c01f8-8e0c-4738-8d29-e1da104366a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6597a8-2a56-4da9-906a-2df35b5856db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec4de68-6043-45dd-9964-3e121124b44b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135ac234-f5c3-4f96-9bc7-49ff25a0fcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2881572e-ca7b-4e68-ad86-80e6631774f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a88fe3-2429-4733-b2cb-9e01a7469da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a7d6c0b-04fd-4b91-8d4b-a3c3826d9b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1c92f0-6df1-469b-9c61-9605d5881a6c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4220440a-fdc3-4d4e-b5d7-1e1511af436c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a2951c-7282-4382-a882-909c9fcfcbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24709703-b205-494b-9e02-db8190a48175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ee66bc-0eca-4232-a88f-cb178b650541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff52f05-1516-49f0-81b7-5ab2968ef356",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcf8bd4-0612-47c6-ac40-9ced04db5ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a879ed-2e3e-4049-9d07-260fd7db83e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208db131-ed18-4066-a53d-e8b12f5b86ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "49fa9135-046e-4ca1-9cc5-9fac641c23f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be681cc-136b-48ce-b2ab-6a9bbaecc600",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15b0c95-e64d-49e6-8efb-e80efca83306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015ead19-8a6b-4755-b69d-d28439ad254d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b029b14d-7c81-4a30-b7ac-a3e609569dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2adaf6-a6e1-40f1-b5a8-b2b52b920cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63031aaf-1b5a-49dd-a16f-c330756c7162",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574e54b5-40de-4a09-819a-36567315c5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd109153-3a38-4661-b5e0-75fec7d2303b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8215418c-22fc-4c4a-9d60-f28cf5f60742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3abda5-0606-4b0e-8e66-e8b1eea940c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87b5cd4-67bc-4fec-8bc1-5817d566de97",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70258a8-0543-49b4-9376-65e37ce3fa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27b08ea-cdff-464a-9df0-667e1651cd8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482044b6-d77a-4f22-9ae8-31afac20d68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9678f284-218d-4ef3-9593-8d4327b1c314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e1ee58-f6b2-4473-91c9-a0fa0b02403d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b015d785-d78f-45c7-a11c-3b558e378e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89eeffcd-b1b9-401f-8e54-510cd9b90eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b40f5d-62ff-4da3-b72a-ac7fa259e277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a32685c7-da66-42e1-88ce-1ac25fa236d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd60455c-7aa6-4d0b-b7b0-0838d67d1c90",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b960d8c-2a0c-4731-bdc7-0ae49aea4f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72540b8d-6d63-40e5-a441-fedb38d91a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd2b958-ddf4-43b5-9738-edcd20576178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d89353-d235-4efc-b215-0e39b8645d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca356b71-3a4f-43f9-bc3c-808e11b6984f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d82269-e48d-4d1d-946c-956c0c7e9cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9669808-be79-4599-b225-3858b645c2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d63788f-d762-4009-9859-d1ad7f4955f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "623910f3-5f06-400c-895b-fc6afcf51ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16ce437-2046-42ef-a5e9-86625a63f797",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e10b0a-edd1-4aa5-8203-058e6f04784b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266b4267-bbc2-4684-877f-94cd64dcb46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454852ec-4c92-47f8-8a06-5441f3076b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6e0e21-f3f4-4f36-ad47-a04678ed480d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4b229e-f09e-4f2e-b0e4-cbc087336a8a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d279f6-4306-4b57-91c5-bf69e3913660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30270083-9d4b-46e0-a4c9-994e09e808ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59bf9e0-7580-4c2a-b351-46c0e42cb9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7572ceaf-8937-4096-8f41-121b8a2506b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59d30b0-b375-4a81-9c36-ebe5b19891ea",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bbe00d-d9ac-402c-bf7f-8560dba30872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a6722d-d6a1-4d56-bbaf-f0befaa6c17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd625c7-b295-431d-ba3c-0927b50b7532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c96d1b27-efa7-49e8-ab3b-20e43383ccb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def43a45-b791-4557-a18e-f1efeebb7a92",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7f4497-170b-4063-b726-e2e9ba0c1f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015136e4-072d-4dae-9801-ccce7370eb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622534c5-5804-489f-a622-43cfd37a1a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "169de90a-c4d1-4bb1-9fa2-e50b133a5835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157284bd-8701-4388-a2fb-b2688a8066cb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f4d368-a012-4b87-a427-6d862bb06264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245eeb31-011c-48c5-9d43-09bdf80081ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ce585e-9b04-4923-852a-2633eb992677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63fa9ddf-4643-40e4-a896-3fc3c9a2ce54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c089fde1-47f9-4c31-a640-6a3dfa57361a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a6bae5-878f-4569-9866-fd8c1c52dfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c839f70-0628-4194-817c-bbf716a18475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f76a4db-af7c-4b01-9341-0a3e5283fa64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f9ec94e-87c9-41a7-8911-c90625ef88af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdd1e68-986a-41b1-ac58-3e3a4428a3be",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d960093-82dc-4e84-adc7-970a455472f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2302fca0-2319-419f-a728-4e9c5bc6a1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed573e74-94f9-4013-bb99-bf3036e4de7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34fc32fb-2853-4f0f-96af-34a947fb838e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a17a9c-5e7f-4cd4-a17b-c94ad4b39a26",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8646c2f-c64c-4fe6-bd3b-e25fb6ded6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534c86f9-6db0-47e1-bc4d-2c5ed37e3215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c8d748-a782-4c57-9c26-aaab08e68b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d17ea0f7-ec4a-45cc-a048-33d158831957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816c31dc-e5c8-4320-a83b-4deb2b30b98e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4097cc2-b716-4b53-b517-9310c4bacc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1015ad-e202-4dd7-bb28-e563483a746d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f6dd10-d797-4015-a5f3-f21aeb566a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "445d7d9a-461d-42b3-a4ce-4dac6e568501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4229f70-e916-4610-85d8-918bf40c3680",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2becae18-2fe0-4f0e-ac78-009a64a57460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9418fe-7dc1-468f-8f0e-9b8fcc880c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d3cba9-3b01-4dfc-8e3c-0ca3c2bd7520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "636d67cf-5ba1-4d19-bcf4-e42d5f9cd15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5ee740-d933-4a68-9a5e-5b7a19bc66a5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af52156-52d1-4d82-82ef-2ccad0a84361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081ceb06-5fe1-4a32-9718-91b73f8ea9b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd9182e-d371-4988-a2da-4fa158d241ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36b3ab69-f685-4048-bb35-5b236bca4d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e0912c-cf9e-49b5-bdf5-74fa92c7f296",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89046b6-e224-4e24-a6b6-f10de7668130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa56e2b0-c4ec-4afe-946b-2831a81b4169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20227a2-b66e-45d3-9161-b414eb384c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3f609fe-5974-4bf2-9cbe-aa8c63f5554e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c69807-eca1-4033-bf4d-00a851dfeee2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aae9b5f-fa64-4f67-8bfc-88433ef2d576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2189a0-2789-45c7-ab69-cf1b6204d567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84cad3d-97d6-41a1-9685-25316e87ebdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c29266-7273-4356-937f-2f79fa08ebd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2369064-17d7-49a9-84ae-f18f19212ddf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62dd8d23-8dc8-4f87-a615-87afaeda0277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0fdf5d2-bec8-4223-9870-394470904f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4b14b3-e1d9-4ca2-a007-664418bc2196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0ffe64-425b-459e-b890-1988f9c7f9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff094b4f-61aa-43a8-b7b2-97a906c1f20a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcec6bb-1a32-4eb5-ab35-b7c9919af49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1ac16d-882f-4801-bc49-ace0eb43e1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82294971-6147-43ae-b2ee-f0babaf7fb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba381a79-f217-4f79-a66b-d6cc42f8bd34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7d691c5f-4478-4321-89b4-55901882e2ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2db054af-7f27-45ab-9b12-1eb2273a6b5b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f61be2-69af-4b24-9ab9-c5aa1c766099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5759d109-3180-4bd6-a98b-fb280fb687ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a88a41-2a36-43d3-a59b-f62814203d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83a74610-0749-4c38-840a-58e3b2ca0429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9eba38-d1a7-47ef-aec3-86fee6c227f0",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fb6875-0686-46cc-9dbc-cf6964864099",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "998181f6-57d3-4dbf-a40a-1de1a2287e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bdce31-e92f-4af6-bacd-6d9e0f2000c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8ceffc1-b00e-4c5e-89f5-6f77e39b35bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be41692a-a18f-4757-b366-d8a2d80132cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e0d1f76-2972-4f21-9f2c-c0828b861ace"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "398f6654-328c-4286-a874-37e8eba595ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ae2b1d5-dda7-46c0-beba-023f5ca05d51"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e56eb274-02d0-4ecc-acc3-8c77b5cb445f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bcd27722-1d3c-4b10-999c-998b5bdb6104"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bee4d7d-a03f-4f35-b591-bc4eaadecc5b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a29909ee-5917-45f3-812c-0b864a1887e2"
            }
          }
        ]
      },
      {
        "id": "9733487b-f7c5-430f-9828-b2ec8b9b3847",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5930cddc-d466-451e-ba30-cc296551a9d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23bb84b2-c916-435e-ae28-c3f3f69d8b41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fce623d2-07af-4415-b1af-40db00349bd0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8577e7e-36f8-4278-9e3d-99a57bccc5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6ca1e8-55db-47ab-9571-22295c5d49dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81717669-2fff-454f-a739-50d7cdf5fe3c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b227185a-2bdc-46ab-942b-214b22aa4ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed2aac8-7dc1-469f-9c67-fe4cee22d31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220c89b0-8d44-4256-af01-721e0962460f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139484a2-559f-45e0-9deb-4d3ae8aaf177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5f8f43-2b6d-4bd5-80e5-116e0c78471c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88267569-21be-47a7-836e-ac083bc894f0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a889a320-0083-4968-b268-f638a91468c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bd628aa-654b-4072-9fc6-833d10992537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653aaa64-b63b-47fe-bdda-d152c4a03f15",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2110b8-5c87-4fb8-991b-40f4018feb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d50bea-b060-428c-8e81-6a15a6c8aab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32992cf0-af24-4d3e-abaa-feee047f314f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9caf2e10-9e37-4eb7-88d8-9017d65bcbba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad4786d-334f-42be-8898-0fbf9f986f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e728ebb5-822d-4b2c-ab8f-f169fe319d47",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901880f0-a752-4523-b0ac-9977aab526ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c6271be-2bb3-4be9-9ecd-3f0ddf450b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52424be-f095-44b5-b030-41485cb71ba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2973fe52-377f-40be-bbea-1196e396a055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6076bed3-79bc-4bcd-b0da-7175b2c40a55",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa36503-00e9-4897-8640-f479fd82b4c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89eb4eb5-c14a-4724-a7a6-86c83d90b004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49baf47d-acc3-4538-a207-2840334765a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20e1d2b-9a56-4801-90e3-5da13a6d363b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bdb863-9b6c-4392-a3a8-ed6d91147dec",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca532d3c-92f8-4e25-a931-47656221575d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5a3e73-a579-4a91-b4b5-ea513cb81e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0899da0-bfee-4592-b687-f0fea5d173fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de551edf-c9e4-4453-933b-72c7afbb5edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428c3b82-1d63-442a-be7b-637ae4a236a5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cc109d-2110-4be1-bd00-930c7c4202f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e9b53b2-74e6-4c4b-ab1f-10a0b9f61752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca818f0-2725-43ac-98c5-a246d2d8e665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06478e5f-3b32-4236-870e-ff77394d0b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4c76a7-5317-4ec2-adb9-be372a9c8c49",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3785bb-39cc-4afd-be64-1159bf062d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616df5cc-9fad-438a-82d6-d6fe26a927a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4440f47-f983-4705-b2cc-e049a52a777d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1f5aaf-f108-4fd2-8475-a2a3d9b3863a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390e7fb3-5553-4394-9f60-216b13fdbf6d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09ff18e-414b-4906-93b3-66d371ffdc29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98385957-24af-49a6-a165-b81f7d4609c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6540feff-a2b7-4457-8095-4221a7b7ef85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3de249-c73e-4629-9bce-9337190b2776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b8de54-3759-47c8-9bfc-8719c955b7d6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec1d680-708b-47ff-848b-fd8a86290b3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f48754b9-484b-4c90-9326-b32bb59e1a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba29213b-adce-4faf-bcf0-7775718c1247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45452568-376c-48a0-b956-06e0a1a0b05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1109dac-37b9-4950-a4e9-a8a2c4d6884b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8f57bc-8920-4eea-89f6-4d64b118b763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60e0df0b-b492-4d2d-ab2a-e43a7a8d510a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca6c8f6-e6ef-4723-8a45-f13da46388da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4b3b9f-04f4-4b21-88ae-28665798a8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e207271-c337-468c-b5f7-20fe9704772d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea78f85-71a7-4789-b931-39b75d61174e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8846158-bd93-4607-b689-9fefdaa575cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd3bd14-66e5-44e4-916c-8be428c1ba60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef72649-a236-489c-981d-daafa6a3fb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1b3097-c4d2-4df7-9664-616fb7095682",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be81b2f-6b64-4429-a8ad-85db2dbf8e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d73ea307-c316-4d5b-8a18-1df466f65103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e6a66a-765e-432f-b368-f2d968cc43a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda1ab23-549f-40d4-ae43-5edd6075df64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148e2ab6-6b3c-48ae-99f5-62bbabf9beda",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fe50c7-526a-4171-b934-f39068072f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131f997f-a043-492f-819f-766d2667ab1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1c2b14-f32f-4aa1-ba80-699868c10457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6e168b-4ce8-4977-9d8d-4c2335e16bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de70f6da-0b95-4158-b4c9-26da0ab0d512",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a392fd9c-6d71-4207-b203-3df1393141bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2606caa-d9ae-4779-b2b0-5ccfed4f7276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa78ddd1-69e6-4310-8f35-7593aa494e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee1b594-4dec-42f2-86e1-cc88f768f9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2788e919-2968-4948-8bc8-4abce8c68996",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec546f5-823b-40f1-aebd-dd8e8605bf77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2481aa-e32c-434a-a4ec-446498428dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c3c314-cf72-454c-a65b-353057d1da52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ea2b28-db4b-4d4e-b697-b0122a57537e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d43f3b9-e724-4925-b494-e4679838eca1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c043381a-6e83-4886-bfd8-e4373544c5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36444364-5aca-4a36-89b9-3327dbd15d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c20f21-73bf-4d9a-a99e-e5488820b308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a440c7-95c8-443e-8efe-d8ae01e169f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20f5043-2925-4f28-b992-5b51f9d1c8eb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5732d81b-45b6-4a6a-9689-e0e8942e7eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe8c1c3-a02c-433c-b7e7-3cd66d14d3bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3734c7cb-fb7a-44f0-9d84-1f68049dcf12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e7380d-9ded-43af-a152-dc74fc09cb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331b892d-7be9-477a-b5f2-31c470dc975b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61232ec0-e236-406c-a5d9-f7e13962b304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbac232d-bf62-467f-864d-9e5a17e82db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2672e9f-ef26-44b6-aa6b-07e32b4991da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c2f7d1-1c80-4e19-b30f-e23875e5675e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2d611e-82d1-4d3c-93e6-0eaeb5c15411",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c225d4be-ddc9-4cd5-9b4b-440850b46325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1092062-5518-4958-8f90-ebc1d988ab17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff88dd6e-98cb-43d5-ab51-9e1654ac26d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ced61a1-d2fa-49b8-b981-d320c47b656c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2599396b-c8fb-42d9-918a-9457080c8840",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f57698b-d778-4391-8b07-11fd8ce77b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7114f30a-c8c0-4390-8714-db44b5b8ff6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ce5291-4c7c-4cba-a0ae-0dde2b394fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469ca749-9545-4885-9983-170f1a3ec023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff087ead-0e8c-47c5-9200-bdf10d387ec1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db83fed-e603-4e48-8ffb-307c4eeecfe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a0a00f8-ab70-4d20-a353-9ed8614be2b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bb01d7-e3a8-4072-a516-03113f814f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbfd5d3-25db-4603-9420-95c16292cb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87773dd1-860f-4d3d-8b79-7fa5e020769e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7994fedc-0afa-4b22-8880-ba6adf2dfaa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf5cd8ae-a3a4-45b0-8aa0-76e066a3ace9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "358613c9-08af-48cd-9247-ca9e986f560b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5f4986-8dbf-4123-a7bb-5f40524e545d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bba90d-8d47-45da-ad8b-49e238e551fc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a68d9b-0d72-43f0-8143-3411d8ab1f81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ee4b5cf-78fb-454f-b28e-9dd48fefd961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "573fa742-f146-44c4-b871-b43e4535e308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f011968-9004-4b2d-9457-beb8fc8efe6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798da870-2924-40ad-9b19-1c95b9cbfa33",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0712c124-ab7a-4c3d-abe4-795d00ce8a71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d60d8e9-bdd6-416c-824d-c3d4c0fe3e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac66c314-5b48-40ca-ae06-5364f395bcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840171e2-34b1-45b6-b708-2bf82c2e4fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8230e1-f2c3-467b-926d-41f1f76c6bfe",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ab3cbd-7a47-4670-9055-965cf937a518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a949fcca-942f-41ef-816f-6d89581b00e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075f7606-b0b9-47f2-86ec-a64842beb6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaafa717-15e0-4287-8982-bd35016c033c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331df314-8a43-471f-8e86-670d4008eb71",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d25ce7-b84a-4c89-b70e-85de0b4d4575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de154065-f4b4-443a-9a83-639d0debe949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5da81e-5123-4162-a140-af37bc1dc83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482a5b51-32f3-4c7f-afea-86aabd79b00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac00055-40d9-4a76-86ea-93eb9604be18",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f3f954-8dc4-4d34-8811-191ed8a8e410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63dc8ff8-ff71-46ca-a700-9469b1a4caba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2244e47-a049-4d2c-9d5f-a733ecff3bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b69870b-b946-4713-8f32-d211d2978f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0045e61-81cd-497b-b2d5-d8064d88185d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2f11af-39f5-4983-bcd1-5655ce491a3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aba3b9ad-060d-4aed-89b4-1103890af212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ebe0dc-abb8-463b-a123-6d46ac979e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa92a305-5e54-472b-bd11-c969346d763f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00560c5-0a51-4b36-8ed4-dae425dfdf67",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e54023-bd81-4501-9f69-9b5848f5d7fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa012ef-0491-4389-a785-72f6d3ff9482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23fac7e-69f4-4036-9eff-af95a0a745e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe6d8c1-1363-4dd7-b759-7a7bf2cb5cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7e79c3-64ee-41bf-88f9-b0e58ecb8202",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b430ccd2-2a11-4dea-ab56-e3dcbac7f78c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83f4cbcc-e746-4ba3-91ab-3c7cdb365bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8219c66-35db-4c2e-adf9-1d41a85deb72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3562203f-19f5-4c78-868f-23e0921f7fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4f2afc-84cf-4ae4-a8f6-a81df8e510b5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13910ede-4df1-4744-8f69-62a270606232",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "373d5bd4-dcd5-4245-86a4-940f5fb42e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8202afbb-676c-438e-a1b0-700e42da745b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4e85ee-338a-4493-9259-d9240cb0a46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40de765-8ce0-4a3e-8ab2-972852657c49",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ade8c1a-e132-42bd-8a1a-5c49f4ceacec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddbf1b5-4e5e-40b6-959d-16b8570c55e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac4b94c-6766-4b46-a6e2-10dc97e3005a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03821bc2-a5e8-4b25-b230-4292bd766b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af06eefd-56be-49b3-932f-0ed56b4e1859",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db3c70e-0285-49fb-9a4b-496f15d500a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9de2528-69c7-4fa9-b630-15941675494b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390e007b-302e-425c-bd48-f14d1e31996b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348c5ab1-e081-458d-896c-6a95616a7fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8543c0-1e60-43fd-8f54-98a62b10e166",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5bbfa1-d5b8-4c91-af79-55de8629035b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f023bc-7e79-45e3-8a5d-1e39726663f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79326609-242f-415a-938e-814f91385e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7261ae6-a5a7-4d24-adc5-d8172f65258a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e133002-50d7-4b37-b6ed-8d79400ff1a6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0a1b68-e580-4de2-ad83-ddf9928f6f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb770569-768b-4e1a-a10d-a917da6554d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cf7661-6b86-494a-9efe-8937468736ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb9b55c-9c66-4276-a14e-1300cb2a4c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a296b4a-f193-43b4-94bd-6174f8577bf2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500ef5be-2a8e-46a9-aa5e-fd61481315fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3b39c9-c616-40e7-b8ab-88bd1755069f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d55729-5dbd-4f82-ab1f-5dbc05241cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e0ad25-9704-445f-8a3a-3b64a83801b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f911aa6-2139-46a8-bab9-49eff03022fd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3a96df-5b45-4126-a804-e0a510b39bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790a1a85-78d2-4896-88d1-28c7e3aa31b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70adf58-242a-487a-ba42-978f42554d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e794d0-e530-4315-9dae-52b4220d6bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30d42d4-0968-4c14-8073-7b8dabc00c6c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268d8a44-2c50-4d2d-9ba5-95c6bb153101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe800011-f028-4c90-9278-91716f415ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34cf25d-fbcf-4a50-9bb0-7bf68c95eb05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad69a4b7-ef3e-42f9-a017-d31f41cb337a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fea9728-b828-43d1-9237-8c33287df4ed",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4549fc-94ce-4270-893b-9b04723da91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d42b38-7433-4433-8412-fe70a5c7edd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9bd86e-0ac8-4532-895d-34f8caa6b372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da45617c-a4cf-47ef-9b49-6b2c9739fd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3a5456-f981-4278-af6f-398ab3b578d6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3b4aa6-88b3-424d-9bd8-eb84aa5674a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab3afba-626c-4bfd-8d95-1eb76b19a08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1caf5064-99d3-47a7-9887-32bdcf12147d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2ae9c9-5e0c-4bae-9eba-8ed227adc2e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b82aff8-37c4-4074-a0b0-0f5be2163e17",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bac33a-a11d-4aa7-a545-bdbb69c6e740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9551c1-af81-458e-8628-b70f990d7098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd8b955-10bb-49b1-b00b-9d683a65fd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1a61f1-2b83-4624-b8aa-389057e43124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084589c8-a4b6-4459-90e9-058e72921cd1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215c1a3f-8674-4b8e-a7d6-e9b62b490c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e99d10-758d-4ed1-a001-9c767db92a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d52f3f1-7d2a-4928-b791-fac8e2cbc7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674d298f-6c2c-40c5-8914-23098146796b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd20af39-c0b8-4360-ba7c-7bb599efd0d7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eeb4628-bf35-4528-9b5a-9a6c3747038a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95834a33-03a5-4d80-a77d-311aa35cec1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7babc0ab-b339-4796-b078-63810b5fc8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd74187-f5a3-4407-957b-329fd7208114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a25d87e-1890-46b2-9ccf-523c03d27b6d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555d3292-7fb1-423b-96da-0fce3e24d0fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16771bb-0648-4e2b-8bbc-8ee1d822f216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f05c0c6-0092-4957-8dad-1466018d2266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c65482-ac2a-4650-832a-34f29a777892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f12c252-5ecf-4eb3-8988-4a68afebb4ff",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871fb390-ddbe-4ac7-b0eb-a790061d8cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44dee4ae-74ae-4892-a2c9-a5896aa3ee30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d513f80-a1f6-4cb4-a443-ef04712f826f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e66a6eb-ee90-4641-ac8b-c6f530359c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6d120d-05cc-4550-b30c-9fdb70cb8084",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eba4042-b929-4956-b5ec-e6320cc54262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d03c7f-5c3d-463d-bf54-7145fa17be58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ccc018-3064-4c20-aa55-7f278d1a39de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51cca208-9552-4256-8898-b3aa09e2354c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ad3ea5-9cf2-4ff7-8bf0-6f21e27e30e8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16a36d5-648b-4b91-afc9-47029d5d78b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57d45c7-f1bb-4888-9409-a112f06b40f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95565cc-6044-4761-b0b0-be7b80add78e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f104939-61db-4ee5-9054-073eff988d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a49e00-842a-46cf-b1fc-f6920ed0ad97",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d4731a-72e7-4c07-9e91-e94dce3634fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8773978-0400-461e-bd16-f2e51853c54e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b8f494-bc77-4239-83e2-4fd9e0003678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fc482b-c828-4d39-8455-f88374f5d461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee49ca8-8263-4835-aeb5-d23651131aa4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1218b30-4980-452d-9997-e2434dc7898a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07498ecf-cec0-49c5-bb06-cba95aecdb2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aded61ba-82e0-44e6-a5dc-b19543e1aaaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6667a351-ae17-4eaf-bbca-a4c61903dfe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5f6d53-c810-4f5d-a79e-a2eaa62d5b77",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a19ecb-1629-47d9-9e6d-799409758870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e65978a-aabe-4ad5-b10c-e45e040bf49c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd2aa99-88da-44b0-9359-9e06d1f8aafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cbf73e-752c-4413-ab1d-891718baa1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c959daa-e989-40a0-a936-d790ebcb0e29",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5131cb8d-0411-4aab-a723-0a89c1cd798b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41148dfd-852c-4e13-b250-313ffb377e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0039766f-de3e-4ac2-bef0-ff43c92155f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e299fccf-ba33-40ae-b6ad-05b0b57a0bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d11d618-bf3e-49c0-ace3-0085ac4be9da",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea57919-5567-47f9-b4c0-decef8ddd5ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3fc42e-6b9c-4373-916a-2d63c8ffae64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea4a17b-81ac-4f62-ad46-4b26aa2d7784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58eff472-f892-417e-9f8e-37fea1428ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0535f568-e6a8-4865-91b4-2617bad37b79",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d9c184-7a08-4dca-96df-06bdb922ff06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c95fbe-fd34-4a86-9862-0db42ea594e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "703177b6-9518-4c87-8836-1219d7cb63c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276f3373-8af7-4d4c-ae84-562bd1bff433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a3c095-482a-43ed-ba61-48a27d746515",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842e4085-2974-4b11-a660-0f6a33b6c5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744e15de-c074-4cb3-b42a-3948f3d0fab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a8d063-ce54-4f8f-a8ba-8471044fc1b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb26875-af53-4d4d-a89d-0bacd2cdd9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b869386e-f590-4e41-9206-0240f2ef4b2f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809f600b-27d1-4bc7-8610-bef61a6d4cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4386d6c2-91e1-4304-9933-bc0e4615e6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3373b592-3c74-4c6b-b61a-0084b7f9b6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d78b7b2-e952-4858-a4de-373afc977fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180692ee-3610-459f-9a19-a601d2bcb148",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4972fdd0-8018-4e53-8950-21a1ed60d42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761dced5-1595-4fab-b49f-2acfe3d05d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c581e75-3dce-411a-b8d1-45da64eaf9a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf12862-e1f3-4898-82fd-bf96f1911f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad5f0aa-a31e-47af-8c13-c56c876b5016",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194c548e-5a59-4d9e-a4e2-fa98c358f068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9f20ac-7280-4ae9-a283-51cabd9ad53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2639d31c-739b-41ac-be79-95ac9c700666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1474e7-7560-4460-8a80-8c943f28c5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d11d94-3cb1-49d6-a43e-66c1078a5dac",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03688fd2-d816-40bd-9072-2ffe49d0e8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ac1850-d830-4391-8677-8216d3f72518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b7f27f-9774-428a-8ab3-03bb0378b930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d4b3e2-6cc2-468c-bfc6-f7b5aaf5ccb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d716f84-4ade-4256-9852-356aa9b12746",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aeb2d69-bcd1-446a-8968-a617f1e345f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc485ef-236a-4dcf-abfc-f64be3f28a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8625478-11d8-4f7a-9032-b30475ef3406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86b2a11-c018-464c-89ce-0d3c0b27d336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644c4281-4bfe-40c4-82b9-6fcdc5209f03",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fe17b9-cf1b-4647-9daf-13b75588bbb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5476de41-0f9a-4451-8b50-5314e40f6847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa45fd80-4c58-4db7-be86-1d133e6c4672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7259bd-8460-44b3-b766-62c86ffa1277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026e06c6-03b6-4cd3-8f58-f1de2587b734",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed577728-57ab-40f0-b82c-a9f6700f0540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60ec1577-da46-4a48-ab8b-f3f5e0a81f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd70d00f-0485-4ea0-8d28-0d33be6f7aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7a333d-97a2-417b-ae87-415302bfe49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef42acc3-42e3-42f0-bc9b-43e1bd651241",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcf5f6e-a798-423f-9a87-a9a9809ec86a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d1071e-05ae-4354-b44b-7c24411113af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179df5d5-0bb5-41f0-bacd-9ba3b9a6466c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b873ff-a7c8-4bdf-bca3-e696bed2f6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8788d500-3c2a-4a69-849a-d5ab34fe83c3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26972c7a-2049-4f21-92e1-e454f3550a7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d1bd871-2d46-47a5-b956-91d361e2a672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f455863-a953-4ad4-8708-5f4b857a300c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74d614a-d1ee-4d41-8c9f-9d74357e51b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c579f0ca-f5b3-4e18-9cc6-580ebbcc91e1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f36fccd-040e-46a6-9047-1936a025c1ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81e33ab1-08f1-4ab1-9406-8c1c756e3de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217257e0-a289-4e8f-ba56-9ca5f78530e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45046f90-3635-4f64-b497-1a0cd187c7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d90cbe5-af49-46f3-9930-04ede4871874",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb425a11-ebb4-448b-b5cb-f7896b874da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b503d8df-c15a-42fc-bdd3-2d9a20df7f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83557656-03a6-4721-aa29-7dc8573b57a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88672302-e03a-4c9c-9a9a-095749a5620b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc3b81b-fb91-43ec-8488-147369f316f4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9406f4b8-310c-4a60-9b23-66d15debee2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17f6bb63-8c7a-4128-ad92-2f3ad820cfe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd222b96-a53f-4d0d-a112-7e5e2e4a7293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec6f0ec-44e7-4737-8559-aa3754061f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89882423-fae8-4c26-a1da-14a7a04bdfe0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68432287-d189-4ed2-8cb1-e16374019614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b62615a-0917-43d0-a6c9-e9e9d4666894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e861ea-31d1-402d-9c17-f919ef833641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7c9051-faf2-41e8-8537-17ec5abffb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cde3c5d-853b-487d-8317-df400ecbc530",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a55e170-3ac8-4d01-beca-d0392e6a1475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0220aaeb-de9a-4280-b4a3-0ef5ccb6a7e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22c3cb3-5c1c-4d04-834a-335b80c1c2f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68247c5-ef13-43cd-8ec1-948f78fe3db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04cabb7-47e3-4796-8292-eb41a612198a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54e1ca8-7866-4bda-a049-dfc9f2be8009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "407f63b9-1779-4059-8c62-76a84f59ecc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4b85e9-dbaa-4ffe-ac73-2958382a9de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87755265-5641-4677-b50a-ae3a06e58732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36f4812-a052-4b24-9251-5150f6240325",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79028301-522f-4c2e-bf1a-a2c960064b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddfea3c8-e8a4-44a2-9917-fdf95e0c567f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56c30c9-ed35-4391-8c92-a4e45727e5e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e65f32-527e-4e7d-b52b-6254337279d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e524eab4-6ceb-43f3-adca-d29ae1532db2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6848a3-b73e-485c-9958-68968ffa940f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b65658a-daa0-4603-b53e-a7fb5e24a6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f97578-faec-4b7d-8ce2-787733719250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b32794-38d6-4045-8917-4274d44af400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f1408d-fd72-45ba-aac9-c3671e6f92f8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1a80f3-e424-4bb9-a752-33a7d8b30b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93b513be-dd1b-48ad-a328-94e6e16dbc9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7f8ea4-7ccd-469f-a88f-61f96ab479fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502872ed-3065-4e2f-afd2-99a9dd1781ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02e2d4d-1cca-4329-ab1f-a95430586870",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb01cea5-4058-4398-b792-b968a6f4791b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f7906e4-5ddb-45a3-a582-d342a7081dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db92d8e9-3715-45c6-8470-025b485b8a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ddce89-3e8a-4060-b346-0623e7403b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42006f5-9bf6-4fb5-b5a4-3937beff242e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb32933d-2419-42ff-b014-e1459909d5c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b46d4fa1-a35e-47c2-9441-18e72022582c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de03071b-3f9a-4908-976d-d4a382f7ae3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63236c67-3047-4bec-a084-3f21589dd276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94aa801-67b1-4bd9-8829-45b5c640dc84",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9b83e8-0ea3-4976-9541-aba234647247",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549e944a-a7a1-42eb-b744-362e398ac06a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f1e8fa-aefa-42e7-ae99-72ccfc1dffb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2754a818-52d6-410f-bc42-094b6df19c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaebd8d-d90f-45b3-b75d-a1302eb11fc5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e46d68-b240-4c27-b4c1-5996341c0694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb635704-10b5-4bb5-a5c2-5b5aff59f185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51ad3c0-3317-4c64-92fa-5e2677142c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe759210-62d8-4ac6-844c-1222c1a14266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522bd93d-0b79-4e6d-9111-2382f490d209",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f2f6e4-95a7-4df6-8da9-0353c7625f53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e919e1-4711-4275-8829-0784963e085c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ef2b7f-ba14-432f-9066-7a280ecfc873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0d1cb7-18b0-4ad0-809d-04307456e5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee77fe46-a95b-49f0-a250-41879a3bff05",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1038afe7-7596-4015-a034-b9eb7230e470",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af20675-0105-499a-9885-d251ba161735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e3bf36-4682-4cff-8992-8824a4fbff91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec5161f-8dda-4134-9eee-a946bf0b1ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e435b92-1684-4c76-8e9f-fa706df00dab",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623c0861-7425-48ab-91a9-29b5af25bfef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb067f39-1457-40f2-b2c3-68ccf4ae0daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a1c9fa-63b0-4b3c-ad65-b86bc4f8e4b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f0f4099-af40-4b73-8898-8ac1a8a1bd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9722287f-ced7-4a66-9a20-698d3ac236cf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f033509a-f53e-4c5c-9aeb-25d77215d045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d90e6393-a241-449c-bac1-716c54206908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cca404-d458-4339-9297-1842b239fc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c06cdf-dcb8-464e-9f94-efa967d7e7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308f4d77-8ac7-40cf-8242-de3299c4aafd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faaa1ee2-b837-41df-ad4a-3ff921ab240b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "825e6b79-21cd-45e1-8984-b1ce267ecef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b53e6cf-3772-4e0f-b79b-d2d90b25dbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a86598-6089-4837-9311-e6850f82823b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa91f70-b3b0-42d4-91bd-e7f9f3d51e2e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb19d5ac-fdb5-4fa7-9459-ab1f84ccddfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a90d10ed-0baa-48c2-bb94-65717c342968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4275495a-50d3-4f4e-a412-69590fbf38a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b727f02-927e-47eb-a97b-457b66459fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f5534e-d27f-4700-b0b8-852426919fe2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adabe933-7243-41d0-a5be-e1cfc8d1ae9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5df9112d-b55a-48e3-8b60-f2d81d9db761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa54980-151e-4bc4-812e-ec1d1f3f7a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07c04ff-48de-47b5-9aff-aa1969049306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb69af0-ae80-4c27-8650-834bd4f49306",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def90bc1-5696-4088-b792-702e79efb01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65a2b716-8e39-4ecf-8085-370d639f327a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f336b130-a0b3-463b-9b7c-fc7f1d42343d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9344bf-7758-4b3c-b335-87afc922360b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bc876c-e616-4bb4-ac0c-ea11118337e8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570e87c1-b324-45fe-9710-95c010d8bd1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45e0d82b-73d8-42aa-aa0d-65ef907d14ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0743b5f-8190-4805-a283-733f24121820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5e9fd8-f098-4992-aba0-febfd042c58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f84acc-49e1-4168-8eaa-a199f6d118a6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2769247f-addb-4809-9f7b-00ec9639f917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f98b02b5-dbaf-4938-9267-eba5650a2ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3a0cb6-5309-4ff3-906d-8d6ddded82f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c8a612-5a63-4635-b97e-b109664d636b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce1a846-2a95-473c-a8d6-464c8beb7d5c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9626e7-61f3-469d-938d-f96efe0e5a36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01f08848-ebe9-4938-8c7a-354d10c5d336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30dee348-5960-4718-82c9-f9c33b479027",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9ffc4d-785f-4c51-a456-c7a95027197b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189bf81a-08ec-4be5-941c-75bd98345f15",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c3e592-efc9-4a2a-a02f-134eb2ead9b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c38423a-ec20-4137-bb7e-86e436020984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebe6456-4909-4c72-9d13-ae02bf94d637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57687198-7883-43f1-ac65-65ab40c8703f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab102e2-a3c8-4a62-8a34-58e333f6ccda",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6aa1adc-b3fd-49e9-a577-015f3c37ce5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb9488fd-80f9-492d-9a62-5025baa42c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab064af-6205-4c5d-a306-aa342c542cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20352171-b19d-4793-a003-daf306bebcf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6307bf5f-63dc-4b4b-a2bb-bf8f8cad12f8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015d087b-1b78-4863-a1f1-3b3458cd8523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85b3158e-291e-49dd-ae69-fef6ee67ffdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217b3be7-a397-445f-8401-f90c03340657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7beb9e3-81aa-4deb-8665-8f22c3e4f442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718a3908-ca4f-4a53-b36e-5a92131cf91b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3fa5597-f2e4-4adf-969b-3755fc775334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55ef13d5-acbd-45df-a232-ec23bbb6299a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f18b92-0a81-4f0a-9e18-bdfbf1d74b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0cca97-22fe-4d73-a859-4adbb17b36e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112de387-6c55-4f1c-aee4-a0803ca79cbd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f73799-9bc2-46d9-a542-e83e6d97b13e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a89317-7571-446b-9288-3211a49b2509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbbe4a8f-9ff1-4043-859a-2c1a7bdc50f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a34162b-a037-4d20-bafc-783bc5467594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3dbad47-490f-45e5-b272-4c8054ac824c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d12120a-d4de-4c71-9f1e-b253c2a20514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "035233af-38f7-44c6-a4d3-fbf1b863a12a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3ce991-980a-40b0-93c4-9de14c698f40",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f95ab5-44e6-4ccb-90ab-278f0e5fab96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624b4c76-6b01-4cc9-8140-bb896b372fe9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a008e0-b50d-4051-8bd5-4c61557cc94f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67544c19-94e7-4953-9ac7-5ad6a643b1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bb9013-b5b5-4d54-a37a-6a0f32359fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df20618-9cee-4176-acec-2eb5529743cf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02b8627b-0e51-46e9-824a-87d6f29f8e91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86311991-004a-40f7-830f-eaedb27e3c50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa4ae6c5-e602-4613-b63c-6a4ccc138317",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7056d171-214d-47f1-96e8-ebc71c631f71"
                    }
                  }
                ]
              },
              {
                "id": "656f514f-917c-4f5c-8b2e-797372de351a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0b3b914-5755-43b5-ba8c-29ea14b90aa2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0e8b0d-5bec-4a70-aef6-bf37877627ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "976e3bf7-3aa9-4013-803c-d9d318eb1b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bff1e8-b02a-4d78-b9af-33ba48deeff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de98d54c-d621-44bf-b8fa-c537d4d133b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b2db28-b355-4e36-81e4-b922e61297cb",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e13cf7a-b210-401e-ab21-23a436ac3d6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2ec2ce16-403b-47c4-a9df-2757cc436e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06714fe-dab2-45af-996a-acee77d6cc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "477ba40f-86c2-40d4-8398-dd96e97ea6dc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59c83e63-1039-445e-ac7a-b700b51d147b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fea67001-8ad0-4fa0-897b-e00ff5b16ec1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3f6eb68-c057-4a6a-88c3-b16324916175",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dde3f03-d29f-477a-940d-f900d6cbad1e"
                    }
                  }
                ]
              },
              {
                "id": "be235986-014d-429d-9793-2ba808fdf502",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "67369461-a11e-4746-b7d2-f343dd02dd74",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b66f51-74c3-43e5-970d-5f9a47b23ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4e761c59-8865-4589-a717-16a593f51b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d8f3f5-9b4c-42b3-9420-3ec203026fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f930107-9793-478b-be1f-9f4ff661382e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "be61a05b-ff5f-44ac-aa2e-5c394ad5224d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "028985d8-0f4b-4dc4-8c26-7712e3f8972d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a7af51b-0c67-4818-af54-a56a3ea21472",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "926723ed-255e-451f-8af0-ec79052b9ca7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87fa5e99-5437-4c02-9d23-ab846be423ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6b3d2c5-b744-4b55-8b5f-bb7f5a1c20d4"
                    }
                  }
                ]
              },
              {
                "id": "80f0ec10-fbad-4b37-9947-759a19741993",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16915846-6c67-40d8-903d-a03e72d8273d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f7edb299-3491-4516-9915-825c6fb84d8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17d0b99c-33d1-4f5f-b68e-1b9ac7ad8e99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08d24c9e-bc06-4d16-aa20-e6342857df22"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f4df4c9-a5a5-416f-be5d-6d9a51192400",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1b94eb40-bc25-4262-a78a-81f58ecde5aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a593567e-26c3-4f99-89b7-fbff5e5d2f9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f0b7ec2-67fa-4e92-a91a-d8ac3a09c9d1"
            }
          }
        ]
      },
      {
        "id": "a7353a8a-f3e1-4fe7-b477-e709d03e35e4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "99b3d6db-96cd-4daa-8e7d-271d9526e81a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14aaeaaf-2a2a-4281-8ef2-60eae019d587",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b632b884-858b-4fc9-a45c-da679cc4ea7e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9bf54c9-4386-4426-a221-53d04070712c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "21b9dec3-1402-4cd4-b6ab-4ce597a77d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fcb50d-a1a0-45a2-93a4-ec940646cc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f92f644d-8269-40a4-9a51-f687a2024510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf95e26e-54b7-4c2e-9df6-cc920cb396f6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcfcfdc-064e-402a-a971-bd8dbac27dc1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6859d4d1-7733-450f-aeaf-3d3bfb2751dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70346249-8879-4e63-b8f5-2389af3d64d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31cb821f-ff6e-4b99-8b4c-e0b1b8b45f03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4306ed4-b6ce-44f6-8242-66eae7dc54cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bc76b41-8e23-435b-a262-81c1834eea10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6a5f62a-1894-4b39-9044-a1a28b8a0289",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e6879e5-a702-445c-a1e2-e717eb0d18cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ccabb3f-a21c-4256-abfd-1c6fd20fb834",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "06ad1091-75ec-4c1d-8c91-ac977ab6fc84"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2998c523-477d-4743-b052-024b9a2b88af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b5d3417-d1c9-4690-9f98-2d13a5d9b3f9"
            }
          }
        ]
      },
      {
        "id": "22071590-ad44-4957-8547-2c4a777ef25f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fdaa251f-e5a1-42b7-9151-71956f3ffa14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93489024-8e5e-4afc-ae68-edb91866daf2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8aed7b6e-e53a-4850-bc8d-7e86fbf0f832",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7106bcc-0fb6-44ec-b7a1-c526d8b7b7f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8ec043aa-bd28-482d-b704-d70d72bab4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dace0828-9bbf-4c75-8f00-661334363945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8519924-2a44-49e3-874f-e8359929cd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d66590-be0e-46bb-8d4e-38ce6ca4f3a1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651505c3-967d-407a-b51a-5a0c44071553",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a5117ee5-edaf-4ff9-a9aa-9a5e5c279482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bacbfa2-4fd2-4d8f-aafe-761a6a0eea4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c814ee91-a116-4119-80df-7ee9538c7886"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb8bc7bd-218c-41a7-b33b-937d1102d70e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb2f5106-6397-4b96-83ed-db23b4318007"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7df021b9-c15b-41e6-ae04-cca27c202e34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7d481c8-9c52-4e34-a813-f94a34e624b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58a054e6-79e3-4909-acbb-b9c97b533b1b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6ed6c4a7-e943-4418-8cd6-5f9ca95a7177"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "134a2251-7111-4a21-9756-c2cfcef8beea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fe03f92-0d0d-472f-9e8d-be4e5328b92e"
            }
          }
        ]
      },
      {
        "id": "0df9b364-e2c8-4d72-9c82-349c32941195",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3daac8f8-c98d-4700-8077-9e95bafc051d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5ce87a5-38d2-43ba-8448-83282e9024ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3995ee7-5d6c-4695-8353-764ac19d7bb3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5f4bbe-8cb7-4def-92cd-79bf3141c13b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b2b0df84-673a-43b8-9391-b10fc4eee90e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4c5430-3c58-4ca3-bce7-fd25f4af60b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d18ad3d-df69-42c2-84a3-60cb74e42bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afbfb2e-7796-48ec-a70b-f56815d48063",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7845edf-9832-4157-8498-b4db6ecad95a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8eb21e50-9ff8-4a1d-b5b6-c4678f66f467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fa727c-b8bf-40c6-b951-4f4777464d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fc2bb11-5c18-4649-a287-98b5e9bc5837"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4e54ab0-a8aa-4e53-8c0b-9351fc2a93f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "120e6c2b-4dba-4b44-8107-ea4053cad495"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccf691d5-58ef-4827-b4c8-73fbe4754690",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea9a1a88-9a34-4f8a-ab11-d6bb71462663"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "153b8f30-bcfa-421d-857d-e0fdf89f834d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1ae8c101-1318-4207-8f06-a7d861c43330"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae2e4117-ebf6-4637-892b-1204a5ce3afd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c37ec1bd-62b6-44a3-8305-cb665a5b02c7"
            }
          }
        ]
      },
      {
        "id": "c2c81251-ca28-4273-986e-867cb34e12e3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e342b326-1203-4f1e-b368-89fb2527dfc5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "746660f3-4fcf-448f-8d92-3bb5cbf73e39",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9980b244-70e4-4937-9cec-50f2a62048f5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a87bda0-f0f7-4898-901d-45c87bc0b572",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca206d7d-95c2-4d82-9cae-155e3be8ecea",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.6832061068702,
      "responseMin": 3,
      "responseMax": 781,
      "responseSd": 130.46304361197292,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672015087239,
      "completed": 1672015114940
    },
    "executions": [
      {
        "id": "fb2d9aef-905a-487e-89a0-569e42583037",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9114bf5b-3eff-4238-a45c-93925573f2cc",
          "httpRequestId": "393e0740-08ff-4df9-ace8-c381849e6a82"
        },
        "item": {
          "id": "fb2d9aef-905a-487e-89a0-569e42583037",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8c23337e-ff50-4fb2-89b4-b15937064621",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "7f3f0d0c-96ef-4bd6-937d-2ac06a28b3a1",
        "cursor": {
          "ref": "b43a0215-4a26-4727-9c17-4a1e9db415bb",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "55b3f770-c77d-4c87-bf58-360fe5d8d712"
        },
        "item": {
          "id": "7f3f0d0c-96ef-4bd6-937d-2ac06a28b3a1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2c00e3c0-42c2-4cd8-9ae5-5109550ded67",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "267e481e-9a8f-4c7c-830a-89a500a04e0f",
        "cursor": {
          "ref": "dee2c33f-ada6-4935-a8bc-ad5e4ea1a343",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "907168b3-1bb3-4b8c-8716-5bbbb5884c4d"
        },
        "item": {
          "id": "267e481e-9a8f-4c7c-830a-89a500a04e0f",
          "name": "did_json"
        },
        "response": {
          "id": "5ca1e372-4e90-454b-af08-f0771543cb20",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d2ebdd-c6b1-4ddb-9cee-a4ec825043da",
        "cursor": {
          "ref": "2c0b1ec9-77a0-40e7-add5-d0a98b5f32b3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "54df4b8d-8aab-4084-baf5-d5625c1ad012"
        },
        "item": {
          "id": "b1d2ebdd-c6b1-4ddb-9cee-a4ec825043da",
          "name": "did:invalid"
        },
        "response": {
          "id": "1d0eea6a-104a-4e21-ba70-7b8ebbc375c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d2ebdd-c6b1-4ddb-9cee-a4ec825043da",
        "cursor": {
          "ref": "2c0b1ec9-77a0-40e7-add5-d0a98b5f32b3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "54df4b8d-8aab-4084-baf5-d5625c1ad012"
        },
        "item": {
          "id": "b1d2ebdd-c6b1-4ddb-9cee-a4ec825043da",
          "name": "did:invalid"
        },
        "response": {
          "id": "1d0eea6a-104a-4e21-ba70-7b8ebbc375c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f143fe30-9125-4c23-8e94-7f9296942777",
        "cursor": {
          "ref": "0874583d-961a-4645-a9a5-895f90fc5187",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5347e60b-be51-4283-9b9d-2dbe74277c59"
        },
        "item": {
          "id": "f143fe30-9125-4c23-8e94-7f9296942777",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b8a7933c-e0eb-45df-bdee-ae9e60526cd5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d927df87-310a-4eaf-b758-b47f387189ed",
        "cursor": {
          "ref": "6636d2f7-e3e2-4922-9ce0-84b8da72a857",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c2fee619-2c7d-44db-a0dc-705e58d9cff8"
        },
        "item": {
          "id": "d927df87-310a-4eaf-b758-b47f387189ed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b914c589-d3bc-4c81-82b5-652b60993e4f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8ef3fc-38a5-4a2a-9dd1-e79034af5f1f",
        "cursor": {
          "ref": "27dfdeae-d768-4224-98ba-72745e30b5eb",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "333d8eb6-f97a-4ddf-a4c2-d3bb95018b99"
        },
        "item": {
          "id": "ec8ef3fc-38a5-4a2a-9dd1-e79034af5f1f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "973a7342-bef9-43e1-adbd-fed0be7efb34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51c2229-b93e-4e9a-bd85-6ef6db06085c",
        "cursor": {
          "ref": "1e684b9f-7b53-483b-998a-4826c13beeef",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f0803f2f-22e0-4115-9fa1-a23aaef02375"
        },
        "item": {
          "id": "b51c2229-b93e-4e9a-bd85-6ef6db06085c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "76ef21cc-ebbc-4f09-9883-0f34ed4f2583",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51c2229-b93e-4e9a-bd85-6ef6db06085c",
        "cursor": {
          "ref": "1e684b9f-7b53-483b-998a-4826c13beeef",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f0803f2f-22e0-4115-9fa1-a23aaef02375"
        },
        "item": {
          "id": "b51c2229-b93e-4e9a-bd85-6ef6db06085c",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "76ef21cc-ebbc-4f09-9883-0f34ed4f2583",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5713b237-8ad2-401c-9eff-146531bebb07",
        "cursor": {
          "ref": "5e79e869-5fad-4654-b084-ac415d399630",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "64057e51-25fe-41fd-868c-775c8035589f"
        },
        "item": {
          "id": "5713b237-8ad2-401c-9eff-146531bebb07",
          "name": "identifiers"
        },
        "response": {
          "id": "ce5b47ec-088f-4315-bca9-70b55f813cb7",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02ef03e-757b-4ffb-ba18-88c3eda84cb5",
        "cursor": {
          "ref": "a8f18736-3a99-4e55-a914-0c41d85b796b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "83123218-3009-4368-93cf-2feeced6832f"
        },
        "item": {
          "id": "c02ef03e-757b-4ffb-ba18-88c3eda84cb5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "49d3171d-4890-4a27-ae02-a6e87555e53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02ef03e-757b-4ffb-ba18-88c3eda84cb5",
        "cursor": {
          "ref": "a8f18736-3a99-4e55-a914-0c41d85b796b",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "83123218-3009-4368-93cf-2feeced6832f"
        },
        "item": {
          "id": "c02ef03e-757b-4ffb-ba18-88c3eda84cb5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "49d3171d-4890-4a27-ae02-a6e87555e53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f308060f-1166-4b71-87bd-4285387dc1dc",
        "cursor": {
          "ref": "45c292cc-a251-4b42-ac10-cc7adfff6770",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a2600d96-a70e-4b4f-8baf-e09628e8b439"
        },
        "item": {
          "id": "f308060f-1166-4b71-87bd-4285387dc1dc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d5ab5e12-542f-4362-a9e5-f965c49f02f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb65eaf-fe67-49c6-88af-481a61f81531",
        "cursor": {
          "ref": "7860ad9e-cbb5-41de-9500-42c99d553612",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8c397b72-ee13-405f-9e9d-2d244319dda3"
        },
        "item": {
          "id": "fbb65eaf-fe67-49c6-88af-481a61f81531",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "12c3cfca-8f0f-4040-8d27-3681ee6ea38a",
          "status": "Created",
          "code": 201,
          "responseTime": 574,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d6e96ea4-d612-49e5-88b6-de1195a38339",
        "cursor": {
          "ref": "ce069c68-7d66-43ca-aabf-dd67c4d0322b",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "444a01b7-983d-4ac7-9452-cbf181fd9900"
        },
        "item": {
          "id": "d6e96ea4-d612-49e5-88b6-de1195a38339",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b2d66f54-eaa6-40ff-ad61-2fbfb56d840a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17db80a-43e8-4519-ae21-1dc8d2f9d09c",
        "cursor": {
          "ref": "0818a99f-3f14-4eae-aa8d-5713f7afbe23",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0dd74a12-af44-416b-b8ad-973e37e76ee4"
        },
        "item": {
          "id": "a17db80a-43e8-4519-ae21-1dc8d2f9d09c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "58cba185-e16f-47ce-8622-5127192adfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f42d7d-2aa1-4f32-93dc-f249850229ab",
        "cursor": {
          "ref": "1b432509-0218-4fc4-abbb-b1c808bf6d24",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "50f393ed-ed05-444f-a89b-7628c9c75a35"
        },
        "item": {
          "id": "33f42d7d-2aa1-4f32-93dc-f249850229ab",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bb78d117-dbaf-4e04-83f4-63e8fcc71cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dc6d32-405c-4484-a093-3cf12ad54589",
        "cursor": {
          "ref": "ca533f5d-f1c4-4a4f-b36d-5636281c4e92",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "94f80200-675f-4988-acd1-47b053d1d05b"
        },
        "item": {
          "id": "09dc6d32-405c-4484-a093-3cf12ad54589",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dcf05290-075c-4f18-a838-22b26901bf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd99f86b-5532-4f8b-bedb-d6f24da42591",
        "cursor": {
          "ref": "6217c790-9ba4-423a-ba84-d283d5c64d69",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "63065a1b-4f67-4135-9474-1176c19e8ea5"
        },
        "item": {
          "id": "bd99f86b-5532-4f8b-bedb-d6f24da42591",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a8631614-09ff-4c33-9189-78a3a389c0d0",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "23cc819a-55e2-42a6-bb20-616310f30163",
        "cursor": {
          "ref": "20ceda70-e0bb-4d48-b320-fa3abecdf8e1",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "088c1fa8-7c97-4dfe-bdb1-86d81bac6d43"
        },
        "item": {
          "id": "23cc819a-55e2-42a6-bb20-616310f30163",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "aa15d6d4-67ad-4fa2-8a5d-95f7541daac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beab289d-be12-4669-ac7c-ad95b0c7659e",
        "cursor": {
          "ref": "2aa3594f-1dc0-4d06-9fe0-a119bdfe4f05",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4a0f16c9-7ef5-448b-af74-9a38f7bae38c"
        },
        "item": {
          "id": "beab289d-be12-4669-ac7c-ad95b0c7659e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "00f00562-379f-4fe9-9bcd-db2fb8856486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6674ea-36af-498a-ba81-c49074d60283",
        "cursor": {
          "ref": "2fa27381-ee2d-4990-a4f2-6edecadf0851",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a5648b34-a508-45b4-9beb-d5c01be2c84a"
        },
        "item": {
          "id": "da6674ea-36af-498a-ba81-c49074d60283",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f0a7df0d-ffae-4bcb-aba7-98026b7c8190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ba421c-a1f4-49b8-968d-657490cfdad5",
        "cursor": {
          "ref": "0cef1b5d-eb21-4e3b-a7ca-46d7b3daf806",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a462793e-1fe3-478b-824e-ab7155574937"
        },
        "item": {
          "id": "61ba421c-a1f4-49b8-968d-657490cfdad5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "94a637d2-db69-4774-a3d7-39115606aa96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca477a9b-09fa-4648-94dd-56157a30a1f1",
        "cursor": {
          "ref": "c53ab44e-5e33-4761-8cb9-7d366803d5b9",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ecd23530-a434-4b62-b8ff-4453eda9ebc2"
        },
        "item": {
          "id": "ca477a9b-09fa-4648-94dd-56157a30a1f1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "15c76f76-e342-4e68-8569-ba675b1503c6",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 735
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "11bfab85-8576-491a-bda3-18f2e836a00b",
        "cursor": {
          "ref": "39f363ca-e5bf-47f0-bcf9-3e3c8c8b0b4a",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4fcf7e68-e4cc-472d-be8d-22f1d4ba8069"
        },
        "item": {
          "id": "11bfab85-8576-491a-bda3-18f2e836a00b",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "c2f24377-4f30-4431-af5e-a20ccf4a7bb1",
          "status": "Created",
          "code": 201,
          "responseTime": 781,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5d4a9aa8-34b1-4d64-9e2f-c885cecc1d8c",
        "cursor": {
          "ref": "b1a47846-d5df-488a-8bd9-63f9bd5b365a",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "33662b7a-d684-4210-8557-b987b0c75e1e"
        },
        "item": {
          "id": "5d4a9aa8-34b1-4d64-9e2f-c885cecc1d8c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4984e897-0d90-4f76-b991-ca7bbf57bc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd511af2-826d-4627-9cbb-c18007580444",
        "cursor": {
          "ref": "d1bab29f-6619-4272-b561-7a9230895bf2",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b29698b3-bf8e-4189-ad0f-82c4f8ecae3e"
        },
        "item": {
          "id": "cd511af2-826d-4627-9cbb-c18007580444",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9d461ab4-7d00-4eb5-9888-ffc1eade6d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d767c95-029c-4cf4-a196-7cde75eda7bb",
        "cursor": {
          "ref": "a79e09e3-baf6-4fa2-9c2f-84a9aebb2abf",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "355efe06-ece3-40ec-a882-c8bc5b38abeb"
        },
        "item": {
          "id": "2d767c95-029c-4cf4-a196-7cde75eda7bb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "20f8bbdb-5d76-45e0-9959-d63d03ebb295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ebf477-80c7-42ae-b144-3db920081ce0",
        "cursor": {
          "ref": "6482384c-8a9e-4950-a6a2-dce660751f69",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e4a35486-5736-4c68-b0fe-1a4b674764f3"
        },
        "item": {
          "id": "f2ebf477-80c7-42ae-b144-3db920081ce0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "23a9cef2-5dbb-4687-bb52-cdaa8127aae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47df593a-d869-4945-ba1e-486f83d4740d",
        "cursor": {
          "ref": "b01d24bf-8938-4f73-a40b-d74926b54fe9",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "44b00cd0-9d43-480d-b458-124d42e839ff"
        },
        "item": {
          "id": "47df593a-d869-4945-ba1e-486f83d4740d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "74215566-b0fc-4e21-a1d9-04c90f057114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bc6a35-6e1c-4334-9d25-cc0a8b5b42a1",
        "cursor": {
          "ref": "ff35beff-858f-4b27-8dbc-63a651f1d6f5",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2fb247e1-1a30-4607-892b-19624ed1e10f"
        },
        "item": {
          "id": "96bc6a35-6e1c-4334-9d25-cc0a8b5b42a1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c8e40dbf-0dce-40fd-b8c6-62708ecc9b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff8ac95-f92e-491c-b290-2f1bcedbe392",
        "cursor": {
          "ref": "21e21e48-dec8-40a6-baad-f7cf7502ec86",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "80bd6e88-c7d2-47fb-96ec-99abce5ab1e4"
        },
        "item": {
          "id": "fff8ac95-f92e-491c-b290-2f1bcedbe392",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b94c1423-0da9-4d1a-ba1b-cc19b24b4719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87493c0-9036-4179-9eb1-51c2ccfefd32",
        "cursor": {
          "ref": "b09f81bb-f624-4f70-a8ba-a60bf43ff943",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "59af3d0a-871c-48a8-9c3a-f346f487a253"
        },
        "item": {
          "id": "f87493c0-9036-4179-9eb1-51c2ccfefd32",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "69823a3f-93ad-4bf5-a763-34193e391b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2129e921-92ac-4a3c-bd5b-a101d3ab04b1",
        "cursor": {
          "ref": "e8aeafb6-249c-49a1-adc7-29ee3dc8b8e1",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c9d6c366-e5ab-49f7-885c-a5edc1d1e328"
        },
        "item": {
          "id": "2129e921-92ac-4a3c-bd5b-a101d3ab04b1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "45e1ac1c-042f-4c98-aa71-9dd155639c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc235c01-ca33-4dd8-9e4e-e3ee2540ee85",
        "cursor": {
          "ref": "b809b0e1-0cb4-4117-a191-c847cc40e372",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fdc27719-25f7-4e3e-a11f-9d3c98fdfcbe"
        },
        "item": {
          "id": "bc235c01-ca33-4dd8-9e4e-e3ee2540ee85",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bc05e0d6-a611-4069-b2a2-dc47db0a4aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7387790b-1453-442a-a5f1-b05fc9945e4c",
        "cursor": {
          "ref": "913a0430-7006-4d45-9fa8-81df8010adc8",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f20694e3-77b0-4ed2-ae69-1509da2ce242"
        },
        "item": {
          "id": "7387790b-1453-442a-a5f1-b05fc9945e4c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dfda31d5-6355-4f70-9781-b1d5a1bacf1a",
          "status": "Created",
          "code": 201,
          "responseTime": 457,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "ac05fd92-e999-4458-b561-30799dcfca93",
        "cursor": {
          "ref": "c9f27cf9-0a06-4719-977c-3400b58e2847",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "234f194d-d66f-402b-b94c-3b5996068ad3"
        },
        "item": {
          "id": "ac05fd92-e999-4458-b561-30799dcfca93",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8618558b-c25b-4476-9194-bff7a021ca2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d768d05f-8ab7-448f-b46d-cd68b5b6cd9f",
        "cursor": {
          "ref": "7b1f0877-be4b-450f-a728-c65f7d52f065",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "021462b0-2a0d-42bc-a865-fd43c1774d88"
        },
        "item": {
          "id": "d768d05f-8ab7-448f-b46d-cd68b5b6cd9f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e484cdb2-af76-4877-9643-a4eeed482d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe95423e-0c2e-4a81-8459-c7ca00107cda",
        "cursor": {
          "ref": "a5f5a86d-7830-49ed-b439-4bc90817199c",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a3ed722e-b398-4082-b63a-9828a01ff635"
        },
        "item": {
          "id": "fe95423e-0c2e-4a81-8459-c7ca00107cda",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3ed73da2-f65f-45cd-8377-cfbab04cfaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d457262-fe63-44a3-ad5e-219aed20d5f1",
        "cursor": {
          "ref": "b58f1589-b06c-411a-bdbc-75dd1267592b",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "35763b0e-1edb-48ed-92eb-912b0c6895db"
        },
        "item": {
          "id": "5d457262-fe63-44a3-ad5e-219aed20d5f1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7fb40117-a232-4d07-b567-2c7e2ba4535d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc222b8-c2b2-4b45-b044-5e9036d63bf1",
        "cursor": {
          "ref": "fc208829-a9d3-4bef-9c00-ed589029f30d",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f8e4f77c-0d07-419f-9e92-d0fda6d7d5c0"
        },
        "item": {
          "id": "3dc222b8-c2b2-4b45-b044-5e9036d63bf1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d64a5a87-1583-4db4-9310-c0bf72e58a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44720b87-bc4e-4af7-84f5-d5e453a235b0",
        "cursor": {
          "ref": "843b547b-aec7-44c2-84a3-f518004ff7fa",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "430ce89c-5cec-4b85-be11-51b18a6777e3"
        },
        "item": {
          "id": "44720b87-bc4e-4af7-84f5-d5e453a235b0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1dffdfb9-3830-45ec-83f5-daea0c214cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc27faa1-7c58-4e9f-bfd4-bfdac6bb4091",
        "cursor": {
          "ref": "fe7a427f-14a9-4369-b226-50bb60c04eb0",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e7f5e2c5-7e95-422e-932c-012bd74030be"
        },
        "item": {
          "id": "bc27faa1-7c58-4e9f-bfd4-bfdac6bb4091",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6cd21ae6-d19e-49eb-a002-0da775753926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b11191c-1eb4-4659-b95b-8ce20babc044",
        "cursor": {
          "ref": "416077b0-c785-486a-9fba-776ea5528532",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2dfe1509-3878-4ae0-9c0c-875cd1a6e83a"
        },
        "item": {
          "id": "1b11191c-1eb4-4659-b95b-8ce20babc044",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "030a871f-12c3-4004-8fee-21ce4a3eb7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd628ef-8b7c-4bf3-810b-8ecc606322c5",
        "cursor": {
          "ref": "72985802-a1cd-4ba0-90b4-99105a17b6bc",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "87f6945c-b332-4dc3-84a6-42e46bc6c63c"
        },
        "item": {
          "id": "2fd628ef-8b7c-4bf3-810b-8ecc606322c5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "39429c16-3301-4338-b2a1-5e886babc67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4016ff23-404e-47d2-832c-178a08b46f44",
        "cursor": {
          "ref": "57f3ec6b-e685-43c5-a8df-6cb602c24d60",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ced58e85-983f-4a4e-a4e7-f2e5959899d6"
        },
        "item": {
          "id": "4016ff23-404e-47d2-832c-178a08b46f44",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7ea0175e-1ff0-4cd3-919f-fec3711bd80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee436a98-2c84-4520-b8c6-6d3d080c9fb0",
        "cursor": {
          "ref": "d234d4a8-4d88-464e-a14e-414e39ea2d4e",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6e6cb623-b9e1-4b9e-a09a-2d4cb359132f"
        },
        "item": {
          "id": "ee436a98-2c84-4520-b8c6-6d3d080c9fb0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3c1ad770-21ca-4716-b0a8-dfdf9d922177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d914b17-0fbe-4f2d-8811-82b69960c163",
        "cursor": {
          "ref": "4f0e3746-eb75-4838-8a2b-803424d2e857",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9fc30ce8-50f3-4a6f-982d-fefa754819cf"
        },
        "item": {
          "id": "0d914b17-0fbe-4f2d-8811-82b69960c163",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "63f9b973-d9b1-4543-b463-1d2a50c7c09a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2416c646-cb93-48a1-84c0-6dbf211a9b1e",
        "cursor": {
          "ref": "604348c2-9489-49b1-9735-b236ab3ed1c2",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cd463944-8ed3-4032-a161-fb5a820f6f36"
        },
        "item": {
          "id": "2416c646-cb93-48a1-84c0-6dbf211a9b1e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ec60b953-ca8d-4c04-b233-83a14a840b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "37ce7c92-5f36-4030-99cc-9da91f6eea76",
        "cursor": {
          "ref": "6a297468-2c76-4dc8-859f-3e9743944794",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "07da0d46-4bed-4958-8f16-b6be79df4385"
        },
        "item": {
          "id": "37ce7c92-5f36-4030-99cc-9da91f6eea76",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a2806e1b-fec2-4f43-9965-36fe5809f7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddb6f53-46ed-4065-ae10-f8b7e35c19fe",
        "cursor": {
          "ref": "d1eed20c-ab7d-41a3-b870-5f738cf8ec90",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9257022f-3253-44ef-aa4b-bd4ed9e70f39"
        },
        "item": {
          "id": "fddb6f53-46ed-4065-ae10-f8b7e35c19fe",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "419313b9-5c05-49ad-9b49-2cf34bbde0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0214eed6-1e4b-4bdd-aead-f315c6d2c219",
        "cursor": {
          "ref": "3fe84c7e-0951-46d3-8d70-d38c2b218fd9",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "399cce7f-9f01-4887-9585-adc00ec39016"
        },
        "item": {
          "id": "0214eed6-1e4b-4bdd-aead-f315c6d2c219",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b268fedb-84f8-4286-957e-e0761599cc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9580b7c3-56d1-4f73-9b3d-0e10207662f4",
        "cursor": {
          "ref": "101dc1d5-7bc4-4f53-9f77-ad7422f8c4c9",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e053c117-388a-4ad6-9536-a721a586f5dd"
        },
        "item": {
          "id": "9580b7c3-56d1-4f73-9b3d-0e10207662f4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bcc593d5-ef15-4fc2-b7d3-0eaa409f8742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8ac141-6972-4054-abb3-902371584080",
        "cursor": {
          "ref": "d17481c2-9a1b-4e0d-b1f6-e19b11fbca4a",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9c43e1e8-26e7-48e3-be87-3d7fb3b98ab2"
        },
        "item": {
          "id": "9f8ac141-6972-4054-abb3-902371584080",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d133be1b-a3c0-4a39-b062-dc2ab0ddaec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1b39d6-7548-45fc-9250-9fbe806ba0f8",
        "cursor": {
          "ref": "1430b73e-15bd-44b0-a158-149076a8ba72",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "aa212957-7608-4fdd-83a4-3894d9679896"
        },
        "item": {
          "id": "5c1b39d6-7548-45fc-9250-9fbe806ba0f8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3f4d0d0b-0212-41a9-8c76-4c0a5701571b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4b69dc-41cd-4649-ac17-8b01bf4aa67f",
        "cursor": {
          "ref": "b20da90f-afa0-49fa-bc57-5942bfcf3ebe",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f69743aa-09e1-4492-ac07-b4ee51f0c9e5"
        },
        "item": {
          "id": "0b4b69dc-41cd-4649-ac17-8b01bf4aa67f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "22475f33-b0c6-4232-8985-4e0bc0764571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "0e15c3ea-827b-4437-bd40-93142e2d2556",
        "cursor": {
          "ref": "36bba8e3-5436-437e-b3d8-0e240fc8121a",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a69dfc1a-3a25-41ea-883a-ed54d7b74f3c"
        },
        "item": {
          "id": "0e15c3ea-827b-4437-bd40-93142e2d2556",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8a9200d6-c5e2-452b-bcbb-ba43300b55b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cd9fb6-e623-47d1-bad4-8ed8ed46c4c6",
        "cursor": {
          "ref": "b05133a9-33a9-42f5-9409-3b547895592b",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7924617d-3c97-4e4d-8aa4-4a4370e92a4b"
        },
        "item": {
          "id": "06cd9fb6-e623-47d1-bad4-8ed8ed46c4c6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1b3bad01-eae3-4444-974b-f01eaa7ecc2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c7ded8-1a0d-49a2-8f68-3e18d3ca5bd2",
        "cursor": {
          "ref": "4733bf36-c4f9-4861-84bc-2754d541c34d",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "38d105f3-067d-4c0b-8dcb-14c95cb14e51"
        },
        "item": {
          "id": "97c7ded8-1a0d-49a2-8f68-3e18d3ca5bd2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "31bfa60d-ad8f-4242-9669-09ac5389787e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15330483-52bc-499b-af3b-809c3376093a",
        "cursor": {
          "ref": "54a17eeb-a8aa-43a8-a467-2306e159443f",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2edadb39-2a00-4c69-bb0c-2588bdc505df"
        },
        "item": {
          "id": "15330483-52bc-499b-af3b-809c3376093a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1c720019-417b-4aef-a697-ae79d6d32121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01448a6f-654a-41d8-92d7-4d89f8c90013",
        "cursor": {
          "ref": "ee50a313-6487-4984-bf14-b56b6ddd8f4c",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "863af0f3-0b97-4369-98b2-b8a7d27bb1da"
        },
        "item": {
          "id": "01448a6f-654a-41d8-92d7-4d89f8c90013",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "338ba593-c22b-41a7-b644-6dd398e3c1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67e2f26-b005-4ecf-94e5-0528a5600554",
        "cursor": {
          "ref": "b8161f35-8f43-4147-a2a3-615fb5266e05",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "074824ff-1ef6-49ed-912a-48988235fb16"
        },
        "item": {
          "id": "e67e2f26-b005-4ecf-94e5-0528a5600554",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a740d65d-187d-4034-b942-60b59c910f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d084d6e0-8ac2-40ae-bb08-e8dfdd5d48b2",
        "cursor": {
          "ref": "16b3fc57-1947-4d13-81fa-c16513792103",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fcdc1435-4275-4a4b-a80b-0fb484441b62"
        },
        "item": {
          "id": "d084d6e0-8ac2-40ae-bb08-e8dfdd5d48b2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c3d59e5a-1606-44a1-ac7c-565d94988e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48fa678-ca8a-4a72-a0c8-c6d646aa0df8",
        "cursor": {
          "ref": "70cf0f60-a670-4258-a3e5-9aa039a89db9",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2109e852-7c65-4e45-a1a1-6639392db453"
        },
        "item": {
          "id": "a48fa678-ca8a-4a72-a0c8-c6d646aa0df8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d3a2bb60-7492-46f2-91c5-b6be572bf7e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28efa754-e3c9-48bd-8706-af02c9f5155b",
        "cursor": {
          "ref": "d709ebf0-03a5-4d2b-b13c-6442a115f03f",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6ba248cd-20a3-4841-be04-dac21350baa8"
        },
        "item": {
          "id": "28efa754-e3c9-48bd-8706-af02c9f5155b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "24e084fa-a92b-4815-ab40-db4c2031677e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5dd29fe-4540-4027-bddd-0205d58ea9d3",
        "cursor": {
          "ref": "4ea29527-5499-4460-8f16-14c65020f6e1",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "36df648d-065e-42c3-95e1-8ba82cbb26fd"
        },
        "item": {
          "id": "e5dd29fe-4540-4027-bddd-0205d58ea9d3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2a8fc581-0dd9-4219-9bf2-ba17bdd830dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7958f1f1-f291-48d2-be7f-859a9c5246ea",
        "cursor": {
          "ref": "a61ffa48-a6f6-48b0-bea0-1b2fe330e348",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "633cb85a-43d4-4648-962a-2d0066a59568"
        },
        "item": {
          "id": "7958f1f1-f291-48d2-be7f-859a9c5246ea",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "72381690-6fa0-43e9-98b7-e415586aaa3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7290ac70-20dc-4dc8-b95a-f09b0a2a9314",
        "cursor": {
          "ref": "6a2fbed0-fa26-40a7-ac2d-2d768c343180",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b41236af-fc5d-472f-93eb-e5b8ac39a689"
        },
        "item": {
          "id": "7290ac70-20dc-4dc8-b95a-f09b0a2a9314",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2133f0ae-8123-4dfe-bca7-ff6f70705bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6aa36f-6376-4dda-b757-890c743c6906",
        "cursor": {
          "ref": "319f3f7d-52eb-44c5-828c-8902d065dc77",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7e9c4004-8c62-4233-a75b-0f81d1d3dc95"
        },
        "item": {
          "id": "1e6aa36f-6376-4dda-b757-890c743c6906",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b26de7e5-af69-4a15-8b25-b090f8ad06f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721f53fd-f9c2-4756-a8e8-618164920ece",
        "cursor": {
          "ref": "ac768200-67ce-4eec-9bd6-3e2f00dd2e05",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "df136d57-9c71-4394-8e72-7847ffaae090"
        },
        "item": {
          "id": "721f53fd-f9c2-4756-a8e8-618164920ece",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a0300b3f-c27b-4bed-bbd8-4179b2647636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc1a7ad-8cad-48bb-a00a-a4a54e4321eb",
        "cursor": {
          "ref": "b614ad0a-232f-4405-a925-389f901ad0c1",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0c40367b-3ff1-4aa4-b0a3-2fdbb52af660"
        },
        "item": {
          "id": "acc1a7ad-8cad-48bb-a00a-a4a54e4321eb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bb4f1e7d-4490-4bd6-9de6-a2309742e5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed4f7e8-7a83-4632-922b-207639430aca",
        "cursor": {
          "ref": "579ab08e-232f-40f7-817e-041a87b80fde",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8db24f64-e508-4751-9ce2-eb73a065f06e"
        },
        "item": {
          "id": "6ed4f7e8-7a83-4632-922b-207639430aca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e235c719-31e4-4af0-aa86-595770da911f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7852b5c6-1706-40ab-a470-c42dd8675c73",
        "cursor": {
          "ref": "bfcab30e-088c-41d8-ac63-685521fcdc89",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "16f67183-79d9-4350-90b9-57b6c3a57d89"
        },
        "item": {
          "id": "7852b5c6-1706-40ab-a470-c42dd8675c73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8b1d799a-1a1b-4c8d-8eed-f76babcc7d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a249af-3f01-406a-aae6-ae63b674c80b",
        "cursor": {
          "ref": "e6444833-34bd-4d69-bdec-71cb1e866486",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3e814599-2771-4668-81f0-eee2c316055d"
        },
        "item": {
          "id": "52a249af-3f01-406a-aae6-ae63b674c80b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "166989cc-e389-4d23-989b-7f13e2e95cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f545a380-f40c-482f-973b-defedcf055f5",
        "cursor": {
          "ref": "866d3015-bd93-40c8-adcc-0c2e79600b56",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e6202d85-d499-4895-a526-292c259e5893"
        },
        "item": {
          "id": "f545a380-f40c-482f-973b-defedcf055f5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "810632c2-7864-4a85-8951-fbc0a848dec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc3cb96-6cea-48c2-bed0-bd603fae73ea",
        "cursor": {
          "ref": "c2f0b09a-fd2a-4e0c-8e00-ac06cbae1306",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "350de3c4-2c8b-4442-b33f-0bb41105c59a"
        },
        "item": {
          "id": "cfc3cb96-6cea-48c2-bed0-bd603fae73ea",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fe627ca4-fc19-48c4-a8e2-973a6442f824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c07f51-0ca5-451d-9722-b33b4b8db8f3",
        "cursor": {
          "ref": "13d88817-9cae-4ffe-b832-31cfe17befde",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "53fceb4d-dc71-4cd3-a782-b5ead0417453"
        },
        "item": {
          "id": "f2c07f51-0ca5-451d-9722-b33b4b8db8f3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ed901908-f6bd-41f8-8dbc-27125060791d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc46847e-8065-4430-beb5-3f146227b5cc",
        "cursor": {
          "ref": "bb406932-933c-49a0-908c-313fe371fa47",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "afdad421-7c8f-46f1-a666-f11332225d1c"
        },
        "item": {
          "id": "dc46847e-8065-4430-beb5-3f146227b5cc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8e31e615-4017-43d9-8697-ca354150a4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cc624b-80db-46fb-880d-9e1e77f0665f",
        "cursor": {
          "ref": "dbff63d5-0ba4-4504-a645-a7cbf758b485",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1f29f4ef-4a80-4017-a4e3-b98334203538"
        },
        "item": {
          "id": "00cc624b-80db-46fb-880d-9e1e77f0665f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1f2a2414-7f37-43a0-8972-323595692ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b7a87b-5266-424e-a52f-1ebd3c0b9e99",
        "cursor": {
          "ref": "95ed000d-d3ec-4549-867f-7377e2a179b2",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "96138dd0-9442-4c79-b4e5-c35c9e6c9561"
        },
        "item": {
          "id": "d9b7a87b-5266-424e-a52f-1ebd3c0b9e99",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9aee79a3-d7c1-4fa3-bc9f-dbda0a74f575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6384e6b0-d189-46d6-aeaa-35bcdd75389e",
        "cursor": {
          "ref": "c265f577-4ece-4c5b-a12c-de2567e198dc",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ae2faa66-3211-4fd7-98fb-9833700b8a10"
        },
        "item": {
          "id": "6384e6b0-d189-46d6-aeaa-35bcdd75389e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dadf1981-0005-407d-bd81-e435ab667d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650931e9-7ff8-456e-b11b-cb02ebfe9a9c",
        "cursor": {
          "ref": "91202e07-3194-427b-8d94-40c6e6833c92",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4928c78a-4e79-4151-b11b-2c05bacdcb80"
        },
        "item": {
          "id": "650931e9-7ff8-456e-b11b-cb02ebfe9a9c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d399065d-ac71-4856-a27a-799be16101a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a80196-e693-4cb1-a0d8-8e455acce3b3",
        "cursor": {
          "ref": "d57e04a7-1290-4b42-ad8f-cd70044d0b38",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "666219f4-55a4-463a-be25-69643f805b45"
        },
        "item": {
          "id": "a9a80196-e693-4cb1-a0d8-8e455acce3b3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "678e91d5-53bf-44c4-a0a6-68108862a9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2729c098-5999-4637-8f17-6477877e57e6",
        "cursor": {
          "ref": "fdac1017-f610-4a67-afd2-f6e4a4d4e854",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a30a0c8c-175a-4363-8b3d-758fe4accbd9"
        },
        "item": {
          "id": "2729c098-5999-4637-8f17-6477877e57e6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "171e7459-eae2-43f4-914b-ec32b25a85ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb778d65-cb16-4557-ae8a-2521dc13214a",
        "cursor": {
          "ref": "b0bf6d3d-36fd-4c75-9c0e-0df34b4564d8",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "69f64a1b-6406-4a69-898e-80815c2db1b3"
        },
        "item": {
          "id": "bb778d65-cb16-4557-ae8a-2521dc13214a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a7c417f4-ba4c-4edd-97c5-e4b879177f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4cd1c6-a540-4d02-8f87-73e4b38d98e2",
        "cursor": {
          "ref": "f4416d94-64df-4c6b-8125-d457b9c6fa8b",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a3ea9414-4b28-4ea2-a2fd-ddf2b7488e35"
        },
        "item": {
          "id": "ec4cd1c6-a540-4d02-8f87-73e4b38d98e2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0217634e-51fc-4171-8a31-7cdebb48a652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a888b2-749f-4304-a90f-a324418549aa",
        "cursor": {
          "ref": "5fe0bf70-74c9-4aa2-908d-8ee9ffa89275",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "64f3d2b3-b4b2-4667-9eeb-9b7afff1d3ab"
        },
        "item": {
          "id": "90a888b2-749f-4304-a90f-a324418549aa",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3d108ae6-0822-48fd-987e-aa7b302e124e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae7785c-f5a7-47ce-ba3e-b9ad41a12d38",
        "cursor": {
          "ref": "d05f78c1-ef25-41cc-a08e-94ac7aaf6247",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b6023c6e-f94f-44aa-bf96-97dfd11163b3"
        },
        "item": {
          "id": "bae7785c-f5a7-47ce-ba3e-b9ad41a12d38",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e537e0d6-d67b-48f1-9509-deac9da1eb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d369299-6950-4c6b-bc31-ea628b3509cc",
        "cursor": {
          "ref": "c7356a88-d85d-4001-997c-7e3117f59570",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b0fb127c-b78b-48de-b462-eab95376493f"
        },
        "item": {
          "id": "8d369299-6950-4c6b-bc31-ea628b3509cc",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fac8990e-fd49-4516-9843-d3f651e43ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea322e13-2592-4974-ab32-13444fb9de42",
        "cursor": {
          "ref": "9373865c-dd25-46c8-8d53-4e674a81769c",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b823f91c-d07f-45c8-a58e-d7928e77f868"
        },
        "item": {
          "id": "ea322e13-2592-4974-ab32-13444fb9de42",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3e3af187-875b-4b1c-98df-05d7d8fc69d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4a5621-1135-4bed-8748-f294619bdc91",
        "cursor": {
          "ref": "7581185d-486e-4f7d-a0a3-333866752bc2",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1300c3c2-a64b-462c-9012-d5d876803c9c"
        },
        "item": {
          "id": "8d4a5621-1135-4bed-8748-f294619bdc91",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "630ddc61-2028-47c9-92f7-cf2b5187b265",
          "status": "Created",
          "code": 201,
          "responseTime": 473,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "72c4116b-d507-45c8-b7c2-ad1cc4f27bdf",
        "cursor": {
          "ref": "8014cc8d-130c-492e-b165-a82510c71b6c",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4bff3b02-6ca1-4c88-9a0c-9e7fc2d6fa5c"
        },
        "item": {
          "id": "72c4116b-d507-45c8-b7c2-ad1cc4f27bdf",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5f5f9bb9-b3fa-4b10-be44-b5d571d29f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4394de-ed15-45be-8a2e-8ac3a5c75b70",
        "cursor": {
          "ref": "f1247247-930a-4029-8be8-deb446724d3e",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8d457146-4a8e-4d3c-8d03-d647bcf27293"
        },
        "item": {
          "id": "4a4394de-ed15-45be-8a2e-8ac3a5c75b70",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "900c0d12-6361-4dde-82aa-70409ecaca1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c621214e-fe4d-4394-ae82-613f81cdb9f9",
        "cursor": {
          "ref": "edefe125-6973-4c04-9a62-fbb13fc0898a",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1e13278b-19fc-4e50-8f56-8069b7a50a47"
        },
        "item": {
          "id": "c621214e-fe4d-4394-ae82-613f81cdb9f9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b40e665a-ddd8-452e-8501-225e1c52ce59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113cd1f5-7d2b-4391-90b1-50138180f1b8",
        "cursor": {
          "ref": "3c3cad80-4b5e-4899-bb2b-02af6285028d",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "23ac7f4a-7d51-41cb-8c50-ae3c879dc348"
        },
        "item": {
          "id": "113cd1f5-7d2b-4391-90b1-50138180f1b8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6f29a953-e690-4d60-a33a-ab9db99c44cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ede1566-e3fa-4264-bd0b-3087434b918a",
        "cursor": {
          "ref": "decac87f-1c5d-437f-b57c-ecaa6c8f8849",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e85e4e2f-22d2-44e2-acf5-a36181041757"
        },
        "item": {
          "id": "5ede1566-e3fa-4264-bd0b-3087434b918a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e43c4cd0-ddab-4998-9f35-6f2d65ac6279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99eee59-c6a5-48a8-b855-6ccb5f42f87b",
        "cursor": {
          "ref": "88a745ca-f70c-4813-b2e3-1a09f69d40f6",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "556ffc0f-76bc-481e-8428-c414b0329651"
        },
        "item": {
          "id": "b99eee59-c6a5-48a8-b855-6ccb5f42f87b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ae3702d9-697c-4818-a492-d10c70d61844",
          "status": "Created",
          "code": 201,
          "responseTime": 488,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "8a09e241-f537-40fc-a612-344f1e0622b8",
        "cursor": {
          "ref": "1b7b6838-6854-4776-a35c-3a1802a55490",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6f5dcdd6-75a0-4acd-ba6e-4d536d55f321"
        },
        "item": {
          "id": "8a09e241-f537-40fc-a612-344f1e0622b8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "088e2cb0-4f48-4332-8555-1244c0298cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b33ea05-d5bf-4f0c-aab9-a33e4a71af1f",
        "cursor": {
          "ref": "51a5a908-3d1e-4fd0-bfba-a9de3b945cec",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3a2797a2-7204-46a2-81c4-c73328b77601"
        },
        "item": {
          "id": "5b33ea05-d5bf-4f0c-aab9-a33e4a71af1f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "466a027c-f2cb-460d-a236-264dfdb78365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d270bac-7558-489b-8cf0-f4178a68865a",
        "cursor": {
          "ref": "d5651022-d410-4469-9aeb-c895da128953",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "58c8a407-ee1b-4718-abf6-40f3f5b4a4e4"
        },
        "item": {
          "id": "8d270bac-7558-489b-8cf0-f4178a68865a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "323fbb2d-9577-4512-a6d8-ea5951c32808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c9dd54-0736-41fd-a632-b6540a5ffd18",
        "cursor": {
          "ref": "ec0087ac-ce7e-48cf-92e3-7d143f2c66c4",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "37c4696c-5627-4a0f-849d-a68fa4e24256"
        },
        "item": {
          "id": "23c9dd54-0736-41fd-a632-b6540a5ffd18",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6789d6de-f7b6-468f-b267-2953b7101c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659503e0-b816-49ca-9b24-36aedea51366",
        "cursor": {
          "ref": "cbd0f2f7-abf0-456b-b995-e858e3cc32d9",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1e5e65d7-c6cd-48d1-bf43-abc0c5915eaf"
        },
        "item": {
          "id": "659503e0-b816-49ca-9b24-36aedea51366",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e25487a8-d46c-4b50-829e-18f0c6faeb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4aa269b-eab8-409f-a0fb-9a7c5c3518b5",
        "cursor": {
          "ref": "0cffcb73-4b85-4de7-948b-269d2a6e3c8c",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "199decc4-c1f1-43e5-9810-1e08020d950a"
        },
        "item": {
          "id": "d4aa269b-eab8-409f-a0fb-9a7c5c3518b5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "095bedf1-1816-4fbb-8e8f-707e021f2d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21c8182-07df-4c2c-ac62-e6ce3164a48c",
        "cursor": {
          "ref": "20755482-7f1e-4f8b-be1d-ce089284d944",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f9fef118-510a-42bf-a3e3-ad1cec6530ec"
        },
        "item": {
          "id": "c21c8182-07df-4c2c-ac62-e6ce3164a48c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b936e2b3-ea20-405c-9299-1266bd28ba75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877caaec-40e3-4303-be6b-88450325dc3b",
        "cursor": {
          "ref": "86856036-1ae3-4aa9-9545-3bdfadcd6599",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "058e755f-daf4-4b6e-955e-ab9f7c2616e0"
        },
        "item": {
          "id": "877caaec-40e3-4303-be6b-88450325dc3b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6e30b9f6-6791-45d6-9184-38c8af8323dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc0987f-2fed-4215-a01d-499ca16a35af",
        "cursor": {
          "ref": "9c36d004-38b2-4e16-80d6-aa1c35e7322d",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f3520d69-47a4-4594-9b7a-6f7eb4393001"
        },
        "item": {
          "id": "dfc0987f-2fed-4215-a01d-499ca16a35af",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "477aeff4-cb24-4de5-b06d-9b206afd6b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "2aad68fd-6a51-4ea2-aabe-c7dea31dad12",
        "cursor": {
          "ref": "92d4e4a9-7300-4937-b403-e7cee3d42acc",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6d1f5b97-2e65-4d68-874a-cefbf06a4d20"
        },
        "item": {
          "id": "2aad68fd-6a51-4ea2-aabe-c7dea31dad12",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f0416c7b-fe30-4060-86b6-8a46333eece8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "aaeae3de-f72e-4c34-9eba-b425de748554",
        "cursor": {
          "ref": "425cd50b-fea4-42b9-bfbd-d37fca9ac048",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ac4dea56-5738-4277-9180-75d19f8ddc1e"
        },
        "item": {
          "id": "aaeae3de-f72e-4c34-9eba-b425de748554",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f1b37a0c-b8a7-4cbc-b2ed-5d23ee39338e",
          "status": "Created",
          "code": 201,
          "responseTime": 530,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf237fb4-1d4f-4709-8f67-cfcbfab74b6f",
        "cursor": {
          "ref": "5f0ae442-5972-4c73-bbee-96d9df865167",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bb00b12e-ee6f-491f-967c-498b5630c2b8"
        },
        "item": {
          "id": "bf237fb4-1d4f-4709-8f67-cfcbfab74b6f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "24577b2e-4bd0-4f92-b90f-9aa7f70b53e3",
          "status": "Created",
          "code": 201,
          "responseTime": 489,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "67534e06-5d87-4b9f-a515-1cb68d1cb0f3",
        "cursor": {
          "ref": "d36dccbd-4d0f-4315-9c24-a2f7193b4473",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d5906f06-cc58-41f2-8bec-490191d10faa"
        },
        "item": {
          "id": "67534e06-5d87-4b9f-a515-1cb68d1cb0f3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6225f87b-b416-44d9-bd0c-697155941ceb",
          "status": "Created",
          "code": 201,
          "responseTime": 476,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dd3b9a-0e74-465b-af89-e0899c42b530",
        "cursor": {
          "ref": "65907d12-8fd3-4d40-8502-e4db0a669d62",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "17f62d32-acad-49bb-905e-524edeaea61e"
        },
        "item": {
          "id": "f3dd3b9a-0e74-465b-af89-e0899c42b530",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3118fcd0-1f28-45c1-91f7-c940d16a6d09",
          "status": "Created",
          "code": 201,
          "responseTime": 515,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1901a0-80fc-4b25-9c97-3e3fe0a925bb",
        "cursor": {
          "ref": "0ac7f7dd-1308-4492-9b79-b9edd4e80c1d",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "33c160b6-fe6c-4aa3-be46-729fb3f3ac77"
        },
        "item": {
          "id": "5f1901a0-80fc-4b25-9c97-3e3fe0a925bb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bb706e13-ea72-4b6b-932d-7fe5b2a2ca8f",
          "status": "Created",
          "code": 201,
          "responseTime": 456,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e627ed-52a0-47ef-91a2-55e7bc09664b",
        "cursor": {
          "ref": "bd52c783-faf7-46ea-a35c-89373a89719a",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2932addf-8ff6-4b79-888d-cd0f600193fb"
        },
        "item": {
          "id": "80e627ed-52a0-47ef-91a2-55e7bc09664b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e7644e38-9086-4e96-8f76-13ec1534b377",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "80e627ed-52a0-47ef-91a2-55e7bc09664b",
        "cursor": {
          "ref": "bd52c783-faf7-46ea-a35c-89373a89719a",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2932addf-8ff6-4b79-888d-cd0f600193fb"
        },
        "item": {
          "id": "80e627ed-52a0-47ef-91a2-55e7bc09664b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e7644e38-9086-4e96-8f76-13ec1534b377",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7b8f9ad6-e2be-40a2-9e2d-ff541e47c313",
        "cursor": {
          "ref": "16944fd5-7530-4be5-9a10-8cd5553f10ce",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0cb5223e-3646-4dcd-8b33-eecf38a5d873"
        },
        "item": {
          "id": "7b8f9ad6-e2be-40a2-9e2d-ff541e47c313",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "58a98433-0aed-4497-ba8e-e51bc84b27d0",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "4b4d8baa-3d45-4401-910f-22ff9fbdc128",
        "cursor": {
          "ref": "4964c51d-3ed9-4b8d-9a3b-dd9969091b9f",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f7018536-2135-4095-919f-6a62c0675b83"
        },
        "item": {
          "id": "4b4d8baa-3d45-4401-910f-22ff9fbdc128",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9aaceeda-9886-49e2-b88d-5eafd4d05570",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c5d0b305-1ee5-4ce9-904f-c11c5f3dc894",
        "cursor": {
          "ref": "12f904d0-3ecc-4f00-a6c9-385a3e9c8130",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "afac6088-d2fc-4f43-812a-6ff67b0caab2"
        },
        "item": {
          "id": "c5d0b305-1ee5-4ce9-904f-c11c5f3dc894",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d092a02d-3372-4ff9-8e1f-274ff456a9fa",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1d4dbad2-d783-465c-bb7b-d7442892677f",
        "cursor": {
          "ref": "a62db2d8-cd11-426b-8e9f-7f727f6a0b26",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4fb8fd01-cc51-4dd8-b362-ce65afa5c58b"
        },
        "item": {
          "id": "1d4dbad2-d783-465c-bb7b-d7442892677f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8b992ffb-97a9-4c86-b0b2-da7de80a8c8f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7efd5fdf-b728-490e-b4d1-ddc77fc1757b",
        "cursor": {
          "ref": "40bef810-a66a-4c94-ad7e-9bc413de71c0",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "880ec9f5-1721-4040-889b-8600d0e6e357"
        },
        "item": {
          "id": "7efd5fdf-b728-490e-b4d1-ddc77fc1757b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "15c49a30-7e05-4082-94ff-803acad67e10",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "49d6f74c-7c46-4285-b4ea-cf1434d0dbff",
        "cursor": {
          "ref": "bbed9c28-13a5-4edb-8b71-03435d20a99a",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "aae39586-c0d1-4cce-bc08-64aa3a8e4101"
        },
        "item": {
          "id": "49d6f74c-7c46-4285-b4ea-cf1434d0dbff",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e300b1cb-0489-420a-b344-db20cacfab46",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "4afd265c-8a6a-44b0-a9f5-0a25ff12a33c",
        "cursor": {
          "ref": "bd401684-a6c6-4d81-a673-e839b8cca0a2",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5cab7571-14d2-4552-8a0e-47801b822069"
        },
        "item": {
          "id": "4afd265c-8a6a-44b0-a9f5-0a25ff12a33c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0dcdcae7-4d96-4c83-a674-df249063dc6a",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "eec4de68-6043-45dd-9964-3e121124b44b",
        "cursor": {
          "ref": "931d94d1-1b0f-4cb6-9932-22b0dfd1e4fe",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bd877b8a-9f3a-4923-a589-40a746f5ac68"
        },
        "item": {
          "id": "eec4de68-6043-45dd-9964-3e121124b44b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "30b68be3-a04c-4e49-a732-68d66bf3c2dd",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ce1c92f0-6df1-469b-9c61-9605d5881a6c",
        "cursor": {
          "ref": "efc0d1e5-13bf-42c7-be42-c076aa062e47",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ea9fff75-578e-42c3-b0bc-5ca5bdd88bb2"
        },
        "item": {
          "id": "ce1c92f0-6df1-469b-9c61-9605d5881a6c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c914b331-9fdd-4653-abd8-c83d5e12e833",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "5ff52f05-1516-49f0-81b7-5ab2968ef356",
        "cursor": {
          "ref": "2b3077c1-75e9-4527-90bf-9a96b5ca761d",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d7fa071e-e7d1-4939-aa98-8599c865ba17"
        },
        "item": {
          "id": "5ff52f05-1516-49f0-81b7-5ab2968ef356",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9058e3f2-c7c0-41b0-9932-a50a781f28a1",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "5be681cc-136b-48ce-b2ab-6a9bbaecc600",
        "cursor": {
          "ref": "a77bf46d-dfe8-4c94-baf6-98b90e2fad4a",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dfe1c92c-62bd-4fd3-8859-c4dc72b556bd"
        },
        "item": {
          "id": "5be681cc-136b-48ce-b2ab-6a9bbaecc600",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a12c7bf1-3865-4432-a659-89b6e33f4ba9",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "63031aaf-1b5a-49dd-a16f-c330756c7162",
        "cursor": {
          "ref": "e9786d03-ffcd-4054-bb33-0ef3f8754720",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fc00a2a5-3364-4f51-801c-f2ae318749ba"
        },
        "item": {
          "id": "63031aaf-1b5a-49dd-a16f-c330756c7162",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ac6eac51-ac23-48d7-915d-9bf08b94be4e",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a87b5cd4-67bc-4fec-8bc1-5817d566de97",
        "cursor": {
          "ref": "56177500-537d-4944-9b29-a5b56a45687b",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8af56b93-f07f-42d0-aa3a-c957e9a876a0"
        },
        "item": {
          "id": "a87b5cd4-67bc-4fec-8bc1-5817d566de97",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "97beed64-f67a-4848-898e-b1ce707ca215",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "45e1ee58-f6b2-4473-91c9-a0fa0b02403d",
        "cursor": {
          "ref": "a29d64b2-b384-4fea-a195-89495f8e0b17",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7745878a-4075-44d6-a2dd-64d9c41abe16"
        },
        "item": {
          "id": "45e1ee58-f6b2-4473-91c9-a0fa0b02403d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "af05962c-090f-4501-87b4-a7b4252b362d",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "dd60455c-7aa6-4d0b-b7b0-0838d67d1c90",
        "cursor": {
          "ref": "5386d717-16da-4418-aa8c-0699a2b28988",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dfa876f6-891f-4211-a863-999fd2e88a2f"
        },
        "item": {
          "id": "dd60455c-7aa6-4d0b-b7b0-0838d67d1c90",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c48c6a3b-3ad4-429e-af47-1999206bb037",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "ca356b71-3a4f-43f9-bc3c-808e11b6984f",
        "cursor": {
          "ref": "1b4f6dce-a655-46ad-9c55-ba38e4afd596",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7144b6d2-ef03-4fc5-935e-15f6331f37f3"
        },
        "item": {
          "id": "ca356b71-3a4f-43f9-bc3c-808e11b6984f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7219a2e5-e15f-4ec1-9c48-b133f798705b",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c16ce437-2046-42ef-a5e9-86625a63f797",
        "cursor": {
          "ref": "cdfe541d-ce74-4663-b45e-5ddda3c6f728",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "21501b22-2f6f-4f24-b028-73b6b7c4cc7e"
        },
        "item": {
          "id": "c16ce437-2046-42ef-a5e9-86625a63f797",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ba9caa79-091e-4f31-8a9b-a3ee9bd113af",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0f4b229e-f09e-4f2e-b0e4-cbc087336a8a",
        "cursor": {
          "ref": "612db941-c3fc-44b9-8dae-ffcda3587a43",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9e1232c1-0dfc-4ea1-a988-2a7d98d5e8de"
        },
        "item": {
          "id": "0f4b229e-f09e-4f2e-b0e4-cbc087336a8a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e82e6292-5d98-4582-ac3f-dcaf218d08f7",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "a59d30b0-b375-4a81-9c36-ebe5b19891ea",
        "cursor": {
          "ref": "34cf5065-3a99-4127-adf1-a39c5c4bd83a",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9f531567-4867-4214-acbf-f161147ed797"
        },
        "item": {
          "id": "a59d30b0-b375-4a81-9c36-ebe5b19891ea",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0968761b-5323-4cb7-be3a-d2e86b738bbe",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "def43a45-b791-4557-a18e-f1efeebb7a92",
        "cursor": {
          "ref": "ec4efa56-c992-4501-9f4d-653d97a8e8c2",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ea6bb1f2-27fb-4af6-be97-fc2de7ceaab7"
        },
        "item": {
          "id": "def43a45-b791-4557-a18e-f1efeebb7a92",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "087a1f22-7649-4229-bc8f-b277cfa6060f",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "157284bd-8701-4388-a2fb-b2688a8066cb",
        "cursor": {
          "ref": "c7cf5370-1d5c-4793-beb6-7ff9e5820395",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d5109d62-f237-40c5-92de-5daeb4744672"
        },
        "item": {
          "id": "157284bd-8701-4388-a2fb-b2688a8066cb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "85127075-078a-4786-9d77-690cbe85f853",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c089fde1-47f9-4c31-a640-6a3dfa57361a",
        "cursor": {
          "ref": "1a393245-3df9-4f17-8900-af5a491ecaab",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "eb3e48d8-cc34-47db-b4b8-a5dc6cbca5b2"
        },
        "item": {
          "id": "c089fde1-47f9-4c31-a640-6a3dfa57361a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "49808cad-6c43-484f-990a-0ad503c2254f",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "ecdd1e68-986a-41b1-ac58-3e3a4428a3be",
        "cursor": {
          "ref": "5c440e17-6952-4d11-a7b4-554959002765",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "acf6281e-5381-41fd-b8d9-aa18b7cc4432"
        },
        "item": {
          "id": "ecdd1e68-986a-41b1-ac58-3e3a4428a3be",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f13e4254-872c-4089-8059-d3a8485c9ec4",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "93a17a9c-5e7f-4cd4-a17b-c94ad4b39a26",
        "cursor": {
          "ref": "1214d828-ca2e-41a1-bc77-1f27ff3e3436",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ad351d47-e563-476a-9a20-c3541d33630b"
        },
        "item": {
          "id": "93a17a9c-5e7f-4cd4-a17b-c94ad4b39a26",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "46af8223-e8c2-4b4f-a513-31e4dda0bb0f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "816c31dc-e5c8-4320-a83b-4deb2b30b98e",
        "cursor": {
          "ref": "61d9fbc9-51eb-4387-8840-b1424b7857d4",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b5852892-274c-4db3-b0b0-49397276bd92"
        },
        "item": {
          "id": "816c31dc-e5c8-4320-a83b-4deb2b30b98e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b0ae93b2-2457-426e-9062-e761127e2a2c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "b4229f70-e916-4610-85d8-918bf40c3680",
        "cursor": {
          "ref": "af97b74e-6169-4f1b-b574-5219cbf611d2",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e4f07051-7976-47c1-ade5-702a698e126a"
        },
        "item": {
          "id": "b4229f70-e916-4610-85d8-918bf40c3680",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5251d405-7e00-4902-a706-142ce44b0b92",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2a5ee740-d933-4a68-9a5e-5b7a19bc66a5",
        "cursor": {
          "ref": "16b5ceb1-315c-4da5-84d4-3881ea400bb1",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9351d64d-0948-44c8-9c57-f79f7062216b"
        },
        "item": {
          "id": "2a5ee740-d933-4a68-9a5e-5b7a19bc66a5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bb5bb1cc-6b5c-4dba-8385-35c07e2f9748",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "73e0912c-cf9e-49b5-bdf5-74fa92c7f296",
        "cursor": {
          "ref": "87c1c5e0-9ded-4a59-acd7-6d08c2c49dbf",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ce2b33fe-ba80-411b-927f-dd710ae7bb09"
        },
        "item": {
          "id": "73e0912c-cf9e-49b5-bdf5-74fa92c7f296",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b7dae8d1-3eaf-4c01-a0cf-1f7006631533",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "16c69807-eca1-4033-bf4d-00a851dfeee2",
        "cursor": {
          "ref": "76ff158f-8653-49ab-bd6e-63ff48308338",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c9ed5115-5ac3-4590-a9b6-669742440cd9"
        },
        "item": {
          "id": "16c69807-eca1-4033-bf4d-00a851dfeee2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4f076382-90a9-4c18-8112-4bfa9340549a",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c2369064-17d7-49a9-84ae-f18f19212ddf",
        "cursor": {
          "ref": "5dc5e486-2734-425d-b43c-145d4a9f5f57",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "67ee502b-84dc-4d52-8d7f-45d2888814f4"
        },
        "item": {
          "id": "c2369064-17d7-49a9-84ae-f18f19212ddf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4d438a1a-5ffc-4792-ab05-982aee54d539",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ff094b4f-61aa-43a8-b7b2-97a906c1f20a",
        "cursor": {
          "ref": "c49231dc-21fc-40f6-a1d2-1edb379b928e",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5c60de47-822b-4fef-aa8d-7d5f86799862"
        },
        "item": {
          "id": "ff094b4f-61aa-43a8-b7b2-97a906c1f20a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e4faaead-b115-45b6-b5f2-6485ab189cc2",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2db054af-7f27-45ab-9b12-1eb2273a6b5b",
        "cursor": {
          "ref": "4a840ca6-c3be-449d-ba32-1f1e77b3a247",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "eba2cac5-47af-4d69-95ab-59929d5b55f2"
        },
        "item": {
          "id": "2db054af-7f27-45ab-9b12-1eb2273a6b5b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f3940be2-5300-4617-8e9c-e0b29dabcac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9eba38-d1a7-47ef-aec3-86fee6c227f0",
        "cursor": {
          "ref": "43daab22-f40a-4358-ad8b-e53f7ce46938",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "be94ad18-94dd-4efa-8d82-f7398826bede"
        },
        "item": {
          "id": "af9eba38-d1a7-47ef-aec3-86fee6c227f0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "7d1ea1d4-5aa4-4d62-b654-0e892a67a3c0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce623d2-07af-4415-b1af-40db00349bd0",
        "cursor": {
          "ref": "bfc5677b-05f9-4c97-bf2a-fbb8efe3e3a5",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9d509244-bcec-4277-be51-e22ed9b54c5c"
        },
        "item": {
          "id": "fce623d2-07af-4415-b1af-40db00349bd0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "afd8fb10-3b00-4279-a8f3-a3902c8e0541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce623d2-07af-4415-b1af-40db00349bd0",
        "cursor": {
          "ref": "bfc5677b-05f9-4c97-bf2a-fbb8efe3e3a5",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9d509244-bcec-4277-be51-e22ed9b54c5c"
        },
        "item": {
          "id": "fce623d2-07af-4415-b1af-40db00349bd0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "afd8fb10-3b00-4279-a8f3-a3902c8e0541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81717669-2fff-454f-a739-50d7cdf5fe3c",
        "cursor": {
          "ref": "f9c5749a-d093-447b-a319-f54af4d29f19",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ad07af78-4259-40f7-b3e5-a00748a3c08b"
        },
        "item": {
          "id": "81717669-2fff-454f-a739-50d7cdf5fe3c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5428b198-be54-4641-9a58-144b1e218021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220c89b0-8d44-4256-af01-721e0962460f",
        "cursor": {
          "ref": "15397ac1-5820-4aec-b0df-97c9240a4883",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "87d04d63-acc8-496c-a032-631a6e51c7d8"
        },
        "item": {
          "id": "220c89b0-8d44-4256-af01-721e0962460f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9384a90d-ed64-4cab-83d3-f17ca1e7fcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88267569-21be-47a7-836e-ac083bc894f0",
        "cursor": {
          "ref": "965a93d1-4e5d-4d67-8052-5adda4b4a4cb",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3542c56d-5734-4993-8dc1-f277a534498a"
        },
        "item": {
          "id": "88267569-21be-47a7-836e-ac083bc894f0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6f748deb-044a-42f8-980e-380e0a1f378f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653aaa64-b63b-47fe-bdda-d152c4a03f15",
        "cursor": {
          "ref": "2b05dce9-bfc4-40c2-8c19-66ecdb146928",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5a240367-1a6b-4895-a735-be9fcdc573f4"
        },
        "item": {
          "id": "653aaa64-b63b-47fe-bdda-d152c4a03f15",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1a250b6e-8bc1-4160-9997-053d85b6cdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32992cf0-af24-4d3e-abaa-feee047f314f",
        "cursor": {
          "ref": "61b170a2-7b8d-4f22-8fd0-883bf6d418e9",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6f166424-a175-4974-8d8f-61e86b9a74ea"
        },
        "item": {
          "id": "32992cf0-af24-4d3e-abaa-feee047f314f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "94746716-b8bd-4f53-891a-f50271978cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e728ebb5-822d-4b2c-ab8f-f169fe319d47",
        "cursor": {
          "ref": "3a641e79-b279-487d-b7fc-6f92fe65824c",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "28817d40-986e-4c73-b83e-83cce7ff913f"
        },
        "item": {
          "id": "e728ebb5-822d-4b2c-ab8f-f169fe319d47",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2222ce53-9674-4d09-a39a-54763c2c24c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6076bed3-79bc-4bcd-b0da-7175b2c40a55",
        "cursor": {
          "ref": "dbb91675-049b-4f8e-9ceb-e51316a8fba3",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "060eb55b-430f-43c6-a192-0981b288fc6c"
        },
        "item": {
          "id": "6076bed3-79bc-4bcd-b0da-7175b2c40a55",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b02055f4-af45-483a-9798-94b52236ab36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bdb863-9b6c-4392-a3a8-ed6d91147dec",
        "cursor": {
          "ref": "830ded57-67f7-4737-b91e-7929cba9b5c1",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cea8f737-5d78-4bb4-a179-0435a34bdc28"
        },
        "item": {
          "id": "f7bdb863-9b6c-4392-a3a8-ed6d91147dec",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "224bef45-51a3-4417-954c-f5d9f9780948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428c3b82-1d63-442a-be7b-637ae4a236a5",
        "cursor": {
          "ref": "1ccf1212-75ec-46bc-b312-d581c824fa7c",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8afd333e-021b-4bba-b3b3-56e95d9c2a1f"
        },
        "item": {
          "id": "428c3b82-1d63-442a-be7b-637ae4a236a5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "34596b5e-c72e-4beb-8795-4fba8a873f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4c76a7-5317-4ec2-adb9-be372a9c8c49",
        "cursor": {
          "ref": "038efa8e-a878-4d75-b5ce-a84fff49e86a",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a04028ca-c420-470f-96a4-f5c6e91903aa"
        },
        "item": {
          "id": "bb4c76a7-5317-4ec2-adb9-be372a9c8c49",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "609b3da3-f9c7-42ca-a58f-7d334efcfa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390e7fb3-5553-4394-9f60-216b13fdbf6d",
        "cursor": {
          "ref": "88d85222-bbe0-4cd7-a72f-68dd5370385d",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c943e7fd-36a1-44e6-b976-50e1032e300a"
        },
        "item": {
          "id": "390e7fb3-5553-4394-9f60-216b13fdbf6d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2124a493-ab6b-49b6-9491-ff67b33d9974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b8de54-3759-47c8-9bfc-8719c955b7d6",
        "cursor": {
          "ref": "7df1ad5a-3022-4faa-8d24-6129d045a095",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9fab5865-be00-4dbf-9364-af35cfd70f56"
        },
        "item": {
          "id": "d5b8de54-3759-47c8-9bfc-8719c955b7d6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2b2b3f1c-2bbd-4ff0-8ffe-130941ac445c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1109dac-37b9-4950-a4e9-a8a2c4d6884b",
        "cursor": {
          "ref": "0bb4453b-de96-48dc-96b9-a4337190bdf7",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9044f82e-2c3a-4879-8bfb-f2a6fbdb21fc"
        },
        "item": {
          "id": "f1109dac-37b9-4950-a4e9-a8a2c4d6884b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a6710654-9729-4cf5-aacc-5564e1a60e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e207271-c337-468c-b5f7-20fe9704772d",
        "cursor": {
          "ref": "91b72a98-c2ad-43bb-9498-ebd55148898e",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e660d490-7e0d-4be8-a1b8-b128c3f69891"
        },
        "item": {
          "id": "8e207271-c337-468c-b5f7-20fe9704772d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8ba77b25-a55b-487f-b356-b10d3d876c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1b3097-c4d2-4df7-9664-616fb7095682",
        "cursor": {
          "ref": "9857dedd-59d4-43e8-a5d3-855476804d44",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f5844d1c-1f3e-4d18-a7d0-b60b1c840ba9"
        },
        "item": {
          "id": "4e1b3097-c4d2-4df7-9664-616fb7095682",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f4e4c8c0-2634-4f48-abb8-0ca8bb3bd901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148e2ab6-6b3c-48ae-99f5-62bbabf9beda",
        "cursor": {
          "ref": "844f337a-5bfc-42dc-ab9d-398380b9465c",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b9cf4e53-9179-4fa8-a283-9e58a55cc2b3"
        },
        "item": {
          "id": "148e2ab6-6b3c-48ae-99f5-62bbabf9beda",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7b04630f-8ddc-488d-98ab-a5518ecab75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de70f6da-0b95-4158-b4c9-26da0ab0d512",
        "cursor": {
          "ref": "9d79d1a6-dbb5-416e-8b75-bf6f5cabc99b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "207fe9ba-5962-4c26-9bde-80191263fe97"
        },
        "item": {
          "id": "de70f6da-0b95-4158-b4c9-26da0ab0d512",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "0a594ef5-e067-4ca7-b20b-a0e077dab09c",
          "status": "OK",
          "code": 200,
          "responseTime": 506,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "2788e919-2968-4948-8bc8-4abce8c68996",
        "cursor": {
          "ref": "be8787f2-7ce4-4f5a-a8f5-c4af1eb9beff",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3014951b-2aff-4fc1-985e-5e6b83b47d05"
        },
        "item": {
          "id": "2788e919-2968-4948-8bc8-4abce8c68996",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "572512bd-1f46-4183-a0f1-f0f83ab2646d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d43f3b9-e724-4925-b494-e4679838eca1",
        "cursor": {
          "ref": "57762e04-4d4c-4a89-b418-bce88d0ddf85",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e678a6ad-a4b1-4f55-a66e-51b16b90e9a6"
        },
        "item": {
          "id": "2d43f3b9-e724-4925-b494-e4679838eca1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "93d80f71-8c43-41c2-a279-d9b7407b5fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20f5043-2925-4f28-b992-5b51f9d1c8eb",
        "cursor": {
          "ref": "9db8696d-c433-4e63-8689-01e378727908",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4b592441-12ca-450d-b776-e456d713487c"
        },
        "item": {
          "id": "a20f5043-2925-4f28-b992-5b51f9d1c8eb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bd9b58d3-37ba-4672-a38b-3bef946f8784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331b892d-7be9-477a-b5f2-31c470dc975b",
        "cursor": {
          "ref": "5d3fc9d2-66d2-4376-b42c-f757505ae351",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "33dc3957-a030-4060-bca5-ca78fdb419c2"
        },
        "item": {
          "id": "331b892d-7be9-477a-b5f2-31c470dc975b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b3a3f502-9d38-4789-ba9c-e2fa509e87c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2d611e-82d1-4d3c-93e6-0eaeb5c15411",
        "cursor": {
          "ref": "8ac239ff-6f03-403c-a6fb-9a4f0e03fa83",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "69e6ddfd-478d-408d-9b1c-1d6ed61458df"
        },
        "item": {
          "id": "6d2d611e-82d1-4d3c-93e6-0eaeb5c15411",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a84fb7f8-39e4-44bb-b1ce-e11b3ad25593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2599396b-c8fb-42d9-918a-9457080c8840",
        "cursor": {
          "ref": "8e206c3c-937e-4499-9575-bc39db078371",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a6384860-3793-427b-92af-60ac35c9a0e5"
        },
        "item": {
          "id": "2599396b-c8fb-42d9-918a-9457080c8840",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5b2d947b-5e04-4dbb-bf50-68ff4ff35844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff087ead-0e8c-47c5-9200-bdf10d387ec1",
        "cursor": {
          "ref": "de36aadd-8853-4334-817a-fb4317984d57",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4485ed2f-ab7d-4c07-b19e-f06925157e05"
        },
        "item": {
          "id": "ff087ead-0e8c-47c5-9200-bdf10d387ec1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c0f936e0-21db-41be-92b6-8a48685628d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87773dd1-860f-4d3d-8b79-7fa5e020769e",
        "cursor": {
          "ref": "42e57c2f-6c1d-458d-af8e-b2e1f7e58232",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "af11de30-6fd2-4761-8359-44b72a580f9d"
        },
        "item": {
          "id": "87773dd1-860f-4d3d-8b79-7fa5e020769e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "99cb2bba-da9e-4e63-94a3-e4fd1910afa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bba90d-8d47-45da-ad8b-49e238e551fc",
        "cursor": {
          "ref": "ec2970bf-3e5f-4c75-89dc-408c9100a432",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "49d7f186-9714-49f1-978a-c04525aa9aa6"
        },
        "item": {
          "id": "11bba90d-8d47-45da-ad8b-49e238e551fc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "41869496-8b81-4221-81d7-df462a706581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798da870-2924-40ad-9b19-1c95b9cbfa33",
        "cursor": {
          "ref": "4b6edc78-4129-482a-9b82-e1e21e991f66",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4e3a6513-6802-4017-aeda-efe2ab08b907"
        },
        "item": {
          "id": "798da870-2924-40ad-9b19-1c95b9cbfa33",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2a1e52b2-498e-4a58-b256-7641ea7b5349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8230e1-f2c3-467b-926d-41f1f76c6bfe",
        "cursor": {
          "ref": "934e00e8-6f4e-4a27-9097-6eeab0594ff9",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fe4dafac-d443-46e0-b50c-0047f8c2813c"
        },
        "item": {
          "id": "bd8230e1-f2c3-467b-926d-41f1f76c6bfe",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "98f43f84-5d64-4d8f-817d-b59a2dfd10e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331df314-8a43-471f-8e86-670d4008eb71",
        "cursor": {
          "ref": "507151c9-89e9-4bb0-995d-a70240540933",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4d2b3afe-db9b-427f-9817-306e97226dd8"
        },
        "item": {
          "id": "331df314-8a43-471f-8e86-670d4008eb71",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b5898d7d-3092-4838-a322-84778ecefe6d",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3ac00055-40d9-4a76-86ea-93eb9604be18",
        "cursor": {
          "ref": "660b6162-b50c-4370-8e11-f1bb98d97505",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ddf1877b-5e6e-45fd-a1ce-7712adf22092"
        },
        "item": {
          "id": "3ac00055-40d9-4a76-86ea-93eb9604be18",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "104b46c6-4df4-4014-bae4-c0edfa162ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0045e61-81cd-497b-b2d5-d8064d88185d",
        "cursor": {
          "ref": "3112e5e0-38fe-4119-9690-9b47fac6ed57",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fff9ce77-face-412b-b74b-76baf97da0a2"
        },
        "item": {
          "id": "d0045e61-81cd-497b-b2d5-d8064d88185d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2b9aeb6d-71e3-44af-a4b5-6c651ad468af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00560c5-0a51-4b36-8ed4-dae425dfdf67",
        "cursor": {
          "ref": "0aa94ad8-96c3-4318-ae16-30e00410a78d",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c0e63207-2f0a-4465-868c-027e9f4e2deb"
        },
        "item": {
          "id": "c00560c5-0a51-4b36-8ed4-dae425dfdf67",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1697395d-e16b-4e16-84b2-19deeaeafefb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7e79c3-64ee-41bf-88f9-b0e58ecb8202",
        "cursor": {
          "ref": "e81847d4-e060-453c-8e93-55708ada698b",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e300be77-e2a8-44a4-a01c-41b27789f9b5"
        },
        "item": {
          "id": "cd7e79c3-64ee-41bf-88f9-b0e58ecb8202",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2fcf3307-0981-47dc-a515-da092a913bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4f2afc-84cf-4ae4-a8f6-a81df8e510b5",
        "cursor": {
          "ref": "ce405e30-baff-4688-9617-a3e7498626f1",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cfb99ea1-7d35-4866-a8b7-de2720e25d54"
        },
        "item": {
          "id": "fa4f2afc-84cf-4ae4-a8f6-a81df8e510b5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "26ba4d24-4fe3-4d0b-9d75-5fabaf45bc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40de765-8ce0-4a3e-8ab2-972852657c49",
        "cursor": {
          "ref": "67119dac-1fd5-4a62-a34f-0d44ae5236b5",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "077120ed-fa7a-4f88-8dde-7896df351b5f"
        },
        "item": {
          "id": "b40de765-8ce0-4a3e-8ab2-972852657c49",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3c846997-b39d-40c3-824e-5ef71eea64a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af06eefd-56be-49b3-932f-0ed56b4e1859",
        "cursor": {
          "ref": "30464011-418a-4cf8-a6e2-f0fd9c9e7953",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f1b6a9ce-5df2-4711-9d23-b82221ad0908"
        },
        "item": {
          "id": "af06eefd-56be-49b3-932f-0ed56b4e1859",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "aebd6b27-1e34-4987-afe5-5acc3a399471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8543c0-1e60-43fd-8f54-98a62b10e166",
        "cursor": {
          "ref": "fdc2528e-774a-448c-a71d-cfead9eea607",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7416ebe0-b17e-41ff-a625-8b02466c4bdd"
        },
        "item": {
          "id": "3f8543c0-1e60-43fd-8f54-98a62b10e166",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "85dddfd9-477a-44f2-bbde-7714adaa2d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e133002-50d7-4b37-b6ed-8d79400ff1a6",
        "cursor": {
          "ref": "ddc54881-7806-4b2e-9833-645da5f00b30",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "352b0874-2745-450c-ad2c-9953504d2354"
        },
        "item": {
          "id": "2e133002-50d7-4b37-b6ed-8d79400ff1a6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f0dc3cb4-306b-4305-a61e-c7f978c254ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a296b4a-f193-43b4-94bd-6174f8577bf2",
        "cursor": {
          "ref": "10f69e0b-7ee0-4bca-ac2e-98cba36a260c",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9e00c6c7-9ca4-4be6-a2ee-1806de943824"
        },
        "item": {
          "id": "6a296b4a-f193-43b4-94bd-6174f8577bf2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6cd21add-f401-4d1f-a5bc-024621f7fda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f911aa6-2139-46a8-bab9-49eff03022fd",
        "cursor": {
          "ref": "e125838f-257a-4da7-a0d3-fe26906188ab",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "eabcaa89-573e-431a-83a5-07c429ff5ecc"
        },
        "item": {
          "id": "1f911aa6-2139-46a8-bab9-49eff03022fd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e8edc65b-911f-470b-83ee-ac4105825e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30d42d4-0968-4c14-8073-7b8dabc00c6c",
        "cursor": {
          "ref": "192b3c29-aaec-4f8b-8716-ea460dd20d31",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "60236fca-1001-4692-b05a-06211ddb8522"
        },
        "item": {
          "id": "b30d42d4-0968-4c14-8073-7b8dabc00c6c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a7812736-f75b-49e0-8b58-06cab52d43b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fea9728-b828-43d1-9237-8c33287df4ed",
        "cursor": {
          "ref": "cdc02b41-c973-4c75-a6ce-1294aa8a74a1",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8791dbac-2d5f-4081-a015-85473342fa7a"
        },
        "item": {
          "id": "1fea9728-b828-43d1-9237-8c33287df4ed",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f6ebf1a3-3c12-46dd-8a62-1ba08f34dfae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3a5456-f981-4278-af6f-398ab3b578d6",
        "cursor": {
          "ref": "0b077743-a5ec-4b20-932a-42d11b0c49bb",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "df523954-8dfb-49a9-9263-0e711c508deb"
        },
        "item": {
          "id": "8f3a5456-f981-4278-af6f-398ab3b578d6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "df18916a-5f74-4eb4-8679-82c43dfaf5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b82aff8-37c4-4074-a0b0-0f5be2163e17",
        "cursor": {
          "ref": "e6c56621-3fda-46be-8344-8875dfd21cb6",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5524048e-d820-44db-bc8d-8c789e107f4d"
        },
        "item": {
          "id": "9b82aff8-37c4-4074-a0b0-0f5be2163e17",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "59cbecac-5c66-47d6-9cea-1fa94164f799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084589c8-a4b6-4459-90e9-058e72921cd1",
        "cursor": {
          "ref": "5e21c389-f50a-4b5f-b8be-5f5d25908294",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a474fb48-7cae-4362-9b47-fdc00b254a0c"
        },
        "item": {
          "id": "084589c8-a4b6-4459-90e9-058e72921cd1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f55e0698-9de9-40dd-962f-1b28dedd14fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd20af39-c0b8-4360-ba7c-7bb599efd0d7",
        "cursor": {
          "ref": "65851c3b-6f72-43b9-8995-46fe4d658c03",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c8148fb0-ac3d-43f0-9e4c-a2b0d1235e40"
        },
        "item": {
          "id": "dd20af39-c0b8-4360-ba7c-7bb599efd0d7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "02ee5da0-a5e1-4257-8491-3be1033977bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a25d87e-1890-46b2-9ccf-523c03d27b6d",
        "cursor": {
          "ref": "b8797d48-70d3-48ca-899d-c51beefb16d3",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "67cee81e-2ed1-4a77-8978-a837c9727875"
        },
        "item": {
          "id": "0a25d87e-1890-46b2-9ccf-523c03d27b6d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1f214253-1832-46b8-aad0-1d3f18ede71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f12c252-5ecf-4eb3-8988-4a68afebb4ff",
        "cursor": {
          "ref": "513222c8-3b2e-48e3-9a04-1fed876add04",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "21cef08a-980e-4e00-a0de-3d7f7fff8ac4"
        },
        "item": {
          "id": "8f12c252-5ecf-4eb3-8988-4a68afebb4ff",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "655fae6c-670d-4f9b-b757-536ab9aae0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6d120d-05cc-4550-b30c-9fdb70cb8084",
        "cursor": {
          "ref": "0ec0eaf1-d21d-4848-9956-3d76d9cbd8d4",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7b7331aa-6d9e-4e13-a7bc-5b0078d58592"
        },
        "item": {
          "id": "1b6d120d-05cc-4550-b30c-9fdb70cb8084",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "090ab18a-dcc8-4441-a591-357bbafcf7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ad3ea5-9cf2-4ff7-8bf0-6f21e27e30e8",
        "cursor": {
          "ref": "b26b2bd0-e0b7-4cc3-b8cd-96f25f052669",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "04b57c5f-61ca-4913-ae4f-b4ed768c8511"
        },
        "item": {
          "id": "09ad3ea5-9cf2-4ff7-8bf0-6f21e27e30e8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8ae1a31b-dac3-4e5f-bb57-a558d1ba268e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a49e00-842a-46cf-b1fc-f6920ed0ad97",
        "cursor": {
          "ref": "1a7b7ed4-8261-4209-889d-9e977237578e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9bd36013-eeb5-4010-b0b9-52a55b4797fe"
        },
        "item": {
          "id": "47a49e00-842a-46cf-b1fc-f6920ed0ad97",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dad2b340-e8e3-4e9a-b108-9eab6362bf64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee49ca8-8263-4835-aeb5-d23651131aa4",
        "cursor": {
          "ref": "3042396d-1a13-4427-9af5-e5a7667b0234",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a18c4854-9aa0-4c5f-8bc8-019aacab3a12"
        },
        "item": {
          "id": "8ee49ca8-8263-4835-aeb5-d23651131aa4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "15d572f8-6fd7-4add-acf2-83db1f471005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5f6d53-c810-4f5d-a79e-a2eaa62d5b77",
        "cursor": {
          "ref": "9639e40e-9b42-45e0-a72c-05a2f2254133",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dc75ca93-d7f0-4aaa-b7cd-bbd73ef24d07"
        },
        "item": {
          "id": "de5f6d53-c810-4f5d-a79e-a2eaa62d5b77",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "967ee658-8689-4cf6-922d-a5483c7cd981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c959daa-e989-40a0-a936-d790ebcb0e29",
        "cursor": {
          "ref": "36761033-f2fd-4b8e-af1c-d70a500a3af4",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2aa902da-0489-47f5-9a06-e64fa78438e7"
        },
        "item": {
          "id": "6c959daa-e989-40a0-a936-d790ebcb0e29",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2338b526-9ac1-4ad5-bf3c-131fc82e813b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d11d618-bf3e-49c0-ace3-0085ac4be9da",
        "cursor": {
          "ref": "a6671842-7858-4baa-bb1e-155d0218de95",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "be22eeae-db99-49ab-bbb3-f11d1a83c8ee"
        },
        "item": {
          "id": "6d11d618-bf3e-49c0-ace3-0085ac4be9da",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4d47b78e-0ad1-4aaf-b565-4552295a0bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0535f568-e6a8-4865-91b4-2617bad37b79",
        "cursor": {
          "ref": "8ca0eb75-3e96-4f6f-94c2-b82eca4c2e0e",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ba23e63a-f5f1-49aa-9c8f-b1fa59422d8a"
        },
        "item": {
          "id": "0535f568-e6a8-4865-91b4-2617bad37b79",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "83fbeb0c-7cc7-485c-90a0-50597ee403e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a3c095-482a-43ed-ba61-48a27d746515",
        "cursor": {
          "ref": "2e7fd791-a291-41af-a4c6-ab9f7fc0da81",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d40f4244-4fbe-48d5-ad30-d106b237c740"
        },
        "item": {
          "id": "24a3c095-482a-43ed-ba61-48a27d746515",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "427514a3-189b-4259-a0b5-397cc6014943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b869386e-f590-4e41-9206-0240f2ef4b2f",
        "cursor": {
          "ref": "807c236e-c90b-4aaf-8998-dc3bbe9f706e",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f8abdc9c-7b84-4a15-b529-8c533b10135f"
        },
        "item": {
          "id": "b869386e-f590-4e41-9206-0240f2ef4b2f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "25d1339a-b217-4f29-83b8-42d6ef458d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180692ee-3610-459f-9a19-a601d2bcb148",
        "cursor": {
          "ref": "7ccc9c27-17d0-43b4-9f09-b2bd1c0d36f1",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7aa43250-7c8e-49e1-bbcf-edfdd7d6b812"
        },
        "item": {
          "id": "180692ee-3610-459f-9a19-a601d2bcb148",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b434e597-2f4c-4046-8b2b-d676e5ad720a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad5f0aa-a31e-47af-8c13-c56c876b5016",
        "cursor": {
          "ref": "7f4c1ce6-7d9f-4575-84be-610d6dc9e52f",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "59713979-7f79-444f-8686-6bb267c67aed"
        },
        "item": {
          "id": "aad5f0aa-a31e-47af-8c13-c56c876b5016",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "fb9186fe-8e90-40c6-9260-94e4b795c91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d11d94-3cb1-49d6-a43e-66c1078a5dac",
        "cursor": {
          "ref": "5a6eedf8-ce22-4627-a154-6d76cc260966",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "08622ab6-93cb-41ea-aee6-7e8cf93bab96"
        },
        "item": {
          "id": "49d11d94-3cb1-49d6-a43e-66c1078a5dac",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ebeee446-d2c9-4f95-92d0-b548a733663c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d716f84-4ade-4256-9852-356aa9b12746",
        "cursor": {
          "ref": "ea90a981-f4f6-4e8c-a2ea-eb95a6c9a748",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f3f26282-8f85-43b0-b283-6d39f1d489f9"
        },
        "item": {
          "id": "0d716f84-4ade-4256-9852-356aa9b12746",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3aac7d21-c7ed-46b8-90fc-c236dbe9a98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644c4281-4bfe-40c4-82b9-6fcdc5209f03",
        "cursor": {
          "ref": "de3f6cf9-17a9-4b41-a532-d4f0ed63709d",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6dad6d14-fff1-451c-81c7-7728cfc86dff"
        },
        "item": {
          "id": "644c4281-4bfe-40c4-82b9-6fcdc5209f03",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c792e716-32f8-4eb9-a42b-876680886444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026e06c6-03b6-4cd3-8f58-f1de2587b734",
        "cursor": {
          "ref": "70228696-b76b-43ed-9087-13bcdc7954da",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b60d3fad-013c-4fb8-a0eb-d39045381e80"
        },
        "item": {
          "id": "026e06c6-03b6-4cd3-8f58-f1de2587b734",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "663d8748-7b4f-4e27-a144-9dc044c2e90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef42acc3-42e3-42f0-bc9b-43e1bd651241",
        "cursor": {
          "ref": "3d4f5a95-ca7d-4fde-bd26-5be67295b33b",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "adb0c592-dabc-4795-b271-c8fb5bfec14f"
        },
        "item": {
          "id": "ef42acc3-42e3-42f0-bc9b-43e1bd651241",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "36a73e63-8428-4336-b84e-639f5b64f3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8788d500-3c2a-4a69-849a-d5ab34fe83c3",
        "cursor": {
          "ref": "1fb92f98-8350-429b-9a44-a62b6bcb5df1",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5eaa05de-2ebe-4275-b275-8edf1f6f4b95"
        },
        "item": {
          "id": "8788d500-3c2a-4a69-849a-d5ab34fe83c3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "378369e5-531f-4090-9dc0-44384c2ec6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c579f0ca-f5b3-4e18-9cc6-580ebbcc91e1",
        "cursor": {
          "ref": "dcd79733-7ac0-427a-b9fa-06a1509c0c00",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "55f7ad8e-2897-4408-9759-cd512bcc8b51"
        },
        "item": {
          "id": "c579f0ca-f5b3-4e18-9cc6-580ebbcc91e1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9cd32d3c-422a-4286-941b-05db61c90d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d90cbe5-af49-46f3-9930-04ede4871874",
        "cursor": {
          "ref": "8aaeb426-ab24-467b-adb7-b51a00032a68",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f0034616-1db2-47df-a6b7-7d2697aa8cb2"
        },
        "item": {
          "id": "8d90cbe5-af49-46f3-9930-04ede4871874",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7c2a59ce-b39e-4d20-a80d-076f0f4c6709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc3b81b-fb91-43ec-8488-147369f316f4",
        "cursor": {
          "ref": "7cec4e03-8640-4bac-a4e3-5e16d21ff55f",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "415629eb-167a-4537-b56d-a7f8dd7fea25"
        },
        "item": {
          "id": "6fc3b81b-fb91-43ec-8488-147369f316f4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "eaceadd1-f432-4f85-9696-822009dae280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89882423-fae8-4c26-a1da-14a7a04bdfe0",
        "cursor": {
          "ref": "70d6e147-d0a0-4553-923d-534defaa1a56",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "953df4d1-0479-445b-b4b7-1928d9466d7f"
        },
        "item": {
          "id": "89882423-fae8-4c26-a1da-14a7a04bdfe0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9e6700b5-d56b-4b47-bd4c-0a4ff38dc96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cde3c5d-853b-487d-8317-df400ecbc530",
        "cursor": {
          "ref": "2b9a352c-5912-4905-a84d-b680edf5b83b",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c2347352-7d06-43a5-8d79-09f575f3c98d"
        },
        "item": {
          "id": "2cde3c5d-853b-487d-8317-df400ecbc530",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8f7adb73-2c6f-4fc9-93af-4661337aa01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04cabb7-47e3-4796-8292-eb41a612198a",
        "cursor": {
          "ref": "bb10b7a5-b70c-4a6d-b6d1-5e67e20f17fe",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2cb31453-7bca-441b-9330-0968bdb13d62"
        },
        "item": {
          "id": "e04cabb7-47e3-4796-8292-eb41a612198a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "63746687-a3a7-43b1-bcc4-d60db72d224d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36f4812-a052-4b24-9251-5150f6240325",
        "cursor": {
          "ref": "e36fc77d-47c5-46f4-a1d4-d044b4bac7b5",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c1ff3448-38e0-4905-b36f-5d293ec9887f"
        },
        "item": {
          "id": "c36f4812-a052-4b24-9251-5150f6240325",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5074624b-f28e-4d41-a694-dd481346d831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e524eab4-6ceb-43f3-adca-d29ae1532db2",
        "cursor": {
          "ref": "834c1730-0cf6-4f86-ad3a-e693ee5fc139",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8a5c4bd6-7113-4c5e-ac05-d9aed622492a"
        },
        "item": {
          "id": "e524eab4-6ceb-43f3-adca-d29ae1532db2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "21c57b53-1203-4c62-b723-6aaea8da002e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f1408d-fd72-45ba-aac9-c3671e6f92f8",
        "cursor": {
          "ref": "2f09013f-fe35-4a01-b013-6bf79c01313a",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "74f053f3-3dbf-4213-93a4-8a175f208c93"
        },
        "item": {
          "id": "f5f1408d-fd72-45ba-aac9-c3671e6f92f8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5b4b8be7-cec8-4d0d-8f11-f217675cc146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02e2d4d-1cca-4329-ab1f-a95430586870",
        "cursor": {
          "ref": "9be7f3ef-01d2-4d53-9acd-2f2f1cb1f0d1",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "07c4923e-290d-43ee-b8d7-1f6cbbaf69c6"
        },
        "item": {
          "id": "b02e2d4d-1cca-4329-ab1f-a95430586870",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2fe1a4c0-a54f-4ad2-aa7a-e772973cb3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42006f5-9bf6-4fb5-b5a4-3937beff242e",
        "cursor": {
          "ref": "0b60a557-207b-42da-94c7-6a801455b219",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4a16c03e-3ef7-43b4-bdb0-2f969e7b5193"
        },
        "item": {
          "id": "c42006f5-9bf6-4fb5-b5a4-3937beff242e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3b36e942-c524-45f5-b4d9-c3a2c5e8b480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94aa801-67b1-4bd9-8829-45b5c640dc84",
        "cursor": {
          "ref": "810ff594-9557-4685-bca6-95cdf07d1412",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e28a53cc-1e4a-437c-bf0f-d7c73575b2b3"
        },
        "item": {
          "id": "d94aa801-67b1-4bd9-8829-45b5c640dc84",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1d7b316e-c6fe-41e9-be92-d713c22ae0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaebd8d-d90f-45b3-b75d-a1302eb11fc5",
        "cursor": {
          "ref": "a1b2af0a-4770-4718-b569-deaacf7e9dbd",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "448c1b41-069b-476a-b156-7309f5db79ba"
        },
        "item": {
          "id": "2aaebd8d-d90f-45b3-b75d-a1302eb11fc5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "083c6a12-6601-424f-a0ed-5bfa7461daf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522bd93d-0b79-4e6d-9111-2382f490d209",
        "cursor": {
          "ref": "b7bc7e54-711f-4a6f-8a88-9f532570fcd6",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7d215ba0-6714-4d72-ba72-33cc1a65010d"
        },
        "item": {
          "id": "522bd93d-0b79-4e6d-9111-2382f490d209",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6ce39d30-546e-4b56-a1f1-c7beec7f5ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee77fe46-a95b-49f0-a250-41879a3bff05",
        "cursor": {
          "ref": "838a4c5e-20e7-4129-964a-9e7ec219652d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8e4dcdfc-2160-4862-961a-f2bb452251e7"
        },
        "item": {
          "id": "ee77fe46-a95b-49f0-a250-41879a3bff05",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e4fa803e-69cf-44f6-9086-1a346645151c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e435b92-1684-4c76-8e9f-fa706df00dab",
        "cursor": {
          "ref": "d12fbc87-9f71-4fb3-9906-fd5808913cc2",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c9a19296-c289-454f-afe3-a65918029b64"
        },
        "item": {
          "id": "7e435b92-1684-4c76-8e9f-fa706df00dab",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8c5c0f4d-ff3c-44bc-a3bc-d1e7958f962c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9722287f-ced7-4a66-9a20-698d3ac236cf",
        "cursor": {
          "ref": "67010cb4-000d-427f-8d63-a46c408a1878",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a51217d7-0ad0-4442-a0dd-18ad00084288"
        },
        "item": {
          "id": "9722287f-ced7-4a66-9a20-698d3ac236cf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "639aefc2-5261-4097-ba82-8f08e183f964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308f4d77-8ac7-40cf-8242-de3299c4aafd",
        "cursor": {
          "ref": "2f1bd65e-c17b-47e2-9ead-3d56acab96bf",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "03da7bf7-280f-4454-b263-2aaec1fa07fc"
        },
        "item": {
          "id": "308f4d77-8ac7-40cf-8242-de3299c4aafd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b3decfa3-4486-43da-817b-cc6a5f0455cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa91f70-b3b0-42d4-91bd-e7f9f3d51e2e",
        "cursor": {
          "ref": "b8086c7a-8b2b-450b-ae92-c7260369219c",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c6fc1801-32ad-4bbf-bc0e-274271c1d3d3"
        },
        "item": {
          "id": "2aa91f70-b3b0-42d4-91bd-e7f9f3d51e2e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d4947ac2-200d-4e28-b859-9815edcbaaa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f5534e-d27f-4700-b0b8-852426919fe2",
        "cursor": {
          "ref": "a4f336f9-2629-44e4-8749-e647495c0521",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b4bd9510-0788-4b8d-97ef-dd3dc9caf62f"
        },
        "item": {
          "id": "01f5534e-d27f-4700-b0b8-852426919fe2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d62160ef-907e-4581-bf20-e8ac3d548c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb69af0-ae80-4c27-8650-834bd4f49306",
        "cursor": {
          "ref": "8a279d88-2c23-482a-9f94-4e22938eb550",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0d0faebb-8b25-49c0-91b8-f97319669b56"
        },
        "item": {
          "id": "fdb69af0-ae80-4c27-8650-834bd4f49306",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f741d6ca-1430-41ec-9d11-0df4d350b157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bc876c-e616-4bb4-ac0c-ea11118337e8",
        "cursor": {
          "ref": "6c53c5d7-c577-48fb-807a-d2511dee7cb3",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "15b11d5a-704f-4032-91b3-3d1f7fe965eb"
        },
        "item": {
          "id": "10bc876c-e616-4bb4-ac0c-ea11118337e8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6d509e22-51fe-4c3a-962e-2491e5ba7229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f84acc-49e1-4168-8eaa-a199f6d118a6",
        "cursor": {
          "ref": "1baec91b-eaa4-4ff1-be5b-897cac42e25f",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "392258d6-42b1-45b2-bee5-e300b1136a1a"
        },
        "item": {
          "id": "50f84acc-49e1-4168-8eaa-a199f6d118a6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a05b1965-19b9-45a4-99e7-00fcf947ec43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce1a846-2a95-473c-a8d6-464c8beb7d5c",
        "cursor": {
          "ref": "92e44502-ed2c-4bbd-9b87-447c843d7e5f",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "85111087-b178-497e-8484-2e9d7b4404aa"
        },
        "item": {
          "id": "2ce1a846-2a95-473c-a8d6-464c8beb7d5c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c87d4746-1225-4fb7-ab26-8dadf438cf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189bf81a-08ec-4be5-941c-75bd98345f15",
        "cursor": {
          "ref": "eccae5e1-4483-44e5-833d-9180fbb3f2e4",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f7a07099-85ca-42e8-b4f1-9930ead41121"
        },
        "item": {
          "id": "189bf81a-08ec-4be5-941c-75bd98345f15",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "92e5b033-b10d-4cda-bb2d-fa738d6e8504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab102e2-a3c8-4a62-8a34-58e333f6ccda",
        "cursor": {
          "ref": "55657c58-b7a6-437d-91d9-f7d1283743ab",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "94ffb5ee-4393-4979-9d07-8a3574842c56"
        },
        "item": {
          "id": "aab102e2-a3c8-4a62-8a34-58e333f6ccda",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "79f47c4b-0fde-4cf9-b7e6-3e6d66beba68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6307bf5f-63dc-4b4b-a2bb-bf8f8cad12f8",
        "cursor": {
          "ref": "fab2b5f9-441e-4903-a0a2-812aea185ec3",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "75a8fec8-a3b1-435d-a16d-2efb61750481"
        },
        "item": {
          "id": "6307bf5f-63dc-4b4b-a2bb-bf8f8cad12f8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7fbe4f16-6bd5-477a-ba89-1c7451bba0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718a3908-ca4f-4a53-b36e-5a92131cf91b",
        "cursor": {
          "ref": "25ca31d4-8d1f-4864-97bf-5a14b17e9c06",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0114fdae-d878-4181-b908-3df7506c510e"
        },
        "item": {
          "id": "718a3908-ca4f-4a53-b36e-5a92131cf91b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "41ab359b-2ee8-499a-8f8d-38f8ed9c82b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112de387-6c55-4f1c-aee4-a0803ca79cbd",
        "cursor": {
          "ref": "a99f0700-bd45-4331-857a-a2d36a709704",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "59cc9cb4-5c35-4de1-847f-f63dea5e5a3d"
        },
        "item": {
          "id": "112de387-6c55-4f1c-aee4-a0803ca79cbd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "061502c5-aeea-43a2-93f6-231e29c15e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3dbad47-490f-45e5-b272-4c8054ac824c",
        "cursor": {
          "ref": "5eca3a36-41ad-449a-862b-aa879b0bd73a",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "70021325-5ba6-459f-8aaf-947c3f1515d7"
        },
        "item": {
          "id": "e3dbad47-490f-45e5-b272-4c8054ac824c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ff1c0cde-a0d0-45af-aeb9-79df7f948b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624b4c76-6b01-4cc9-8140-bb896b372fe9",
        "cursor": {
          "ref": "5d21076d-a207-41d3-a4d3-a34bec2cf2ab",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9128d977-9822-42d8-ae9c-6b35018e648a"
        },
        "item": {
          "id": "624b4c76-6b01-4cc9-8140-bb896b372fe9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "53b31b54-9f44-474c-bbde-3a7c791a65ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b3b914-5755-43b5-ba8c-29ea14b90aa2",
        "cursor": {
          "ref": "2fae1670-787f-4b57-b44d-8abbbb11ca53",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dea791aa-e7e7-40dd-bef4-0604829d9b40"
        },
        "item": {
          "id": "f0b3b914-5755-43b5-ba8c-29ea14b90aa2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3b755286-759a-482e-b088-ec0bb3594a1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b2db28-b355-4e36-81e4-b922e61297cb",
        "cursor": {
          "ref": "ad6121e1-62f5-4d2d-ac3c-e86dbf9d82e1",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1d343c91-8d15-461e-9150-df78e3bbaa24"
        },
        "item": {
          "id": "94b2db28-b355-4e36-81e4-b922e61297cb",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6969f066-b9bc-4ceb-8a51-cf367f7bea97",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 3,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67369461-a11e-4746-b7d2-f343dd02dd74",
        "cursor": {
          "ref": "f6076b2b-a5ee-48c4-a759-bb4c8111de06",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c6c33215-295d-4429-ba28-e1a291598a79"
        },
        "item": {
          "id": "67369461-a11e-4746-b7d2-f343dd02dd74",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8bcf6c96-eee5-42f3-ac39-ca19d0212dd1",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "028985d8-0f4b-4dc4-8c26-7712e3f8972d",
        "cursor": {
          "ref": "6c01d3f7-158f-4088-80ad-bcac1ebb8ae6",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "99249dd4-c95b-46ae-a64e-a0ca237bc1d9"
        },
        "item": {
          "id": "028985d8-0f4b-4dc4-8c26-7712e3f8972d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "52082e9a-d68b-4f7b-9596-34a280bae5a6",
          "status": "OK",
          "code": 200,
          "responseTime": 502,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f0ec10-fbad-4b37-9947-759a19741993",
        "cursor": {
          "ref": "13ca00ff-4103-4da3-b1bc-5d0022e4394d",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c5cc9de0-ea18-44f2-93b6-30e76464414d"
        },
        "item": {
          "id": "80f0ec10-fbad-4b37-9947-759a19741993",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7649811b-8a6e-4c49-90b6-01ad5df6c4c3",
          "status": "OK",
          "code": 200,
          "responseTime": 433,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b632b884-858b-4fc9-a45c-da679cc4ea7e",
        "cursor": {
          "ref": "90b881ce-e9d0-4b4d-a4b8-47fb7c8efd6d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f72a6ef8-9088-46c2-bf77-7249a8879787"
        },
        "item": {
          "id": "b632b884-858b-4fc9-a45c-da679cc4ea7e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "947ca2eb-4720-4af8-90dd-dbf1d30a9ee6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b632b884-858b-4fc9-a45c-da679cc4ea7e",
        "cursor": {
          "ref": "90b881ce-e9d0-4b4d-a4b8-47fb7c8efd6d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f72a6ef8-9088-46c2-bf77-7249a8879787"
        },
        "item": {
          "id": "b632b884-858b-4fc9-a45c-da679cc4ea7e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "947ca2eb-4720-4af8-90dd-dbf1d30a9ee6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b632b884-858b-4fc9-a45c-da679cc4ea7e",
        "cursor": {
          "ref": "90b881ce-e9d0-4b4d-a4b8-47fb7c8efd6d",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f72a6ef8-9088-46c2-bf77-7249a8879787"
        },
        "item": {
          "id": "b632b884-858b-4fc9-a45c-da679cc4ea7e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "947ca2eb-4720-4af8-90dd-dbf1d30a9ee6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf95e26e-54b7-4c2e-9df6-cc920cb396f6",
        "cursor": {
          "ref": "1054fcb6-6ac9-4576-9922-a8ea484e209c",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "97cf2b05-adea-4f9a-bfdf-518806df5938"
        },
        "item": {
          "id": "bf95e26e-54b7-4c2e-9df6-cc920cb396f6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "77724cba-1794-4fd4-aed8-e15b6d5e3a67",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 3,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aed7b6e-e53a-4850-bc8d-7e86fbf0f832",
        "cursor": {
          "ref": "f6ceca66-5f83-4676-9cad-f774e6e679c9",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3d5bc9ce-f275-4e33-b331-4133e4bbbfd2"
        },
        "item": {
          "id": "8aed7b6e-e53a-4850-bc8d-7e86fbf0f832",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ce6bd815-f339-484b-9c6c-17db6ede93bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8aed7b6e-e53a-4850-bc8d-7e86fbf0f832",
        "cursor": {
          "ref": "f6ceca66-5f83-4676-9cad-f774e6e679c9",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3d5bc9ce-f275-4e33-b331-4133e4bbbfd2"
        },
        "item": {
          "id": "8aed7b6e-e53a-4850-bc8d-7e86fbf0f832",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ce6bd815-f339-484b-9c6c-17db6ede93bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "64d66590-be0e-46bb-8d4e-38ce6ca4f3a1",
        "cursor": {
          "ref": "212ddd8d-0914-4cda-91c9-cfb7c623284a",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c2384f85-6df1-4b15-a05a-8a3de673e3e5"
        },
        "item": {
          "id": "64d66590-be0e-46bb-8d4e-38ce6ca4f3a1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f39db1d1-0cc1-4b72-9685-a98b2d1e0b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b3995ee7-5d6c-4695-8353-764ac19d7bb3",
        "cursor": {
          "ref": "29347863-c522-41fe-9b13-790a902754ae",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5ded50c0-6eba-41c8-9cd2-fec881e35310"
        },
        "item": {
          "id": "b3995ee7-5d6c-4695-8353-764ac19d7bb3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ac31ea7c-a479-4a9a-962e-d39f896fea84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "b3995ee7-5d6c-4695-8353-764ac19d7bb3",
        "cursor": {
          "ref": "29347863-c522-41fe-9b13-790a902754ae",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5ded50c0-6eba-41c8-9cd2-fec881e35310"
        },
        "item": {
          "id": "b3995ee7-5d6c-4695-8353-764ac19d7bb3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ac31ea7c-a479-4a9a-962e-d39f896fea84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "9afbfb2e-7796-48ec-a70b-f56815d48063",
        "cursor": {
          "ref": "e6513f8c-f29a-4d95-93ce-9640d6e8c16f",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f91f2002-5ea7-443d-a66b-e00ae6177745"
        },
        "item": {
          "id": "9afbfb2e-7796-48ec-a70b-f56815d48063",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c2f7ce8d-c6e3-43fd-8953-c829cf9feb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}