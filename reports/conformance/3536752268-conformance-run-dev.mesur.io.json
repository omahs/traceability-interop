{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ebcd19ea-a388-4b3d-97c2-865e1f61b0f8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "94a5aac5-3131-4eb3-8abf-c8b01798a9ad",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8e61cae-fab8-4bb8-9c75-bdd64e6dbaa6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e8401741-680c-4b7b-8036-9b165a9e5c19"
                }
              }
            ]
          },
          {
            "id": "9d3a5ed1-7b04-487f-aa2b-13b9fc79dd2a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ebd3026-985c-45e5-8ff9-65a5b0e5ea19",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c4ffa091-a875-44b4-99d1-07e4e02d70e8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1bad24e4-4041-429b-b7a1-1fd307e30434",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "98d25dcd-aed1-4caf-bbd5-a731cdcc8a7c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2e78205d-3077-4189-ae67-a873a64cc30d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2887fa6e-8f4b-4cde-b21d-8b3c467c9dd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c28b2671-3598-43b4-9a2d-c07ef3b496b9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8b8e4e5b-85f8-499a-95eb-1cdd62df3a9e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73f95289-1155-4143-b2eb-b20bff90ccb6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f816dc11-eebe-428b-ab84-39ba633bc385",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8362c3de-c6b1-40eb-9c28-6199841d5ed9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5720627d-1f33-48a1-85b7-08449c901929",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7c00bcbf-04f6-495b-8ae7-d65678a64309"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce4372c3-22d6-4cdc-a582-143d1a39face",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e510b4ea-30ba-489f-96f9-36c7fcc013cb"
            }
          }
        ]
      },
      {
        "id": "e7a879de-16b0-4971-a6f7-50ee16730bf5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f35f0e65-d6e4-4db3-91e5-db180682e28e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6b80552-9252-4fe9-bdd0-e518fc6577cb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ce740c3d-789c-4997-9a75-52646240f141",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb766493-d4e2-4b18-9859-01e1699ed1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c83414c-57f4-496f-98de-3d48ebce23d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99d4431-acbf-4277-aa31-1dc910726e61",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c124b1-6bb1-4a76-bc33-785008347211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88c2f4e0-6ba2-4320-811e-76870c626d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3a5b48-caf6-40b8-b03c-9eb6664e3bd9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72abc916-3298-4770-a66e-ceac69e9eefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84e3a438-0184-4352-b769-18048deefd06"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ced1f65d-91ac-43cb-a072-9ad25075b638",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd0257c4-85f8-4fde-83be-aa0d16739bbe",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a08ebf6-13d3-495b-987e-ed26b6ecc379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c8fcb4d-b8dc-40df-a03a-5b4542c2924d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae969b2-becc-45d2-aa26-422fe6149d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34f9943-b810-47d3-989d-5f382f2466c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911f32b2-49eb-49aa-9a57-c185ff6f2e10",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1f3cf6-fdc4-475a-9851-70402a9b8270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63f4479d-0488-4961-8c3b-f994644fe70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60881939-22b7-4a41-81f8-2f76e496ade2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7a9097aa-4a6a-4ea5-b1df-4dac646f31dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2ba2f9e1-20fb-42e7-a193-20cda13439c2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2533aaba-9cf9-41fe-8bdb-40d6daf8388f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a362417b-a6a7-492d-a11c-8eb8d60621ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d52da71c-bc5f-4ec4-97fc-15e81c257c9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d22ef413-32d2-4ed4-affa-567194e8486e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "01dcca77-42fa-47ba-928b-a0eda0c1c976"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ba8ad3a-1fbe-47a1-9e49-e31939a17d33",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7caf949-a0db-4737-8216-d95fb8e7e787"
            }
          }
        ]
      },
      {
        "id": "ec28c5d7-d0c4-4af6-9c29-11ebf26bae52",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a0003df7-ca3e-4a85-afd5-bbb8b3a76bb9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "345d8cb0-c710-4e17-a5d3-70b513e2fb3e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d43a2851-b4da-442e-ba63-c3b23ed5cf42",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa8602c-0138-430e-a384-e121f0043485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b501a54c-6be2-4529-bc96-b420a72e2336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8813e3-dcd2-4c6f-bfc0-2df2ea88146c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1494011-8e67-4c36-ab42-1484ee359e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829c5ce5-e72c-48e9-8a92-b2d0669eea42",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244e1679-168b-4a94-9240-734f8b754137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54ffd01-9d29-454a-a9cd-b01bffdb70dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fa411d-55a7-4de6-9236-9c142deb37ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4211fc63-c7e2-42d8-802d-24bdc5c47b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66626971-9423-4c14-a2f8-0fc5f9c3a966",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248b68c3-d110-4488-b919-7442e55bbfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ed8e3a-8093-4b8d-bd04-749e3a52cb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72162bd-bb79-4648-9a8c-812a1b74c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b416ee1d-5b69-4ee3-ba56-df0f4794cee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2a1f40-ee36-4577-9ab1-405944e316fb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0462c59-ec16-4d3e-b80a-dfcfd68bd21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9024e75-b658-457d-84e8-9cd9cdf838b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81fbb31-ee2e-41b8-ac40-589f56e13045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7edacfa2-5ec6-4553-a4b9-edc371c57dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8a8daa-0847-46f4-a4bb-c8db1738490d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50991382-a6b0-4b5c-b632-9a10e503c6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b787f3-4e49-43e1-a9e1-b6787baab53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a1fc46-ca02-4df2-9f27-8881d31a71ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a249266-07aa-4d8d-b99b-e558741e31b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9238c4a-7278-4dde-8dbd-b11f0df32349",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7025b39d-33f0-460b-b2e0-23df5ca571a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d7fa52-696c-4ecb-adba-a5094b17bf40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871dc96f-40a5-43fe-a472-4ee30ba4aa05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba0302c3-8a26-44b1-848a-3b5dc0ba2b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac1580e-630d-47c9-b302-34b454361358",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea1a660-dbf1-4d4e-81ef-6928f41a2cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb496fc-3789-4409-9ac0-099052d2a817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e402071c-2ac8-4038-a92c-82537c7260e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ebbd57a-34ce-4440-81a7-19f194f49f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff9723d-2a35-43ed-858f-21bd3e27454f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6821f03b-5ece-48ef-a086-f83a408bae81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364b5806-02fa-4ead-a727-5df801717814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9523110e-b32f-4678-807f-f586fa964788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4b918a7-29f5-47b2-a9d0-324996aa794b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de0035c-81f9-4f8d-937a-f5bed8c42dbf",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ffb4e1-a5af-4e5d-9855-90fc9528e2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d46cf6-9b99-45dd-8c86-d526fd15e94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500ef62a-05ca-4cae-8c37-3c0a0885d6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccfa4899-b476-496a-9f15-93271e3f5c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7373bdb-b310-4e9f-b4ef-095d84f654c7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc574cd1-9434-435b-a105-174a925df4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b95dfc0-3bf4-449b-9ec6-ff12baa36883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e574de7f-ec54-40e1-b37d-1910ce487248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ea3d8c4-c19f-4152-b278-b80da7cae734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8488647d-5d32-4fb1-8e00-45c775340829",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58257e91-70ab-416e-a024-7c49a34d7740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16136c2-506b-44fa-b8e7-ef635a34c9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9a4a6f-c2ca-44da-9755-fb6ade4ffa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15974f60-d0fd-4444-bbda-bf967ba46eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad893b45-be28-446b-95cf-fc20e0719efc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8446992e-0c35-4240-811b-3e4ae88bf6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9e95be-e12e-43c2-b53b-0b5993dbe2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0564e6a0-db89-4a52-9921-4ddeb73ccfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ec2efa0-3b1c-425d-923b-fe6b6685e3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795f2cbf-cd02-4455-a4e4-479635d337d2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff51cd8-01f5-4b0b-8fc9-1c3b7c50c1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c28207a-8898-4033-be86-f05a4b0d53a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4395cb29-27e1-4121-bfc3-516fab4f5f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ac4fbd2-5ea8-46ec-9d8b-bb9cf7164fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bd8c78-4356-4fb7-b383-d22a916c02d4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3c5d21-e94a-4a29-bf01-97fe83e2a8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e88e38e-09c0-4ad5-aebe-2d89393fc7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe54b3a-a5e4-4a38-a0d0-7bfe0b7f4b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "289ae558-007a-46ca-b469-d8503b06fdcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af3347e-45fc-40d7-af2e-a9f0adfae12f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c4b011-e620-4914-8b68-f1a328c58a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48525ba3-b796-4c90-bac3-8358d96740f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d60120-d35f-41b8-8096-a877ba3eee3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c50f16a8-4f2c-4692-bdd3-f9bd25f7b840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcffc60-cdd2-498a-bcbd-bf7e009e6202",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0acd34-d083-48df-9311-82f6c8497b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b661a679-c643-408d-a124-9b9a8ec9ad74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e960a78b-bdff-4307-a9e6-e620c1793dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33a7913f-ab2c-4bab-b56a-6902f0e0af6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ccd741-3ba7-444f-b013-88c320456607",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46e5342-f28a-4a1d-b871-5676b4a4cab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de5442b-7d43-4288-b13d-67ea9ffe5197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8564e4-feaa-42b6-bf62-3c81d5a5232e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e849de49-66ee-4af8-910e-f54c0829c689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a589f6-1171-4484-b53b-f373a70f1608",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608fb3d1-097c-4590-8186-46e594880526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b17bed-ad2e-407a-a361-2fe7a6c6e834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0021e2-e57f-4219-b6c2-4ba3415c6c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "348d0af2-31b6-40f8-86d5-e6fbd84206af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bba3b8-efe4-4744-8dc9-65281973f400",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054e1bec-707f-41e4-8abf-f161c3a4c245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35e0e26-549d-42b1-a92d-a449344e6717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9592a80-8658-4908-9e63-7c83ffa3aa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66abf7c3-1b5c-42e3-afea-07896ab1ee91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7fec8b-ad64-4a6e-b786-d23994900a0a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55575269-c228-4d82-b5b4-8c67de42cda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2628f46-c8c9-46a3-99d9-cbb293ede25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa00e865-060c-4524-9f3b-843e117765ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5dccab-701a-45e3-91e1-34a4f891eece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1942d9e-432d-4bce-93c2-47040339ec17",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0bc9b8-7374-404b-b42e-60505c00b8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c152c008-442c-4c3c-b8a4-dd3ab7e7c64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c019b039-8768-4b59-bc2b-da6a845b872e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7530be9-bed5-4ae5-8aea-5180fba1858f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804ce594-6f77-4861-a5e3-5394035f7ed7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8771af91-b2cb-4a14-b579-37841709738c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc2879e-69c5-434f-b88a-78878c435c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d672e6-53a6-4f94-bfdc-7a6c83cfb232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0983e012-c86a-4f48-9744-39e81d77db1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7cdfa8-8633-42a8-b819-4edfe078719d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d0bb1b-c0a9-41d5-872e-b6be2afe95da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794a52e2-245b-493f-ad0b-c98a6a2fa021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad8d62d-7264-41a1-88de-473cea204f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27928ff4-6487-45af-a05c-83ddd30f9ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1f79ef-14d3-4360-a654-50ec766f57ff",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f2d5fe-3f30-4ac3-8c74-ed9ce007af7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304d250c-4065-4880-b25b-60d8a1fb921e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1f127b-0101-4d0a-a9d6-8531061644d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c869d908-0b1f-41e7-8b2c-df0ec69a3d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39299c17-725d-4547-89aa-830471256bab",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3234fb-5802-471d-bb51-dbdcffb8d834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5c405c-0215-4c88-969e-3e553195a130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588e4f32-a939-4ee4-a96d-106785d77ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e0791c-18e4-4c96-ac5c-599f560c263b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c242200-0633-4bbe-8546-739c7ffdedde",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f564b8-ae34-4f88-99dd-aff41b59e09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d012acd7-c56c-47ce-a692-5bec6f6c4329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a0086d-57e6-4879-bf42-6076eaf4a1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39ac7223-622b-4b07-bba1-99034b45dcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09b733a-d414-4492-a903-e355f7369067",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd766584-826f-4208-ad94-085b1d0d1d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbb44fc-0b9b-44f3-8268-59d45a629e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ddf925-235a-472a-8b5e-3d72729326b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d150e6-6f72-4406-af5c-b1f31e9ab60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ef9e9a-ebdc-441a-addf-2c5d2f57d48d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3590da79-378d-46a4-937c-a2c459ddeb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d352d0b-fa4b-46fa-957b-65440fe7aeac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbaa9a00-f5f5-404e-906f-c663ea794632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f69781-5313-47e9-9c15-27a9423329a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487f7578-290f-4b98-82b6-2c38877c3d17",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9400aaa3-bfe9-4456-a011-aea3de430d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8efb63-71b1-48e1-ab39-0abbf2571b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb586a5f-8066-424b-8b95-3fcf08c05998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c573350-b983-473c-b426-9e43b2459680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca626de-c114-4a7d-8558-5b8ba75f2579",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b4cfe3-9191-4440-bd06-678ce67fab2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16304dc-82ed-46b7-a437-d44b22dad065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe6b246-03a9-4f60-99ef-f00a2f67b3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc92898-9cb6-4154-b13e-d719fc1c3751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417c02e6-895e-4b57-b0f8-871a7ebc5f0f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44912a92-3f3b-4666-9223-c74040a75f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5aa5e3-49a6-42e9-9ae7-ec349e1d4071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2a3ea1-1eec-4ffc-a755-bb1106ea386b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5bea36f-5492-481b-9c73-af138debe2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5170a4b4-8c2f-4066-85f9-7bb4056fc80e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a6c80c-0713-4d14-8611-4218b2d08a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80b6117-712b-4f6d-b71f-c1655844bd0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839fb7ba-0ec0-4b3f-baba-9777c75d7d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "990a7085-52dd-487a-89ea-8b41aa0aabfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae9158a-e4f5-4b78-9f1a-d4f59789b722",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f2c757-cf2c-4309-8757-d73815b81ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969f2421-4d44-492f-ba41-17b9e2347048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2ee7a7-7472-4056-acee-dbcad9d75d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43d58b46-9dfd-43fc-bc43-649f21d3191a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f740db12-7ffc-4e9b-b8f3-e05c9d65ae71",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f14663c-3ab4-4773-b8f5-be20d751c94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebb4d88-6bb9-4bb3-9837-d7be10f87616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540ffc2c-c914-4b7d-86a3-d3b2068fe816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbc5a11-96b8-498d-b07e-cdf5f606b791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53381cd0-a13e-446d-9175-60dc5ea5bf82",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc83e80-b22d-4122-876b-5da10e7a0dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292fd9af-c7d4-4983-a82d-fbbac0495d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dd5133-b6eb-429e-b95c-a88bba06eea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "de12d01e-0a15-4d36-a7a2-aa130c15ad5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfbd0fe-f967-4797-b238-0f97b3d49aa6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f380ee65-c0ff-4bcf-bb10-98c651932b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "631a90bf-7f62-4df8-947d-5777619fabca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3e3fd9-0a8f-446c-8bb2-a8c260eac0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3417bf0-5075-4414-aa29-8fe2d7519beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593bf924-c54a-4eb1-9c49-31179d311868",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41050369-f79a-4362-922d-799336397ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17793b0f-3617-4143-b647-4272d6fb3978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd471d0-f084-485a-8929-0d1036038b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa2ad3a-2855-4674-a454-3b8a6c25619f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe172c53-5f48-4393-8878-3a1143f38c5e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f98b27-8292-4e71-ae5c-89038da607d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d9d2e2-6f66-4832-86c3-1f48269e1991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f23f5d-cecc-4441-b45c-7420356b328b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "610f8020-4fc8-4cc6-bc2b-5cb9242c3197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65ace82-7371-4bbf-997e-882b60f8d335",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3438e788-5cf8-448f-82ef-40eb95be8b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b1fcad-8d86-4d6b-acc0-ddb60f060a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09693f3f-40d9-471a-9178-b5923fa6c134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "82a9e6f5-f40d-4373-89cd-44f729ac31d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c1e048-a92b-4c31-a37f-53d24176e3fb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d7f6e8-076d-49ec-b902-ffa93a15896b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67325f3d-70fc-4ea6-995f-bf6a09d1d462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc875e5-2d3f-4ee8-b9f2-f05c19cb3ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a49427-6a30-420c-9ba4-53e2b3ff9a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff6d94e-76be-453f-bc59-8993172d94e3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b45c287-a0e4-425c-a22d-45ce9d180f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0fc63e9-19bb-4128-a4ed-11ce4154aa82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9673467d-2f7e-485d-bc6e-dac8f7096f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a270577-8630-4952-956f-29523930fd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82f9c24-fff0-4227-b908-5c3ade4d2232",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60935bc-3d96-4f34-8abf-88bb91ca5da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b1bfc1-0296-472a-b5df-a912c5c2107f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53440fb-1e19-4c66-a137-3f1623cca68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2628b5c2-9b1f-4808-833d-9111c4bf86a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03204da1-1fdc-446e-b215-11f2b450ccd4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ee5311-3157-47e2-9d2e-b07844877c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb82fdaf-9bd0-4abc-b108-ca06233d869e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067d69a6-cca1-4fda-96a7-a1c36f21be5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad994321-e1f3-4624-9879-bbbdafd2e23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd5ff4a-fac0-4d5c-848e-d264bb9a7565",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe748414-a191-43e6-a14c-fc57c8731307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8510101d-a196-4ef1-b9ad-243043958873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076b4d73-6de2-4797-99a1-5b49f99aa286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b4b03a-a54f-4bd5-940a-9b00395c047f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a160da04-579a-40e0-9b1e-6cf45c90ee3b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ce672e-ab16-4056-8563-2cc2e73e6310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ab137e-b9e7-460d-99c9-e1c95cef4017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5effb5-9ff8-4893-8223-2749e953d9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "22412147-d600-4cbb-9cda-0bc4dfa231ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ee2878-eb33-4b26-bc6a-35b3dfd28610",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d05a17-675e-4327-a791-d7efcef6a944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59019ac9-ee0f-4342-a452-f1ddcd1f36d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37741358-04c1-4d1b-a0ed-e84a2cbb9309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67a32702-7ded-4995-8149-f487fad59422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe89c1e4-84dc-49d4-93bd-f786ca311a5d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aaa8930-ce1a-4519-92e4-6aba9267d8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97aeddce-7f58-4832-8498-36fa94100c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c7e9a0-d31b-4215-8c19-b32cffeee027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fde8fa5-3e26-480c-aa32-391cbca20353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77627402-5a98-4e50-bbd0-b0bb4dc58335",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8df6ac-a0e1-454e-aa47-c980a8383f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901cb678-0137-465f-b0c3-72f4d2ec5362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267576da-b2c7-4792-ad94-e842f4e3a826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e617a84-d58b-4c2c-bea0-21a4a3e7a551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384c3cbc-ad66-4b93-853e-44608e574dc7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f771cb13-1709-4642-b7a5-171dd1d98d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbdd319-3893-4a4b-a666-88bec61e7573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6444c6c-fad5-47c1-98d3-24c6616c5874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cddbb4d6-1e9c-43ba-8180-9b328693b29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0496dd51-76ad-494d-b0fc-7a8c0fc95718",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892d74d4-227c-4ac5-a864-cee2e1ad125d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ff1b8d-6fda-42f3-be45-d9d7fd754a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d91e7f-3d25-44db-addc-698897866d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d660bde6-dba4-446c-ace0-717227a8f865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0191152-99d6-4951-872a-d093689f3881",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbeca3de-35ef-4c09-9dad-3bc78994371a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55cf932-3025-4476-aaf9-9004ba18db81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb9a2ca-ab22-4df0-8e47-8729b99293d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bec4e9e8-a587-4d5b-9b9d-d292b576135d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e947dd59-de56-40ed-b05c-62dcb39ee11d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5aeeabc-2dfd-427e-b396-a52686cb257b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4cb219-5c10-4fdb-9e27-baf4f2430901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3a30f7-7ae7-42b3-bf50-88d2a3067ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37fd9667-45a4-468f-986d-e5e31ed1544f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043d7dbf-31ae-4424-b956-bb1773d0249d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886af40e-993e-4917-8c6d-8d3ca5e998e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed614167-8ab3-42f8-aaf1-4b901ebf580d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3512984f-1c16-4039-9e96-7880108c1fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76dc3bf1-c756-45df-8e37-60dce8877b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe69f39b-f3dd-43fc-adcb-038fbdf984f9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8dd005-2a77-49e9-bbbc-d60bc305bfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7526dd24-1b28-4a77-b94b-d025dfce2f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1116d234-2165-438f-8988-273265a60c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b252e2-4449-4d16-8c65-c016a1425f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd32799-4aeb-4375-8427-164dc5682346",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1558ea-8aa8-4d97-93c3-39537999755a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38392c07-6fd3-45a5-9cef-24e0aea1e3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8ecdc3-bc5b-48ac-a731-f29d9013440d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52b8acef-ab1c-4314-9e4d-dc73d6aac204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4b02a5-f9ea-4726-ab9e-00a591117a61",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5222c3-d175-4405-a23e-b4aeedab795b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce43d7a2-3b50-4868-9823-87b9f6424e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f052a32c-c797-469d-ad52-c1bee388523e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b39d73ff-065e-4d08-94b0-fbc39f7ae9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49b0495-36b0-4e97-8665-5f2bb9e59bcc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345ce0bd-e905-4446-8766-5da3adb0b291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbd9039-a3eb-4b8a-b4a9-5b1ceb8e2dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77292c98-3c08-4af2-9367-764098a5a0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fcf6df-1fe0-494d-8e05-4d61daff11c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8baf239-9be3-41b4-9eaa-b15f4fc1f285",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f600ce-e735-4fb9-9612-83238b9a1d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54228fca-b619-42ab-bfba-11c25fb72892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1540d96e-7759-4df6-9404-56300e81ea0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee41e5d-f8e1-4061-be2a-87bd6a18c878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2157a28f-427c-4e61-b81a-97484aba549c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944f782c-ede6-434d-ab9f-02f908794df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5af4316-37d0-4143-bc23-d8b199a074a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee26d8a2-b92e-4db4-95b6-6b571047607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f9bbc0-357f-4d35-9c8b-dca4ba7b56b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0a0186-8f07-4e8a-8cc9-9826ddd3fbe5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b77bb2-9fa8-419f-aaa1-9e7c60c345b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91a82ce-b02e-4b81-83aa-c84ce3e711c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8be4f4-157d-4971-8abd-c1658da7212a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a68cc34-fb35-4ebf-9a83-4067200f6aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c2981f-57ec-49ee-838e-4a1a7c30496b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe364fd-3d7c-4206-8c6c-6702d33a5800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9a707d-85b7-4cb7-a242-8efc1b3f78c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ee6d79-3202-460f-85e7-6da60c3e4107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa3b376-42ad-4905-81c3-568fed23687f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a95d669-d270-4661-8d46-42faf9cac939",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353e781e-6aac-44ce-b088-13edebc945e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfecbad4-5845-4f66-9c80-21638a8ea524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b4cbde-3723-45ad-aa0a-911d33ee73f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f706f9f-6da4-484f-b820-61fb4b9f5bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53700b42-04ac-4916-96e0-5adf01fd4e65",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c658feb4-b2b9-4d01-a058-db03f8363ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6152e4c-f8e4-47e2-a498-ca1ca35c10bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af49317-6f86-4e6f-afb6-24d4f1067c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa5dda4-ac3b-4105-b013-1badd846d992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c73842e-fd8c-4a9e-a7a1-dcd3788a49aa",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce52c10-d44e-49a4-b520-b5cea2a459f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c70221-d09a-4e89-8531-19b7fb9318f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcf012a-91e1-470e-8667-742fa716a8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28eadaad-1e92-4d45-8906-2063b93da77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d067092-1bb1-4c95-b373-deb3c6079453",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de44679c-7731-4b06-a66f-49671da8b6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ada2df6-c03a-4387-94be-72f853434c13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9888cf78-76da-4f1b-b3f0-eaeea7794ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bef6343d-9b13-45c7-92e4-b93d04ae8ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d34f66a-596f-4681-8b33-cd0ab59f727d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1eb086-b29a-4dbb-85d6-51b3f02240f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3358ee-0993-4b0c-956e-b91eee604d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4cfb42-fbb1-4708-95ca-51ebf2cd2fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97c19740-da6e-4829-8cef-a09230fcba04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd27515-fe03-415d-b44d-41c0a1ebec69",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54a71cc-5e06-4c00-93cf-e6b897c839fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0704d515-3386-465c-8cb1-7fffc911ca23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef07628-93dc-4ecf-b451-781964445f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b07304-da5a-4bb7-a508-6326a7626ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9112e03-b01b-4fe3-adf7-ba4d9eb62736",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162fea33-5383-4030-ab26-878afc2c3ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a5310a-1c7f-439a-ae62-04e4b75f7aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe2d889-6d34-47a2-819d-568b724799cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "671422c9-1625-4e79-8236-a6d57baaa2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13924dd-76f9-4857-8bfa-cd06b04a3dfc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c0e150-9cd8-43b5-8701-14f07979021c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8017be-3694-4fcd-8565-29a510c328c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26070d72-b379-4e7a-a872-916f11016a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9bb6957-ae7b-49d3-94cb-f4a71ade5042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f358d7-704e-4675-b22c-69f861defe32",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc29363-90ad-493d-b885-44ad9e5ced96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6a3e6e-ef09-45bb-853f-2b1558ec8d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8296cec1-be74-455e-8ea6-5533b283cf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2353df5b-0458-4499-90f9-abb6ac5e0f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9512e6-37de-4c7a-91b8-c7c37ef8adfa",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a59f99-7882-4315-81ed-91122565dcdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2efbfa1f-5584-4ee8-be19-821256d278dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fea1d35-c4ec-4dda-9ea9-0f2a3e0f58b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa3cef3-3254-4908-a7ae-42eced119cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c93b13-5662-4d41-85df-37c46d7ec8c5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db29a69b-937e-48f6-9d74-00e1ae3d03d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28fd879-17f5-4827-828c-f290f4a72897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58664cc9-5ed9-4a6e-af92-d5aa44db74ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74a5b524-84d1-44b8-9e24-5161cb8f2b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5136edd5-3b9d-4db5-91ab-65f51477abeb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812bfc87-52b0-42de-a728-f753a9c8acdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080962ea-3185-4b0d-8a7c-cd4c1168763c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e4c6f6-ea95-40cb-9d68-f670469204b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5be2d05-36d0-49bc-aa4b-1e88a2a1332e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fb4179-7d47-435f-888e-1310202f3052",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda45186-d1d2-4722-89e7-5e0abb4dadeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6516770-2b82-43f0-9308-36aad6551639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc7abb7-1fb7-44ae-be8d-cf826483ab14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4bde503-7f0b-4882-bcc5-761338f671c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67da6eb-cf13-4bd8-928c-5af658a7c51d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320aa554-48bd-4ded-9bee-1f884a3db6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1856704-3853-4517-9a20-591c219527ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b2298d-06b0-4215-b2cc-674a683d7542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f58d76-5f44-493f-88a9-1fb66d16e1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3300aeb2-3753-4354-9478-79f1d3808b26",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b48c72b-caf0-4c2a-acd8-580e7ae4cd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92542d66-94ef-4f36-a085-42542b00a71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6920fe3b-da35-4d89-b5a6-eaa1dd0a5c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90ea85dd-875e-4120-84aa-446eb251dc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df384859-52db-46bd-bf70-82286b27511f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833b509c-8328-42b1-9d0a-29cad295170a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6311f11b-fd74-4af0-b163-9ddb0f9edea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a14df8-e5cf-4e21-8d40-34a0492a8e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ca400e-0822-4ee9-90c4-435d380919a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f4e64e-9542-4617-8fd0-41c0c36ed06e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7162eb-bc6f-4ae5-86e3-5bbbb518d373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f08f57-7454-474b-8b19-f5c316c65ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c95d211-6dd7-47cd-ba1e-08a6264d0b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba272a6-fcf4-4d54-bd85-b4af691af59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900fa67a-357d-4eff-b7af-110db6e34762",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33320c2c-225b-492a-b398-031bf510f641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5488858-467a-4af3-a6e8-c6d7db299d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663d6831-82be-4497-85c8-7e4612d569da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0373e21a-b361-4e8a-a4d0-74958ee476e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b503c3-8cc6-456f-a88d-c90bfc5adf53",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c9cd7d-2389-4653-a9ac-59a216a4766d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7005223f-7c9f-44c7-b90e-c3bf4f5ac5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4381af-7f70-4f62-8136-d142e82f2669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65a726d4-dbe8-4eae-8508-41c7c98fff42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63b00d1-1bae-4af1-b3e0-c4af677ad044",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a0614b-7d85-4fa9-a91d-c44d397cd880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171fa527-f6f0-481f-a374-e20b8b76ee70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934fbd16-c46b-4204-9d62-c64c56bba7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f37d0c9-333d-4174-a375-c970ef93ccc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19833be-1562-4044-a401-393d2dec89fa",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa211f55-8ef4-4516-9b6a-ef3d8e84de3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4feda96f-18c2-4842-8202-89c5e83bf96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58316887-0914-491c-a2d1-69a00a829ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15b6a785-30e1-4f3c-b116-bc7db976f9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d375d382-19ab-4a22-b36b-94662bd1f451",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b58316-6b49-4585-8a75-20292f29c3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ad9ed3-b67d-4c3f-a28b-13f748dcfb21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71420198-a724-42a0-a0d5-37b947a4c8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c24c2e76-0dbb-41c5-8797-7885b6236a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86af88f0-f8d8-47f6-96f5-c19a5a4d5117",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e448904e-929d-417a-b985-85aff4d78a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfb215b-4ffb-49e6-a8a1-202848a91668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701f043a-909c-4280-be7b-3b6613fbfdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33a8ca26-f08c-4a6d-a7c9-b4c0e49dd49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8348dc3f-6840-4383-9dd9-e89f6d7fa9b4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a8b034-17cd-40c3-910f-68cba1289f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84c5126-02a5-4cbf-92ad-e6ee701c65f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827d1603-8707-49d0-b731-b109e07d9b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8af0c490-7ac8-41b1-8cfb-183fe6aec0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50807b77-be1e-4fdb-9e9b-40e138c13bc0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ccb7e6-91fb-43d3-aeea-24505613661f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9fbda3b-bc67-4f51-83ca-611c4106ea04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5ffdf8-a4b0-4003-8583-d9e09b629444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b45bac64-241a-401b-8f08-3169135cbb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcdcb15-17c7-44c5-9b5c-a5d0935ff5f1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bc092b-1b1e-4216-b24c-9549fb72897d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2feeba83-75ea-45df-a4cd-b18980691916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772a035f-3370-495b-a779-8bd7ab7d0407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "530a580c-b0f5-4f54-89d4-696253cb84a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd39a677-bfd7-4436-9c5a-8322b4a1bcba",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b781c92a-b1cf-4d1a-9d81-f6a87db0c00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea417d20-b66c-4438-8bca-78a3ee52080d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b964d3c-0d69-4561-bbd2-b5ee681832b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e85410-35a1-4b11-ba8e-a4b2303f51bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34111d0d-4a8f-47e6-a545-3ac68e83966a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f124999b-2f41-45f6-98c1-f6a53b6002ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92551f6-19ad-4822-9317-e58c74343314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21fdb09-f70b-469a-a1fa-29f8e8a926aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "354c30cb-5745-40bf-89f6-16f4a6693519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a19f7e7-aede-4134-9742-363f6871652e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe82425-48f3-47eb-a6cd-95b22f0f1062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41918f13-801f-43c6-b1e5-42d9e8ef3d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6a25db-0b9f-4cac-a41b-1605c09b0e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee9e0be-82eb-46e9-abc7-f93eb5837cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c879454-f8f0-4778-971c-d565834501d4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5dd8e4-d3a2-43ef-a40d-0332fac3e76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a6163d-44ea-4d66-bfff-9b97b3bf4051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f5e698-3e4f-42f7-b520-cbe3141ec603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc9bae9-2864-443c-b120-22138dee1462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda2c459-74fe-4f4d-ae96-298f1a436bf4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df988e5-3235-4995-b790-210e35410563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "048a1c4b-8834-488f-bf16-fc9fc4158bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91828d30-8e89-4b3c-8cb4-0772fbd774dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed147a8-f7cf-4794-b8b9-8038f39a50a1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "175d7b6a-6f38-42b7-944e-8bb69289b232",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e8c3972-56d8-4f5c-a860-779dc5420562",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3ff8cc-1b3d-40de-8029-0827ff0c90e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b76305aa-cc5a-453c-9e73-ff1f9b1d5284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54aeeec-3e79-4e77-a32e-7253681e534e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "57c163bd-c4f6-484a-9991-b19c29a35593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9c9c69-4dd9-4875-b952-581fde0d8712",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972261a2-4d06-48d3-8e87-9dd19e663791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b8ad2cf-a029-42fb-bce9-94a93f27e4c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b780587d-406f-413e-9712-4043d891ad8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9c1db970-6e19-4d58-bf88-a20f0fe38179"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4cb4b90d-ea30-49a9-9834-43ee0596dc6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86d2bfdc-b056-43f6-b884-c74bfd40a2de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f722b8e9-d39d-4fc1-a0b9-227e69db4b5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7531da01-f109-4b8e-bc77-0cfd766c0905"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98bb0135-6cea-46a4-a8ad-21a95fddfe4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "32e4154e-e89e-4b44-b65a-a2517aa23de5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ceb42d01-1708-4a53-b648-002a1d91565d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "30baf073-5e5a-4775-bed5-08be39ba4adc"
                }
              }
            ]
          },
          {
            "id": "f24c17d4-e6a5-4a7d-8a9c-ab2c3e73e5b1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86a5b09d-8591-45d2-8317-8cf2eaa6ceff",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88cf741d-eee6-484b-a0d6-876fa8360c05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9950ba33-bde8-4427-a6b7-0105c71fd242"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5afa5e80-0267-46ad-989f-cbb8481d8300",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f2ad6c14-d374-49b8-9d44-1aaf56e44eb2"
                    }
                  }
                ]
              },
              {
                "id": "4146eecb-00b3-4644-aa26-71d608b09ed7",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84dc9da4-53c2-4021-8654-31d650fd32e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "299c94e7-17e0-4150-8896-f344674d9222"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd496133-4988-476f-b92f-42cfde77b7bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1d5013c9-92b5-4a60-a4b3-638416b6ce77"
                    }
                  }
                ]
              },
              {
                "id": "8407d0f6-4545-4c98-9316-72b3cc11916d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a31a4c5d-5795-417c-b4f6-03560624f190",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea9027e5-ebd8-4f68-a6bd-dd2912373d5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "865b3c7d-1e7d-413f-a189-e3fa4b40580f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a3ea59fb-f023-49d7-9898-d28c10660183"
                    }
                  }
                ]
              },
              {
                "id": "7a78365e-b038-4efb-b434-260d2c073785",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ae2f3a5-5515-470c-8f16-b761c2d786db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8db0ed5-4b04-4e95-937c-8d9e3bdcef08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a80c7e7-59c6-4032-8b85-09418b07d20a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d1452a32-70c8-4972-944c-fccf049df414"
                    }
                  }
                ]
              },
              {
                "id": "8fb21fa6-8070-449e-ab0c-12c2cda93d6d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91efe9ee-c18f-426a-836b-532c80df0f47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8862a86-a265-4875-bf10-915d989687e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf92e5e6-de8a-4799-9efb-bc563fa98a12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f290a0f9-3996-474d-a538-5de621aa1fbb"
                    }
                  }
                ]
              },
              {
                "id": "c2388276-5363-46ca-b2b3-a7ca3606ce30",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f31eb055-84d9-4e25-b77f-4e04350919a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b731f511-a573-42cd-9b28-f194e127c887"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fbc1797-5b19-485f-b36c-fb78bb9157c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7bcc5a5b-0845-4643-8858-158faf7c10f9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7422c0c9-31b2-4739-9e26-aa0bbdcdfd99",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d88266ec-2ab1-486b-ba91-ac81e0510bbf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f14842d9-d0a4-48dd-80a7-cfda6ee0c7c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aef18532-056d-4b56-b093-6a7f0f957257"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17c12f6c-88ef-4fae-9efc-e124f8e90820",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bad1c9cf-b636-4493-88b9-64426e0de74b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a988474a-acd3-4fa6-b786-ec3b4eb823ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c34db308-f2df-4d73-bc32-a101315464b9"
            }
          }
        ]
      },
      {
        "id": "c49a6a4f-c5f6-4fc9-b61d-2c4baf3a1c9a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a24f177a-ae3a-4f2c-aa2e-804452731125",
            "name": "Negative Testing",
            "item": [
              {
                "id": "245125e9-262a-44c6-8770-19ffd9318872",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2d4ada21-28d0-45ca-a449-54cb2da455cc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9283aba0-5518-4aa1-960f-40e533ed394d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fa69c0c-f09e-4161-97a2-8cc16adef84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec8b97e-4937-413e-aa33-6ad64426cbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "73e2a15f-1e62-4025-9e9a-8cb0afeb90e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40497bb8-4e3a-4dd4-a1ad-fc61a3f9928a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf11e633-8849-4719-8b1b-ac5d626557ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ade567f-270e-4a55-bd41-e11ded6942a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1e2a07-cb10-4474-b2e6-54a835d171eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e838d8-1afb-4a49-b4e8-00b9421cd462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1c79ff-e2fd-4f1f-92b2-ae72ec0fdd19",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ddcc9f-97f4-41fb-854b-75e8ae7bd256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacb6f8b-5ca6-4291-bcc8-3e05c9b3116a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2ba1e6-9f86-4279-b3a0-13a1896272c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a1611c-bb15-4992-a38f-e07c2922eeeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a449297b-e876-4b6c-a054-dbf5fd1e5b2a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff350df7-8d99-4d1b-8463-2bea77a61fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0457c19-9de9-452f-898d-fe626b83d12e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaae94f0-22d5-478e-bd15-1578488733ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5654e3a-45a1-45f8-b090-82a8b2949c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a2f5a7-d50e-40a8-99bd-81ab1aae56b8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0540a672-003f-4cdf-a685-374c0c23121f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627d7b6f-af68-431f-8ead-313753bcdf9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a6c524-fdc2-4ba3-b5c3-e19a9e80e930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44ee1bc7-08d7-4e87-97c6-7e8bda7a32b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356e89db-56d2-4c33-94ad-e8e7615addfb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea35db44-8a5f-4b3e-834e-5ef37f774279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70eeeb97-7109-4d38-9aaa-ff81bbd9d559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfbcb92-804a-4a61-b5a2-7e3ceba77d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bba7355f-a9a0-4557-b38c-b7db374ef6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9deb1a59-ed61-45fb-ad66-a8a05c675150",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed7c7c2-936f-4346-8a16-69d303eb369d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f45397e-48d0-4df1-b4d4-97919e37e6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc80531-1f9c-43d4-94bf-7be4cb89f076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1143e7e8-cc31-4ea6-bbbf-31306bb502df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f06ae3-dcb1-4e06-b715-b3726bbcdacf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0e13dd-7d77-4151-a45e-1d8e4b26116b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e4b45b-6ccf-4378-8980-6f8db0250435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d9cf0b-4135-4d0e-a424-ee5438a2ebbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86823c21-5a6d-4f72-a74f-680d9b7d07af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37fdd71-cbcd-4792-a78f-b8ad23f55864",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e578a57-fba4-4c63-aba7-29b9865a3cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249629a1-ea77-4338-99b2-92aff3366a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62cb8a9-dba0-4422-b97e-3d912df1155b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84240b62-987a-4301-abb8-fc967524b616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90795b75-bf14-4f19-be08-e45604b7364b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb07a47-c174-478d-946d-d8a2bf36724b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3161824-5687-44b5-8ff1-3e4e985a4774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9570d3-c160-4eed-a99b-5eb7637e3c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc0bcc7-6581-4fcf-b2c7-e3b79134c90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d172f5-b067-4001-bdbd-0266fbe48088",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2c2742-5c99-4cae-ac08-a34300f4b231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0d3db1-f238-466c-bcb6-2a0599ac07f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b290207-5806-49b1-8fb3-fcf523ccc82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "93521cb4-a246-4f9e-9c4d-c9d974328880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f654089-26bc-4699-8294-b9d88f289113",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b97e8c3-64fc-4dcf-9546-65277534a609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36dbcf10-c3a5-45eb-aaf4-4b8d1e09105a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a397b32-7cc8-4155-b1a0-e1cb2f639151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cecac085-903b-4b11-817e-20691ccb1eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7eee237-5364-47cc-9463-266bd0082b36",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6118cacd-491a-4fb5-922b-eb2c1c58fbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50a1dbd-74ee-412e-8b6d-0d724c3bb0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1de6460-26f7-4a81-953a-a4f1de57a6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60c6a39e-6a38-48db-9a8c-49f231109634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d0d8e3-cdae-4c0a-8f68-39642af89d94",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db78a74-8f9c-4937-9cc4-2e39b3d8b900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad1d4ee-3b7e-4ccd-8c0a-18b4915ac2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55c0d06-0c62-4c4a-a076-a3a54de2091a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ad2ff6-d0dc-4d8b-ade7-74a4f218a71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6154e251-03f3-45e6-9153-07249557c134",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6629a11-d7af-41ad-bfea-4ce13164358a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab5e14d3-91da-45d7-8777-a4e7ec522c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e82acc-2025-4e84-95e3-3ad93f237f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b936946d-6679-4eab-8bfe-34472b34bf61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d01a87-6044-4765-b522-faa415166509",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf2fdc1-be21-4346-b8e2-14bc434384b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d72a871-0ebf-4a15-8734-e3e391c0a628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f347e89-e66c-4353-826f-5f5cb312bdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "72c1b3dc-fe0c-4ccb-9f1e-2f59ff6918d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a4bcd5-6c99-4e9a-a88e-3e8be99b7ccf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc89b558-9f40-48f6-818c-34575d5d46f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abc262eb-ee24-4e42-b13c-23b73b45d5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a86884-d4e5-4d7b-9b4f-567704c91dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "465d0ad0-a422-46a0-b66f-afd0b96b3c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a514d2-eba4-4626-90d5-159700eaa260",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bc173b-6e0c-4a83-8aec-630dcf1814a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9347efe-87d8-467f-8c56-be558f8a2c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f513e3d6-2230-4b38-aef8-625b04b2f543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c4c4968-dbb7-456d-8243-87dda52be5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e5cefe-38fc-44fe-ab5b-a728d9ec44c8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abbe0c9-5382-4e26-a74e-bc769612f476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c9b663-69ba-4f88-8985-0e73be27209e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e2e10e-ba4e-4c47-a914-0ba0b0ff9f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f04f503e-c502-4650-a78c-1bef3b5dc40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd39bd8-d3c5-464f-8697-45799546788a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbea80b-1336-43c3-85ec-e8148a4826a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc83d3d2-d94a-44fe-af29-af9309bc7f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fdcf7f-0a38-4ba2-80cc-a4823bf8b808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8087478e-61f0-4821-9a12-bb8e1ace4bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce4fa7c-ac7f-452e-964c-8fb26196f9da",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e0f401-9944-4ca2-98fe-4255e4c8194b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b61858a-b27b-44d0-af13-b7f7ed124714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cbf42e-25a3-4f4b-b4e5-6b38845e07b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "004c60f8-a90f-40af-8432-4ceab0cf653f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444743dc-65f2-44b3-851d-25b5db5e3be2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0439f352-8015-433e-96ed-d3122e3537b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8561b57c-a134-424f-acba-ff20658cab55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0018569-435c-4443-934f-91931227952f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44a6d53e-0c9f-47ca-bcb7-600ff3dbca41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5d4bfd-8219-429b-b621-11e024a250c3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c68e62-6ee3-4499-979d-125698c7571c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e792f55-ec8b-4642-8c93-e55685321981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c3f055-67c0-4821-8146-9c42cfef6aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "840eee63-6c4f-4e03-8012-ffacdb1ae060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7b5f7f-520c-4c7f-a77d-292df89be9ae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede2c268-cc77-4b9e-b440-c0ea17c1d551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5f3db1-527a-4514-89fe-d2294462bed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62a5e79-3e7a-4a2e-ab2c-648320208e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1774ac5-4b9d-4400-ae3d-dff0fb0d921e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bee5b7-fb29-4ac5-ad35-59f626073ddd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efacd6b6-410c-4aed-b158-9e10edb9f1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa17b3dc-7ef8-49ad-bc1d-732d68212e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b0b983-9ea5-49af-8c6f-a24d98045246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70ff0bab-c030-4e78-aa90-0a09a615afc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff711105-81ab-46c7-91c0-e46a3b7caca1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8495e3-a4d0-4393-8545-9d532a7ed0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b974093-f90b-44d9-b2f7-19b9aca1ee35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6656795b-927b-4af1-adfb-3871d9a34120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8249fc8-6a7b-4f3e-9041-a3c8721a6428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe84752-a8cd-4d0a-a342-b953f073c1c5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f76ba2-20d3-4764-b2bc-0db623ae4b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724288dd-bc7c-4f74-8ffe-1d31f68f0538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6898decc-806f-4bc6-9cfd-04cf9fdb18a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5204f411-95dc-4d27-b325-6e62e9c8db63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd2e99d-7458-455c-bb52-495f93ff7e9d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5ce948-a8e6-42de-8b14-a441b0fad48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4267f9a2-39ed-4deb-b46b-f9ab649527db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cbe3e2-f5a7-41fb-a3bc-7dd6812e9ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5fb687-ac47-4d74-bb47-bc948a734c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a034f16-6488-468a-8bd7-b576ad4e22ff",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af1bd84-2d70-48d4-989d-92a2638eb5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d848e1c7-1cf1-4859-bba3-6d447d6418ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae35e5aa-6df9-4134-ba77-a1bbd68f4351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27b97518-90fb-4c23-8bee-500b382ff7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab090eb-48c1-4b6f-bea3-7fdae583b211",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4fb50a-2293-4e1a-a7a9-c939b51e4f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fd4879-094c-43ef-a9cf-dbb647eb3c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591b8202-58e2-4019-9123-968fcbcb7c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4157d6a3-77c5-4307-86f5-492798f67c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f3547c-8fed-4d1e-a79c-139780af3f36",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc23cbec-65cf-4387-8ee7-f1bdd5fd309b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9cf3cb5-a7c7-4447-a3a0-f68da5997994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00961cd-90bc-4017-8eb3-81a2e43bcc5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52fb8a1e-2344-4d5f-8b1c-b2bdda3bd131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68550884-3d9b-4cc9-b6dc-045618dc8fe5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a18c227-ac96-4025-8b94-8051675f3973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b489b2-b26a-4ec8-8cef-ee6700fd753d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ac4c0c-3ef8-4a0f-8b86-feccca3beb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35d7ea86-1e25-46af-97cb-dc502c8a858e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de5d5a42-8e4b-49de-afd7-147cf0e48012",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36f34d6a-8c1b-461d-a621-07f97d316736",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30e5843-39da-4985-bf9f-03091e5a76f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5c5934-5d89-4ef6-bc10-94f35c6aa454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c636e03f-5a9a-4eb6-acf7-234a845a0408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71c54e1b-b774-4800-8fda-ffd80e0dc109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df63bba-4414-43a0-89ac-e8e61d2b0bc8",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58af7d5-b8df-4abf-a261-1b2d7eba2330",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a3659fe3-1bca-4fb9-b1a2-3eab64bcd787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1998fb-57d7-46d1-b828-740a7666435a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64475869-fd42-459c-a917-99a91ae9b534"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "588fcf7e-feca-4fbc-a017-db36a988cfc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75c8dfec-abd1-45a0-9445-4b644bc3ac4c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "145eec7d-1b31-4566-a0d3-37b22bce2804",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb7f13d8-cf09-45b9-b937-6fd12ae6f828"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1814310-d7e3-4cde-9d88-140cdbb1a73f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63840fa4-973f-440d-8a76-7f2eaf1148e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72514550-c07f-4f23-a0c5-a7ed3689d77f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9d27045-7238-439e-bfe1-ab1bcdd54bc7"
            }
          }
        ]
      },
      {
        "id": "70ac8b8e-48b5-4287-84e2-1338870b07f0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7a8c36c2-9c05-4feb-8124-6f8619b1916d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3236796b-abed-4caa-98c5-b972ccf3ec8d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f9f88a2e-1c34-4795-af44-70fe13eca67f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fffc4b-f0ff-4bc6-bf42-efbe517a1ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954d55ca-62b8-4a1e-9389-3990a93dbf6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a29098-fbc0-4332-b1ed-5bec88018870",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe2257c-8a01-4ee5-b7e3-2ded192f62b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d37bf5-44bb-445a-a836-040a31f27de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e17db8-d7a8-47e1-8f97-e4dec8d3c688",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0eaee82-0f6e-4b18-b3f7-ef6acfc348dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bec771-9c63-4bc9-8c71-df8d60e5ff08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e5dd68-0fd4-49af-903b-4dd044836327",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7aa81c6-18f5-4636-81fd-3e30c2180c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01fe7da-a471-4eff-bf13-213532bc509b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2d4ef3-048f-48b3-a24e-f3ae012e8c2e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb7e99f-14c9-40fc-8ab7-687deaef3cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8291e8-66bf-4c4b-b173-7f08459760a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c45e78-d795-47b4-bcd2-b8f27cc99ba8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ef9bcc-5712-4e91-97b1-7e68bc84d0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279e4440-84cb-47e9-a887-1b3bc2ea474f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b16f10-2cbe-4bef-abd0-52e0bc171411",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d86d33-50eb-42ce-9fbe-7c6e524935e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8275d8f-ee19-457e-b9fc-672a816cf8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0ecce7-5585-47af-a22c-a038eb520c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc39e617-7609-4cdf-b54b-1f547a79d751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe60a6d-9c78-445e-8b81-6b19a864f65c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6253001d-de60-4629-9b0e-f7404100295f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3abdda10-7a93-4ed2-9ab4-78ed8dd89fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e835416-e1d7-4922-bf14-708a278c1431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571d663d-6693-4473-9e3e-43d5b6b5cbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cbd51a-fa32-4169-8ad4-1d94d44c231c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba22bf8-b6ad-49da-96c3-d4a329333415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04829ab9-bbb3-4211-bcb9-7174709a1671"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "573d715e-7c1d-4f71-9be2-d1f97dbc06d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee4bed7-e49a-4ab3-8a54-2b017c900a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb05827d-ccd6-463e-97ed-ed4ac5d46e17",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd1bc99-d9ff-4e01-bcc9-5a184c05c3fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "106292bc-5140-4ac5-a74a-de64ef683168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e20abc6-6c3c-43ce-ab79-f1a9ac4c7371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde32740-96e5-41f7-886b-eba4fc1034c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5c70c8-51da-4af6-894e-f46c0e8deabe",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5130562-4c6e-4ff0-a651-d5f592ba95d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23890a30-f20f-47f6-979c-31e361bd90d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d70970e-f25a-4d4f-b366-c95e64416c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6268d5f7-97e0-4bf2-a6b0-04f80b0a8b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44af2199-13b9-4504-866f-7c345dff583a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9bf70d-8f47-48e1-88a5-ae40907df40a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6db50a-3f06-4409-af4a-71cfe9c916c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17caa895-cedc-4f30-bbf8-a40476e02945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f535c68c-81c2-40db-bf98-c1e72eb5ca7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d91b52a-cb15-4b72-b90b-167a7725f38a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b8a25c-8e42-44a4-8767-70a06d97f73a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07a262a1-fbd7-4fd6-a113-50d49da7ed83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bb6306-2dac-4fa7-bb63-3c74df371f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6fac2a9-f7fc-4ddb-931a-5ead0dceb041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb95f82e-0523-489e-ae92-6db50d0d1676",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0e77da-f86e-4cc3-aca6-967d09360bbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0532ac7-0327-4340-9257-886529ae6403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633e2ab9-819c-4dfd-bfb3-3cc1cf9f3501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4c3a99-2a2e-4c7d-b07b-e5a76070f20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2856b3-8706-4f10-acac-00ecb620cf2e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a99da2-7b96-47c5-93c5-a3f48d65366f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "236f9ed6-a3b7-4608-aab4-bb8a20101492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8135659a-e8ce-46f1-a6f6-54672b10c250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631dd7f8-824e-4579-abe8-835dd95f3185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689e8b05-d78a-4738-98a1-66a8e6e02978",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69fe1f3-10b8-40bd-a8c8-35c0651078cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eea191c6-001e-4d2e-96a8-f90c281405fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5761d7-6cdc-4498-a8b5-da57828d5bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374213f6-9fb4-435c-8886-ee70527fd198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70a209d-9a61-49a5-a983-db98fde9f3ee",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208c27ab-ae0a-454d-a492-e3b1682b3007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b00d372-a4e4-44f4-997f-51523c832526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ee16f7-d3c9-4206-a315-33539ed4518f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4ea4fd-63de-4f10-961d-86980f560a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675f4beb-68ec-4421-9e0b-330a625a9ee0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988dda3a-bba6-4d68-8b50-7db71ad9f586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e288081-b234-4c88-9cdb-78c1381cb490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91bd2f3-0bbc-4e95-a31b-36bcc6b9a6fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9127c908-d517-4e46-aee5-a7b157b62e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615b3147-74cd-47bc-be60-dd449a8532ea",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d039568-f700-4a5b-8c1e-680f21fff15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0214c43-f8aa-43fa-a141-5f1b3a93544e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776594fa-c185-4f70-b17a-4408dbf152bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b39de618-8923-4eea-99b7-2a8c1166d095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca21af4-e282-408a-aaba-21839e255a9f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf07ed85-5cfd-40fb-ab73-c894a7cb12b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acce4ec4-3541-4425-8c46-66f43fde0193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8ca16d-7e83-4378-8939-14adcb235add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b82bdc4-b0ed-4212-bc19-4fa81f46030d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc3ff8f-f86c-4f23-bb69-e872eeae1fac",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31935b1c-d83b-41f7-86cb-87f9d543f8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc52203-adff-4b28-aa24-30a4c0c56886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "573e347e-6bee-4d33-8c13-92a91505d04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27641718-b35e-4860-b702-55f71e1ec78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ae6f46-4f7e-48b7-83ab-1254d18df88b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec66b047-a123-4766-b325-9c53fac43eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fdfaef-b67e-4144-9db3-741916149d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093626fa-a2b4-4bdf-b76e-16f90ce505ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c715a6-cff2-4dc2-aa41-e92502b934a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32abfc7-43c3-451d-b096-6bf01473667e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2d0ce4-8d14-4245-8c2f-4149d68386ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee77e0ca-21f2-4a86-b405-4438c32b7508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74722952-74b2-4307-a480-0b495e21b421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084bebe2-deee-47b1-bdf7-f68353a8f7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984dcfa9-31c6-4ce8-a021-06feec9b68c9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a315a6b4-be8f-4a1b-8feb-5a76ebc52358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9180cdc0-b01d-4b75-9710-ea70f8fab09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5024b5e9-f00e-4bd8-9133-bca090a9605a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a527450d-2cf6-48f2-b6c0-519b0bf35181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfae6d0b-12a8-41eb-8dae-a1a2f2a536ad",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4656e00c-a6cc-44dd-8a1a-7ef91ef01b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4953e498-8e3e-4d77-bf2e-d8ca8dae58d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0807e5a9-47a1-476f-9ac1-bfcf97826935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a8e73d-ac39-4ba9-9eee-fab4c3010d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3099ce-4f9e-4fa1-bf84-173c82928f36",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56998d02-14d9-4935-aca4-8a50587937a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e87dc12-e099-4977-af39-8f94a941fbdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fd488c-68e9-49ea-ab89-4499d0fee4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c305bfe8-dd6b-4c12-aa07-7ea4ab9348a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e23eaa-b91a-4925-822d-93cfc9b21b4f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2828f1-bfcc-4e6b-bdf2-936144772c4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60916874-e7c0-4799-8b2e-c992a07ffa3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "502c4bca-cfe2-439e-bcb6-598d1e0b25ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991af042-fd20-4ac5-9dfe-4b6d5cdb78d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd933cf8-eda3-4ba7-9030-374af612cada",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238fb61b-8fe5-4860-a0c9-0a70ca83a48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22069776-b59e-402f-bdb5-282f6b56c8b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38de386d-03c8-42df-b90e-511c9c757853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba808cd-5fa7-4e1d-a882-0b48f63011b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9b1d6f-7974-4776-a57a-d9f9ab4e3b33",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b4c8f8-6e11-46f1-baa0-cd644efea78e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b116851-c78e-4c5e-9c8d-ef1030b45f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62003d3c-52a0-4079-bd3a-aca381155bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82caebbe-1b60-4b03-a452-6282e7089104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e17619-039f-49b2-957f-dc614fc429cc",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0c6f94-397c-4cbe-ab2b-3f93a866eaf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd645a04-8503-4dfc-ac26-187dcd2e5e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec23058-6475-4055-b278-14646851122d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb2778f-6fc1-4ab3-8a17-b8dcb1f35c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093a5101-98ce-491d-877d-9a07341107cc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f58150e-6d2d-4086-9cb7-97fc8f6224e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b8dfa3e-6905-4d0a-9cc2-47fcb58d4186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab4d875-acbc-43a6-8b09-767bfb725a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee37fbe9-934f-4323-b360-b32331bd0889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e08287-cc67-4d4f-aa4e-4e73c4a97d8c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bfc019-823d-4a87-ad09-76f414a42f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5338864a-f9d2-4702-9c52-3b5d94b0ed09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79803ce6-233b-471b-b596-4ea081d820dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcbdb4d-2d8c-480f-8c3e-0d04c97f3645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50ad921-a06b-44de-8c8a-8bfe37bf75f0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f021d28f-c819-4530-8b36-61b692e65289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf7230f8-11ab-4f51-9cb4-ba8da7d107fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c62b90-741b-4d9a-9bf4-e996a390f33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd60cc1-a5ba-48e4-9044-41fe1061609d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779bd30a-93f3-4bb3-9608-c9ce0fa08d01",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da6905f-ae4c-4d78-b045-4053fe876cc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2f8f172-6609-498c-a18d-d59a134f69fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9977eeaa-ea35-4ba7-bc9a-56a47ddeccfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd66a60-48ed-488f-8e95-3eff513d1a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f06188-e729-4d6c-b06a-3d9f5ba26be7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840a9e17-0d4d-48bd-9a25-32976623c6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32aea5e5-f104-4c1c-abb8-3481c27875ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fe8cce-7766-4a13-badc-855e5c52f235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cab21dd-0c32-4a1c-87c1-11b5bcf4c588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce9e0c4-0c17-43f5-8737-17ba15f04f3a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b557f4-249a-48db-b653-a016111596f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2b91dc-5f06-4232-bb7e-f950eb214502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15602a7-795f-4d74-bffb-d125f4c942b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9460c9b8-ba1f-4a86-8346-bdc83d14dc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15326a8-f036-4584-968a-0d07d1131106",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3643a564-aa6c-469a-b2d0-593a0d21a4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d96ee19-8665-444e-a054-0b1c69225360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03992e9-da32-4451-9e92-c19d02d5f47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2713167-c303-4698-a053-311c327bf656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ec3145-b190-4238-af41-a2837c822a61",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282ea567-fd6e-466f-b558-9a1dfb84ade5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b5e44f-6bca-482f-a24c-d025a8277b0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5cd0ec-85f9-49ec-baa6-a924ff112f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e4c9d6-a416-4e52-ae30-fc8f250a438d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ff5084-ac47-4bc3-87d8-7382fb172d6a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184e56b1-9469-4302-b18c-10ffd9a15198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b86a896-c3ea-413c-a3a4-3369c1d63df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61ab170-ae94-41fd-be0a-8e675b8e94b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8675915b-0599-4612-ae2f-eb2a338217d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489c4550-1920-41c6-937b-207ddfcf862a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc7541f-058e-47d0-9dd4-8155f67e5da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aeb31c1-9a85-44f0-9662-35aec45cb43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e531ba92-46a8-4c02-8323-cae3e325e08d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f8e31f-0d26-4da7-b365-db571395181f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34985698-d426-4e83-9c74-7ff22046335f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5b47e5-10e5-4a42-834a-787a9d04ba01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3db686-c06e-49a8-bda8-37ba143bbea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab43882-735e-421f-8f66-9e7358d3ba44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0509457a-ab3f-42d0-8fc0-559e558a6434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda60ed4-3946-4ec9-96fa-5d01c3251c21",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6aa0e0-8bb3-4d12-af8f-e7945f1e3c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bda9cf9-d46f-4e5a-aeaf-5c717cfb45c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fcea6e-d422-4456-8637-6cfdc533abdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227e809b-0b4c-4a29-a25b-3e6bb91e417e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bedc87f-452c-45eb-aa52-8b270aef972a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1ac9e0-4868-419d-9aec-c2707d7e8349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750f950e-ce0d-4f0b-a029-f0da12ad10ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd11a72-d393-44fa-8b99-3ce247b8f343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238fdc4c-bc78-4a26-9a76-d106329caf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7f1210-2e9a-4dfe-a5d8-7939282d7943",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0529eca6-6ba9-471b-9b6c-e0d61d5e3779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97fe13e-dd6f-4803-85bf-ace911ab98bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35194da3-3283-4b1d-8af6-c993d722c518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be6da00-c842-4e6e-80a8-052309549fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c34912d-49d5-4fd2-a03f-3b27a8a3fb4e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280a4f0a-d214-4048-8fa4-d3f3c9be8665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef04433-e50f-4f3b-9e84-2e5ca0000e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a404286e-4d19-430d-addb-5a4a3023b2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6f651d-75f3-4c92-94d7-457564ecef28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5722ae9-011f-463b-92b4-08ad8b829e70",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f92abb-5bda-46d4-a757-c125f91289ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a26c91d-fe52-433a-95b8-3e66c031d990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84caf3ca-b381-4807-94c6-6092b645cb51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3097f27-f858-4fbb-9831-0110e24da857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5465ba3d-5753-4c7b-935f-9296a3a8ec2e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4986f85-4d57-4bfc-9ffa-99b0c8371105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4b2f59-91c9-4f26-9445-7b5170fc2072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3778b882-bc4c-49ee-b3b2-d2c69ab47ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123dac3a-b100-4456-8403-4154c5bcd0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1385dff-dd29-42fa-b5c8-ecbcc254a783",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a231888b-fbe0-4786-bc42-7cdea0075bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2601c1e0-3e51-4835-9727-661166660826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b33949-28cb-447d-874a-368c24c0c4ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be41a47-bd0c-4e23-b770-40a349908ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8cbf74-ec90-4145-b1dc-4c3436b26d8c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5940742b-7243-4259-99b7-ff4544d28b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ba6cb6-fd42-4fd3-8700-26adf11c5e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c49b138-bfd8-49e6-af58-08b08c56c460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe559da2-3a43-49a7-99ef-3d5b907fbcd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b0103a-867b-4e96-9ae2-2070f95f1eed",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c949176-01c2-49eb-b26b-fde70846974e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984809b3-60fe-4caa-a55d-1aaba46c0126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124b3d73-e9d9-46c0-9775-582596151540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf8343e1-7951-46a6-a11f-b2e46b8a443a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534c69ec-c74a-43cb-9350-8fc5e75e33af",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7ebfb3-d873-4a17-afc9-803e6969055e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed88a93b-97a1-4fef-bb92-6d77d04192c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c9a2b5-ea1d-4632-b4b0-d23491cf55fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3ec316-c847-4c6f-91e3-071776dd90a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeaa0507-c32c-4090-8254-e79902174e74",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e402d08-2601-4f65-8699-61e3dee1f4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4304680-127b-4072-9508-7e4074f30f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68934c9d-db43-4558-89dd-299ae021da40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204d0a6f-ecb7-4078-bc14-dd4cea746239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263b7c1f-5fa5-4d32-baee-5892f6280d97",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a634a6-b3c0-44bc-ae59-5232aead6466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4a1a91-abc3-4e40-977a-9ce8956e626b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1306e3-d335-4d33-9264-aa8ee3155268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e80859-5ad6-4649-be63-1a5516d15b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ced3d6-fcb0-43b4-b4a4-4253d1cea825",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7496c5e5-5386-40d6-b389-0c80c5f50241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fe8561-77a4-4014-a9ef-09ed91538792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850ac33a-4276-4a45-bd2e-7def1313805a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c48ce0-f57a-408e-b6f4-a5aab361161a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a200838-3f0d-48fe-8bc6-ac2c850c926b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb81651f-bb50-422f-b01a-93873913faf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d03684-0aad-4d32-96e4-d3adf28a836e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5273a0c1-ba08-4e68-9117-289372391551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb9afd7-252a-4047-96b7-5fb6ed2b1d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ceaadea-c2ee-405f-92c5-9b6532d298c6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff60f0a-2996-49d7-a8c2-d9c25a8aa3bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9543dd9c-ec91-4f0b-a8f9-c8a556155d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d707fe4-bdd5-4f3d-91a5-6e3acfab6f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c61bf1-8917-4592-a5f7-bffce5105fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5532d8bc-ed67-4923-9002-b2f9460e3125",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edfcde5-8e85-43ed-a60e-b566a6d5013c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa49cc2-03e1-4a41-a789-db06b72467c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8c2544-75eb-41c3-899b-4c85725c0c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e64b35f-5f9e-4c47-b100-767762c71c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbe4cfb-17b0-4112-ad8f-0b2ddaeedb79",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffdba5b-77b0-4dbe-8c1a-9b320fab62da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31326aea-718e-4a72-8d0e-301f98307853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e153717b-b55c-45a2-9175-49b9ff5549d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f30a2ca-784b-43e3-a01b-b62ceb6c3e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca44c062-88d3-441f-91c5-6ea65705f02e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344c5f40-259c-47d3-9325-e17f85283871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a281ce-6641-4e82-a095-204f95a449ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4592eb54-1eea-42f6-b49c-284952974250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76985eaf-4d1a-4384-8e7a-0d16edd74bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c4e235-162c-4f25-8dd4-a988e8185a1e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6b5be5-58f6-42c4-956c-dce7ad7bd125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc87a466-7c91-42e8-b270-ad93b7914c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b90872a-62a2-4e39-8ac5-4419c5a9e2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ad425c-ccb5-45a4-b5b3-344ccd5b9e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32e85a7-2142-41e3-89ea-e75ed32e26f6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e5ea52-abc1-47ad-80ee-51bf0a5bd525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537a7fc4-2e8b-4e0c-8a40-a8a7c91e4eb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfeb5ef-e8bb-4799-9533-bb3d5719995a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab7616a-42d4-4db5-b7d2-9756cedf451d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17362cc-0979-460d-aa46-3b4afbd068d9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72058a2a-6aa3-4d7a-964a-e6b0beaf357d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4cb42d1-df11-4958-aa52-3e3f28a72712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b715bfaa-bfc7-4035-97ee-4a468624b184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77020167-f0ec-423b-97da-bf25d49d474e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d159b3c8-0882-48f7-b250-fb26860c8465",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e315ba-d581-4c42-9f61-4f95d5f460df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1abf8c19-4275-40a0-a176-a178eee3df07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb994288-2949-4593-a6d0-f815a4c60506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e5e926-d4ae-4590-872a-c7eea0a04b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149ff08d-919a-4784-86c1-b99c6dbe7f95",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3a80e4-1c10-47ae-ba41-5f279c1722ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "172f2585-29ad-4431-aba0-aeb22fcfae82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bf9111-94fa-440f-be8e-3a29542855d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fc49a4-7ea3-41a2-a5e6-88bb7b061779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f52bcd-6a0d-42b4-8947-7705eab0a11a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6df7c76-5e14-4104-987b-bab44deb4a50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "625d3cb7-a940-4ae5-b8ac-6dc258551819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e260e1c-4525-454a-af6a-bf0ee946ef04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb65e418-d963-4056-a720-e3b72911a3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e7d206-966f-4b5b-9b1d-a52e248a332d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c791f60-8ea1-4d79-9459-3d9b72142e1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf45437b-1891-451e-b36f-34de7bc01b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173bdada-fbd3-44a1-8194-bfa7b184b7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4054ec0e-2bd2-4ba5-9ddc-ba48699dc3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c9d608-4b7f-416e-b6e3-5a6159de57d8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ce5966-34d5-4832-8507-2740605a0b3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "036e1aab-a5d0-44c2-bdf9-1f5b30e23c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd7ef14-a1f2-41c4-8c5c-f24980932ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d577f65-a37d-46a7-9977-600cf5313be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577d9b5a-2fac-422d-a155-1f38260d4a20",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6b60da-752d-401a-8b3b-443dbb4d52e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b354661b-069b-4f6d-b3fb-b4a2d5d5b3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840d0a6f-9448-48fd-9903-cde8a326d4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b445d73-6685-404d-89bf-98644607897a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fa4c03-f4ae-479a-b75b-d5db1469ea99",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec18f27-8b85-4631-a491-8ecf05bcac81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e829f9ed-2422-4e17-b569-6b4f6e9f8598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d706e1-f492-4020-9701-03a9c296f5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67679209-9fb2-4307-9867-e74be8a2f2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b308c3-4543-4824-b4d9-2f620b659de7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7c9026-35ab-43ab-9d72-72d5b4accc12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dabd1b57-b6e1-4535-b4b8-1e070a4436c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a7d4ad-483d-431d-828b-bcaeb7e41824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341bdef9-58fa-4e8c-a924-96ce6f8d3277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01eff88b-d741-473c-9f88-9eff45a84e18",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05565713-b113-4c82-b009-009fe833cf3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84b204fa-812e-4ed0-b633-f624549c6b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e848f8-1206-41a0-a482-267c25df7056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feefdc89-dbf6-46e8-a4c8-7626aff5b215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419a7ad8-5c94-46af-a75a-07efd71a9428",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e619e57b-f77e-4bc6-a746-5ca0e361e875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e52c567-925d-4832-b0d6-65816ddea64d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb57b8d-93d8-4f22-b5c0-02b91a03be9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31708354-53c8-44ed-b284-78bf9d4eb899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e95f8aa-5a85-43be-984f-e12202cd8132",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67222b2b-5258-4904-842b-23f58c40b288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2aecd83-fa46-47ed-a52e-7f694951a976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b361177d-bbe9-4b5d-acc1-95b9e3ca75d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f15b08-8fe2-4872-a47d-f53188e36ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c27ace-32f3-4635-aaa2-cc8a6ac1bc41",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974231a6-3d9c-4136-b53e-07ca8131cf43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fe43376-89d6-4a67-bf51-2e851dd4261f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1b80d5-0051-41a6-be24-5eae0ff957bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea54ca31-65b6-4a71-b096-0aa5f3dbfd5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4c3604-726d-46d4-ab89-c88320cccb6f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5f5b83-b9e5-4f24-ac79-76fbae051e36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f906df45-a298-443c-a543-0b421796bde3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f330b7fc-e548-49a4-81b7-a862b588e25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230ea455-7675-416e-abbf-f76330496536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe8b62f-34b1-497e-89a4-65d7958dd675",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751d5a58-4c56-480c-9f45-a3fce722f5a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93f8e99a-f889-402c-9471-eea6efb966c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9683b76d-012f-4840-ab6c-182df5afcf9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45af251-ccb5-4c79-b3a8-10fe50785c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0557b734-a0c1-4cb7-9265-b1490f1f37ec",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f4673e-811f-41e0-a0ab-746d480a4f06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b156e46f-8a56-4441-88ba-c9198a8ba280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548f6970-a078-4e48-b5ef-6809ef8faf95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86dcdd5a-1caf-4751-89a6-1cf54c1e493e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173bf54b-cced-44b0-a927-86a39ad2a9c7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d7d7f6-fcb5-41ac-a85a-f883e6eeac01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95946a88-f7b5-4909-b958-dc00e971e127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb37a78-7fac-4724-94e5-058d931943a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dddd0cf-75ce-4ef4-9b7e-172aef93ded4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20838616-bf94-4991-8c19-1f213243203f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cd1b20-3b17-40e3-b05d-05f2031ca4de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d53e3f7-ae1e-49c6-8565-77002b7dc132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333f33b4-b542-403e-baeb-4e8d265e434d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0414ce6a-5b68-4a54-bf68-5ac3add1094e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f427b1-de2a-44dc-90fe-b0184b0d5cf6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145d985f-df69-4e48-b1fc-b9f6f264f045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59c7f9e4-aea3-48ad-8632-72dc4db9eece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e339d7e0-85b2-43a8-8108-9ac268f07de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a690be20-1fd6-401d-b810-731cbb96e0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae35a5d2-c992-4824-ba81-853d3f804e4b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc6b34a-2db1-4b14-b430-221e9af6988b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2c2d00c-8578-4de2-85de-ba419638fe56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b4b706-3c46-4634-9f8b-2eeecdb6e6c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68e36f0-f321-4991-ba00-f06c89d95699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d47237-3af4-4d4a-9bab-1d01912938ac",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d7b9bf-0528-4cc0-957a-7692a1505f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b0686a8-bf65-4a84-ba8b-61fce2a14c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c68e5a-94ec-44c2-b551-5e24db8e1103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244e59aa-959a-47fa-a4fd-ee1ed5ad8049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1c604d-514a-4f51-b981-45adaf6ff295",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac86cfb-a3ae-4c14-8234-47789d2b863b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c605a029-c3e5-4e59-8c1e-221af8544b75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14be8e13-7e83-43a3-a784-e06e5296df90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7a1ac5-14d5-45c8-85dc-fded97b7f44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099b5278-b710-4406-8c34-03b93f87791a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d141cb96-31f4-4979-988c-165c5d337d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d4eb1d7-d27b-41a7-a840-ddd639dfe50d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8ae6dc-5788-4396-b840-b811db142bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f014a8db-ce60-4e3b-b31b-25044f269e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b872f42-954c-4061-8fbe-f0edc1975ca7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034f756d-6aa8-40c9-b8bd-809b26d3c069",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ad5f255-2cc1-4431-9283-a88d59007306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d82c31-ff4b-4b82-b3d6-9c374d04e680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42405b3-a98e-46de-887d-abf2e135c79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ec3919-31e8-4750-864b-975bbceb78c2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa3d00e-fd69-48a9-b79f-09038a5d5ab4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b1664ed-7aa3-48db-9681-d8e7db01f1be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570781ae-0bf2-4b39-ba4b-75161cb263df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71778de2-e1ba-41cf-913a-fe1d26350acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdddc4a-bdd2-44c2-8227-728cfd48eff0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b7291a-6c13-4d31-9c6a-5079b1d6a73b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8db387b8-7653-41c8-92f6-313efd9cb3bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93ba6ec-b446-41c0-9833-c75dc4d4f95d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a303e3-0f5e-4a9c-9bba-d45753860b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f1e900-6064-412a-930c-bd572e5107d7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d20b7b-63ac-41ba-b5af-aba71a602dec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92050e24-d535-4be9-b8f3-5cd8e27bf58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956783dd-4654-4271-87d4-bcb4472b6a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f460546d-3090-4e09-a1ad-87662d62289f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7019db-fe63-4a87-95bb-1534a261671e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4ece71-2140-46a6-9468-d760fe3e0fcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f65f2b1-4192-48c0-9ec1-ed5dc9414a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2201b6-bbf3-4d4f-959a-397f2779aeef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937cc5ea-8883-4740-870f-100f9014ba9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d923c712-ec6c-48cf-a864-814bc014ba2b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef1da09-3ce6-4a23-937f-c51071bb9e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d2734b-2dbf-4071-be14-8116f3faefdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1935af99-574b-425b-8d85-13ea008524bd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbbd236-8083-4711-8c4e-9110d9772c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b18574-61b5-42f1-9eff-2150a66b009c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12838e18-f26a-4e4b-b6ca-774be2a2fa58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef14c0ae-26de-4d5c-8e14-7ffefb1f81bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4387cb2f-94ec-4a20-a0fe-98ed7e209157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21060cf3-9ac4-4d1b-a335-89cae56a6b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6b6df2-ff04-4b8b-ae1e-fb97d991257d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296178b7-f0a8-4fc5-881d-b9229409a2d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7f8766f-d492-402e-9fe6-032f09767b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e916972a-ac74-460f-86e0-75045a5111aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f26a83-816f-47b4-8b46-63a4e5dd45ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb907bf3-264d-4f71-aead-6ed97a28ee5a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcab4ce3-da4a-4814-bb6e-c6d1dfe59e44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6118ef52-b3c3-42fc-a0eb-a05d247a4d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be3de27-5c41-4ea5-a539-4b2c1a1e6ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c1672c-4483-4d23-84b0-512f0e56b612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c1160f-a51e-4a93-b735-1ed9c2cbdc2b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05179c21-e1a1-4d1a-9e07-5e8cfde25b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "891e6b57-f4da-4a3b-80dd-e44ebd8fabee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeded488-c6ce-46d3-bd9c-215470c73d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56de9667-258c-45c7-8db9-b23a77043629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b524d26-79f6-46bc-bb51-0eb4cac26f44",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9b749a-fc3d-40d4-a6fb-548970488034",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdefeac5-55a2-4b99-86da-6709e7b0ffd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34c0b57-187b-464e-8461-7fb69ad91525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b8c53d-1b9d-42d0-9836-8180ab2ce582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20c0007-c4f4-4195-a77e-7aeee84d4333",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd395bf-bfb0-42b5-8d9c-8c6f575e5f98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ec20774-ea0c-460d-a088-73d4181c1919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0fad962-dd22-404c-9915-9eb64b84dcbd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d10ff5e-b63b-4cd6-8adc-df39ab2010ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd693d9-39be-45a2-9718-63d6b7a2763d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62dbcc5-8238-48f1-9079-35d0ac7673ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5903479-2375-47b7-bd22-168811b9e0e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6bfb7a-94be-4d9a-8cc0-77caec1a44e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0463e1c9-6aed-46f6-a2f2-688d23e56abc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "315257c6-7dad-490e-ae16-f9ee24a2a1f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18258837-ff63-4c33-bc89-5fbceefd4c01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45817b29-597e-4916-843a-91f965e2e3b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fae5eec5-949c-49cc-b025-a170ba3ad1f3"
                    }
                  }
                ]
              },
              {
                "id": "058abd20-9d0c-43c3-bbbf-2e7e54f720d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7460e303-736e-4d42-88fc-ee8a44d3fbe1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e731cbe-3be6-4b3a-9081-52c5f808e377",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d0722ade-71d6-4455-b081-385a73b28c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678f0cd0-ae75-4097-8903-29cda37627b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48a0b11a-c6f8-464e-b1af-5fc55e3deeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2069d638-1555-46fb-9765-16b31bd5829c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512fa9d4-dbf6-42f7-b5c2-5b09fb0ee6d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "31becdea-8a4d-4edd-9197-0846825ea9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "048d4a97-9270-4ab4-9912-dcf2753f1d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54261780-1622-40b6-941b-67fde28378d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d48c503c-2386-4f90-b87e-9bc8be076098",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4131ce3e-4b98-4bcc-9e45-90ee37b23964"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3de60d9d-b84f-44a8-a543-285276652db2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa3c6f18-dff5-47ac-91e8-6a66bb3390e6"
                    }
                  }
                ]
              },
              {
                "id": "e915b354-d0f6-41b3-83ad-b0bcc5fca58e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b3676e34-0afb-49e8-9c65-e670960313da",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2e2174-2c3b-4747-bc30-ae148ae75953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e8daeab0-8eeb-4fca-a246-27d55f0edb2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9242d27-ac81-4106-9165-bb3bb2746f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042c4c83-ff4c-45ab-9ea9-d14280724e22"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "de5ed233-d2f2-4bc2-b7a2-2fd6a7465116",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ebe6903e-5f2b-4797-9f86-40b3f4caec6a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f16fd53-6cd2-453e-be1f-ee580dfe916c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fa507643-d2c8-46b7-9371-26851a471f2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c28e5c6b-ed07-4eae-a2c0-5508c70f8261",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f7f587d-1162-466f-9dd3-960a01247a21"
                    }
                  }
                ]
              },
              {
                "id": "0186c869-5aaf-4851-a615-73fa7dbbf371",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7de80e06-b8b9-4fe5-86c6-33bf418f2c22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dc5a5802-112c-4236-b7dc-e4fc9bbb4563"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd026afd-66e6-4cf5-82de-29ec98ce52fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d908c8a6-bc95-4660-9aa6-fa31fb2eae7b"
                    }
                  }
                ]
              },
              {
                "id": "49110d7c-9129-4b07-a116-bc565637b2e2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0a950f1-e281-4de6-aa75-49328f57c65f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "77f62ef4-6c5f-480a-a206-ba3a2f8bdf38"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b17340ea-e6a1-4cf2-8552-2e10de777c75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8b8b251-53e0-4c38-9e5c-7a795b1a9bcd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d0e0231-4304-4360-9736-d20f7e59ea22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e3e7d171-1059-4cd8-9153-77d82a3963d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4f2203f-17c0-4bc1-a672-4e942e0d3787",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2110ff9a-fd90-4b26-899b-62af70256b1b"
            }
          }
        ]
      },
      {
        "id": "33a62a87-de89-4ae3-9155-a05725357ca9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e4688181-4335-44a1-90fd-2dac0c6a67f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "827d6255-2966-4cc4-ad69-431d30962270",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9bba1036-c26b-4ffb-9be5-d3b28ccd17a8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae29dd8c-c1f9-4939-b2c8-b75ac7c5974f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "290a1ab5-4ee9-42fc-b52a-dd74ae35f88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bbe8ca-d975-4021-8353-0225ad1cb67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccc4448f-488a-4f47-8573-a95792b14b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2024948-d764-4e6b-90bc-ed81e6c4d6a2",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31c1729-5581-4a8e-965f-7e716d473659",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "453131db-6362-4671-bbf7-fb54284d75c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc540a9-a209-4bda-961d-bd58138e59ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed2101c3-378c-47c8-9019-d333d7b33dcc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86fdd468-f335-4f61-bad3-0d70a476a638",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "357b9352-02a5-43e2-ac47-3a446b1a2fde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d365b252-bc2c-4721-964b-614ca40c9480",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55ae83e0-ece6-4a59-b7b1-5b9ebd174edf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fddae283-ac69-478e-aba3-3920b62222d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c8f1d5eb-c897-485b-b995-25cf54cc5373"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e77ac74-b5ae-4f90-b7da-db5fa4c2c068",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2eaaa810-a923-48b0-8840-75cdf5065149"
            }
          }
        ]
      },
      {
        "id": "d681e996-e8ca-4adf-bf31-4b3f233176b3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5fd42612-fffd-4cf4-a3f3-c7bcd4bfae06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb4de6e5-cb1d-4eee-a80f-68212f1e748c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53f1501e-01a0-4d04-a138-bde0c2d2b827",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5436d7-eda9-4f2d-9fdb-09e8d01a8794",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "577f93f4-f22b-4e9f-89d9-c18d2677ea97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff5e56d-1279-45e1-b283-dfc08ab000bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9480247-0782-4724-a84d-f628f86cf12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181973b6-c179-414d-b6ef-f57980863b48",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ad3ad7-ef94-48ad-b38f-87b3ab65976b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a75d36c0-2a72-47a4-93fd-26b990b59790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e28af5a-f191-4033-87da-2a2298b6f787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d06c41f4-ed0f-4775-b2fa-2195a6bc2795"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e157acb3-ccf5-4cb6-b8ea-ad94bfa70100",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d348b86-a432-4b3b-9231-b7afda97f4b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e099be8-5a3a-46a0-8b97-f161dcf690ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fa22cc6-9296-4e9c-8ff3-347ed2e755ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0228c305-9675-4613-9492-fe803fc043e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "af9ae2de-2fb0-4c75-a226-ad6d71975ca6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a09cb76-905f-4def-9661-826823bbfb18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d333b0f7-478c-447b-96ff-b403d68d4118"
            }
          }
        ]
      },
      {
        "id": "c5f4155e-7c2e-43c7-829d-d568a0239e86",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5de52b9d-d9ff-48ae-b915-d670ce8fb417",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b645dc4-9310-41ac-88b3-893f5e79c6a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0af4cd0-14f9-4765-8bc8-1079a518a805",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f61d14-9cde-4f65-8a32-b8c8ff4ada94",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b10c6cd7-7f8a-413e-969c-07831e148d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13ca3e7-1b9d-4e62-9b35-e8bcff42511a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2b0eb3d-df09-435d-8f25-827c87e4f88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae83cdca-d83c-4ea4-938c-6846362a6f95",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d425d82e-43a2-4d87-bdd9-218f7e9b8aad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "83ca50dc-030e-4b53-95bd-e55bb6d9632f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f1d578-13cd-4d25-99e1-9d9555e73a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c6a6f02-43c5-4ee5-9bb2-a75f124b66bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "729b3035-3137-4ca6-b7e3-31e9be6ee8bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8435c971-6a3b-44c5-9f56-d21d752ea469"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02912d1b-d25a-412a-8fcb-596e8f1c6226",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acda7b5c-6a72-40f2-b173-771169c3ee08"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a205e35-aa5f-45f4-891b-fb12453140a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b049a69b-5c1c-4292-948c-83d96fcbf7a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6666c35-86bf-4558-95c9-aa72af76fad9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d8704dd-b30a-4570-bdff-b3d627a44f92"
            }
          }
        ]
      },
      {
        "id": "30d32a31-53e2-4903-8bd8-95b3462e4486",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9e4d95d-e272-4452-a360-c8de901b090d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9da6e8aa-b38e-49f4-add4-0ca94c6dda99",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9be6f875-7e13-4633-9f03-c727bf6ee9b4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4d4afc8-2ce4-417f-ab44-b07d0e7760bb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e31a08cb-e5dd-406a-bd2d-112e595874c6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.022988505747115,
      "responseMin": 4,
      "responseMax": 645,
      "responseSd": 107.06173000150689,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669250676426,
      "completed": 1669250703013
    },
    "executions": [
      {
        "id": "94a5aac5-3131-4eb3-8abf-c8b01798a9ad",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ff1c90da-04c7-4587-a29e-4fda2c124cfe",
          "httpRequestId": "7c96df2c-fbc5-44cd-ae9b-507c887be07a"
        },
        "item": {
          "id": "94a5aac5-3131-4eb3-8abf-c8b01798a9ad",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "aed49461-a81e-4ba4-883c-9666dcf4011f",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "9d3a5ed1-7b04-487f-aa2b-13b9fc79dd2a",
        "cursor": {
          "ref": "26fc8111-46ef-4e61-8665-08e7d4d1d708",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fe515b39-db5c-44b8-ab30-8714156488a0"
        },
        "item": {
          "id": "9d3a5ed1-7b04-487f-aa2b-13b9fc79dd2a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e897881a-f372-43e4-b945-6f19b831cf2f",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "2e78205d-3077-4189-ae67-a873a64cc30d",
        "cursor": {
          "ref": "1af5a9b7-a693-45cb-a72c-760b9638a6b2",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cd31ee60-b18a-4b43-8cd6-fd062c5ed873"
        },
        "item": {
          "id": "2e78205d-3077-4189-ae67-a873a64cc30d",
          "name": "did_json"
        },
        "response": {
          "id": "919eed61-8e96-41de-bdb1-3e641d47306f",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce740c3d-789c-4997-9a75-52646240f141",
        "cursor": {
          "ref": "e5ad15a1-baea-4dd7-9997-9a617c968a6b",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0866d4d9-f365-4380-9d93-39563e31b2e2"
        },
        "item": {
          "id": "ce740c3d-789c-4997-9a75-52646240f141",
          "name": "did:invalid"
        },
        "response": {
          "id": "5eef7ea5-b17f-4529-9463-dcb5b0c06154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce740c3d-789c-4997-9a75-52646240f141",
        "cursor": {
          "ref": "e5ad15a1-baea-4dd7-9997-9a617c968a6b",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0866d4d9-f365-4380-9d93-39563e31b2e2"
        },
        "item": {
          "id": "ce740c3d-789c-4997-9a75-52646240f141",
          "name": "did:invalid"
        },
        "response": {
          "id": "5eef7ea5-b17f-4529-9463-dcb5b0c06154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99d4431-acbf-4277-aa31-1dc910726e61",
        "cursor": {
          "ref": "fc1ad955-244c-439a-9b39-84955ff624a6",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cf8933e3-f44e-4a3d-9c6e-d7d7db613e33"
        },
        "item": {
          "id": "c99d4431-acbf-4277-aa31-1dc910726e61",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "862efa87-a6e4-47cb-aeeb-e2c6fb06f132",
          "status": "Not Found",
          "code": 404,
          "responseTime": 117,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3a5b48-caf6-40b8-b03c-9eb6664e3bd9",
        "cursor": {
          "ref": "549bbd27-a71a-42bc-a474-327fdf80531d",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "03333eb6-96a9-41fd-84dd-179c4bffed81"
        },
        "item": {
          "id": "1b3a5b48-caf6-40b8-b03c-9eb6664e3bd9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cb1c1ac7-2735-432c-a84f-bb166b7852f0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0257c4-85f8-4fde-83be-aa0d16739bbe",
        "cursor": {
          "ref": "59e54e7a-b67e-48c0-8382-74cb7691a8c0",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54955e66-d7f2-4e10-9653-e5e0dd3a1e6e"
        },
        "item": {
          "id": "cd0257c4-85f8-4fde-83be-aa0d16739bbe",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "36d409c7-a2e0-43f1-9bdf-5d4963a45455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911f32b2-49eb-49aa-9a57-c185ff6f2e10",
        "cursor": {
          "ref": "c5b8bd1d-55fb-47c8-86d3-51330c6157c9",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d640adec-0717-41c7-8bd7-3ff69047ddce"
        },
        "item": {
          "id": "911f32b2-49eb-49aa-9a57-c185ff6f2e10",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "33d8ae20-b5bd-4e9f-990a-8af8489b7487",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911f32b2-49eb-49aa-9a57-c185ff6f2e10",
        "cursor": {
          "ref": "c5b8bd1d-55fb-47c8-86d3-51330c6157c9",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d640adec-0717-41c7-8bd7-3ff69047ddce"
        },
        "item": {
          "id": "911f32b2-49eb-49aa-9a57-c185ff6f2e10",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "33d8ae20-b5bd-4e9f-990a-8af8489b7487",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2533aaba-9cf9-41fe-8bdb-40d6daf8388f",
        "cursor": {
          "ref": "6875d9d7-1980-477f-b43d-44d7ea566adb",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "71b61723-556c-4a4c-9901-cd907c1ef6f0"
        },
        "item": {
          "id": "2533aaba-9cf9-41fe-8bdb-40d6daf8388f",
          "name": "identifiers"
        },
        "response": {
          "id": "37be380d-93af-4292-b105-326fcb5354bf",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43a2851-b4da-442e-ba63-c3b23ed5cf42",
        "cursor": {
          "ref": "91c5610f-65a3-4634-9fa6-c66d8423510c",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cde04a71-c94e-46ac-8773-a6d995691480"
        },
        "item": {
          "id": "d43a2851-b4da-442e-ba63-c3b23ed5cf42",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ab4996cb-1871-4457-a312-210aa13617e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43a2851-b4da-442e-ba63-c3b23ed5cf42",
        "cursor": {
          "ref": "91c5610f-65a3-4634-9fa6-c66d8423510c",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cde04a71-c94e-46ac-8773-a6d995691480"
        },
        "item": {
          "id": "d43a2851-b4da-442e-ba63-c3b23ed5cf42",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ab4996cb-1871-4457-a312-210aa13617e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829c5ce5-e72c-48e9-8a92-b2d0669eea42",
        "cursor": {
          "ref": "31fc7413-08ef-40b6-a1d3-5b6c1e6f9876",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4e221c8d-e074-4854-8c69-104565f25a5e"
        },
        "item": {
          "id": "829c5ce5-e72c-48e9-8a92-b2d0669eea42",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1d372222-799f-4fe4-a049-751ee2e5d60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66626971-9423-4c14-a2f8-0fc5f9c3a966",
        "cursor": {
          "ref": "d25f7dfd-80ee-495c-9430-416ac0de7f17",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "80ef7be9-3e0a-41cf-bff2-a3d528723b95"
        },
        "item": {
          "id": "66626971-9423-4c14-a2f8-0fc5f9c3a966",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c6ff6f80-b70f-4b34-a2fd-b43e063d41ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2a1f40-ee36-4577-9ab1-405944e316fb",
        "cursor": {
          "ref": "fa4e2172-1c20-4289-b0d9-ab031df39bdd",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8991ac03-e849-4d2f-89eb-f6a54b4fc1ab"
        },
        "item": {
          "id": "8c2a1f40-ee36-4577-9ab1-405944e316fb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5318b286-66bf-4a36-94d2-31863bc89f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8a8daa-0847-46f4-a4bb-c8db1738490d",
        "cursor": {
          "ref": "96e9b200-0526-4b1c-a72f-bd37ff47afa7",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "39341971-6400-4a39-a071-410603d6be0c"
        },
        "item": {
          "id": "da8a8daa-0847-46f4-a4bb-c8db1738490d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "77335b04-b9ef-4768-ae60-5bab124ecc8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9238c4a-7278-4dde-8dbd-b11f0df32349",
        "cursor": {
          "ref": "751b8211-cb35-4fe8-81b8-0a5e014c4007",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cf47f02b-d038-43dc-b50a-0c8a5fc3616e"
        },
        "item": {
          "id": "c9238c4a-7278-4dde-8dbd-b11f0df32349",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c5c8f66c-c087-4def-a3a6-bd234cf267fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac1580e-630d-47c9-b302-34b454361358",
        "cursor": {
          "ref": "a80c09e5-c3ee-424c-be22-dabc3aa47a3b",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d8f26b38-7c71-4f9b-aca0-941c36d4c703"
        },
        "item": {
          "id": "1ac1580e-630d-47c9-b302-34b454361358",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "feb4d12c-0619-468a-aba2-b3a071599bb6",
          "status": "Created",
          "code": 201,
          "responseTime": 460,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "bff9723d-2a35-43ed-858f-21bd3e27454f",
        "cursor": {
          "ref": "8660f605-7e6d-462a-8e7c-0902a9e53829",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "586f374d-08ea-4228-a7a9-897173227ae0"
        },
        "item": {
          "id": "bff9723d-2a35-43ed-858f-21bd3e27454f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "00d86103-b183-4325-8a25-32f1c1110c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de0035c-81f9-4f8d-937a-f5bed8c42dbf",
        "cursor": {
          "ref": "b7ec5c69-94ea-4f5b-8120-bc68fa82e4ee",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c44824b5-c2da-460e-978e-4d49cb4c8f2b"
        },
        "item": {
          "id": "6de0035c-81f9-4f8d-937a-f5bed8c42dbf",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6025ba5b-21b8-48a3-925f-0f89f6bf4274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7373bdb-b310-4e9f-b4ef-095d84f654c7",
        "cursor": {
          "ref": "01095a7f-8949-4a72-b7fe-ddfc8e4162f9",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c9fa58b9-fedc-46c0-9d6c-9cb80ca16217"
        },
        "item": {
          "id": "a7373bdb-b310-4e9f-b4ef-095d84f654c7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "80301503-d79c-49e3-b6c7-282467d30f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8488647d-5d32-4fb1-8e00-45c775340829",
        "cursor": {
          "ref": "0b80fb03-2a94-4eb4-a9e8-ab65cc088b8d",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dd33842c-8e75-49ba-b638-cc70128636e6"
        },
        "item": {
          "id": "8488647d-5d32-4fb1-8e00-45c775340829",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5f2137c2-ca14-4962-96da-2905cb410a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad893b45-be28-446b-95cf-fc20e0719efc",
        "cursor": {
          "ref": "80dfa697-cac0-4c7e-82c3-8b13edef905d",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4c2c156a-2aaa-40c1-baa0-fa7cfc08f7ca"
        },
        "item": {
          "id": "ad893b45-be28-446b-95cf-fc20e0719efc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e758538f-3ac9-40d2-9002-406db10e43ab",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "795f2cbf-cd02-4455-a4e4-479635d337d2",
        "cursor": {
          "ref": "9c561c4b-1a02-4249-9101-1b441c405b0f",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f8d8b1fe-71ef-4595-a06c-6589a7f2ec6e"
        },
        "item": {
          "id": "795f2cbf-cd02-4455-a4e4-479635d337d2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "482082dd-8e17-46c6-aa4d-e143f5d748fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bd8c78-4356-4fb7-b383-d22a916c02d4",
        "cursor": {
          "ref": "66ae482e-df68-4e52-848d-9c83645acc6d",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2c7e585f-ffa5-4eb2-b729-422e121a9698"
        },
        "item": {
          "id": "39bd8c78-4356-4fb7-b383-d22a916c02d4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "af2ea4a5-3cc9-4743-a672-aae68f74dc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af3347e-45fc-40d7-af2e-a9f0adfae12f",
        "cursor": {
          "ref": "3b8374fb-568a-4e5c-a13c-b10ef8bc3dc6",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a25a0800-afb9-43ec-9f82-c91f8b5c717c"
        },
        "item": {
          "id": "5af3347e-45fc-40d7-af2e-a9f0adfae12f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "912554a9-9ddc-4479-9573-81c064aaec32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcffc60-cdd2-498a-bcbd-bf7e009e6202",
        "cursor": {
          "ref": "27edaeaa-253c-49f8-8059-c7e0b5a980c8",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5a189e0c-4a0e-40d2-b429-b5b030c15828"
        },
        "item": {
          "id": "efcffc60-cdd2-498a-bcbd-bf7e009e6202",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "705fc458-c469-4001-8615-23371a3598de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ccd741-3ba7-444f-b013-88c320456607",
        "cursor": {
          "ref": "84d89c3a-a58c-47a1-b1ed-1f4727e13e8a",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fb55f3b4-927e-4381-bf7f-17b95433f9b9"
        },
        "item": {
          "id": "e9ccd741-3ba7-444f-b013-88c320456607",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b2e9812b-8f4f-45df-acad-9ab4f53aed3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a589f6-1171-4484-b53b-f373a70f1608",
        "cursor": {
          "ref": "074575a2-ab8d-4516-bfe9-bc6be414fbdd",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4200986f-9075-4b85-9d76-c068cf604e03"
        },
        "item": {
          "id": "a3a589f6-1171-4484-b53b-f373a70f1608",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6a016861-5bf4-413c-a243-16cda632a2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bba3b8-efe4-4744-8dc9-65281973f400",
        "cursor": {
          "ref": "bac26b32-a660-4516-8e28-53016284bb66",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c51f9989-cd7d-49f7-b829-4c133f41c459"
        },
        "item": {
          "id": "26bba3b8-efe4-4744-8dc9-65281973f400",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "800908cb-ba55-463b-92b3-19f8e7557e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7fec8b-ad64-4a6e-b786-d23994900a0a",
        "cursor": {
          "ref": "e3be9d6a-5519-4498-9caa-cfab162c6625",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "acf283a0-eb07-411a-9bae-11eddd503fcd"
        },
        "item": {
          "id": "3e7fec8b-ad64-4a6e-b786-d23994900a0a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5bf34957-9737-4e9e-9878-208b69236366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1942d9e-432d-4bce-93c2-47040339ec17",
        "cursor": {
          "ref": "11a6a233-93f1-4500-ba9d-fd18eb23a49f",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "af4ea5a5-ce44-4d41-a640-4abec3413d1b"
        },
        "item": {
          "id": "e1942d9e-432d-4bce-93c2-47040339ec17",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c6fdc486-a60a-471d-b77e-ad95680d586c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804ce594-6f77-4861-a5e3-5394035f7ed7",
        "cursor": {
          "ref": "3cd155fe-5063-4ed6-a964-ae043bdc14ab",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "900dee42-1574-4d7c-9e9f-5de9424ac62e"
        },
        "item": {
          "id": "804ce594-6f77-4861-a5e3-5394035f7ed7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f748e1e5-b1fc-4b40-a652-0cb0b67152fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7cdfa8-8633-42a8-b819-4edfe078719d",
        "cursor": {
          "ref": "37a8cb1b-96c8-46cb-aa94-6bdf2cd8192c",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c319fd47-7b11-424b-a193-9bc510484444"
        },
        "item": {
          "id": "0e7cdfa8-8633-42a8-b819-4edfe078719d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "31b97c3e-fe0a-461c-87d5-ee91f0957cdd",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "0b1f79ef-14d3-4360-a654-50ec766f57ff",
        "cursor": {
          "ref": "3a3e80a6-33e5-4168-b530-937c41591f7c",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cfbe1ad9-5f36-486e-8232-37a9b59f2847"
        },
        "item": {
          "id": "0b1f79ef-14d3-4360-a654-50ec766f57ff",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d3747c68-4db5-497d-ab62-94b4ee90824c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39299c17-725d-4547-89aa-830471256bab",
        "cursor": {
          "ref": "095d8b29-d0fb-49b3-8b62-0602980d16a0",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "790366b5-7396-44d1-9be2-ae0d5f98e025"
        },
        "item": {
          "id": "39299c17-725d-4547-89aa-830471256bab",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c221f8e3-2975-462c-a5bb-40a255dd0c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c242200-0633-4bbe-8546-739c7ffdedde",
        "cursor": {
          "ref": "5c149853-0831-4f68-b2d1-6f6676557b0b",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "753a6888-e66f-42e0-aa33-f96b7d993dab"
        },
        "item": {
          "id": "9c242200-0633-4bbe-8546-739c7ffdedde",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1f940583-f430-4fd0-8c95-9dade3998671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09b733a-d414-4492-a903-e355f7369067",
        "cursor": {
          "ref": "ca880096-c364-4db7-82a6-78e31bf45709",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "763f1559-c281-4747-8946-43aa9d12e3b3"
        },
        "item": {
          "id": "e09b733a-d414-4492-a903-e355f7369067",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ec3a95ea-d8f9-49db-80df-494785aaaf00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ef9e9a-ebdc-441a-addf-2c5d2f57d48d",
        "cursor": {
          "ref": "518d1769-e5aa-4ac9-bde7-ddbf7c21cf25",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "272bb30a-d52f-4e7b-8e76-61c15c233b20"
        },
        "item": {
          "id": "d1ef9e9a-ebdc-441a-addf-2c5d2f57d48d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "181c3300-622a-4f48-8b93-144272ad6783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487f7578-290f-4b98-82b6-2c38877c3d17",
        "cursor": {
          "ref": "4820c326-ad8a-4015-9043-a92af97c763d",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7ee1d6df-39b2-402b-a97d-56e9f2980212"
        },
        "item": {
          "id": "487f7578-290f-4b98-82b6-2c38877c3d17",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ef28c09c-100d-4f4c-b585-5cf867a28bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca626de-c114-4a7d-8558-5b8ba75f2579",
        "cursor": {
          "ref": "dc00d66a-c18a-46cb-b518-a53af669c795",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "31ff1969-1a5c-4950-8195-6234ae64f54f"
        },
        "item": {
          "id": "3ca626de-c114-4a7d-8558-5b8ba75f2579",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1294217d-1f81-4c57-94fc-a6bd1c495c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417c02e6-895e-4b57-b0f8-871a7ebc5f0f",
        "cursor": {
          "ref": "6ff2fdf1-c9b3-4f50-8f0c-b817557c53ee",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dda0e881-189d-4186-b44b-92c375b4a60b"
        },
        "item": {
          "id": "417c02e6-895e-4b57-b0f8-871a7ebc5f0f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dd78b69e-7307-471c-a7b8-24a653871c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5170a4b4-8c2f-4066-85f9-7bb4056fc80e",
        "cursor": {
          "ref": "8da06166-c585-4719-8d4d-2b87d6130042",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e1cc60ea-80c8-433e-a9fd-15765e5c5037"
        },
        "item": {
          "id": "5170a4b4-8c2f-4066-85f9-7bb4056fc80e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b76bdc0f-4725-4844-a480-391a313a4605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae9158a-e4f5-4b78-9f1a-d4f59789b722",
        "cursor": {
          "ref": "fc5e922a-24c7-4551-8edc-90b48b3c035f",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f133c7e3-6743-498e-aa1f-36f33c98e953"
        },
        "item": {
          "id": "3ae9158a-e4f5-4b78-9f1a-d4f59789b722",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b4321076-6c7f-4c9e-a1ae-c8ea5721bb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f740db12-7ffc-4e9b-b8f3-e05c9d65ae71",
        "cursor": {
          "ref": "a7d1b52d-e613-4448-80f6-af98c1e5efe5",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "437942c5-0c3a-416f-adb4-fedc4e49448f"
        },
        "item": {
          "id": "f740db12-7ffc-4e9b-b8f3-e05c9d65ae71",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a62c9953-7c01-4da7-97cf-816fc8ceb488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53381cd0-a13e-446d-9175-60dc5ea5bf82",
        "cursor": {
          "ref": "62ca59ef-2991-4082-8772-f8106085d193",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7dad625d-31e2-4fbb-98f2-88ba9e9b8b58"
        },
        "item": {
          "id": "53381cd0-a13e-446d-9175-60dc5ea5bf82",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e408edae-3d4d-4413-8dbb-f08bf090e409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfbd0fe-f967-4797-b238-0f97b3d49aa6",
        "cursor": {
          "ref": "26279186-ab3e-4b2d-8a39-91d87da8595f",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8a920d92-8f26-46c9-8307-cb1835e2fd5e"
        },
        "item": {
          "id": "0cfbd0fe-f967-4797-b238-0f97b3d49aa6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1a2c11c4-ffee-4f9f-832b-d54257a75350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "593bf924-c54a-4eb1-9c49-31179d311868",
        "cursor": {
          "ref": "84d5e2da-89f9-4948-bb56-9063881dba7f",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c5a975d2-48ba-4798-875c-c52a58a13523"
        },
        "item": {
          "id": "593bf924-c54a-4eb1-9c49-31179d311868",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "32112496-42f7-43cb-bc98-7fd784d4d9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe172c53-5f48-4393-8878-3a1143f38c5e",
        "cursor": {
          "ref": "ab8cafcd-b378-4a3f-97b9-bb51a69521ba",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a60fc874-15fc-4a13-8a09-2a4b6bdec349"
        },
        "item": {
          "id": "fe172c53-5f48-4393-8878-3a1143f38c5e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fb1186d7-e5b3-4973-baa1-a762ba33c151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65ace82-7371-4bbf-997e-882b60f8d335",
        "cursor": {
          "ref": "d7967fe3-af70-487f-b3e8-4142cf21b3e3",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0e5e772b-33db-41ad-a953-82982bbadf21"
        },
        "item": {
          "id": "d65ace82-7371-4bbf-997e-882b60f8d335",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f6e41702-f773-4eea-9986-80e468228890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c1e048-a92b-4c31-a37f-53d24176e3fb",
        "cursor": {
          "ref": "98975465-d424-43fb-84e4-4fc79b3fd1ff",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5f1128f1-ee42-4059-9f9e-1ac925ec4a3c"
        },
        "item": {
          "id": "a0c1e048-a92b-4c31-a37f-53d24176e3fb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c803c361-da7e-481a-a3db-f958a357dcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff6d94e-76be-453f-bc59-8993172d94e3",
        "cursor": {
          "ref": "4ad2ed12-0b21-4f3d-8425-b925e25fe51a",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "43a7d835-2b1f-4158-854e-109f1875fa56"
        },
        "item": {
          "id": "cff6d94e-76be-453f-bc59-8993172d94e3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7acf879f-0fad-4129-80dd-d3864ed5f8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82f9c24-fff0-4227-b908-5c3ade4d2232",
        "cursor": {
          "ref": "cba9820a-075a-4f49-859f-28c8efc34992",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6e630ded-49b6-4bf0-807c-1a38498d851b"
        },
        "item": {
          "id": "e82f9c24-fff0-4227-b908-5c3ade4d2232",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b92936cb-3313-4544-bc02-aeed92469a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03204da1-1fdc-446e-b215-11f2b450ccd4",
        "cursor": {
          "ref": "2a31fffa-064a-4d17-aab8-fa296b024a46",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4d62a502-46a4-4c88-82a4-f4a0430f9770"
        },
        "item": {
          "id": "03204da1-1fdc-446e-b215-11f2b450ccd4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fbfa7fb0-2442-4bf2-b3d5-2729e9b61ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1dd5ff4a-fac0-4d5c-848e-d264bb9a7565",
        "cursor": {
          "ref": "afcc0aa3-1d94-4d63-b860-0c69a11051f4",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "192223a7-8b8f-4eeb-89e0-7fadd844ba5a"
        },
        "item": {
          "id": "1dd5ff4a-fac0-4d5c-848e-d264bb9a7565",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1ceead78-9fec-422c-97ba-bed8d6a2adc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a160da04-579a-40e0-9b1e-6cf45c90ee3b",
        "cursor": {
          "ref": "49fdb94b-0e90-4e53-86c8-1bf48ce5488c",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cb1ea704-43d7-46cb-a16d-d6fd88578e44"
        },
        "item": {
          "id": "a160da04-579a-40e0-9b1e-6cf45c90ee3b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "58ef9ec5-2625-4073-a4fe-a491bb9487a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ee2878-eb33-4b26-bc6a-35b3dfd28610",
        "cursor": {
          "ref": "90da671f-6eea-4777-949e-bcd5d4687640",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b06aeeed-6b31-4bb5-a6ed-06602f25d8e9"
        },
        "item": {
          "id": "20ee2878-eb33-4b26-bc6a-35b3dfd28610",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "edc1dca8-a2cc-4072-a396-9d55b8d2a2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe89c1e4-84dc-49d4-93bd-f786ca311a5d",
        "cursor": {
          "ref": "f47af2cd-6857-4b9f-9e3e-c0026c071702",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "38cc4a60-01df-4298-bc5f-bd978cf3b257"
        },
        "item": {
          "id": "fe89c1e4-84dc-49d4-93bd-f786ca311a5d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d65ed190-ff9c-4e64-be3c-25cc2968a529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77627402-5a98-4e50-bbd0-b0bb4dc58335",
        "cursor": {
          "ref": "791bbdcd-f64a-4e90-a684-b1b00a6dbeb8",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a2f170b0-17f3-43ba-9622-1b8b9bffcd36"
        },
        "item": {
          "id": "77627402-5a98-4e50-bbd0-b0bb4dc58335",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "0d7edaf1-3ad1-448e-963f-b4e22f0b9836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384c3cbc-ad66-4b93-853e-44608e574dc7",
        "cursor": {
          "ref": "1160019a-26c0-43b7-964e-4e49f327243a",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7b315010-e6eb-4344-a4b1-fa65d685a2ac"
        },
        "item": {
          "id": "384c3cbc-ad66-4b93-853e-44608e574dc7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d1a8437e-0502-4199-b690-df9cc2e6c822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0496dd51-76ad-494d-b0fc-7a8c0fc95718",
        "cursor": {
          "ref": "45c4d32b-c803-45ee-9fd4-9e99d0d16376",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bcfff64f-e041-474c-90b0-9360cb695c5c"
        },
        "item": {
          "id": "0496dd51-76ad-494d-b0fc-7a8c0fc95718",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9d9723a4-a120-4c7f-a0f4-5227f363b63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0191152-99d6-4951-872a-d093689f3881",
        "cursor": {
          "ref": "bea7005c-aea9-4313-a265-2ab872aec749",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "487cbe85-0749-4689-b2c4-ac621f32241b"
        },
        "item": {
          "id": "a0191152-99d6-4951-872a-d093689f3881",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "15aef4b4-42ef-47ce-aa20-f33f38080cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e947dd59-de56-40ed-b05c-62dcb39ee11d",
        "cursor": {
          "ref": "f68ab8a4-3f5f-41cb-9cc5-4663f8fd2ca3",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e4643cb0-6edb-4637-ba9f-854bf8cb46e8"
        },
        "item": {
          "id": "e947dd59-de56-40ed-b05c-62dcb39ee11d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b4540509-57a3-438e-96e7-7f69138be28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043d7dbf-31ae-4424-b956-bb1773d0249d",
        "cursor": {
          "ref": "5f4c63e5-6a92-46e0-9168-830dba2f34d3",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "002ea491-5d9f-42eb-88f1-81e25e7483a5"
        },
        "item": {
          "id": "043d7dbf-31ae-4424-b956-bb1773d0249d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "93628a70-2a56-44bb-99b8-396e0b54c9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe69f39b-f3dd-43fc-adcb-038fbdf984f9",
        "cursor": {
          "ref": "0053410e-7b9b-44a6-a1df-1636605e4f2d",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "923dbcb3-0473-4079-9571-edeee71f32e5"
        },
        "item": {
          "id": "fe69f39b-f3dd-43fc-adcb-038fbdf984f9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "10e2258b-e458-4d0c-81e6-142d62f5ca4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd32799-4aeb-4375-8427-164dc5682346",
        "cursor": {
          "ref": "a5ce4c19-d69d-45d7-b972-325855e8473a",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f00d7aac-7561-4e72-a8d5-698451023eee"
        },
        "item": {
          "id": "4bd32799-4aeb-4375-8427-164dc5682346",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a203dde7-a645-4740-ae8c-4788edf7c440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4b02a5-f9ea-4726-ab9e-00a591117a61",
        "cursor": {
          "ref": "0cdecb3f-ae2d-4ad3-aa0a-217cbbc43fba",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b5cc7cd5-a82d-4535-b7a7-6ceddadb7dfb"
        },
        "item": {
          "id": "7d4b02a5-f9ea-4726-ab9e-00a591117a61",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8d75509c-4215-49c0-ba41-1b8fa82a9079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49b0495-36b0-4e97-8665-5f2bb9e59bcc",
        "cursor": {
          "ref": "c210733c-4ee3-476e-bea1-9d0ce592452f",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "199a5c75-9526-4a8d-84e6-b047f47f27a0"
        },
        "item": {
          "id": "f49b0495-36b0-4e97-8665-5f2bb9e59bcc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ef64c809-8b69-4b2c-8921-d17d5d072dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8baf239-9be3-41b4-9eaa-b15f4fc1f285",
        "cursor": {
          "ref": "56ff7ecb-f2fd-4025-b433-71bd76b0068d",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "00bd94a0-5526-4d08-b826-8281c0fab840"
        },
        "item": {
          "id": "f8baf239-9be3-41b4-9eaa-b15f4fc1f285",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1502b59f-3550-4453-8060-a45d3cda76e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2157a28f-427c-4e61-b81a-97484aba549c",
        "cursor": {
          "ref": "7cdb3068-1593-4c20-b79b-60951a16dcd1",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dd280292-c1ac-4523-b205-d36d423f2fa8"
        },
        "item": {
          "id": "2157a28f-427c-4e61-b81a-97484aba549c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f6446201-79dc-4119-af66-aca16700649a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0a0186-8f07-4e8a-8cc9-9826ddd3fbe5",
        "cursor": {
          "ref": "34015e7d-9709-4f45-b22a-0910576a23a8",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3f08b9e3-6181-4a5e-a077-6fd1ae5d2c6f"
        },
        "item": {
          "id": "ac0a0186-8f07-4e8a-8cc9-9826ddd3fbe5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "09d2db49-afed-4f2c-a6de-89b81fea7da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c2981f-57ec-49ee-838e-4a1a7c30496b",
        "cursor": {
          "ref": "d2db5c10-3d24-4043-a4fb-d1b51d14ce3c",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0c4e618d-4c55-450e-a3c2-f9c80f5f6385"
        },
        "item": {
          "id": "e1c2981f-57ec-49ee-838e-4a1a7c30496b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "90c6872a-b771-4fb6-aa31-c73313a48695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a95d669-d270-4661-8d46-42faf9cac939",
        "cursor": {
          "ref": "dcb61233-c29e-42a2-a56e-bfbe3e8b4165",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "82dbfff9-6dd0-40e9-a2db-4e31a5f8af68"
        },
        "item": {
          "id": "9a95d669-d270-4661-8d46-42faf9cac939",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5252b86e-1e1a-4611-a849-1e3f984bfda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53700b42-04ac-4916-96e0-5adf01fd4e65",
        "cursor": {
          "ref": "c6b0b469-9cb1-4213-bf55-4bcbe2e465c3",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9473fdb0-c7a7-4aac-9b7f-402fb0fedd36"
        },
        "item": {
          "id": "53700b42-04ac-4916-96e0-5adf01fd4e65",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "edb3467f-2605-424d-a1f4-3aa6f169bd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c73842e-fd8c-4a9e-a7a1-dcd3788a49aa",
        "cursor": {
          "ref": "b6b4bf02-9ddb-4e9e-a090-32f5f87ab32e",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b3506d1f-cee1-42f3-b100-dca0d49ee7cd"
        },
        "item": {
          "id": "4c73842e-fd8c-4a9e-a7a1-dcd3788a49aa",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3b130e9f-ef1f-4807-bee0-21bbc0ff26a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d067092-1bb1-4c95-b373-deb3c6079453",
        "cursor": {
          "ref": "5df7dcb4-f3a0-43df-82af-c7aee9d3feca",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "03daf20f-08ef-4d15-988e-3e31b70ee34b"
        },
        "item": {
          "id": "3d067092-1bb1-4c95-b373-deb3c6079453",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "84f8eca5-0c8b-4f20-bc03-7b9b4c6d397a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d34f66a-596f-4681-8b33-cd0ab59f727d",
        "cursor": {
          "ref": "466cbbbd-5637-4cdd-b0ed-b92062b7bc4a",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "873dfa11-2406-4a2f-9b61-fb0f53ffa32b"
        },
        "item": {
          "id": "9d34f66a-596f-4681-8b33-cd0ab59f727d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "460c5628-0da7-4f43-858a-4ebbb48fc3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd27515-fe03-415d-b44d-41c0a1ebec69",
        "cursor": {
          "ref": "fdca4234-182f-4d78-b586-5bf71188e7d6",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b710e601-e7d0-4543-9ea3-df36f342ffd5"
        },
        "item": {
          "id": "afd27515-fe03-415d-b44d-41c0a1ebec69",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "949788aa-009d-468d-bef1-20ab08681efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9112e03-b01b-4fe3-adf7-ba4d9eb62736",
        "cursor": {
          "ref": "e1cb0c44-2a23-4843-946e-e6941194b555",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6321f340-c47a-491d-9f32-c1c0c6eda727"
        },
        "item": {
          "id": "e9112e03-b01b-4fe3-adf7-ba4d9eb62736",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "457fe9ca-0961-48ef-8b3f-bc494cdceb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13924dd-76f9-4857-8bfa-cd06b04a3dfc",
        "cursor": {
          "ref": "c991f8e7-55b4-4f45-a7b9-760150fff296",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4070f7a8-db7f-46eb-a5ee-83836d992fe2"
        },
        "item": {
          "id": "e13924dd-76f9-4857-8bfa-cd06b04a3dfc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "195b59e3-704a-417b-9d67-1aa97754ecf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f358d7-704e-4675-b22c-69f861defe32",
        "cursor": {
          "ref": "15f88d73-8063-4903-bc20-5a32c4d639c1",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "caeb70c0-8e8e-4959-81a6-98924c794f73"
        },
        "item": {
          "id": "53f358d7-704e-4675-b22c-69f861defe32",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "81a4bd51-95c4-405d-a802-6b8410229ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9512e6-37de-4c7a-91b8-c7c37ef8adfa",
        "cursor": {
          "ref": "329a5505-8584-4ec7-988f-776f2c048ad5",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c3952a54-e1fd-4325-824f-0fae28878620"
        },
        "item": {
          "id": "4d9512e6-37de-4c7a-91b8-c7c37ef8adfa",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "46dc7f04-4661-4ecc-963c-12f0150b244a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c93b13-5662-4d41-85df-37c46d7ec8c5",
        "cursor": {
          "ref": "4b77d994-1feb-4b66-8c5d-8fb03cbed200",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "74346478-4131-4e5b-86ef-943381d506d6"
        },
        "item": {
          "id": "26c93b13-5662-4d41-85df-37c46d7ec8c5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8604dd13-33d2-4429-a413-c9688d960f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5136edd5-3b9d-4db5-91ab-65f51477abeb",
        "cursor": {
          "ref": "67506070-8af5-4739-8000-769c9f508575",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3fa86909-25d0-4742-aee5-ad00796f29ac"
        },
        "item": {
          "id": "5136edd5-3b9d-4db5-91ab-65f51477abeb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f187cd24-2a64-432d-9bb0-d9370ec19621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fb4179-7d47-435f-888e-1310202f3052",
        "cursor": {
          "ref": "e2a79972-de2e-4679-a110-adfa5044071c",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0b4997db-b3fe-4a7e-99ec-d253f2fba978"
        },
        "item": {
          "id": "f0fb4179-7d47-435f-888e-1310202f3052",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "819ad98a-69dc-457d-958f-8e8d9f0cf15e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67da6eb-cf13-4bd8-928c-5af658a7c51d",
        "cursor": {
          "ref": "1391dae2-2209-4f1c-83f7-e83817990476",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9084a45a-2f9a-4c85-b91d-71ef2862338a"
        },
        "item": {
          "id": "c67da6eb-cf13-4bd8-928c-5af658a7c51d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2d6554ff-6492-4b65-8237-c643ae6be48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3300aeb2-3753-4354-9478-79f1d3808b26",
        "cursor": {
          "ref": "437b2816-035a-4c65-8038-97b0edf828b3",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b35712c0-f6e8-4d02-a0a5-3ce8fa37324e"
        },
        "item": {
          "id": "3300aeb2-3753-4354-9478-79f1d3808b26",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b10c7107-7d43-4524-92ba-fe7572fd035a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df384859-52db-46bd-bf70-82286b27511f",
        "cursor": {
          "ref": "7dea3237-9e3a-485d-8636-ef132da792e2",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "831a6ccf-9f45-41e9-b714-2f6af895def7"
        },
        "item": {
          "id": "df384859-52db-46bd-bf70-82286b27511f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4bf4f667-73ce-4e5e-8dde-2b99130600bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f4e64e-9542-4617-8fd0-41c0c36ed06e",
        "cursor": {
          "ref": "b68df63b-3cd3-4d41-a1a1-aa4625297f74",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ae94790f-be5b-445c-9597-5cf46ab17029"
        },
        "item": {
          "id": "44f4e64e-9542-4617-8fd0-41c0c36ed06e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "45d75471-7e3d-47f3-8346-68679fe2b062",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "900fa67a-357d-4eff-b7af-110db6e34762",
        "cursor": {
          "ref": "5d3cc007-9c01-4104-b9a2-07bf741bdfac",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "365c58db-f031-4edc-a9e7-6ee4e9249e2f"
        },
        "item": {
          "id": "900fa67a-357d-4eff-b7af-110db6e34762",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e69be0fc-f40e-4c7c-8b9a-c31ff41066af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b503c3-8cc6-456f-a88d-c90bfc5adf53",
        "cursor": {
          "ref": "d39959ef-00d9-4d4b-9cd8-1e7db047dd2d",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fe966caf-d414-45f7-92e0-9c7d12756024"
        },
        "item": {
          "id": "f0b503c3-8cc6-456f-a88d-c90bfc5adf53",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "70c65266-ed3b-4791-b3e9-1d9c40bd9d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63b00d1-1bae-4af1-b3e0-c4af677ad044",
        "cursor": {
          "ref": "2c09562d-5e50-4e23-a1a5-70062463df6c",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4eb29359-d69b-423b-b4c1-e1f4a5365473"
        },
        "item": {
          "id": "a63b00d1-1bae-4af1-b3e0-c4af677ad044",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7d38ff09-23a5-45b6-9ad4-6d545d1ba87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19833be-1562-4044-a401-393d2dec89fa",
        "cursor": {
          "ref": "53138e1d-cd85-41de-8a88-5a0290cc7153",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ceed559d-9a4d-4c16-a31e-0886a38aea23"
        },
        "item": {
          "id": "a19833be-1562-4044-a401-393d2dec89fa",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ea351c08-4f17-404f-b481-0c6eabe7929e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d375d382-19ab-4a22-b36b-94662bd1f451",
        "cursor": {
          "ref": "006d29ef-ec2b-4f59-a358-a73a8b961ef8",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "08b631f1-9d24-48bf-97a9-bd0165399645"
        },
        "item": {
          "id": "d375d382-19ab-4a22-b36b-94662bd1f451",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a0573040-9778-4452-b5a6-27d08d13a853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86af88f0-f8d8-47f6-96f5-c19a5a4d5117",
        "cursor": {
          "ref": "2cf3e339-38d7-4bd5-a2c2-4e2c3c04263a",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "467d6653-be1e-49a5-b641-d95a237f9e35"
        },
        "item": {
          "id": "86af88f0-f8d8-47f6-96f5-c19a5a4d5117",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6a01a321-9c05-4aba-a4e0-39ba613e2127",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "8348dc3f-6840-4383-9dd9-e89f6d7fa9b4",
        "cursor": {
          "ref": "3ebebeaa-ee33-4bd5-8e59-486e67acbf8a",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6df1a864-9ab5-4d2a-adb5-2b22fd6fd16d"
        },
        "item": {
          "id": "8348dc3f-6840-4383-9dd9-e89f6d7fa9b4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9d82148b-0522-4c9e-ae24-8476d4e6f217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50807b77-be1e-4fdb-9e9b-40e138c13bc0",
        "cursor": {
          "ref": "6aa66997-3b33-436e-8026-bbf9badc0794",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7fb43caf-eec5-418c-819c-8d533cc78da1"
        },
        "item": {
          "id": "50807b77-be1e-4fdb-9e9b-40e138c13bc0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "56c58131-98db-4c56-bea5-9aa9243c11be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fcdcb15-17c7-44c5-9b5c-a5d0935ff5f1",
        "cursor": {
          "ref": "08101f2b-8f25-40c5-859a-6ddb3dc6f2c0",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e53afa38-6217-46a9-af72-576a220b4f88"
        },
        "item": {
          "id": "8fcdcb15-17c7-44c5-9b5c-a5d0935ff5f1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ff3b982d-1bfc-454e-ad8c-052d1b8a37ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd39a677-bfd7-4436-9c5a-8322b4a1bcba",
        "cursor": {
          "ref": "aa477a1b-e5ee-46f8-8d6e-e09fc2261170",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2d25afdf-293f-41f7-8cbc-19006f6eaff5"
        },
        "item": {
          "id": "bd39a677-bfd7-4436-9c5a-8322b4a1bcba",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f80f0fb5-4b7b-4fb2-8247-a1d9df546b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34111d0d-4a8f-47e6-a545-3ac68e83966a",
        "cursor": {
          "ref": "7d7230c9-81c6-4e00-998f-d6b0e3a09624",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "58b3cd1a-f829-4c50-9e33-c903adb486d8"
        },
        "item": {
          "id": "34111d0d-4a8f-47e6-a545-3ac68e83966a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "14a79d05-e0cd-4d3f-b458-a0c084dea3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a19f7e7-aede-4134-9742-363f6871652e",
        "cursor": {
          "ref": "5a2deba9-268e-44e7-92f9-732a9720a9f6",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "614e3bdc-fedc-476b-9bd1-a8c19bed4921"
        },
        "item": {
          "id": "8a19f7e7-aede-4134-9742-363f6871652e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d332045f-4e9f-4e2b-ab4a-1d5b8d27ea1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c879454-f8f0-4778-971c-d565834501d4",
        "cursor": {
          "ref": "f0368e5c-a7c4-484e-84ef-acb8beb8f690",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "88508678-17dc-4685-a253-585da4b39dfd"
        },
        "item": {
          "id": "6c879454-f8f0-4778-971c-d565834501d4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f6d9e9a4-00cf-44e4-9c54-3510b35b9188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda2c459-74fe-4f4d-ae96-298f1a436bf4",
        "cursor": {
          "ref": "544d7bc5-1e6f-4951-adfd-88ce17348515",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2800cc9a-4c34-4dc8-99f5-23b184f40951"
        },
        "item": {
          "id": "fda2c459-74fe-4f4d-ae96-298f1a436bf4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "132f4b5f-3098-4128-80c4-7175cdf8cd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8c3972-56d8-4f5c-a860-779dc5420562",
        "cursor": {
          "ref": "92282eb8-3879-4df3-831a-89cfc61e950c",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f17da6c6-95fa-4b14-ac08-64571760e8bd"
        },
        "item": {
          "id": "3e8c3972-56d8-4f5c-a860-779dc5420562",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6cc7ae46-f3c7-45bf-9fd3-85d77b363d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3c9c9c69-4dd9-4875-b952-581fde0d8712",
        "cursor": {
          "ref": "50715020-9319-423e-85f7-d002bb118892",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e0c69995-0964-4d43-af7c-f4e2d77a9ac4"
        },
        "item": {
          "id": "3c9c9c69-4dd9-4875-b952-581fde0d8712",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a764d87c-4f64-4cde-853e-3bfc318408c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "86a5b09d-8591-45d2-8317-8cf2eaa6ceff",
        "cursor": {
          "ref": "dd93c16f-eee3-435e-91b2-8a613fbb3b5e",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a6865f64-1a77-4bff-b3df-96bba3a12d3d"
        },
        "item": {
          "id": "86a5b09d-8591-45d2-8317-8cf2eaa6ceff",
          "name": "credentials_issue"
        },
        "response": {
          "id": "47f7c545-8f10-4079-a8f8-8ec27f1bacf3",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4146eecb-00b3-4644-aa26-71d608b09ed7",
        "cursor": {
          "ref": "377bce92-a972-40fe-bcdb-ed0c9ec9230e",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e49a851b-7b67-4c0e-ab56-08f8fae41a00"
        },
        "item": {
          "id": "4146eecb-00b3-4644-aa26-71d608b09ed7",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "1f9a9c4b-c083-4035-b9e9-b72b51877614",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8407d0f6-4545-4c98-9316-72b3cc11916d",
        "cursor": {
          "ref": "68154319-7fc5-4323-9a67-0f3d1f87c649",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "64482466-aa10-4c68-b3d5-2a8ec4df99ed"
        },
        "item": {
          "id": "8407d0f6-4545-4c98-9316-72b3cc11916d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "18ec2da1-bd9f-406e-9225-31f8dbbbb971",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a78365e-b038-4efb-b434-260d2c073785",
        "cursor": {
          "ref": "f4ff354b-55cd-49f5-83a7-9273f6c3404e",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e70e7faa-de1f-4911-9e33-767d2f2de267"
        },
        "item": {
          "id": "7a78365e-b038-4efb-b434-260d2c073785",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5a5484c8-d4c9-4cd5-8a6c-c71d97f4081a",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb21fa6-8070-449e-ab0c-12c2cda93d6d",
        "cursor": {
          "ref": "5a44d363-8e78-4194-88d9-55c89ca1c21f",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d7abdbc3-190c-4cb1-84db-ecabc3f5eb79"
        },
        "item": {
          "id": "8fb21fa6-8070-449e-ab0c-12c2cda93d6d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8431525e-e0f2-43b1-9878-ce7f113f4780",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2388276-5363-46ca-b2b3-a7ca3606ce30",
        "cursor": {
          "ref": "c27e8c52-2eb0-4edf-81c5-dc0398a8abb1",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b3f0fe18-878e-4d10-bbd2-8fb18bafb6b0"
        },
        "item": {
          "id": "c2388276-5363-46ca-b2b3-a7ca3606ce30",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1e6da9d0-5aed-44d0-9ca7-facce24733be",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4ada21-28d0-45ca-a449-54cb2da455cc",
        "cursor": {
          "ref": "546704b5-8f03-4aa7-afd5-2cbf20e31679",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "450397bc-4945-401e-bf3e-c2dc793d1a0a"
        },
        "item": {
          "id": "2d4ada21-28d0-45ca-a449-54cb2da455cc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d121a0b6-0f61-4f3c-a699-8423de1bfd35",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "2d4ada21-28d0-45ca-a449-54cb2da455cc",
        "cursor": {
          "ref": "546704b5-8f03-4aa7-afd5-2cbf20e31679",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "450397bc-4945-401e-bf3e-c2dc793d1a0a"
        },
        "item": {
          "id": "2d4ada21-28d0-45ca-a449-54cb2da455cc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d121a0b6-0f61-4f3c-a699-8423de1bfd35",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "40497bb8-4e3a-4dd4-a1ad-fc61a3f9928a",
        "cursor": {
          "ref": "56d6aedc-72ba-48be-b1bb-1266612dfae4",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2ffd94bd-cde2-41f5-939d-b0eec27e91e1"
        },
        "item": {
          "id": "40497bb8-4e3a-4dd4-a1ad-fc61a3f9928a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "51996edd-0e24-496e-a244-145469483ef9",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0b1c79ff-e2fd-4f1f-92b2-ae72ec0fdd19",
        "cursor": {
          "ref": "a6613a07-4910-4966-a8e5-4a23d876e352",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f4309fcf-4144-4a1c-9e5c-e7bccc74acb1"
        },
        "item": {
          "id": "0b1c79ff-e2fd-4f1f-92b2-ae72ec0fdd19",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5f813759-0aba-473c-9e5d-3d5b64db2ed7",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a449297b-e876-4b6c-a054-dbf5fd1e5b2a",
        "cursor": {
          "ref": "2a1685b8-f77a-4d5f-b001-7ac8b4d3cc3e",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d2941b53-b47b-4322-9243-9a2ab899b076"
        },
        "item": {
          "id": "a449297b-e876-4b6c-a054-dbf5fd1e5b2a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b6cddbf8-5bf3-4155-9efc-643be6b3a9da",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b3a2f5a7-d50e-40a8-99bd-81ab1aae56b8",
        "cursor": {
          "ref": "5d46b193-0d9c-4796-9056-c788b409bdfe",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "93079591-6f6c-403c-b89f-ba03a0ecc08f"
        },
        "item": {
          "id": "b3a2f5a7-d50e-40a8-99bd-81ab1aae56b8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "89b6dfd0-2e73-48e9-bf1a-fe87092072e9",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "356e89db-56d2-4c33-94ad-e8e7615addfb",
        "cursor": {
          "ref": "ba22d56c-8683-4833-bae3-f5ca71bc468c",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "15e871e0-070c-4b2a-be0f-13f20ab5dffc"
        },
        "item": {
          "id": "356e89db-56d2-4c33-94ad-e8e7615addfb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f7f2d571-1615-4da3-86d9-30e953293b27",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "9deb1a59-ed61-45fb-ad66-a8a05c675150",
        "cursor": {
          "ref": "67e99599-ef74-402b-9269-6f815b50ee13",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4433369f-c3cb-4b02-9647-7a1f3511b27e"
        },
        "item": {
          "id": "9deb1a59-ed61-45fb-ad66-a8a05c675150",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9c13a4f5-caf6-4f83-8565-1e6fc5d85449",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "31f06ae3-dcb1-4e06-b715-b3726bbcdacf",
        "cursor": {
          "ref": "40653e3c-2ee4-41c4-9b07-07b926a6bde8",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fa4aebe7-06e8-4591-91a0-49ca50511a97"
        },
        "item": {
          "id": "31f06ae3-dcb1-4e06-b715-b3726bbcdacf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a6510594-e016-43ed-9397-ab8b34abe40f",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c37fdd71-cbcd-4792-a78f-b8ad23f55864",
        "cursor": {
          "ref": "a6788fa6-2c61-4354-b72b-47c7120f799c",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7d0bdf6f-5fcc-4cee-a6bd-b71e804a93b6"
        },
        "item": {
          "id": "c37fdd71-cbcd-4792-a78f-b8ad23f55864",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1246ae40-77ff-45b8-a8e7-685f76fe2a09",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "90795b75-bf14-4f19-be08-e45604b7364b",
        "cursor": {
          "ref": "8bd07ae1-b0a5-4d2e-abbf-1cf4f565b46d",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7f6d8383-d227-4ee1-bab1-489f5f72914b"
        },
        "item": {
          "id": "90795b75-bf14-4f19-be08-e45604b7364b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8e0afa4b-2c53-4ed8-a8e4-17def980442f",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "98d172f5-b067-4001-bdbd-0266fbe48088",
        "cursor": {
          "ref": "a1c48bee-d63b-423c-9823-b85066399b91",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dbb5a492-14b6-4d29-a96d-7c658246eca8"
        },
        "item": {
          "id": "98d172f5-b067-4001-bdbd-0266fbe48088",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5444451f-412b-4161-9c01-2745faa90fc1",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "3f654089-26bc-4699-8294-b9d88f289113",
        "cursor": {
          "ref": "bf14595f-0733-4388-9456-1b72e50946cd",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7b77c822-96be-42aa-b3fd-05f3b8e55c61"
        },
        "item": {
          "id": "3f654089-26bc-4699-8294-b9d88f289113",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "98ccc3f2-34b8-4d42-8ced-31e4af50ee83",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d7eee237-5364-47cc-9463-266bd0082b36",
        "cursor": {
          "ref": "3f50086a-c884-4c07-a719-e201e73465a2",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "098d5c49-91e1-49b8-9f44-2d29c8031f32"
        },
        "item": {
          "id": "d7eee237-5364-47cc-9463-266bd0082b36",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0b60b596-0d41-4120-8267-b0b78679e8ca",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "75d0d8e3-cdae-4c0a-8f68-39642af89d94",
        "cursor": {
          "ref": "34d0fdb3-394e-4d2f-864c-f90a110de9b0",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3e35fb7a-dbb9-4c5a-aa89-c44b7fd03db8"
        },
        "item": {
          "id": "75d0d8e3-cdae-4c0a-8f68-39642af89d94",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1ee17fd7-930c-4b14-8964-2a935e6b1e24",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "6154e251-03f3-45e6-9153-07249557c134",
        "cursor": {
          "ref": "5ee43828-c915-4efd-b216-49f054f39e98",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5a23ccf5-e54c-4ba5-a9c7-753c7d88f6b0"
        },
        "item": {
          "id": "6154e251-03f3-45e6-9153-07249557c134",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "14533935-b330-4d7a-ae04-0da40e29bba8",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "69d01a87-6044-4765-b522-faa415166509",
        "cursor": {
          "ref": "b808d6c4-06a0-4cb2-bae3-814d02552f69",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1ec0cb79-8380-466a-9400-d9c382bdbda9"
        },
        "item": {
          "id": "69d01a87-6044-4765-b522-faa415166509",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "83fbdf56-c902-4cf7-afcc-d170aad494b8",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "90a4bcd5-6c99-4e9a-a88e-3e8be99b7ccf",
        "cursor": {
          "ref": "69d51f5a-434d-4ace-82e4-4ed7a3ceaa3b",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f01a794b-2738-4465-a66b-d5cfabba2860"
        },
        "item": {
          "id": "90a4bcd5-6c99-4e9a-a88e-3e8be99b7ccf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "41730aad-2b82-47a4-9c9b-91665581eb9e",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "98a514d2-eba4-4626-90d5-159700eaa260",
        "cursor": {
          "ref": "0df24444-5316-4161-a331-f9d0a9ec0204",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e63e5be9-69e1-4049-974b-f89d6d5b4702"
        },
        "item": {
          "id": "98a514d2-eba4-4626-90d5-159700eaa260",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c9958b62-4336-4021-8097-15488b31b69c",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "32e5cefe-38fc-44fe-ab5b-a728d9ec44c8",
        "cursor": {
          "ref": "d9cccd57-f464-4382-9f9b-5bf0273ad119",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d8d9d0c2-d790-45e5-a317-bbb2a40bae00"
        },
        "item": {
          "id": "32e5cefe-38fc-44fe-ab5b-a728d9ec44c8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "890ba164-75ff-482f-b806-08ad32272be5",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3cd39bd8-d3c5-464f-8697-45799546788a",
        "cursor": {
          "ref": "26f88e59-eb20-4f24-8491-21f78ae6ca02",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6efc5097-c6ad-4418-9d25-75521ed69c0a"
        },
        "item": {
          "id": "3cd39bd8-d3c5-464f-8697-45799546788a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f93cf390-7ea7-4d6d-9029-e78f155aa387",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "8ce4fa7c-ac7f-452e-964c-8fb26196f9da",
        "cursor": {
          "ref": "f9e56547-487e-4439-a8fe-77ac8276e9eb",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e5575ddd-c0a4-43b9-8cf1-67a7173fe85d"
        },
        "item": {
          "id": "8ce4fa7c-ac7f-452e-964c-8fb26196f9da",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ff4c34c4-1d5b-43a7-962e-75b89dcdf88c",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "444743dc-65f2-44b3-851d-25b5db5e3be2",
        "cursor": {
          "ref": "4ea78f47-4abd-43e7-9c67-55d42c3d89a3",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "92f45780-0554-4418-a710-fc273cd6d80e"
        },
        "item": {
          "id": "444743dc-65f2-44b3-851d-25b5db5e3be2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4f15f2c6-dc57-4ea7-a0b8-d1bf6006912d",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "3f5d4bfd-8219-429b-b621-11e024a250c3",
        "cursor": {
          "ref": "217c7fbd-af0e-4fef-ab4a-711ba3c70cb2",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "802722ec-6308-4590-8e02-88aeaf40fa39"
        },
        "item": {
          "id": "3f5d4bfd-8219-429b-b621-11e024a250c3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "db21baca-9311-477f-8e3d-bfe85e95828e",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ec7b5f7f-520c-4c7f-a77d-292df89be9ae",
        "cursor": {
          "ref": "ad6d8405-7896-45fa-b007-58a6eadb77b2",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7067e703-67ca-4648-886e-dfc6940c8f01"
        },
        "item": {
          "id": "ec7b5f7f-520c-4c7f-a77d-292df89be9ae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ec779e8b-cb6b-4765-8742-e8b641a7842d",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b3bee5b7-fb29-4ac5-ad35-59f626073ddd",
        "cursor": {
          "ref": "439a644b-5dd3-49ce-92d8-3a7f607f7c90",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a006dcc8-892f-4ab5-bc95-a98dae669070"
        },
        "item": {
          "id": "b3bee5b7-fb29-4ac5-ad35-59f626073ddd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e1faa047-3d50-4c7e-a127-9098b787d455",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ff711105-81ab-46c7-91c0-e46a3b7caca1",
        "cursor": {
          "ref": "e834c778-1f22-45df-8c1b-4e60ec122cb4",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "83c387d6-99d1-4e20-aaec-f9ff18c9a0f1"
        },
        "item": {
          "id": "ff711105-81ab-46c7-91c0-e46a3b7caca1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "81bfd33e-723d-4860-8fb5-fedaaeb83fde",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "4fe84752-a8cd-4d0a-a342-b953f073c1c5",
        "cursor": {
          "ref": "3bdb320f-a599-4027-a602-63db3097fcba",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "de4b579c-22d9-4d2c-a751-1dad409c67d0"
        },
        "item": {
          "id": "4fe84752-a8cd-4d0a-a342-b953f073c1c5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2b911d30-2dce-40cc-a003-f2b697dcb476",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9cd2e99d-7458-455c-bb52-495f93ff7e9d",
        "cursor": {
          "ref": "e0734d43-f62e-4d9a-bd84-58b1e43f2fa7",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1241fea7-f53b-4bcd-a00c-6c2d7121d3e8"
        },
        "item": {
          "id": "9cd2e99d-7458-455c-bb52-495f93ff7e9d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ebf5eaaa-86fb-463a-a899-b87b7bbd3d3d",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "5a034f16-6488-468a-8bd7-b576ad4e22ff",
        "cursor": {
          "ref": "c4f18b32-6f6f-40fb-8344-c5eb92ace0a6",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4175d176-ed3e-4d7d-a98f-a487f404fdeb"
        },
        "item": {
          "id": "5a034f16-6488-468a-8bd7-b576ad4e22ff",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "01bdf553-d3e4-4e92-8dc4-49e6a25d2f5c",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "2ab090eb-48c1-4b6f-bea3-7fdae583b211",
        "cursor": {
          "ref": "0fcdf45d-1fdc-4692-831e-8d3230306a34",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ca733ca6-9f9f-4c3f-839b-babaff16dfe6"
        },
        "item": {
          "id": "2ab090eb-48c1-4b6f-bea3-7fdae583b211",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "94a9cedc-124d-443f-bc45-30d118531d04",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e9f3547c-8fed-4d1e-a79c-139780af3f36",
        "cursor": {
          "ref": "3822b0db-68a1-4ed6-b904-09641f8b3e30",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "68b048aa-6b05-4c2e-b8d5-1f083f83d615"
        },
        "item": {
          "id": "e9f3547c-8fed-4d1e-a79c-139780af3f36",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "02a0cb22-fcaf-4f9d-9490-27e6f95b9621",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "68550884-3d9b-4cc9-b6dc-045618dc8fe5",
        "cursor": {
          "ref": "944997d2-662c-4dfb-b9a2-0adfff9e1fa3",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a2c6cbd2-7085-4ea8-be76-f437cda121fa"
        },
        "item": {
          "id": "68550884-3d9b-4cc9-b6dc-045618dc8fe5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a819ce44-31aa-425d-a1e6-3689fdbbbc30",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "36f34d6a-8c1b-461d-a621-07f97d316736",
        "cursor": {
          "ref": "16ccd7b6-a3c4-4c61-be87-55ce01a832c9",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4c81e3ba-968f-4993-9e84-d7f680598b65"
        },
        "item": {
          "id": "36f34d6a-8c1b-461d-a621-07f97d316736",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "27f441e2-3123-4865-af27-0c3f5cb55129",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df63bba-4414-43a0-89ac-e8e61d2b0bc8",
        "cursor": {
          "ref": "9eb32d83-0ed2-48ee-a632-14167ce4297f",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b7bcfdc5-f89a-4cc7-be37-a0ae86340ce5"
        },
        "item": {
          "id": "0df63bba-4414-43a0-89ac-e8e61d2b0bc8",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cc6b5205-9a0b-4b2c-9fd8-28246cd32e6e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 15,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f88a2e-1c34-4795-af44-70fe13eca67f",
        "cursor": {
          "ref": "edc7d514-6d87-4bd7-9e94-5aad54acc716",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "55c2aa1b-855c-4af9-a708-243a76f09a01"
        },
        "item": {
          "id": "f9f88a2e-1c34-4795-af44-70fe13eca67f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f83db5da-ee8c-4205-bb2d-f55f152cf419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f88a2e-1c34-4795-af44-70fe13eca67f",
        "cursor": {
          "ref": "edc7d514-6d87-4bd7-9e94-5aad54acc716",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "55c2aa1b-855c-4af9-a708-243a76f09a01"
        },
        "item": {
          "id": "f9f88a2e-1c34-4795-af44-70fe13eca67f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f83db5da-ee8c-4205-bb2d-f55f152cf419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a29098-fbc0-4332-b1ed-5bec88018870",
        "cursor": {
          "ref": "a53a8cf1-72d8-4aa4-aaf9-70d09c7f652c",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7feb6aa5-4135-48ce-b1e4-f80810346a07"
        },
        "item": {
          "id": "85a29098-fbc0-4332-b1ed-5bec88018870",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3d9516a6-5270-43fc-951b-c24e6c34dfa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e17db8-d7a8-47e1-8f97-e4dec8d3c688",
        "cursor": {
          "ref": "ec3c68d0-8707-4a13-a818-f8f33bb7dbef",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "add7be75-6c9f-4a05-aa6c-e7e0e41535e0"
        },
        "item": {
          "id": "71e17db8-d7a8-47e1-8f97-e4dec8d3c688",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "083cef5e-954f-4e71-beec-66754873e254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e5dd68-0fd4-49af-903b-4dd044836327",
        "cursor": {
          "ref": "58b6f2b2-ea95-4814-aba4-c4877b335c16",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "963f2a0c-32f5-482a-82b6-0634ee98f6f1"
        },
        "item": {
          "id": "f9e5dd68-0fd4-49af-903b-4dd044836327",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "95d3e2f4-dd3b-43cb-955e-8341dcb7bbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2d4ef3-048f-48b3-a24e-f3ae012e8c2e",
        "cursor": {
          "ref": "a5dda468-637b-4dbb-8c26-81ca4d72e440",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bef20f76-9b33-4f21-bfc0-5452a50145fd"
        },
        "item": {
          "id": "5c2d4ef3-048f-48b3-a24e-f3ae012e8c2e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8949bfb9-afbe-4e2b-ae23-f91f83a3361f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c45e78-d795-47b4-bcd2-b8f27cc99ba8",
        "cursor": {
          "ref": "619d0f91-3993-4389-915f-573333cded91",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c922ae4e-d7fa-4927-ab3f-24afd27fd9e2"
        },
        "item": {
          "id": "d9c45e78-d795-47b4-bcd2-b8f27cc99ba8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a837bae7-e2ec-4a50-8849-30fff0a3ba48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b16f10-2cbe-4bef-abd0-52e0bc171411",
        "cursor": {
          "ref": "84e9e127-cdb2-4c0c-9ced-261431b28a49",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8988245c-af49-4917-ba78-52fff895d47a"
        },
        "item": {
          "id": "c5b16f10-2cbe-4bef-abd0-52e0bc171411",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "35894ddb-7b47-408f-82c8-46a5032eebb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 620,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe60a6d-9c78-445e-8b81-6b19a864f65c",
        "cursor": {
          "ref": "94739080-fe46-4b81-b278-5635428fceec",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6b30f29b-eaf0-4816-ab1f-6d0fd1ad6fe5"
        },
        "item": {
          "id": "2fe60a6d-9c78-445e-8b81-6b19a864f65c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "110ae567-b46b-4e91-9e7c-98633133962b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cbd51a-fa32-4169-8ad4-1d94d44c231c",
        "cursor": {
          "ref": "0b079ffb-37ee-49d8-b425-d11036733388",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e2ef1699-34fd-475d-b325-61722050ac1d"
        },
        "item": {
          "id": "17cbd51a-fa32-4169-8ad4-1d94d44c231c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4f8f8465-e43f-4e8c-b500-acba97fcce7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb05827d-ccd6-463e-97ed-ed4ac5d46e17",
        "cursor": {
          "ref": "f9c4e176-75a8-41d5-a0b9-35fd6f02bdcf",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "11b9e9d3-7d12-42b0-bae5-ca3dafa0bb57"
        },
        "item": {
          "id": "cb05827d-ccd6-463e-97ed-ed4ac5d46e17",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "76a30eea-defa-4346-9650-c5564eb57be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5c70c8-51da-4af6-894e-f46c0e8deabe",
        "cursor": {
          "ref": "debc89d8-8fdb-4afa-8a6c-fdbf2229ce9c",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ae36a01b-309d-4bb4-ac88-a84d05eac497"
        },
        "item": {
          "id": "4e5c70c8-51da-4af6-894e-f46c0e8deabe",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "69666abb-323c-46fe-b6d3-9cbed225472c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44af2199-13b9-4504-866f-7c345dff583a",
        "cursor": {
          "ref": "c00ec85d-db49-450a-a28d-c054bf1ef464",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dbeac824-b96a-4fb6-8ef9-9d19456f67e0"
        },
        "item": {
          "id": "44af2199-13b9-4504-866f-7c345dff583a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "443cca7c-376f-4eb0-9d00-4279fd70cc76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d91b52a-cb15-4b72-b90b-167a7725f38a",
        "cursor": {
          "ref": "6d5f57ab-c583-477d-a0fb-41928803c063",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "79444d36-469f-4cd4-a1b9-530c00631d4a"
        },
        "item": {
          "id": "4d91b52a-cb15-4b72-b90b-167a7725f38a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e0cca7b0-ca1c-49f6-af84-edcd473c9084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb95f82e-0523-489e-ae92-6db50d0d1676",
        "cursor": {
          "ref": "7bea1c0a-09c8-405d-96ab-0c7c3f1aa7c9",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d6d0c569-d13f-4850-9f87-604e35af3b8d"
        },
        "item": {
          "id": "bb95f82e-0523-489e-ae92-6db50d0d1676",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "08ebd909-7e54-4a53-b47c-b6ae48ffae32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f2856b3-8706-4f10-acac-00ecb620cf2e",
        "cursor": {
          "ref": "4d28b14c-4851-4f1f-a99d-045042a165a8",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "eeda76da-184a-421f-8736-d265c3457cc5"
        },
        "item": {
          "id": "4f2856b3-8706-4f10-acac-00ecb620cf2e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "28035640-f79f-41f2-a85a-adf8289913dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689e8b05-d78a-4738-98a1-66a8e6e02978",
        "cursor": {
          "ref": "eb2676ee-7d77-40fa-8019-e60d0742fc04",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "92e05bbe-763a-4d24-ae44-6016a26cf7dd"
        },
        "item": {
          "id": "689e8b05-d78a-4738-98a1-66a8e6e02978",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8f4bfb31-328a-4175-af3f-c5ddde7a6f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70a209d-9a61-49a5-a983-db98fde9f3ee",
        "cursor": {
          "ref": "6a59cbf2-0a09-4bfc-a588-fc594725ce61",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "58d73525-44d7-4ea5-ac6e-6da7549a9bb9"
        },
        "item": {
          "id": "f70a209d-9a61-49a5-a983-db98fde9f3ee",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "18713a40-d3cb-4479-9072-a995b658ff2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675f4beb-68ec-4421-9e0b-330a625a9ee0",
        "cursor": {
          "ref": "c8761e6e-9621-4d9a-a577-632b1d5ae299",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2f0cb78e-c4ea-427c-97eb-af0a9516b695"
        },
        "item": {
          "id": "675f4beb-68ec-4421-9e0b-330a625a9ee0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "904ed06b-2a65-41c3-8ac6-9d033618469a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 314,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615b3147-74cd-47bc-be60-dd449a8532ea",
        "cursor": {
          "ref": "d71c7c7f-7b58-4afc-9298-d2d875e33972",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f72a1f42-5b7c-4aab-b16a-5bc84a207d57"
        },
        "item": {
          "id": "615b3147-74cd-47bc-be60-dd449a8532ea",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0e68d8ad-8133-42fe-b557-d5f4f0b8ed16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca21af4-e282-408a-aaba-21839e255a9f",
        "cursor": {
          "ref": "d97edf4f-54bc-4584-883c-17d8c386ade0",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "372943bf-5057-48b7-9050-c6d2d27ce48d"
        },
        "item": {
          "id": "3ca21af4-e282-408a-aaba-21839e255a9f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f57b15ef-2c2d-4a5b-b5f0-da61f99b921a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc3ff8f-f86c-4f23-bb69-e872eeae1fac",
        "cursor": {
          "ref": "f326c5f4-5771-4b46-9f46-cc675b1d5b5c",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "370ba290-c99a-45bb-86c1-93a50a0aa607"
        },
        "item": {
          "id": "9bc3ff8f-f86c-4f23-bb69-e872eeae1fac",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "187d4985-0a6d-48c6-8709-948fe3fcaf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ae6f46-4f7e-48b7-83ab-1254d18df88b",
        "cursor": {
          "ref": "ca1b580c-344d-4548-b197-388c48ff9557",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b00c0d51-2f0a-4d6d-ab29-c91fd09240b8"
        },
        "item": {
          "id": "d7ae6f46-4f7e-48b7-83ab-1254d18df88b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "344b51d7-27c0-4d15-85e7-0c33348c3d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32abfc7-43c3-451d-b096-6bf01473667e",
        "cursor": {
          "ref": "e5453e5d-99ac-4726-a4eb-099e0ebcd13c",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2cf08154-8773-4fd0-82b5-8c6dba76264e"
        },
        "item": {
          "id": "d32abfc7-43c3-451d-b096-6bf01473667e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f4ffcbc8-c9f6-4db5-aa55-87cb91a03f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984dcfa9-31c6-4ce8-a021-06feec9b68c9",
        "cursor": {
          "ref": "115a1994-5f19-4499-acfe-9603b05cddfe",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e8ecbe44-1b31-4833-b59a-ee24b4870425"
        },
        "item": {
          "id": "984dcfa9-31c6-4ce8-a021-06feec9b68c9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5d0de340-4911-4f98-8309-c05b67f6ad89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfae6d0b-12a8-41eb-8dae-a1a2f2a536ad",
        "cursor": {
          "ref": "ca7de3f1-8aec-43a0-a315-ed4ea0219830",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "46ea9cbe-e9f2-4658-a729-14c8d31c0d90"
        },
        "item": {
          "id": "bfae6d0b-12a8-41eb-8dae-a1a2f2a536ad",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "846944af-80a5-43f5-a3dd-c242f0d32662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3099ce-4f9e-4fa1-bf84-173c82928f36",
        "cursor": {
          "ref": "f43f29cd-eddc-4e5c-87dd-d2731aaeb58d",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "071c18e0-9dfe-4dc2-a27c-1180e7ea4507"
        },
        "item": {
          "id": "2d3099ce-4f9e-4fa1-bf84-173c82928f36",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7f145e1c-4aa5-4261-8c23-ab60c83c7e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e23eaa-b91a-4925-822d-93cfc9b21b4f",
        "cursor": {
          "ref": "4f9aabb4-ac4b-4f2f-94a6-4ef6ea62dac5",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3b95911b-02f5-4d7a-83b5-f474f39a2b5a"
        },
        "item": {
          "id": "45e23eaa-b91a-4925-822d-93cfc9b21b4f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ff09aa15-f9b2-4554-af09-7c9b1e7098f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd933cf8-eda3-4ba7-9030-374af612cada",
        "cursor": {
          "ref": "ab12a94f-aa2e-41db-9422-26dc38367923",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "807bb4fd-13c2-4a65-a33e-2075feab233a"
        },
        "item": {
          "id": "fd933cf8-eda3-4ba7-9030-374af612cada",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3db65fd4-3654-4245-97bd-6bc8ba1dcaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9b1d6f-7974-4776-a57a-d9f9ab4e3b33",
        "cursor": {
          "ref": "f32fdac7-4105-4824-9de9-19ffedf5ddd9",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d24b1eb8-3847-4781-83b3-ebb829b6c19f"
        },
        "item": {
          "id": "bb9b1d6f-7974-4776-a57a-d9f9ab4e3b33",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b9cb1c42-aa59-47a1-a073-5c7bea424ab7",
          "status": "OK",
          "code": 200,
          "responseTime": 176,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "c8e17619-039f-49b2-957f-dc614fc429cc",
        "cursor": {
          "ref": "ead3d38f-60bb-43d3-a184-f0156c51ffc8",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5ad64b46-ba91-4efc-8e2b-ca2d3487d089"
        },
        "item": {
          "id": "c8e17619-039f-49b2-957f-dc614fc429cc",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e780bd68-99b2-459b-854a-bb132bdfb817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093a5101-98ce-491d-877d-9a07341107cc",
        "cursor": {
          "ref": "e6868979-4830-4ac9-9106-93b73326d27a",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7132261c-1dd5-47a5-b19f-3875c7e4a7ea"
        },
        "item": {
          "id": "093a5101-98ce-491d-877d-9a07341107cc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9cc69a02-d266-4eb1-9d71-ee7e57dba9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e08287-cc67-4d4f-aa4e-4e73c4a97d8c",
        "cursor": {
          "ref": "e129c20a-d729-4c53-8acb-d1dd9d1452bf",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "35c3b2a6-d055-4888-8401-1636a172045f"
        },
        "item": {
          "id": "46e08287-cc67-4d4f-aa4e-4e73c4a97d8c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "dcdfd73a-6908-41af-b74b-5fb39b1b44b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50ad921-a06b-44de-8c8a-8bfe37bf75f0",
        "cursor": {
          "ref": "33454830-6947-4f74-a2de-d8e220194d1a",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "20dd381f-7dc6-4fed-905c-ee1ab49a94da"
        },
        "item": {
          "id": "d50ad921-a06b-44de-8c8a-8bfe37bf75f0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cf03c4c9-ff40-480e-846e-206f7305df91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779bd30a-93f3-4bb3-9608-c9ce0fa08d01",
        "cursor": {
          "ref": "439a5b65-3349-4c94-9bfd-f68adc323967",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "33282a45-aa30-41b4-bf45-fd5858087cbf"
        },
        "item": {
          "id": "779bd30a-93f3-4bb3-9608-c9ce0fa08d01",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "71e8edb7-89e2-4036-9663-054073aead1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f06188-e729-4d6c-b06a-3d9f5ba26be7",
        "cursor": {
          "ref": "922d6b7f-46dd-4107-bd33-2c183676abc4",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "81f096ba-bb31-45a6-bf19-86a1e7880ffa"
        },
        "item": {
          "id": "c3f06188-e729-4d6c-b06a-3d9f5ba26be7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a7856540-cad7-4db9-9b20-1a482ca8cf6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce9e0c4-0c17-43f5-8737-17ba15f04f3a",
        "cursor": {
          "ref": "c90e68a4-2332-4dd0-ba0e-82a55e044ba2",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97832282-077c-44c5-a411-4ed5b8dcf2b6"
        },
        "item": {
          "id": "bce9e0c4-0c17-43f5-8737-17ba15f04f3a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dd6df031-aef1-419b-88a3-d5c86060d59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15326a8-f036-4584-968a-0d07d1131106",
        "cursor": {
          "ref": "a28803eb-c3f0-4faf-a598-6fd96e86e468",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "774af12a-a12f-4793-b62c-e41d5f43cfef"
        },
        "item": {
          "id": "b15326a8-f036-4584-968a-0d07d1131106",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2dce5a76-a65c-48cb-b999-b3b0f1803520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ec3145-b190-4238-af41-a2837c822a61",
        "cursor": {
          "ref": "81857d87-ab4c-4308-85bc-7f495f4a8188",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "66818892-ff68-44fd-bcfd-8242b32145b3"
        },
        "item": {
          "id": "25ec3145-b190-4238-af41-a2837c822a61",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "18050799-c836-4af3-8e4d-cefaddf8861a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ff5084-ac47-4bc3-87d8-7382fb172d6a",
        "cursor": {
          "ref": "04bb324c-c1b8-41e1-b5fa-1c9e55ee259b",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "99d6a8b2-2d53-45e2-9ed1-7664a19147dc"
        },
        "item": {
          "id": "94ff5084-ac47-4bc3-87d8-7382fb172d6a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e18d0e4f-3a3e-4bcf-b69f-c470c9814e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489c4550-1920-41c6-937b-207ddfcf862a",
        "cursor": {
          "ref": "2a85f776-bf08-40ca-82e8-a3e7fd1779de",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d5e913d9-190a-444e-9d84-0155a18b15cb"
        },
        "item": {
          "id": "489c4550-1920-41c6-937b-207ddfcf862a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b991ddfd-f6b0-4d57-ba2a-57c72165299e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34985698-d426-4e83-9c74-7ff22046335f",
        "cursor": {
          "ref": "620a70fc-aabe-429b-8cfc-ecb41830696e",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "36e3b257-b86a-4064-b8b5-97fec7d4ea1f"
        },
        "item": {
          "id": "34985698-d426-4e83-9c74-7ff22046335f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "af263c87-4a4e-4f88-88d4-75c8dbdc819b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda60ed4-3946-4ec9-96fa-5d01c3251c21",
        "cursor": {
          "ref": "a0a67ef6-3666-4e2b-9581-059b1e3f2cbb",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "67dc2888-f88f-48fb-b121-daf904c89ea0"
        },
        "item": {
          "id": "cda60ed4-3946-4ec9-96fa-5d01c3251c21",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6f8c0b28-2943-4918-be1f-67c841504c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bedc87f-452c-45eb-aa52-8b270aef972a",
        "cursor": {
          "ref": "9e6e46d2-358d-4151-9cda-ee1b2203e382",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9c1bf389-2b53-44da-ac90-7822fb4b74e9"
        },
        "item": {
          "id": "9bedc87f-452c-45eb-aa52-8b270aef972a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f055c378-3a24-40c5-88cb-6bff62b71dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7f1210-2e9a-4dfe-a5d8-7939282d7943",
        "cursor": {
          "ref": "bc9a0886-155d-46e3-835d-c109a5b4fe3e",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dcdf3498-237b-45dc-8128-c167fea6a280"
        },
        "item": {
          "id": "0b7f1210-2e9a-4dfe-a5d8-7939282d7943",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0021f29e-d026-449e-9672-b0993ce6f117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c34912d-49d5-4fd2-a03f-3b27a8a3fb4e",
        "cursor": {
          "ref": "29d7ec82-8569-4277-b387-f1b24fdf552f",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f5f307c5-f745-47f3-8d59-1299053532f3"
        },
        "item": {
          "id": "3c34912d-49d5-4fd2-a03f-3b27a8a3fb4e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f08c17ce-4bdd-4387-9218-3dbaa10c7400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5722ae9-011f-463b-92b4-08ad8b829e70",
        "cursor": {
          "ref": "51f2c02e-f29c-40b2-a5e8-6e4a3fc1248e",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f12ff1ef-288d-4599-8852-304c4969fdee"
        },
        "item": {
          "id": "e5722ae9-011f-463b-92b4-08ad8b829e70",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "79a6e090-f80e-46a0-8325-9506adbb7fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5465ba3d-5753-4c7b-935f-9296a3a8ec2e",
        "cursor": {
          "ref": "f8530436-4d71-4ea6-b05f-e3e1a381646f",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a7ec9fcb-f85d-4627-8d23-39cfd823818e"
        },
        "item": {
          "id": "5465ba3d-5753-4c7b-935f-9296a3a8ec2e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3202df0c-84b0-40eb-bdd3-50a82cd3a3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1385dff-dd29-42fa-b5c8-ecbcc254a783",
        "cursor": {
          "ref": "9fd935b2-674e-4957-abbe-0f2b4cd28363",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "04c552a7-757e-41fe-a1c0-cebaa8ec7581"
        },
        "item": {
          "id": "a1385dff-dd29-42fa-b5c8-ecbcc254a783",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bbf4f949-4088-42d7-9637-9d3ad6c8b8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8cbf74-ec90-4145-b1dc-4c3436b26d8c",
        "cursor": {
          "ref": "fec4cdc6-9245-4341-823d-298ebd0e4cea",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7881bbae-d824-4e82-bc88-6a060987a140"
        },
        "item": {
          "id": "1b8cbf74-ec90-4145-b1dc-4c3436b26d8c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c97f450c-919f-4c88-ba5c-6889f4d344f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 175,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b0103a-867b-4e96-9ae2-2070f95f1eed",
        "cursor": {
          "ref": "057cee07-b679-4b86-b5aa-17087c49ca91",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d9e7c83d-d206-44e6-9caf-8c4a9fc27f2b"
        },
        "item": {
          "id": "b8b0103a-867b-4e96-9ae2-2070f95f1eed",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8476822f-9a9f-4306-8cb9-91bab33d3fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534c69ec-c74a-43cb-9350-8fc5e75e33af",
        "cursor": {
          "ref": "e79ffbf7-f795-49df-8c99-318eb7e01c9c",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2d2cf501-1f70-4905-959b-468426a78201"
        },
        "item": {
          "id": "534c69ec-c74a-43cb-9350-8fc5e75e33af",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "37528d3f-f826-4bc3-a192-3152453d80be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaa0507-c32c-4090-8254-e79902174e74",
        "cursor": {
          "ref": "a14e54fe-71ef-4280-9022-bf413b1c0c1f",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d9017cd6-6539-4782-a045-59e9c65b106d"
        },
        "item": {
          "id": "eeaa0507-c32c-4090-8254-e79902174e74",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e5be187c-8da4-4335-9191-8aa5297f06a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263b7c1f-5fa5-4d32-baee-5892f6280d97",
        "cursor": {
          "ref": "ba0323c7-8cc8-4e3f-8118-4e8de788b8ea",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8d2dba21-2ec4-453b-8674-cd07089ec049"
        },
        "item": {
          "id": "263b7c1f-5fa5-4d32-baee-5892f6280d97",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a1adb553-9c62-4d09-8a74-286fc99e6731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ced3d6-fcb0-43b4-b4a4-4253d1cea825",
        "cursor": {
          "ref": "3f0366ce-7bef-45e9-ba83-ccb5a95f6d2c",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6c2d7d21-f690-4355-8303-22ceded953c9"
        },
        "item": {
          "id": "e5ced3d6-fcb0-43b4-b4a4-4253d1cea825",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3448db5a-74a8-48d5-968b-e3450fc05902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a200838-3f0d-48fe-8bc6-ac2c850c926b",
        "cursor": {
          "ref": "d3717c38-358c-4acc-b07c-3a0bce377695",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "28e2de4e-55c6-42fc-8aa1-79182682fd83"
        },
        "item": {
          "id": "4a200838-3f0d-48fe-8bc6-ac2c850c926b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "40267d43-e807-4f32-b7fc-5ed36a0f1ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ceaadea-c2ee-405f-92c5-9b6532d298c6",
        "cursor": {
          "ref": "d1e30a8b-36a5-4dab-974c-7e2adb1cb4d5",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "29518bb5-250a-4d3c-87e7-2fa48f1a3d82"
        },
        "item": {
          "id": "1ceaadea-c2ee-405f-92c5-9b6532d298c6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4eecb4ee-c457-42d0-b2da-982fc5d0c6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5532d8bc-ed67-4923-9002-b2f9460e3125",
        "cursor": {
          "ref": "f5a1cbce-950f-49a6-b203-3ed97996a054",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3a5629ee-cc71-43ce-95d5-2e5a0ec2f248"
        },
        "item": {
          "id": "5532d8bc-ed67-4923-9002-b2f9460e3125",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a684e5ee-7b4b-4d94-a0c1-0de0b9558e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbe4cfb-17b0-4112-ad8f-0b2ddaeedb79",
        "cursor": {
          "ref": "20d1dee3-0c37-4bd9-a0d2-756fd18de389",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3621c27b-fc6b-4c18-a433-8a77d48ec096"
        },
        "item": {
          "id": "8cbe4cfb-17b0-4112-ad8f-0b2ddaeedb79",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e5fcd353-3429-4604-bfb4-4094f2e6e1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca44c062-88d3-441f-91c5-6ea65705f02e",
        "cursor": {
          "ref": "54c38af8-bb4d-4875-be30-c69f818711c3",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7c1d0dd9-67c9-4db1-93a6-bb3f0845d5f3"
        },
        "item": {
          "id": "ca44c062-88d3-441f-91c5-6ea65705f02e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "02e90c4f-69c7-4903-ac0f-5521a7124a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c4e235-162c-4f25-8dd4-a988e8185a1e",
        "cursor": {
          "ref": "33bc3875-6bc7-4fea-bd4f-b73a6b866634",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b7f3d7e9-8ddd-4cff-852e-c3a7c3e0f2aa"
        },
        "item": {
          "id": "52c4e235-162c-4f25-8dd4-a988e8185a1e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "855b57ba-f618-485f-a70d-bf393ab7a697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32e85a7-2142-41e3-89ea-e75ed32e26f6",
        "cursor": {
          "ref": "e9945dde-881b-416e-82b5-166b048a6ad4",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7bcd9d0e-8303-433b-a5f3-ddb7eac030c7"
        },
        "item": {
          "id": "f32e85a7-2142-41e3-89ea-e75ed32e26f6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "86837560-706a-4fdc-9b58-4c1a2f22c144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17362cc-0979-460d-aa46-3b4afbd068d9",
        "cursor": {
          "ref": "13b2f854-ef6b-444d-99b3-6cf419f68272",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7c8b6d9d-e284-44f4-99ba-c2ec2ec2e596"
        },
        "item": {
          "id": "e17362cc-0979-460d-aa46-3b4afbd068d9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "734b1c4d-04e3-4171-b217-fdcde150784e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d159b3c8-0882-48f7-b250-fb26860c8465",
        "cursor": {
          "ref": "7bdfdf62-0b36-4df5-857e-d177d11992f7",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "749a2f39-c0a0-4f5b-aa8a-f1dff8e29413"
        },
        "item": {
          "id": "d159b3c8-0882-48f7-b250-fb26860c8465",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ffb8906a-dc41-48ea-9c1b-ffcd7bdff7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149ff08d-919a-4784-86c1-b99c6dbe7f95",
        "cursor": {
          "ref": "0f69c82c-ddd9-43f4-97e1-02446f149f84",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "804ff4aa-c94e-4fbc-aca8-c1e8ea7b94dc"
        },
        "item": {
          "id": "149ff08d-919a-4784-86c1-b99c6dbe7f95",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "3b34a77e-46ef-49f3-931b-bf6aee93a085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f52bcd-6a0d-42b4-8947-7705eab0a11a",
        "cursor": {
          "ref": "c105103f-1c18-46cd-9fe6-7cc13f2b8381",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f4b2456e-8b26-4473-86d6-0678ee89e538"
        },
        "item": {
          "id": "46f52bcd-6a0d-42b4-8947-7705eab0a11a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d2cc4e8e-93bd-4f8a-95b5-cf9d0b76bdb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e7d206-966f-4b5b-9b1d-a52e248a332d",
        "cursor": {
          "ref": "f25872dc-20bf-495f-a016-561d931e4ade",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fc52dce8-aec0-46c3-abdc-7e708b28bbbc"
        },
        "item": {
          "id": "e3e7d206-966f-4b5b-9b1d-a52e248a332d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f602bbfb-6a72-46b1-bc90-0735c2f5820b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c9d608-4b7f-416e-b6e3-5a6159de57d8",
        "cursor": {
          "ref": "4ebfde5c-6311-44ff-8403-1d99f456e7bf",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e173c4a3-46e7-4530-906a-b7787c5958b8"
        },
        "item": {
          "id": "13c9d608-4b7f-416e-b6e3-5a6159de57d8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4ddae60c-a0c4-4040-b318-520249fa71df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577d9b5a-2fac-422d-a155-1f38260d4a20",
        "cursor": {
          "ref": "7c81c1ce-8d64-4793-9f44-207b15b32a20",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f2b2e21c-c8d0-40fc-8f8c-37965dbd9144"
        },
        "item": {
          "id": "577d9b5a-2fac-422d-a155-1f38260d4a20",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3a36fdba-c161-481e-bbf1-597a4f2edb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fa4c03-f4ae-479a-b75b-d5db1469ea99",
        "cursor": {
          "ref": "1109b46f-0951-4c0a-9290-b616af3398de",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5216ab31-6e27-4cf0-9c25-105662a40049"
        },
        "item": {
          "id": "e9fa4c03-f4ae-479a-b75b-d5db1469ea99",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "45218e0c-4305-4347-b2b1-05a7369b4fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b308c3-4543-4824-b4d9-2f620b659de7",
        "cursor": {
          "ref": "c9b924ed-04be-4904-b628-8af4e300d65c",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d145c734-2d6c-4379-926c-534cca1b1c61"
        },
        "item": {
          "id": "36b308c3-4543-4824-b4d9-2f620b659de7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4e150f75-6cc2-4671-83b4-347152b89024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01eff88b-d741-473c-9f88-9eff45a84e18",
        "cursor": {
          "ref": "737f90fe-f956-40ed-860f-19a1245e715a",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e240f726-057d-42d2-b425-2fddec38a910"
        },
        "item": {
          "id": "01eff88b-d741-473c-9f88-9eff45a84e18",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f39f3da1-bc00-4df5-96d4-a129b2b4ef07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419a7ad8-5c94-46af-a75a-07efd71a9428",
        "cursor": {
          "ref": "592a82cf-865a-439c-a8b7-cebc7b90e0b4",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ec541b77-0b8b-40eb-831a-2a010f7ee083"
        },
        "item": {
          "id": "419a7ad8-5c94-46af-a75a-07efd71a9428",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "78ec2b1b-532d-4d56-8bd4-288417e42dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e95f8aa-5a85-43be-984f-e12202cd8132",
        "cursor": {
          "ref": "4005eedd-c3c3-484e-8060-7b2c0696d394",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d160a52f-f653-49cf-bc93-c4ce42dda56f"
        },
        "item": {
          "id": "0e95f8aa-5a85-43be-984f-e12202cd8132",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d6012cf9-83cc-4b14-8006-4e6b150b278d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c27ace-32f3-4635-aaa2-cc8a6ac1bc41",
        "cursor": {
          "ref": "3c182d51-37ba-44bc-aaac-1ad5c48cfa96",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "428dc97c-5cf0-4da1-9dc9-6372e248f124"
        },
        "item": {
          "id": "f3c27ace-32f3-4635-aaa2-cc8a6ac1bc41",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "46f94f6c-b676-4440-8a8e-37b6c1da5151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4c3604-726d-46d4-ab89-c88320cccb6f",
        "cursor": {
          "ref": "3894595c-24d8-4bbe-bcce-9b1192017dc2",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9572fec1-ec1f-4a2d-80ee-38abeae70a28"
        },
        "item": {
          "id": "ee4c3604-726d-46d4-ab89-c88320cccb6f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "feb1aebf-814b-4134-8f29-f11bf2566f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe8b62f-34b1-497e-89a4-65d7958dd675",
        "cursor": {
          "ref": "b019862b-a27f-4161-be3c-22127e9adf02",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f54596ba-c4f6-4551-9772-a226c7681667"
        },
        "item": {
          "id": "9fe8b62f-34b1-497e-89a4-65d7958dd675",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "831868c2-2a59-4443-8277-8be9911977b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0557b734-a0c1-4cb7-9265-b1490f1f37ec",
        "cursor": {
          "ref": "2260ec43-2572-4c88-90cd-0bd7ae340108",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c9ba7672-68c6-47a7-84ef-342e0d31be02"
        },
        "item": {
          "id": "0557b734-a0c1-4cb7-9265-b1490f1f37ec",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3660a210-26e5-42ec-9fc5-371fbc9b2173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173bf54b-cced-44b0-a927-86a39ad2a9c7",
        "cursor": {
          "ref": "8e7fb3bd-a030-4edd-b5bd-b177976ba39e",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "78e10dec-91cc-46ec-8cc6-a60ad114886e"
        },
        "item": {
          "id": "173bf54b-cced-44b0-a927-86a39ad2a9c7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "31ab3258-f8f6-4a2a-bc21-a5eef9016508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20838616-bf94-4991-8c19-1f213243203f",
        "cursor": {
          "ref": "9164150f-011a-43ee-b8af-e8225622bf63",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "76a1a05a-bdf3-4fc4-ae96-d05d14d7600d"
        },
        "item": {
          "id": "20838616-bf94-4991-8c19-1f213243203f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "472e987c-fdba-4f6a-a8a3-643509bbf877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f427b1-de2a-44dc-90fe-b0184b0d5cf6",
        "cursor": {
          "ref": "55f6cb0f-693b-49a4-99b0-3f5b334b421f",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bec2a9d4-6a2a-4e4f-810f-c4bb8e29db3e"
        },
        "item": {
          "id": "73f427b1-de2a-44dc-90fe-b0184b0d5cf6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fa288912-fdf3-4437-8347-f42d99718aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae35a5d2-c992-4824-ba81-853d3f804e4b",
        "cursor": {
          "ref": "1ad8e338-b1e9-4515-b8be-82eb72bf13be",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ab3f2ca2-1ebc-46ba-9a51-c484f9f6679a"
        },
        "item": {
          "id": "ae35a5d2-c992-4824-ba81-853d3f804e4b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f8c585e7-1408-497d-888c-e1767bd53922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d47237-3af4-4d4a-9bab-1d01912938ac",
        "cursor": {
          "ref": "9ff44950-d4cc-4b53-9d48-0d03848e138d",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "90fa91ed-9f89-4be2-bea4-1e9c2ad218c0"
        },
        "item": {
          "id": "b4d47237-3af4-4d4a-9bab-1d01912938ac",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ca3313ae-3ab1-41d5-876d-38a374a669ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1c604d-514a-4f51-b981-45adaf6ff295",
        "cursor": {
          "ref": "799b40b0-c5d9-4f15-a994-9dd01b06d315",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "af4ce50d-2204-4c68-a9ae-e0d807cb401a"
        },
        "item": {
          "id": "fd1c604d-514a-4f51-b981-45adaf6ff295",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e0725b84-75cb-4117-bd41-0750f9508366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099b5278-b710-4406-8c34-03b93f87791a",
        "cursor": {
          "ref": "8aa48a33-bbd4-4047-8c6c-d7411401441d",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c8ac5320-459c-404b-8da3-40d7f3d7d032"
        },
        "item": {
          "id": "099b5278-b710-4406-8c34-03b93f87791a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "24f7a96f-53b3-4e4b-b154-49d8d95d81b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b872f42-954c-4061-8fbe-f0edc1975ca7",
        "cursor": {
          "ref": "2cbc8b68-7479-45fd-884c-9ff55694be2c",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "41c6a343-e312-4c21-ac70-94924ebe4153"
        },
        "item": {
          "id": "6b872f42-954c-4061-8fbe-f0edc1975ca7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ca44fce8-9f89-49db-a19d-b8c5a710fcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ec3919-31e8-4750-864b-975bbceb78c2",
        "cursor": {
          "ref": "42fb2074-f6d0-4cde-a767-76cc4c6f631e",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f7802d20-db02-47eb-b893-1494a6565373"
        },
        "item": {
          "id": "a4ec3919-31e8-4750-864b-975bbceb78c2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "39d28ff2-8a8e-4b4a-84b6-209b2b55cc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdddc4a-bdd2-44c2-8227-728cfd48eff0",
        "cursor": {
          "ref": "6808e7df-eef6-447d-a304-ee94a9cd6280",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "da7a63d0-1886-4cfd-91a6-71da61daae77"
        },
        "item": {
          "id": "dcdddc4a-bdd2-44c2-8227-728cfd48eff0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "57f7c996-4269-4534-ae82-04fce1d60273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f1e900-6064-412a-930c-bd572e5107d7",
        "cursor": {
          "ref": "d25b1ec2-fb90-4df3-aa1e-9865ac9d1e24",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5169f092-a173-4ea0-a666-b429388d6520"
        },
        "item": {
          "id": "47f1e900-6064-412a-930c-bd572e5107d7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d2604e34-8f8d-437c-98be-b47f3fbb376c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7019db-fe63-4a87-95bb-1534a261671e",
        "cursor": {
          "ref": "57b4e513-19fd-4cbb-a2b6-3a557ed6f2a5",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c00ea9b4-9845-4902-9682-be7de9dae839"
        },
        "item": {
          "id": "ef7019db-fe63-4a87-95bb-1534a261671e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3233efa8-c4ae-4c4a-9965-0d4d6441d557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d923c712-ec6c-48cf-a864-814bc014ba2b",
        "cursor": {
          "ref": "90645031-2098-4d83-b44b-3d1f92f955ec",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ff1618a8-1a75-4bd3-bf7e-a81cc57efc6d"
        },
        "item": {
          "id": "d923c712-ec6c-48cf-a864-814bc014ba2b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e67e000d-0a7a-419e-b8bd-82c53bbe5da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b18574-61b5-42f1-9eff-2150a66b009c",
        "cursor": {
          "ref": "b1e4c530-8d86-4263-873c-002236480949",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3384284f-646b-4c2f-acbb-0f445be61500"
        },
        "item": {
          "id": "28b18574-61b5-42f1-9eff-2150a66b009c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "58ec079b-80ed-40ed-aa96-8bfeb5351335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6b6df2-ff04-4b8b-ae1e-fb97d991257d",
        "cursor": {
          "ref": "0a737407-1a13-443f-8c4c-cff0df288a7c",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2d4ffb06-500f-49f9-b9ae-b961b7166c7a"
        },
        "item": {
          "id": "db6b6df2-ff04-4b8b-ae1e-fb97d991257d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ed4ef5bc-4d96-4d92-8370-0f48ba73a648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb907bf3-264d-4f71-aead-6ed97a28ee5a",
        "cursor": {
          "ref": "8eb99d19-a59e-419c-b47e-725a735ae56c",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0132dd80-cc8a-4cea-ae3e-584fa96e20a1"
        },
        "item": {
          "id": "bb907bf3-264d-4f71-aead-6ed97a28ee5a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3fb91931-edbf-45ea-89b6-1ad8f974beb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c1160f-a51e-4a93-b735-1ed9c2cbdc2b",
        "cursor": {
          "ref": "29daa280-4b75-4d03-aeff-783d091fc1a7",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a11bd2f7-50d7-42e3-a50b-8440c982fb25"
        },
        "item": {
          "id": "52c1160f-a51e-4a93-b735-1ed9c2cbdc2b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e1112155-8666-4abc-b513-ff612599132d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b524d26-79f6-46bc-bb51-0eb4cac26f44",
        "cursor": {
          "ref": "0acf6642-8503-49ed-8991-6109149682a4",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "07503583-742a-412e-926f-f41703b2fd69"
        },
        "item": {
          "id": "6b524d26-79f6-46bc-bb51-0eb4cac26f44",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "27bfcb77-f55b-4c35-a268-310e59f95225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20c0007-c4f4-4195-a77e-7aeee84d4333",
        "cursor": {
          "ref": "10267c38-4715-4466-8c81-1e7e029841c9",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "df5792e5-fbdf-46df-bc9e-34e156148ad6"
        },
        "item": {
          "id": "d20c0007-c4f4-4195-a77e-7aeee84d4333",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0640f73f-5e91-4edc-baae-a361f14330fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd693d9-39be-45a2-9718-63d6b7a2763d",
        "cursor": {
          "ref": "e2113d79-359c-40a7-8fb4-b01a21e8a0ef",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ae82b531-d38a-4c02-a87e-ce8e8711d71f"
        },
        "item": {
          "id": "ddd693d9-39be-45a2-9718-63d6b7a2763d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0b280901-fe34-4e7a-a1e0-4c77c535bf89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7460e303-736e-4d42-88fc-ee8a44d3fbe1",
        "cursor": {
          "ref": "5975af34-cd51-4a61-8528-1b32bb0f9646",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3dd73f19-d5e2-4922-8eb2-649c4c9e94fe"
        },
        "item": {
          "id": "7460e303-736e-4d42-88fc-ee8a44d3fbe1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "afc9e688-4808-4a8c-a584-63423c231389",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2069d638-1555-46fb-9765-16b31bd5829c",
        "cursor": {
          "ref": "fa723ace-cdd7-4327-aec5-b88a24e02b33",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ce208ac0-bebe-48f6-bf96-cf057e22f6bd"
        },
        "item": {
          "id": "2069d638-1555-46fb-9765-16b31bd5829c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e07f6c5d-cfc9-4675-9413-15e5f154d21c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3676e34-0afb-49e8-9c65-e670960313da",
        "cursor": {
          "ref": "80b30b9f-3262-429d-a942-b3da26a2cb94",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8673032a-ccdb-4abf-8506-48f180091de0"
        },
        "item": {
          "id": "b3676e34-0afb-49e8-9c65-e670960313da",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dd61a256-3a39-4d69-ab82-1d6956168914",
          "status": "OK",
          "code": 200,
          "responseTime": 375,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe6903e-5f2b-4797-9f86-40b3f4caec6a",
        "cursor": {
          "ref": "48b07773-6aae-4a98-9c70-41e05be8e826",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b3b67de0-01da-4103-b925-c95b5b0437f3"
        },
        "item": {
          "id": "ebe6903e-5f2b-4797-9f86-40b3f4caec6a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9ef55570-6328-4c01-8b13-344962fcc4b9",
          "status": "OK",
          "code": 200,
          "responseTime": 319,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0186c869-5aaf-4851-a615-73fa7dbbf371",
        "cursor": {
          "ref": "1c8ad952-57bc-4dcc-b597-8c73dc323a75",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "059ca436-d4b1-4628-ae6d-985a3315b429"
        },
        "item": {
          "id": "0186c869-5aaf-4851-a615-73fa7dbbf371",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "fe107164-9914-4245-b16c-e64bedc8df4f",
          "status": "OK",
          "code": 200,
          "responseTime": 645,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "49110d7c-9129-4b07-a116-bc565637b2e2",
        "cursor": {
          "ref": "cadab1ba-bc56-41a0-8a40-6caa8a9c294f",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "db8411da-b4b9-4b76-bc0d-02d34ccd8ac7"
        },
        "item": {
          "id": "49110d7c-9129-4b07-a116-bc565637b2e2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a0d267ad-67aa-4808-943a-adaf0dbc15df",
          "status": "OK",
          "code": 200,
          "responseTime": 381,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bba1036-c26b-4ffb-9be5-d3b28ccd17a8",
        "cursor": {
          "ref": "58e56a95-fbc6-44f4-b60c-c47657ab09ae",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "acbc5958-fa9e-443b-87e3-76fa8f5b971c"
        },
        "item": {
          "id": "9bba1036-c26b-4ffb-9be5-d3b28ccd17a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "34de66c0-7a06-47f0-91ee-6bc13a05bc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bba1036-c26b-4ffb-9be5-d3b28ccd17a8",
        "cursor": {
          "ref": "58e56a95-fbc6-44f4-b60c-c47657ab09ae",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "acbc5958-fa9e-443b-87e3-76fa8f5b971c"
        },
        "item": {
          "id": "9bba1036-c26b-4ffb-9be5-d3b28ccd17a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "34de66c0-7a06-47f0-91ee-6bc13a05bc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bba1036-c26b-4ffb-9be5-d3b28ccd17a8",
        "cursor": {
          "ref": "58e56a95-fbc6-44f4-b60c-c47657ab09ae",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "acbc5958-fa9e-443b-87e3-76fa8f5b971c"
        },
        "item": {
          "id": "9bba1036-c26b-4ffb-9be5-d3b28ccd17a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "34de66c0-7a06-47f0-91ee-6bc13a05bc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2024948-d764-4e6b-90bc-ed81e6c4d6a2",
        "cursor": {
          "ref": "7210ed40-b510-48f0-b16e-0153a58c6b8d",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3f1a162f-e52e-4112-8a19-297b4c2540cf"
        },
        "item": {
          "id": "d2024948-d764-4e6b-90bc-ed81e6c4d6a2",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "838b74de-794d-49b6-bc70-3ceaf5d29509",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f1501e-01a0-4d04-a138-bde0c2d2b827",
        "cursor": {
          "ref": "35b08c16-9eac-475f-a26b-6a4deafbf6ba",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0bc3969a-deba-4048-a4ea-d5ad115deafb"
        },
        "item": {
          "id": "53f1501e-01a0-4d04-a138-bde0c2d2b827",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ce3f3856-7958-486c-8c29-d3a172758fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "53f1501e-01a0-4d04-a138-bde0c2d2b827",
        "cursor": {
          "ref": "35b08c16-9eac-475f-a26b-6a4deafbf6ba",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0bc3969a-deba-4048-a4ea-d5ad115deafb"
        },
        "item": {
          "id": "53f1501e-01a0-4d04-a138-bde0c2d2b827",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ce3f3856-7958-486c-8c29-d3a172758fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "181973b6-c179-414d-b6ef-f57980863b48",
        "cursor": {
          "ref": "c0847dee-0fbd-46ac-a0e9-77795ec5374f",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4c8dce44-9888-4e79-acfd-9a0099476c11"
        },
        "item": {
          "id": "181973b6-c179-414d-b6ef-f57980863b48",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4f766b8c-7aef-4c80-9a9c-4cf2ba35071c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f0af4cd0-14f9-4765-8bc8-1079a518a805",
        "cursor": {
          "ref": "861015cf-ba58-4e7f-8df3-d7a247bac2de",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b29a5c1d-7fa7-4c87-a211-49880aeae6bf"
        },
        "item": {
          "id": "f0af4cd0-14f9-4765-8bc8-1079a518a805",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7f050d72-4dfe-48a1-b1d4-3bf0c529c807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "f0af4cd0-14f9-4765-8bc8-1079a518a805",
        "cursor": {
          "ref": "861015cf-ba58-4e7f-8df3-d7a247bac2de",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b29a5c1d-7fa7-4c87-a211-49880aeae6bf"
        },
        "item": {
          "id": "f0af4cd0-14f9-4765-8bc8-1079a518a805",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7f050d72-4dfe-48a1-b1d4-3bf0c529c807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ae83cdca-d83c-4ea4-938c-6846362a6f95",
        "cursor": {
          "ref": "c7c97631-e285-489e-ac21-1c4114b11356",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d61c00c9-65ac-4803-94e8-7eece822cf31"
        },
        "item": {
          "id": "ae83cdca-d83c-4ea4-938c-6846362a6f95",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "92166355-d3ab-4e3b-94ea-7ed71526b3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}