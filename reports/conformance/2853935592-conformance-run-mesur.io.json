{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "17ac96e5-b5ea-4583-8f95-54b69e530be0",
        "name": "API Configuration",
        "item": [
          {
            "id": "439d4996-95d7-425b-bdf4-4a78ef7c3332",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c71509e-de70-4e56-940f-8c47ee68ce92",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b48204f-5ad0-454d-8bc9-5cb2aa1aeb99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe9f4695-49ca-47c8-8336-f6f6a551c380"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "498f613d-64c6-4e17-b66b-ffb92c980be7",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "c40cb8fd-ac10-4af4-9efc-0b345e2b8526",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8b031ed-774a-44d5-8b69-3905b86fdcfc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91727257-78f6-4a89-9e6c-a192b8d76f45",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3d9764-7948-47f5-b343-ab7190923865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7ee2676-c7d9-41f3-ac43-513573f0cebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdbf7be-8df2-4569-adbb-223948734f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e072dabf-c071-4c24-b82f-793ed3898478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec19c4b6-4eda-43d1-81aa-13bb93b385c1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91a0557-c3c1-4e41-bdd8-f9a0c687606f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f0662f9-2e9d-431f-aa66-9fb0eb532ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d84d8b-cf29-4a9d-aecf-819fdb3a3873",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c5ad4125-77ab-4002-95e4-715f21894fd1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "684dcfaa-5ab4-4bfe-8981-4f4ec0eca488",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f116f3b4-0ecf-4779-91ee-2d4388a91667",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00eeb8d4-19d5-4460-b2ff-54c0fac32d2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f3ed869e-3123-46e5-949f-eeadd0761da8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d3cf0b6-c8ff-4590-97c6-d52a63b5a971",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "81fd1367-a8e0-438e-badb-691dc7cf097a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "689f4e29-f8d9-47c4-9c62-96e58f18eaf7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9f4fe12-2415-457a-ad94-9225f98fa729"
            }
          }
        ]
      },
      {
        "id": "91354d3c-805b-485f-aede-32de820e33b0",
        "name": "Issue Credential",
        "item": [
          {
            "id": "c5ae477a-fed6-4bb8-a72e-2ad69dbc5c35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fef6bdb-db5d-4f05-b1f8-d8bc5da89169",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "14ccce14-1f88-49c4-b098-2e5de30407e2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3688e065-b211-4ea9-99d6-142fef123feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88ce4cf-95e9-4c43-8917-140b3c67762d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84986206-37ba-4153-86ee-9d0607372176",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46acf7b-03be-4b02-8392-6a09d730edfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896bf728-1b3d-4bef-92e2-901b8a2d826a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6761eb-257b-437c-9021-cbb528dc9986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b05ebc-eaf3-4d09-8148-c5ce7be279bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb719ff-fee4-4380-9837-73dbd2404dd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc98bd1f-ae27-42ef-869a-dc4b35f670e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a972941-d2b7-4f05-a472-53bec85b40f4",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02ab24f-94fe-4289-b0e3-f73899494991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6fc38c-d6ea-4f43-a9e0-fdf304f439de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e77e0b-9469-476d-a3e1-a58d524d2400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7628a882-c30f-4478-a5cd-42f9d55cec28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d95ac24-41a9-4ce0-908e-0a5ba37272ef",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf3f797-98bf-4bf2-bf58-51325fe2db04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e54313-e479-4b7b-a248-b6c034433f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a35e3e-53fd-4ec5-9694-579f1d67632e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8b9ccef-a6b1-4c3e-96fb-6aca0e50d772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec64034-915c-4682-8cf5-497bf2616a3a",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950ff91f-458e-484b-9d37-ff2b5b6db610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebca604-7cc9-4803-8367-802a0d073c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c94a81-7936-4bd9-a127-068ed0ca2aa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "243eb7fa-ec21-4a8d-a114-c2ec95b3d8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0173e06b-3ebc-4369-a6fa-bf5cb3ddab34",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31264b91-a4d8-480d-8691-0f7a1296fa74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c10fa9-7d72-46cb-8ca9-bd0891ff7566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17d08cf-7528-4381-95d5-0080318acd28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8885d698-f7e6-4f8a-8c88-5c1586c31109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1554e3dc-4ba7-484d-8809-c01e9c707063",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e3d3f6-ea6c-4f0d-94b7-58b7473a7ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b6bece-89ae-4932-b00e-d2df8e0b7922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e588c0fd-1b59-4996-be57-b4b88fb04ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a0fd7fb-0055-4587-af13-ab5ae7f5f89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765a6363-92ec-4a61-be11-5a1585bed112",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d178f0cb-361f-4e6f-99e8-74b80aaef904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1713340b-2abe-4e97-a690-7e8a27db874b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270e60ea-29dd-4fcd-bf93-6479e854ad37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21fd9f6c-ae8d-4fcd-9d66-8fd652f565d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d1dbe26-d0d9-4c04-8a68-5e0346b7ee52",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e7f5c6-d0cd-4dfa-97ae-715016e7d535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c07b119-5cbb-4a79-b9ae-fd30ba3b6de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6d0744-c0d2-4371-bf34-2c9e8a7d4696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "356c7a8e-f45a-45ab-ab8a-4c3e4a91ec03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4777de63-2998-42b8-8729-45657c25a33f",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290c74dc-5dce-44fd-bb1a-224c68ba0ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ae42a6-aa30-47e4-ba1f-88c7547a26d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5703c6a0-ef35-48fd-8e07-dd22a5e3b7b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c42b5d00-1961-4ed9-915b-0c8e721ccd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ba2b35-e2db-4489-8ecc-8111e264a605",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403fef33-1adf-41cf-8d95-5f115ba8a7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51268f41-c4c2-491c-83a2-9151f07bc718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f499d38a-ad57-4077-b03b-0ddcbefe7343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a1fcd807-65c8-4203-ad6a-bd84fd186aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db651bc-75e1-4c9a-8b7c-bdd9665219c3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffd08bd-6cad-4b51-91a3-cbd0af692286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14582c75-3cf0-4633-ae3a-58127df3d9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202fd8d3-1204-4f3a-923e-9aeb9715674a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d83763bb-3460-42a8-a683-f877280c0b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef22ba2-c4e3-4e1d-800c-ef0c15ef1f98",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3381bb-808d-4717-ac52-3e13807f3d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c66ca27-7146-4e5c-91aa-694bca2dbafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a12aa51-f30e-4062-91a1-7b9e21f04cc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e80d721d-5a9d-41e8-8cae-3693aba6af1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d85dc0-30d0-4668-86df-6a22a850e30f",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1f7313-b201-404c-bdbc-3e3ace4e28dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226dd193-6b8f-4d07-8b4b-317fe5164f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd46bd4-891c-4446-b0dd-242c20df0378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ab390b9-3a71-46dc-a03c-6b4438f2db65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5541e0-f8af-4778-a359-f15293a39d0f",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70e1964-8761-4ff0-a1bf-d35d3d007026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83254a1d-23a1-4a14-b930-e38a09c1993f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831318fe-0bfb-4e86-937e-c6390fbea5ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "2236e0ea-0d1a-4987-a76f-5e936e78f217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828b5f69-5df5-49a9-bd00-cc1c7e1a439f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedf4660-76fe-43f6-94df-9dcead7b22d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fdca3db-5137-4fdf-9fad-0ba9bb81ee22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7494d20-5ee9-4e8c-98e2-381d393b42fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b28b16a5-58d7-4722-a2db-0af9e705945a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df320ab-3220-4e27-8659-945e80c9dcbf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9267812-1149-4fdc-aa4c-30177f88f5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d377a478-53c7-4d93-8ad2-7acc52c4e362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46ec863-2d31-4686-a66b-562e9eeee7fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "875033f2-cbb8-43a2-b302-d0ba1b20cbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e8baaf-5720-437d-b54f-2c88318865d8",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de702de-9173-4b01-8d55-b58315a22b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9a4869-83a2-4931-9fd5-c5b2050b9702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34f6ed5-bb35-473e-b8cb-b108a188cf61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e542acc4-ae73-4a6c-a8b2-217b4deebd76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9f5e3e-1232-4c6d-b2a2-2f6d6239d1ee",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595f7ffe-3d30-410e-9ece-d059a3d25175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4150c398-d941-404a-84fd-af5b07863b09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea9ce73-ef98-4011-b74e-fac186ce5429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c1b7ca7-6312-417b-baa8-f06d8d18f736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5227b4-fcd2-43c9-b95a-0cf3c481bf15",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d021fe5-45c2-48fb-b6f6-79e34e1ca00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34084045-9b70-46c4-af8c-3b51ae9bf38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d23cbf-33b1-4404-83f4-b1e12b1ea23d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8f3dba1-ac1a-4329-b951-0c0f974b03cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4507c7ab-d781-48ec-bfcc-dbc603fde525",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61ceee6-c7bc-493b-9a0c-26b44818ac1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f198ae-e905-48b4-8562-03237a386c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf243a6-c668-41ad-a346-907e2d770f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01ce7ff-8ac4-4be4-8bac-36971089d417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28979231-06aa-414b-a6f1-d06e32aaf92d",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9194b09b-a133-46e9-b76a-35f507c2739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594c30cb-8252-4da6-b052-e2dfefb23fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabd658b-92a4-4f24-b533-3afa3753d9f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3caef874-3a54-4791-af6b-9fc05424faa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0b19b1-5d5b-4de8-90b6-4dec9d620c55",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb1a429-05b5-4f86-b18d-416b761a338e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4995b3f7-81e2-4e16-bb94-dfe85c5949a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e548c2b8-47a3-4b8d-a116-2d930f5b22da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0771b304-867c-4678-98bc-58dfa1164c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ec7fe3-8794-4c4d-97b1-fabd32110e05",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309188f9-51a6-4a53-bedf-608cb59412d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e8951d-adc5-4ef9-8b80-e70efc362020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5b3a06-b67e-4740-a8d6-49fd44e85240",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68a16e31-1b16-470b-91fd-4e7ddb7f469f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f71e95-f22d-4aab-b16b-6c11240b187d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5731291-a1ba-4793-aadf-d8d726c9d8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20cbc7f7-3640-4855-940d-3c4eb5db1daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffc2688-0cab-4d9d-9d3c-4c268962dfb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "800f5a75-f4f9-4f10-9b81-e9796290a204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef64be6-a4e0-4c15-a955-fb46d0765c64",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0991185-d10f-469d-b4c2-d6770a0567d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640dc7d1-32c0-4604-ac6a-8e57642534b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a987ba4-e794-42de-b324-ea0694894141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59ea6f7c-a5cd-4550-b290-7124cc02eb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33e50da-3185-4593-a6fc-ae9463e418e6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b477628b-9550-4f70-9612-1c79f47dd281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de3321c-7d57-4dd7-bbfa-8ea1a876e176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fa6c69-382a-4919-8429-9f8d7f8e9936",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53cc988-8db5-449e-b764-4b7fbbfb4b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fb18e1-e01d-4b31-9d0f-d4d23246e47d",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c0eb3b-7468-417b-9aba-d790c77ff041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e9b490e-c318-453b-aa47-7cca552030d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e87d693-654f-4979-bea6-b685940fe79d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8acccb90-bd6b-416e-8f0d-faf4ad64abbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957e608f-f00c-402e-b749-3d8ecb4bf9c1",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb43c21d-f0ac-4259-98d1-aa50a7f33dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7c84cd-355c-4471-9575-0d8dbf48a9cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50263b1-3317-47fb-b8f7-7b4f1877ce3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb9a9493-33bf-4aa2-bb27-37d89d2ba50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28b32b1-01c7-459b-877d-884454d7a5d1",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28246ca5-7019-4ee8-9876-0f81692fd82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39233328-5953-4ecf-9ec4-852cf6f7466e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e357655-824a-4839-8bf8-80e1f719d6a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81d76ef9-719c-44c1-9181-70defaeff16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08ec395-7c95-4fab-87ee-a23ee1ca26c4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73b544e-37c1-47b0-a57c-00e2d9f76e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a5004e53-43d6-4172-abee-d9bfb0334e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bf4b07-9bc7-4d66-bb13-21f9d7ce26a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03e553dc-4021-4aab-9405-abf54c2d7315"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b3be344-fae8-4bd7-95d3-91305a512a40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "045e6e97-c466-48ff-85b0-bb62722af886",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa661fea-55b0-40e8-a565-99402f935ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bfb30e9-d151-4eb5-8a8f-b089e64b88ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b282e12-91d7-4458-8e60-764c3d2048d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "90dc154d-7737-4630-8428-c16ab5e6b4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6f3eee-eb7c-4a23-b271-dfa4cf5c4c40",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb8820f-3077-411a-a6e1-d59fea39601c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b547c6c-b520-44d4-a486-5bc20040f0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92da166e-bef6-4061-9f53-f42cf892dedf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "283cb412-598a-42b2-83df-70926be789c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9be6f888-a27d-4a48-bf6f-4315dc83e522",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7405cd15-2e9b-4fff-b04c-13ec8082375f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cefc3f4a-a095-4366-b77a-447d617fbf85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fd0e807-040f-4d1b-a5b1-e5f30ef40d7c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73f8b066-e843-4f7c-8814-f796eb0da51b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a2f8c99-44f1-41f5-b4dd-3f02b5e40449"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "398fcb8a-b7af-4612-8125-77977ad2d7bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "249d6328-c9dd-4730-890c-9912d9b9db65"
                }
              }
            ]
          },
          {
            "id": "35de588a-ebc0-4781-a0fe-68f68f1ec872",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d65f5b6b-2284-4769-a629-6dcba5251f12",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bdef476-a535-407e-bd48-ddb17470b144",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7773fb88-a93e-40b1-b4e3-4b26e1857394"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e99d56a-5fda-47e2-8fc5-76ac6e8318b3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ff3471af-c31b-40b0-97fd-95fb02881271"
                    }
                  }
                ]
              },
              {
                "id": "da1dc9b2-c604-4d5e-9aed-d3fd7e4be5f5",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f250783-19f1-4ad3-8a9f-d5b9729b97d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97693d53-cecf-4c2c-b389-6e85fbfecd16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c3491f4-6f3b-40f6-b8a1-bed90e7a87e3",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "efac8292-0da1-41d2-970b-0a1de11bcc7d"
                    }
                  }
                ]
              },
              {
                "id": "221032c7-c009-4173-b556-e0fb8e662463",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15fa758c-c096-4255-8761-15cea78e3233",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dffe4173-c3f9-4d5a-888f-6b0b8a6f05be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29851a0f-45ee-4b6b-a3e1-6c947c0a9849",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "0219adb2-312b-4800-b6fd-93be49d408db"
                    }
                  }
                ]
              },
              {
                "id": "3ac6a8c4-d634-4f4d-95ca-d2644c65b52d",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d339c5d-7784-4f44-ab1b-40d0d7af6d2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9208c76e-7ecc-4891-9d9a-84c8e5bfac34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c344003c-5f89-46b8-89ce-eaf2cb60cca7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "d3730817-3421-48ac-ab1b-87234c9f2908"
                    }
                  }
                ]
              },
              {
                "id": "b01debce-94b5-4183-afc6-42ca40292486",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bc6a4f2-882f-4fb6-a974-5b5dad5140af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "67ec2856-2df5-4745-bd4f-40a0807f51dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44a7396c-b1fc-4978-8e0f-fe44c4c36690",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "513372db-ce4c-4015-b7c9-606600338cf8"
                    }
                  }
                ]
              },
              {
                "id": "6523ea53-1923-4bec-8f76-8b113776f2e2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fecec657-1c3a-466f-99d5-2339b9663ca3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a27669be-7b48-4db6-a1de-f4c16b7ccdb3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "943ead8a-a3dd-4379-b2b1-f8a8cda7fefe",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2fb7e069-78e6-4bd2-9cbc-b0d30d310a2f"
                    }
                  }
                ]
              },
              {
                "id": "0794668b-fded-41b8-abc9-2bc23f62edfd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a8bbcb8-5bf6-4297-9e19-dafc2769d8ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93a32ad3-4907-435a-9570-cee984d82186"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79400334-6906-4354-9347-697905c6c0c5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5977b969-db1c-4bf8-874a-8e8e01f3e5e9"
                    }
                  }
                ]
              },
              {
                "id": "e5b25f6c-c5b2-4ae9-a5a8-04fb90b3fa49",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6ab3a3c-22d8-496e-b2f3-21ad52c52458",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbe2a6e8-3390-42e8-bf1a-de2e9a68b98e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e95b13d2-d1b9-4b82-81b3-f1d6898d31a8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8d7fd9e1-6fc9-47fd-af99-59086fef65b5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "68da068e-b0a0-4a42-a30b-ae5d6b1dc5df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2f88591-4a5f-4627-8cc8-a256736303d3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6442601f-a3b0-4ee1-b584-c4572e52e607",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "90438bad-1886-4cd3-bd47-2fecdb5381a7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6088e4ae-7592-4fa9-bced-125cd2f53795",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "02e7b698-c1ed-4162-bf25-c77414f6ad04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba81d9ba-ec7f-4fa3-8b29-aa1e67a4ee88",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3614b41d-bc63-4e82-b9ce-2740e2c3d766"
            }
          }
        ]
      },
      {
        "id": "7ab37118-25c5-4e7d-9118-eade3e1d646a",
        "name": "Credentials Status",
        "item": [
          {
            "id": "68b93a84-9b51-46b3-a31d-dea4fdbc2fff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fc06cc9-72bf-46d3-b733-203f70b980c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9a1701d-1e12-4e50-ab8b-d0ae91aa6b7b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123abb72-e12e-448f-a8ef-086032a561a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e33a856-17df-4e2a-94dc-f4040d0b46ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb5228d-52a5-41b7-a5b8-068579704ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02345c1f-be2e-4559-b9e3-75f1d92188a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0e9c34-aaf1-4c93-9c51-8d2744e25433",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ba1142-34af-4327-b77b-84902ffdddf4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9f639e0c-dd20-4199-a47e-188de1d37e01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22324016-cd6d-4ad5-bbe8-b66aadf59395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11bb04a5-a7f3-467b-a58e-c8ee7d91ebd2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e52d8144-da5f-4300-99d1-e1ae8122f5aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c075c41b-3aa6-4849-8004-626dcfacc60c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "037b63b7-15b7-48ae-91a9-af6f223ec6fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73bbd354-b3c8-47a0-8d85-e0af99cfa173"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31334912-ed17-4229-8373-a32ea1051ac9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "c2c7e9d5-1f51-4730-a803-23bb7ae1d890"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92ffca65-6027-49ff-b560-78e065ad9652",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4aa42e24-344d-4c79-943f-d2cfcabe1d49"
            }
          }
        ]
      },
      {
        "id": "7eaa58d6-7590-4cac-9cb4-4109565d5063",
        "name": "Presentations",
        "item": [
          {
            "id": "74a7c645-fdc5-4801-8575-e192ec345277",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23fb5e38-18e3-4594-a62a-2796a1416aec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b378875-8d6d-4ee8-9386-6152db019ad2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6f23df-ae29-484c-9ed3-a37803347cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89adc7c2-0dbe-411d-8db3-2e510ac5eeea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61e891f-fe1c-442e-bcab-7818d7b65e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b69b49f5-529a-4c70-8b78-2e5719b9b257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f01d37d-0e45-4ffc-8587-3942b9e6ea49",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d340b4b-dcbb-4ffb-9ba9-965bbba1f1c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "8e5639fd-1e14-4844-a8c8-db32a4fabc86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a31581b-d775-4cf9-bb73-10adbb8c5794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58004692-5f6b-4fec-86fa-cc02f3b9e046"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38c72a81-c510-4ae4-82b9-7da9643c40dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d590f088-f736-4e32-805b-06aff4697042"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49194225-cf5d-4872-a0f7-c039ad6e148a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56f96f35-e4df-4ef8-a8d5-72830190d09e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6114d701-70be-4878-95f2-e82da8d4930e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "e8815412-44c3-47ea-950f-95ab12f7e6a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ba014af-4cc3-469d-953f-07d26cf4728f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4bf75931-b2b3-429e-9c16-a6a7b1006e5c"
            }
          }
        ]
      },
      {
        "id": "f9962227-e4c2-45e1-9078-c5cd06029334",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "23bb28c6-d44e-4b53-a12d-cb0b5cd553ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31a40b6f-e76f-4450-8490-e4ab3cd57b6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36ae0ebe-e6d0-4d0e-b959-b853ec9ad844",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70808f8d-f7c2-4f73-9908-9204410f1fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be1e7ee-9290-4c13-9e12-fb2d9087585d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b48800-7242-4b70-8ec2-58ebf2ab8291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31cfac37-c2d2-4462-867c-93e98df7873b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1592064d-29e7-4678-994c-0a0d6257845f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bc59b6-0221-4635-8596-fde9e09dba87",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "bc53dc85-fb07-44ee-8ea1-af7ad199e9de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f177156-ec43-4b08-ada7-2ac29724f48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3043985d-a1f4-413a-961d-fa5c1ae1da12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c620797c-509a-474e-9fea-c2bf73b758c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b316ad75-8942-4e77-a280-1f6de14470e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da433905-ae0d-4bb9-9367-414fbb0b440d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3944a2cb-48b4-4d54-8e6c-2bd8d0c72054"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fdeb422f-0178-43c8-868e-91f4195b3822",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                ""
              ],
              "_lastExecutionId": "57a83ac3-87cb-4d65-a2ba-ea7ccc67213d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3fad775-7f38-46b4-930a-442ca016fba9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d725da38-8c25-4784-b6ea-96824d93abf7"
            }
          }
        ]
      },
      {
        "id": "c813ad56-d2d5-47c7-8a54-28e93523f09c",
        "name": "Presentations Prove",
        "item": [
          {
            "id": "1a2af6e3-4ffb-4934-a2e0-cd029ea7d733",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12212d88-95ca-4e32-9f9e-a8f0cc1f1787",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5742fdfd-ca70-4b0b-b20f-ae2627b95579",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a73dd2b-e0b0-4aa7-8ac4-dfebd8143d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336aee84-968f-44d1-8c9a-e508a6831d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf3b9f6-f49a-4f96-a3c6-ae182451652c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3194c39-950a-408d-b752-614d7969056a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d5304e-4baf-41fb-80b8-789e36126ed7",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb0f6e8-a94b-4f32-a51a-198c00fe9722",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0f580d5f-086c-4e04-93fb-d33d48db3ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc17b2f-cab5-4f1f-83d1-ec8af97a5d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f43f4f57-d600-4386-873b-3639d68a4e97"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5be04f8d-48c2-4aad-9bdc-8b1102077aa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dfc1148-18ed-4fbd-9d38-23b73134461a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b171840c-8b96-444d-a626-080322ed2190",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "962cc10f-9de3-4c2e-87bb-c01791b1f0db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "297e34c1-f9c2-4411-b264-67c2a971c790",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "76b4c3e9-9447-4455-8b56-c80f0c501cc8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03b7856b-11f2-4b55-bfb8-11c6e4c42c14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7705f1f-77da-443b-a157-2c010d3e8391"
            }
          }
        ]
      },
      {
        "id": "432c719e-31af-47b5-8f22-cb4ee5a559de",
        "name": "Presentations Verify",
        "item": [
          {
            "id": "201944fa-5755-4b6e-8ec7-a334e951f436",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee17bb08-22a6-47ad-945e-c473dcfbfd95",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6682158b-200b-4f68-bcd9-e3fe2a7dfa72",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8a597e-a8ad-4c1e-bbc3-163a291a7526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e5e0b0-23bf-43ad-a25f-2cd8ccd2f30f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c724a052-0eec-470b-b4f1-6f5def9d345f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8db66e81-aee5-466c-aee9-e649b720783d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8ff43d-202b-4411-8c72-e73a0f571794",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b936d7e1-eb46-4c85-9266-64b324a94f16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "514c22c3-f8b7-4772-affa-dee3e6e4f5b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69363200-9101-43af-90b5-295ddfe7a34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe21412f-5f24-4061-b4a7-c00122d24094"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7a432d3-0267-4294-b677-4fd8c16db5b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7edb198-b52f-44e7-838d-d7803cf5aa38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33be87cc-359b-435b-ae35-61331e58a528",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e6c0b70-32f1-4dc8-a796-6f3261538120"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40f3fe7e-7f33-4c42-bffd-0c0a8c88699e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "0a289c5e-cbab-4cbd-8231-d17619d829b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29190ed8-8176-4aa5-baf6-64adfb1a8e86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "006ba453-dbaf-42ff-92a4-69c1becf1792"
            }
          }
        ]
      },
      {
        "id": "9a3c2152-2aa4-45c2-ad5d-afb1521fc038",
        "name": "Presentations Available",
        "item": [],
        "event": []
      },
      {
        "id": "4c028730-c8a6-424c-88a0-67ced1d4223b",
        "name": "Presentations Submissions",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 432,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 104,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 55,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 115,
        "pending": 0,
        "failed": 93
      },
      "testScripts": {
        "total": 217,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 215,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 73.8846153846154,
      "responseMin": 30,
      "responseMax": 681,
      "responseSd": 83.99980628323686,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1660437916852,
      "completed": 1660437927367
    },
    "executions": [
      {
        "id": "1c71509e-de70-4e56-940f-8c47ee68ce92",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 55,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "06b73ee1-5aa0-45a9-b3b4-74c0ae96fd27",
          "httpRequestId": "2af2f49c-1b4d-4979-8328-29fd76116fd0"
        },
        "item": {
          "id": "1c71509e-de70-4e56-940f-8c47ee68ce92",
          "name": "did_json"
        },
        "response": {
          "id": "6c3ac7da-09d2-44e3-af54-31bf5311c8c6",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91727257-78f6-4a89-9e6c-a192b8d76f45",
        "cursor": {
          "ref": "d5eee119-eb4c-433e-973f-7a650654654b",
          "length": 55,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3b5c5a7f-438f-4bc7-af0e-692ac0406dbd"
        },
        "item": {
          "id": "91727257-78f6-4a89-9e6c-a192b8d76f45",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8fae9a9f-234f-4b5a-84fd-a0b5d0c54747",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "91727257-78f6-4a89-9e6c-a192b8d76f45",
        "cursor": {
          "ref": "d5eee119-eb4c-433e-973f-7a650654654b",
          "length": 55,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3b5c5a7f-438f-4bc7-af0e-692ac0406dbd"
        },
        "item": {
          "id": "91727257-78f6-4a89-9e6c-a192b8d76f45",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8fae9a9f-234f-4b5a-84fd-a0b5d0c54747",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "ec19c4b6-4eda-43d1-81aa-13bb93b385c1",
        "cursor": {
          "ref": "141d7a05-1f1e-4ac7-a553-dbd56f2d6fa7",
          "length": 55,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "18ac6ec4-ab05-43f7-be1e-7103cdaaf01d"
        },
        "item": {
          "id": "ec19c4b6-4eda-43d1-81aa-13bb93b385c1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "be309cf8-1bfb-4c4e-9a98-762d2b524c2b",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "ec19c4b6-4eda-43d1-81aa-13bb93b385c1",
        "cursor": {
          "ref": "141d7a05-1f1e-4ac7-a553-dbd56f2d6fa7",
          "length": 55,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "18ac6ec4-ab05-43f7-be1e-7103cdaaf01d"
        },
        "item": {
          "id": "ec19c4b6-4eda-43d1-81aa-13bb93b385c1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "be309cf8-1bfb-4c4e-9a98-762d2b524c2b",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "f116f3b4-0ecf-4779-91ee-2d4388a91667",
        "cursor": {
          "ref": "5c6d3628-22b5-4c60-93cd-8556c74d1def",
          "length": 55,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ef8382d8-cb49-4f34-8ea5-5379748ca7ad"
        },
        "item": {
          "id": "f116f3b4-0ecf-4779-91ee-2d4388a91667",
          "name": "identifiers"
        },
        "response": {
          "id": "4af0489e-b7fe-4d8d-b28f-6f9c5c7a3041",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ccce14-1f88-49c4-b098-2e5de30407e2",
        "cursor": {
          "ref": "69537359-53cb-472b-a10f-868910bbc4ec",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "579c33b2-90cb-42c5-8663-f366a1726419"
        },
        "item": {
          "id": "14ccce14-1f88-49c4-b098-2e5de30407e2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8f815486-ff58-4b95-8f83-d78995ef8b49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 420,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "14ccce14-1f88-49c4-b098-2e5de30407e2",
        "cursor": {
          "ref": "69537359-53cb-472b-a10f-868910bbc4ec",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "579c33b2-90cb-42c5-8663-f366a1726419"
        },
        "item": {
          "id": "14ccce14-1f88-49c4-b098-2e5de30407e2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8f815486-ff58-4b95-8f83-d78995ef8b49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 420,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "14ccce14-1f88-49c4-b098-2e5de30407e2",
        "cursor": {
          "ref": "69537359-53cb-472b-a10f-868910bbc4ec",
          "length": 55,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "579c33b2-90cb-42c5-8663-f366a1726419"
        },
        "item": {
          "id": "14ccce14-1f88-49c4-b098-2e5de30407e2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8f815486-ff58-4b95-8f83-d78995ef8b49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 420,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "896bf728-1b3d-4bef-92e2-901b8a2d826a",
        "cursor": {
          "ref": "a8078954-4839-4716-8e22-74adbbb19c5f",
          "length": 55,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "81817072-2ae9-49c3-b387-2415ced1b1c2"
        },
        "item": {
          "id": "896bf728-1b3d-4bef-92e2-901b8a2d826a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dd822970-d2cb-4127-a463-7d49942010f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "896bf728-1b3d-4bef-92e2-901b8a2d826a",
        "cursor": {
          "ref": "a8078954-4839-4716-8e22-74adbbb19c5f",
          "length": 55,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "81817072-2ae9-49c3-b387-2415ced1b1c2"
        },
        "item": {
          "id": "896bf728-1b3d-4bef-92e2-901b8a2d826a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dd822970-d2cb-4127-a463-7d49942010f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "1a972941-d2b7-4f05-a472-53bec85b40f4",
        "cursor": {
          "ref": "e1c8ba75-be34-4293-b7a3-7a0dac314fd2",
          "length": 55,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0670f36e-ce9f-4dd3-b4c0-0fdb9ced230c"
        },
        "item": {
          "id": "1a972941-d2b7-4f05-a472-53bec85b40f4",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "dca3be68-a8b6-4f6b-a358-e5b73957d771",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "1a972941-d2b7-4f05-a472-53bec85b40f4",
        "cursor": {
          "ref": "e1c8ba75-be34-4293-b7a3-7a0dac314fd2",
          "length": 55,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0670f36e-ce9f-4dd3-b4c0-0fdb9ced230c"
        },
        "item": {
          "id": "1a972941-d2b7-4f05-a472-53bec85b40f4",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "dca3be68-a8b6-4f6b-a358-e5b73957d771",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "3d95ac24-41a9-4ce0-908e-0a5ba37272ef",
        "cursor": {
          "ref": "cb441a37-f828-4203-9d16-091f25517a78",
          "length": 55,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "31b78e6b-b9a7-4c3c-977c-4d4248949fc8"
        },
        "item": {
          "id": "3d95ac24-41a9-4ce0-908e-0a5ba37272ef",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "df670e64-807c-43bf-82f7-32e59b8c65b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "3d95ac24-41a9-4ce0-908e-0a5ba37272ef",
        "cursor": {
          "ref": "cb441a37-f828-4203-9d16-091f25517a78",
          "length": 55,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "31b78e6b-b9a7-4c3c-977c-4d4248949fc8"
        },
        "item": {
          "id": "3d95ac24-41a9-4ce0-908e-0a5ba37272ef",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "df670e64-807c-43bf-82f7-32e59b8c65b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "eec64034-915c-4682-8cf5-497bf2616a3a",
        "cursor": {
          "ref": "3744cc7f-3352-419e-8cf5-ba46dc78e273",
          "length": 55,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "807861d8-24d3-46d2-9477-237bf78c8de6"
        },
        "item": {
          "id": "eec64034-915c-4682-8cf5-497bf2616a3a",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "4c7612ea-d9a6-4188-899e-2983276d8667",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "eec64034-915c-4682-8cf5-497bf2616a3a",
        "cursor": {
          "ref": "3744cc7f-3352-419e-8cf5-ba46dc78e273",
          "length": 55,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "807861d8-24d3-46d2-9477-237bf78c8de6"
        },
        "item": {
          "id": "eec64034-915c-4682-8cf5-497bf2616a3a",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "4c7612ea-d9a6-4188-899e-2983276d8667",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "0173e06b-3ebc-4369-a6fa-bf5cb3ddab34",
        "cursor": {
          "ref": "d38236c3-ad06-48d6-a9d4-f82c7b80d606",
          "length": 55,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a9fa48fe-a2af-45ec-8c2a-7f4ca654df91"
        },
        "item": {
          "id": "0173e06b-3ebc-4369-a6fa-bf5cb3ddab34",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5b763a2b-6cef-4d21-b9a9-f93395b6db0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "0173e06b-3ebc-4369-a6fa-bf5cb3ddab34",
        "cursor": {
          "ref": "d38236c3-ad06-48d6-a9d4-f82c7b80d606",
          "length": 55,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a9fa48fe-a2af-45ec-8c2a-7f4ca654df91"
        },
        "item": {
          "id": "0173e06b-3ebc-4369-a6fa-bf5cb3ddab34",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5b763a2b-6cef-4d21-b9a9-f93395b6db0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "1554e3dc-4ba7-484d-8809-c01e9c707063",
        "cursor": {
          "ref": "17461157-c754-4ad5-b87b-00128e959411",
          "length": 55,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9eb7827a-670b-48a2-9e91-87b22701688d"
        },
        "item": {
          "id": "1554e3dc-4ba7-484d-8809-c01e9c707063",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6d28fc62-1bf9-484e-a576-96b1c9b5721b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "1554e3dc-4ba7-484d-8809-c01e9c707063",
        "cursor": {
          "ref": "17461157-c754-4ad5-b87b-00128e959411",
          "length": 55,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9eb7827a-670b-48a2-9e91-87b22701688d"
        },
        "item": {
          "id": "1554e3dc-4ba7-484d-8809-c01e9c707063",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6d28fc62-1bf9-484e-a576-96b1c9b5721b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "765a6363-92ec-4a61-be11-5a1585bed112",
        "cursor": {
          "ref": "bfbfd007-e1fc-45b7-88f0-85d5a8ff00dc",
          "length": 55,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "856013c2-f8c4-4e8b-9ea2-f79cf09ab62c"
        },
        "item": {
          "id": "765a6363-92ec-4a61-be11-5a1585bed112",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "37cb6fd0-f5b5-414b-9575-e3370fc9aca6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "765a6363-92ec-4a61-be11-5a1585bed112",
        "cursor": {
          "ref": "bfbfd007-e1fc-45b7-88f0-85d5a8ff00dc",
          "length": 55,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "856013c2-f8c4-4e8b-9ea2-f79cf09ab62c"
        },
        "item": {
          "id": "765a6363-92ec-4a61-be11-5a1585bed112",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "37cb6fd0-f5b5-414b-9575-e3370fc9aca6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "4d1dbe26-d0d9-4c04-8a68-5e0346b7ee52",
        "cursor": {
          "ref": "d8e0cd12-b136-4831-b9d7-204227e7e370",
          "length": 55,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5d3861e7-b12e-43aa-a9b6-fe0b7b5e448f"
        },
        "item": {
          "id": "4d1dbe26-d0d9-4c04-8a68-5e0346b7ee52",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "13231d12-65da-4e0b-b1db-478462ab338c",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "4d1dbe26-d0d9-4c04-8a68-5e0346b7ee52",
        "cursor": {
          "ref": "d8e0cd12-b136-4831-b9d7-204227e7e370",
          "length": 55,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5d3861e7-b12e-43aa-a9b6-fe0b7b5e448f"
        },
        "item": {
          "id": "4d1dbe26-d0d9-4c04-8a68-5e0346b7ee52",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "13231d12-65da-4e0b-b1db-478462ab338c",
          "status": "Created",
          "code": 201,
          "responseTime": 73,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "4777de63-2998-42b8-8729-45657c25a33f",
        "cursor": {
          "ref": "e9ab5729-6cd7-4148-9ebc-8cc93c5e7177",
          "length": 55,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5a257688-24d0-4af2-80eb-9d3055492833"
        },
        "item": {
          "id": "4777de63-2998-42b8-8729-45657c25a33f",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "38afba6a-9c83-42a6-8654-354d664b7983",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "4777de63-2998-42b8-8729-45657c25a33f",
        "cursor": {
          "ref": "e9ab5729-6cd7-4148-9ebc-8cc93c5e7177",
          "length": 55,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5a257688-24d0-4af2-80eb-9d3055492833"
        },
        "item": {
          "id": "4777de63-2998-42b8-8729-45657c25a33f",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "38afba6a-9c83-42a6-8654-354d664b7983",
          "status": "Created",
          "code": 201,
          "responseTime": 64,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "38ba2b35-e2db-4489-8ecc-8111e264a605",
        "cursor": {
          "ref": "d149e12f-8587-41f8-88cd-331c5b1a8557",
          "length": 55,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5549525a-5487-444e-808c-e9fba3dd0641"
        },
        "item": {
          "id": "38ba2b35-e2db-4489-8ecc-8111e264a605",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "551258bc-621a-44e8-a383-46af49c699e5",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "38ba2b35-e2db-4489-8ecc-8111e264a605",
        "cursor": {
          "ref": "d149e12f-8587-41f8-88cd-331c5b1a8557",
          "length": 55,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5549525a-5487-444e-808c-e9fba3dd0641"
        },
        "item": {
          "id": "38ba2b35-e2db-4489-8ecc-8111e264a605",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "551258bc-621a-44e8-a383-46af49c699e5",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "2db651bc-75e1-4c9a-8b7c-bdd9665219c3",
        "cursor": {
          "ref": "14770117-c0bb-42ec-989b-8669eaba3728",
          "length": 55,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55d844ad-81b1-4252-9d74-2d7be25998b8"
        },
        "item": {
          "id": "2db651bc-75e1-4c9a-8b7c-bdd9665219c3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6710dd87-9fe8-42be-9e9b-64d973edc522",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2db651bc-75e1-4c9a-8b7c-bdd9665219c3",
        "cursor": {
          "ref": "14770117-c0bb-42ec-989b-8669eaba3728",
          "length": 55,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55d844ad-81b1-4252-9d74-2d7be25998b8"
        },
        "item": {
          "id": "2db651bc-75e1-4c9a-8b7c-bdd9665219c3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6710dd87-9fe8-42be-9e9b-64d973edc522",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "cef22ba2-c4e3-4e1d-800c-ef0c15ef1f98",
        "cursor": {
          "ref": "08bbc973-18c5-46b8-922c-714851fcd3c0",
          "length": 55,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "dfd15586-ad15-4328-bd74-b1fc10ca2cca"
        },
        "item": {
          "id": "cef22ba2-c4e3-4e1d-800c-ef0c15ef1f98",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "77123d5e-113d-4416-99d1-71a0ed961676",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "cef22ba2-c4e3-4e1d-800c-ef0c15ef1f98",
        "cursor": {
          "ref": "08bbc973-18c5-46b8-922c-714851fcd3c0",
          "length": 55,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "dfd15586-ad15-4328-bd74-b1fc10ca2cca"
        },
        "item": {
          "id": "cef22ba2-c4e3-4e1d-800c-ef0c15ef1f98",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "77123d5e-113d-4416-99d1-71a0ed961676",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f5d85dc0-30d0-4668-86df-6a22a850e30f",
        "cursor": {
          "ref": "f734b32e-8d03-4407-ba1f-5dce4235973b",
          "length": 55,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "08924df3-511c-476b-9226-4fcfd5cfe704"
        },
        "item": {
          "id": "f5d85dc0-30d0-4668-86df-6a22a850e30f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "672e70d2-ecf2-418e-bf22-a2bd758fbe03",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "f5d85dc0-30d0-4668-86df-6a22a850e30f",
        "cursor": {
          "ref": "f734b32e-8d03-4407-ba1f-5dce4235973b",
          "length": 55,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "08924df3-511c-476b-9226-4fcfd5cfe704"
        },
        "item": {
          "id": "f5d85dc0-30d0-4668-86df-6a22a850e30f",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "672e70d2-ecf2-418e-bf22-a2bd758fbe03",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "5b5541e0-f8af-4778-a359-f15293a39d0f",
        "cursor": {
          "ref": "a77f288d-fe5e-4aa0-ac27-71e3dbab8c2f",
          "length": 55,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c27db9ac-bd11-42be-93b1-a688a62bde57"
        },
        "item": {
          "id": "5b5541e0-f8af-4778-a359-f15293a39d0f",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "c249715b-f54a-4c3e-82c3-dac0ed752524",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5b5541e0-f8af-4778-a359-f15293a39d0f",
        "cursor": {
          "ref": "a77f288d-fe5e-4aa0-ac27-71e3dbab8c2f",
          "length": 55,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c27db9ac-bd11-42be-93b1-a688a62bde57"
        },
        "item": {
          "id": "5b5541e0-f8af-4778-a359-f15293a39d0f",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "c249715b-f54a-4c3e-82c3-dac0ed752524",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "828b5f69-5df5-49a9-bd00-cc1c7e1a439f",
        "cursor": {
          "ref": "1824e699-6c2d-49e8-a01b-f4f671181886",
          "length": 55,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4a5f16d6-8f6d-41f5-8c31-84bef322ab7d"
        },
        "item": {
          "id": "828b5f69-5df5-49a9-bd00-cc1c7e1a439f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d03e03b3-8f44-4653-8483-28f964013aeb",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "828b5f69-5df5-49a9-bd00-cc1c7e1a439f",
        "cursor": {
          "ref": "1824e699-6c2d-49e8-a01b-f4f671181886",
          "length": 55,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4a5f16d6-8f6d-41f5-8c31-84bef322ab7d"
        },
        "item": {
          "id": "828b5f69-5df5-49a9-bd00-cc1c7e1a439f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d03e03b3-8f44-4653-8483-28f964013aeb",
          "status": "Created",
          "code": 201,
          "responseTime": 74,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "7df320ab-3220-4e27-8659-945e80c9dcbf",
        "cursor": {
          "ref": "df58c0e9-b93e-43e5-87f6-083546388e63",
          "length": 55,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "67bc2de9-91e0-44d8-b6fd-6a07b45aa819"
        },
        "item": {
          "id": "7df320ab-3220-4e27-8659-945e80c9dcbf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e5dcdeb4-2275-41a5-998d-b7c7bbce686f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7df320ab-3220-4e27-8659-945e80c9dcbf",
        "cursor": {
          "ref": "df58c0e9-b93e-43e5-87f6-083546388e63",
          "length": 55,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "67bc2de9-91e0-44d8-b6fd-6a07b45aa819"
        },
        "item": {
          "id": "7df320ab-3220-4e27-8659-945e80c9dcbf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e5dcdeb4-2275-41a5-998d-b7c7bbce686f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a8e8baaf-5720-437d-b54f-2c88318865d8",
        "cursor": {
          "ref": "d35faf34-6225-4929-a2f3-ef217934264d",
          "length": 55,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0296cdf8-3d42-48d0-9bbb-2af93531a9fb"
        },
        "item": {
          "id": "a8e8baaf-5720-437d-b54f-2c88318865d8",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "b97fd62f-0c96-4bd6-b63f-72736d019284",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a8e8baaf-5720-437d-b54f-2c88318865d8",
        "cursor": {
          "ref": "d35faf34-6225-4929-a2f3-ef217934264d",
          "length": 55,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0296cdf8-3d42-48d0-9bbb-2af93531a9fb"
        },
        "item": {
          "id": "a8e8baaf-5720-437d-b54f-2c88318865d8",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "b97fd62f-0c96-4bd6-b63f-72736d019284",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1a9f5e3e-1232-4c6d-b2a2-2f6d6239d1ee",
        "cursor": {
          "ref": "ea182cb8-b588-4333-87c0-9778bdf6fb35",
          "length": 55,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "34fcb868-c7d4-4c4b-88f9-6544c75693c6"
        },
        "item": {
          "id": "1a9f5e3e-1232-4c6d-b2a2-2f6d6239d1ee",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "92e23b26-f4b4-4cfc-ab2f-aa0610a8bbf7",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1a9f5e3e-1232-4c6d-b2a2-2f6d6239d1ee",
        "cursor": {
          "ref": "ea182cb8-b588-4333-87c0-9778bdf6fb35",
          "length": 55,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "34fcb868-c7d4-4c4b-88f9-6544c75693c6"
        },
        "item": {
          "id": "1a9f5e3e-1232-4c6d-b2a2-2f6d6239d1ee",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "92e23b26-f4b4-4cfc-ab2f-aa0610a8bbf7",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3d5227b4-fcd2-43c9-b95a-0cf3c481bf15",
        "cursor": {
          "ref": "f4fa0364-7eaf-4bb9-b772-22585130471a",
          "length": 55,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "376d035f-1491-4d70-8592-d1219e505ceb"
        },
        "item": {
          "id": "3d5227b4-fcd2-43c9-b95a-0cf3c481bf15",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "de22edc4-a0fd-4031-85bb-cfb3f2174b1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "3d5227b4-fcd2-43c9-b95a-0cf3c481bf15",
        "cursor": {
          "ref": "f4fa0364-7eaf-4bb9-b772-22585130471a",
          "length": 55,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "376d035f-1491-4d70-8592-d1219e505ceb"
        },
        "item": {
          "id": "3d5227b4-fcd2-43c9-b95a-0cf3c481bf15",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "de22edc4-a0fd-4031-85bb-cfb3f2174b1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4507c7ab-d781-48ec-bfcc-dbc603fde525",
        "cursor": {
          "ref": "40da5d0a-1674-4ccc-b491-fab8069dfce5",
          "length": 55,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e5f34f62-75da-425e-8360-9a898d7409f6"
        },
        "item": {
          "id": "4507c7ab-d781-48ec-bfcc-dbc603fde525",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f734fa97-bbcb-4fdb-b594-34ed881ffc5b",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4507c7ab-d781-48ec-bfcc-dbc603fde525",
        "cursor": {
          "ref": "40da5d0a-1674-4ccc-b491-fab8069dfce5",
          "length": 55,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e5f34f62-75da-425e-8360-9a898d7409f6"
        },
        "item": {
          "id": "4507c7ab-d781-48ec-bfcc-dbc603fde525",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f734fa97-bbcb-4fdb-b594-34ed881ffc5b",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "28979231-06aa-414b-a6f1-d06e32aaf92d",
        "cursor": {
          "ref": "592e3127-04e1-4951-8bee-d4b34eb35ffa",
          "length": 55,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "15e78e74-fba8-4db5-8d59-aa8469387ec0"
        },
        "item": {
          "id": "28979231-06aa-414b-a6f1-d06e32aaf92d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "53fe6898-f750-43df-9dda-3a03fa74a90d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "28979231-06aa-414b-a6f1-d06e32aaf92d",
        "cursor": {
          "ref": "592e3127-04e1-4951-8bee-d4b34eb35ffa",
          "length": 55,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "15e78e74-fba8-4db5-8d59-aa8469387ec0"
        },
        "item": {
          "id": "28979231-06aa-414b-a6f1-d06e32aaf92d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "53fe6898-f750-43df-9dda-3a03fa74a90d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "1d0b19b1-5d5b-4de8-90b6-4dec9d620c55",
        "cursor": {
          "ref": "069c1f8e-587b-4bd5-aea1-89c01476ff24",
          "length": 55,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3c8b46bb-5f80-4adb-876a-ffb2f334bf29"
        },
        "item": {
          "id": "1d0b19b1-5d5b-4de8-90b6-4dec9d620c55",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e3d67d28-8f5b-4e87-b9b2-a22169cb29ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "1d0b19b1-5d5b-4de8-90b6-4dec9d620c55",
        "cursor": {
          "ref": "069c1f8e-587b-4bd5-aea1-89c01476ff24",
          "length": 55,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3c8b46bb-5f80-4adb-876a-ffb2f334bf29"
        },
        "item": {
          "id": "1d0b19b1-5d5b-4de8-90b6-4dec9d620c55",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e3d67d28-8f5b-4e87-b9b2-a22169cb29ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "c2ec7fe3-8794-4c4d-97b1-fabd32110e05",
        "cursor": {
          "ref": "4fcc156d-d571-4ad9-9d86-041c0e07bef2",
          "length": 55,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eeee3910-8554-43d8-8c08-b212d9b6331e"
        },
        "item": {
          "id": "c2ec7fe3-8794-4c4d-97b1-fabd32110e05",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "f367f440-f025-4343-a455-5943f16d907f",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c2ec7fe3-8794-4c4d-97b1-fabd32110e05",
        "cursor": {
          "ref": "4fcc156d-d571-4ad9-9d86-041c0e07bef2",
          "length": 55,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eeee3910-8554-43d8-8c08-b212d9b6331e"
        },
        "item": {
          "id": "c2ec7fe3-8794-4c4d-97b1-fabd32110e05",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "f367f440-f025-4343-a455-5943f16d907f",
          "status": "Created",
          "code": 201,
          "responseTime": 54,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "99f71e95-f22d-4aab-b16b-6c11240b187d",
        "cursor": {
          "ref": "ac0772e9-9bc6-40d3-bbcd-adcdb88ca26c",
          "length": 55,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8d2efb83-60bf-4efe-8267-72191c18045a"
        },
        "item": {
          "id": "99f71e95-f22d-4aab-b16b-6c11240b187d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "73b57ed0-7fa5-4201-8830-67bbc52dfea9",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "99f71e95-f22d-4aab-b16b-6c11240b187d",
        "cursor": {
          "ref": "ac0772e9-9bc6-40d3-bbcd-adcdb88ca26c",
          "length": 55,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8d2efb83-60bf-4efe-8267-72191c18045a"
        },
        "item": {
          "id": "99f71e95-f22d-4aab-b16b-6c11240b187d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "73b57ed0-7fa5-4201-8830-67bbc52dfea9",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3ef64be6-a4e0-4c15-a955-fb46d0765c64",
        "cursor": {
          "ref": "3dd98a25-501a-49e5-ab68-040f69ac153a",
          "length": 55,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f22effc8-aa14-4104-861e-4a7bc54b9a91"
        },
        "item": {
          "id": "3ef64be6-a4e0-4c15-a955-fb46d0765c64",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2c870a93-348f-4bbb-b96a-7fea82be41e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "3ef64be6-a4e0-4c15-a955-fb46d0765c64",
        "cursor": {
          "ref": "3dd98a25-501a-49e5-ab68-040f69ac153a",
          "length": 55,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f22effc8-aa14-4104-861e-4a7bc54b9a91"
        },
        "item": {
          "id": "3ef64be6-a4e0-4c15-a955-fb46d0765c64",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2c870a93-348f-4bbb-b96a-7fea82be41e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c33e50da-3185-4593-a6fc-ae9463e418e6",
        "cursor": {
          "ref": "7e358a24-0350-4ac7-9eaf-2c25ff59d34e",
          "length": 55,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c477c022-328d-432b-ad08-416857868372"
        },
        "item": {
          "id": "c33e50da-3185-4593-a6fc-ae9463e418e6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d75df080-bcbe-4b0f-b40a-55ca2b07e04f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "c33e50da-3185-4593-a6fc-ae9463e418e6",
        "cursor": {
          "ref": "7e358a24-0350-4ac7-9eaf-2c25ff59d34e",
          "length": 55,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c477c022-328d-432b-ad08-416857868372"
        },
        "item": {
          "id": "c33e50da-3185-4593-a6fc-ae9463e418e6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d75df080-bcbe-4b0f-b40a-55ca2b07e04f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "b0fb18e1-e01d-4b31-9d0f-d4d23246e47d",
        "cursor": {
          "ref": "b68f23c9-3dc0-47d2-babd-fc2034e22825",
          "length": 55,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "10202f30-4026-4f2d-aba7-04429c9f328f"
        },
        "item": {
          "id": "b0fb18e1-e01d-4b31-9d0f-d4d23246e47d",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "322f3d2b-3255-4b32-bbcd-2aba871eaeb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "b0fb18e1-e01d-4b31-9d0f-d4d23246e47d",
        "cursor": {
          "ref": "b68f23c9-3dc0-47d2-babd-fc2034e22825",
          "length": 55,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "10202f30-4026-4f2d-aba7-04429c9f328f"
        },
        "item": {
          "id": "b0fb18e1-e01d-4b31-9d0f-d4d23246e47d",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "322f3d2b-3255-4b32-bbcd-2aba871eaeb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "957e608f-f00c-402e-b749-3d8ecb4bf9c1",
        "cursor": {
          "ref": "443b68d4-e5ea-4f01-9905-fdb25959bbb5",
          "length": 55,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "411e4cc2-a407-4eae-9192-c198f185de04"
        },
        "item": {
          "id": "957e608f-f00c-402e-b749-3d8ecb4bf9c1",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "04b75e4f-df92-4f42-877d-f78f6ca9dc41",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "957e608f-f00c-402e-b749-3d8ecb4bf9c1",
        "cursor": {
          "ref": "443b68d4-e5ea-4f01-9905-fdb25959bbb5",
          "length": 55,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "411e4cc2-a407-4eae-9192-c198f185de04"
        },
        "item": {
          "id": "957e608f-f00c-402e-b749-3d8ecb4bf9c1",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "04b75e4f-df92-4f42-877d-f78f6ca9dc41",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "a28b32b1-01c7-459b-877d-884454d7a5d1",
        "cursor": {
          "ref": "2d654bd9-4806-42bd-8be8-66954e8c956e",
          "length": 55,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce434d7f-1a48-4f85-b221-c2f090dd8e61"
        },
        "item": {
          "id": "a28b32b1-01c7-459b-877d-884454d7a5d1",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "dd62bdab-1e2b-473f-8aad-fa5daaccceeb",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a28b32b1-01c7-459b-877d-884454d7a5d1",
        "cursor": {
          "ref": "2d654bd9-4806-42bd-8be8-66954e8c956e",
          "length": 55,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce434d7f-1a48-4f85-b221-c2f090dd8e61"
        },
        "item": {
          "id": "a28b32b1-01c7-459b-877d-884454d7a5d1",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "dd62bdab-1e2b-473f-8aad-fa5daaccceeb",
          "status": "Created",
          "code": 201,
          "responseTime": 67,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "b08ec395-7c95-4fab-87ee-a23ee1ca26c4",
        "cursor": {
          "ref": "60fef4c2-a89b-4d97-90b4-0a795b4743ba",
          "length": 55,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4be268b5-a549-48f9-bd90-2e296a91df08"
        },
        "item": {
          "id": "b08ec395-7c95-4fab-87ee-a23ee1ca26c4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "fb3000c6-7b81-4f76-bffd-871329c832b9",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b08ec395-7c95-4fab-87ee-a23ee1ca26c4",
        "cursor": {
          "ref": "60fef4c2-a89b-4d97-90b4-0a795b4743ba",
          "length": 55,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4be268b5-a549-48f9-bd90-2e296a91df08"
        },
        "item": {
          "id": "b08ec395-7c95-4fab-87ee-a23ee1ca26c4",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "fb3000c6-7b81-4f76-bffd-871329c832b9",
          "status": "Created",
          "code": 201,
          "responseTime": 55,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "045e6e97-c466-48ff-85b0-bb62722af886",
        "cursor": {
          "ref": "6f553425-869a-4b2a-a279-03a6b2b1d9a5",
          "length": 55,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "23f19ae3-d35d-41bc-bf3e-5a2a25cc0a89"
        },
        "item": {
          "id": "045e6e97-c466-48ff-85b0-bb62722af886",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0fcea244-1898-4887-8a19-8d9f9145d249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "045e6e97-c466-48ff-85b0-bb62722af886",
        "cursor": {
          "ref": "6f553425-869a-4b2a-a279-03a6b2b1d9a5",
          "length": 55,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "23f19ae3-d35d-41bc-bf3e-5a2a25cc0a89"
        },
        "item": {
          "id": "045e6e97-c466-48ff-85b0-bb62722af886",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0fcea244-1898-4887-8a19-8d9f9145d249",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "aa6f3eee-eb7c-4a23-b271-dfa4cf5c4c40",
        "cursor": {
          "ref": "256c00ef-bf35-4a81-a42c-1f26c0ca5236",
          "length": 55,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "12d6ed8f-69ea-4e92-9f99-03fef45d4d72"
        },
        "item": {
          "id": "aa6f3eee-eb7c-4a23-b271-dfa4cf5c4c40",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f5367f35-d8fb-4bda-80f2-4fcad6a87d86",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "aa6f3eee-eb7c-4a23-b271-dfa4cf5c4c40",
        "cursor": {
          "ref": "256c00ef-bf35-4a81-a42c-1f26c0ca5236",
          "length": 55,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "12d6ed8f-69ea-4e92-9f99-03fef45d4d72"
        },
        "item": {
          "id": "aa6f3eee-eb7c-4a23-b271-dfa4cf5c4c40",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f5367f35-d8fb-4bda-80f2-4fcad6a87d86",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "d65f5b6b-2284-4769-a629-6dcba5251f12",
        "cursor": {
          "ref": "d406d5de-a391-45a3-8049-095b2c032907",
          "length": 55,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "27d665d2-b988-4358-aeb3-cd40ce595edf"
        },
        "item": {
          "id": "d65f5b6b-2284-4769-a629-6dcba5251f12",
          "name": "credentials_issue"
        },
        "response": {
          "id": "28cd3404-53a3-4713-a1e8-176efce6b891",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65f5b6b-2284-4769-a629-6dcba5251f12",
        "cursor": {
          "ref": "d406d5de-a391-45a3-8049-095b2c032907",
          "length": 55,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "27d665d2-b988-4358-aeb3-cd40ce595edf"
        },
        "item": {
          "id": "d65f5b6b-2284-4769-a629-6dcba5251f12",
          "name": "credentials_issue"
        },
        "response": {
          "id": "28cd3404-53a3-4713-a1e8-176efce6b891",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1dc9b2-c604-4d5e-9aed-d3fd7e4be5f5",
        "cursor": {
          "ref": "c8e62736-3461-48cf-85ed-abff1af0d84d",
          "length": 55,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fb30a1ed-7d89-4ce2-82b9-f638e0150c1d"
        },
        "item": {
          "id": "da1dc9b2-c604-4d5e-9aed-d3fd7e4be5f5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7168659a-af63-4969-bc1d-3c74b2b3a00d",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "da1dc9b2-c604-4d5e-9aed-d3fd7e4be5f5",
        "cursor": {
          "ref": "c8e62736-3461-48cf-85ed-abff1af0d84d",
          "length": 55,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fb30a1ed-7d89-4ce2-82b9-f638e0150c1d"
        },
        "item": {
          "id": "da1dc9b2-c604-4d5e-9aed-d3fd7e4be5f5",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "7168659a-af63-4969-bc1d-3c74b2b3a00d",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "221032c7-c009-4173-b556-e0fb8e662463",
        "cursor": {
          "ref": "080443d4-19e3-4a63-8265-a1e722f19c12",
          "length": 55,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c220b932-0260-4bd7-97b5-a835ca1fdab5"
        },
        "item": {
          "id": "221032c7-c009-4173-b556-e0fb8e662463",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "38bf2a4f-e0db-4a00-9d75-99150fe321e5",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "221032c7-c009-4173-b556-e0fb8e662463",
        "cursor": {
          "ref": "080443d4-19e3-4a63-8265-a1e722f19c12",
          "length": 55,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c220b932-0260-4bd7-97b5-a835ca1fdab5"
        },
        "item": {
          "id": "221032c7-c009-4173-b556-e0fb8e662463",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "38bf2a4f-e0db-4a00-9d75-99150fe321e5",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac6a8c4-d634-4f4d-95ca-d2644c65b52d",
        "cursor": {
          "ref": "33b50656-dd96-4409-95c1-8c1a56f368c0",
          "length": 55,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "43453580-09db-4139-8dd2-3afdbc2e15d9"
        },
        "item": {
          "id": "3ac6a8c4-d634-4f4d-95ca-d2644c65b52d",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "3835567a-306f-438c-8a77-6d217dcb41c5",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3ac6a8c4-d634-4f4d-95ca-d2644c65b52d",
        "cursor": {
          "ref": "33b50656-dd96-4409-95c1-8c1a56f368c0",
          "length": 55,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "43453580-09db-4139-8dd2-3afdbc2e15d9"
        },
        "item": {
          "id": "3ac6a8c4-d634-4f4d-95ca-d2644c65b52d",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "3835567a-306f-438c-8a77-6d217dcb41c5",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b01debce-94b5-4183-afc6-42ca40292486",
        "cursor": {
          "ref": "259f1715-a871-4c12-829f-a52424c0f965",
          "length": 55,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2c3f4438-b0c8-45ae-927c-0f1e62de0684"
        },
        "item": {
          "id": "b01debce-94b5-4183-afc6-42ca40292486",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "905b62f8-a4f3-426a-9512-fda16c04c3cc",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01debce-94b5-4183-afc6-42ca40292486",
        "cursor": {
          "ref": "259f1715-a871-4c12-829f-a52424c0f965",
          "length": 55,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2c3f4438-b0c8-45ae-927c-0f1e62de0684"
        },
        "item": {
          "id": "b01debce-94b5-4183-afc6-42ca40292486",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "905b62f8-a4f3-426a-9512-fda16c04c3cc",
          "status": "Created",
          "code": 201,
          "responseTime": 97,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6523ea53-1923-4bec-8f76-8b113776f2e2",
        "cursor": {
          "ref": "222e7abf-fa4d-4c4a-a0eb-521fff3fb6af",
          "length": 55,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "433a824d-1d8c-4eb6-9b8b-7154cf685cf8"
        },
        "item": {
          "id": "6523ea53-1923-4bec-8f76-8b113776f2e2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6a305442-0430-4272-ad57-e1b0bf4a87a1",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6523ea53-1923-4bec-8f76-8b113776f2e2",
        "cursor": {
          "ref": "222e7abf-fa4d-4c4a-a0eb-521fff3fb6af",
          "length": 55,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "433a824d-1d8c-4eb6-9b8b-7154cf685cf8"
        },
        "item": {
          "id": "6523ea53-1923-4bec-8f76-8b113776f2e2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6a305442-0430-4272-ad57-e1b0bf4a87a1",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0794668b-fded-41b8-abc9-2bc23f62edfd",
        "cursor": {
          "ref": "1110b48d-d9a7-47a6-9c25-52be5e3775e6",
          "length": 55,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "98930bd0-99d4-4cbc-a13a-3b7cb8209eae"
        },
        "item": {
          "id": "0794668b-fded-41b8-abc9-2bc23f62edfd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d1e7d933-d6f4-4116-8680-26e7eaa69f00",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0794668b-fded-41b8-abc9-2bc23f62edfd",
        "cursor": {
          "ref": "1110b48d-d9a7-47a6-9c25-52be5e3775e6",
          "length": 55,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "98930bd0-99d4-4cbc-a13a-3b7cb8209eae"
        },
        "item": {
          "id": "0794668b-fded-41b8-abc9-2bc23f62edfd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d1e7d933-d6f4-4116-8680-26e7eaa69f00",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e5b25f6c-c5b2-4ae9-a5a8-04fb90b3fa49",
        "cursor": {
          "ref": "7abe72e8-53a3-4529-9b36-8ed46cd3b73e",
          "length": 55,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "af3fc776-b973-49d0-b9d7-51a11262c436"
        },
        "item": {
          "id": "e5b25f6c-c5b2-4ae9-a5a8-04fb90b3fa49",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "111602b4-c5d1-4bf7-b3c0-318f4b5b600a",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e5b25f6c-c5b2-4ae9-a5a8-04fb90b3fa49",
        "cursor": {
          "ref": "7abe72e8-53a3-4529-9b36-8ed46cd3b73e",
          "length": 55,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "af3fc776-b973-49d0-b9d7-51a11262c436"
        },
        "item": {
          "id": "e5b25f6c-c5b2-4ae9-a5a8-04fb90b3fa49",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "111602b4-c5d1-4bf7-b3c0-318f4b5b600a",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c9a1701d-1e12-4e50-ab8b-d0ae91aa6b7b",
        "cursor": {
          "ref": "d60d7c39-a462-4567-9402-7b88365bf8e1",
          "length": 55,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "797a0791-41b1-482a-837b-ffb5971aa0f0"
        },
        "item": {
          "id": "c9a1701d-1e12-4e50-ab8b-d0ae91aa6b7b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "45d185b6-88ae-4609-8269-2f634c51a2be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c9a1701d-1e12-4e50-ab8b-d0ae91aa6b7b",
        "cursor": {
          "ref": "d60d7c39-a462-4567-9402-7b88365bf8e1",
          "length": 55,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "797a0791-41b1-482a-837b-ffb5971aa0f0"
        },
        "item": {
          "id": "c9a1701d-1e12-4e50-ab8b-d0ae91aa6b7b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "45d185b6-88ae-4609-8269-2f634c51a2be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5e0e9c34-aaf1-4c93-9c51-8d2744e25433",
        "cursor": {
          "ref": "7f3644ee-2a5f-4181-9e8f-9db234fb9afd",
          "length": 55,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a0db1ed3-1044-459b-a858-326074cd072f"
        },
        "item": {
          "id": "5e0e9c34-aaf1-4c93-9c51-8d2744e25433",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "fa80fb77-fa9a-4a1b-b46f-2e1d87a1ce71",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 32,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7b378875-8d6d-4ee8-9386-6152db019ad2",
        "cursor": {
          "ref": "bb3abe13-a444-497d-a822-38226a5c89ca",
          "length": 55,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0f8d09d2-4ac9-4317-98c2-14a36fc9fa43"
        },
        "item": {
          "id": "7b378875-8d6d-4ee8-9386-6152db019ad2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0a80aea8-e808-423d-bd70-47af46a0f192",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7b378875-8d6d-4ee8-9386-6152db019ad2",
        "cursor": {
          "ref": "bb3abe13-a444-497d-a822-38226a5c89ca",
          "length": 55,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0f8d09d2-4ac9-4317-98c2-14a36fc9fa43"
        },
        "item": {
          "id": "7b378875-8d6d-4ee8-9386-6152db019ad2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0a80aea8-e808-423d-bd70-47af46a0f192",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6f01d37d-0e45-4ffc-8587-3942b9e6ea49",
        "cursor": {
          "ref": "7ddef5bb-20df-4794-902e-048bdf20688c",
          "length": 55,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a083e721-e8de-4883-8d91-504d4566d5be"
        },
        "item": {
          "id": "6f01d37d-0e45-4ffc-8587-3942b9e6ea49",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "46a35449-a2a5-49d3-9002-446846c77d0e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "36ae0ebe-e6d0-4d0e-b959-b853ec9ad844",
        "cursor": {
          "ref": "9deb9dbf-03f4-4d0b-a315-69dc07ad2ca7",
          "length": 55,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cd92e3c7-9a90-46b2-b4d3-cb1f8d1ec815"
        },
        "item": {
          "id": "36ae0ebe-e6d0-4d0e-b959-b853ec9ad844",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b5647d9b-bbd2-4f5e-847c-d0f61eb67554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "36ae0ebe-e6d0-4d0e-b959-b853ec9ad844",
        "cursor": {
          "ref": "9deb9dbf-03f4-4d0b-a315-69dc07ad2ca7",
          "length": 55,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cd92e3c7-9a90-46b2-b4d3-cb1f8d1ec815"
        },
        "item": {
          "id": "36ae0ebe-e6d0-4d0e-b959-b853ec9ad844",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b5647d9b-bbd2-4f5e-847c-d0f61eb67554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1592064d-29e7-4678-994c-0a0d6257845f",
        "cursor": {
          "ref": "a6f9ddd7-de4c-4a30-a23b-614a020fdbf1",
          "length": 55,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3ec72d10-1956-4f3f-b15e-e0e26a1ac002"
        },
        "item": {
          "id": "1592064d-29e7-4678-994c-0a0d6257845f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "25b49cbe-b62a-4179-8bcc-8199119d5ce0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5742fdfd-ca70-4b0b-b20f-ae2627b95579",
        "cursor": {
          "ref": "96880021-1ae2-4cf9-b9e1-093d9ab8d104",
          "length": 55,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cc22a1fb-3939-4dd9-b20e-0d8dd7bb940f"
        },
        "item": {
          "id": "5742fdfd-ca70-4b0b-b20f-ae2627b95579",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f7c14d93-5351-42db-9842-d9fe134efa84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5742fdfd-ca70-4b0b-b20f-ae2627b95579",
        "cursor": {
          "ref": "96880021-1ae2-4cf9-b9e1-093d9ab8d104",
          "length": 55,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cc22a1fb-3939-4dd9-b20e-0d8dd7bb940f"
        },
        "item": {
          "id": "5742fdfd-ca70-4b0b-b20f-ae2627b95579",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f7c14d93-5351-42db-9842-d9fe134efa84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "08d5304e-4baf-41fb-80b8-789e36126ed7",
        "cursor": {
          "ref": "a8f9eeb1-397d-4504-a730-aa234b58533e",
          "length": 55,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ae1e7f5d-afc6-42f2-8ba4-9cf855045ada"
        },
        "item": {
          "id": "08d5304e-4baf-41fb-80b8-789e36126ed7",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "55faf6ca-86ba-4c20-b67c-4add185cebac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "6682158b-200b-4f68-bcd9-e3fe2a7dfa72",
        "cursor": {
          "ref": "91c31831-f922-4869-a969-b577690278b0",
          "length": 55,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d539c7e6-c625-4f0b-a257-3130bb4f59ff"
        },
        "item": {
          "id": "6682158b-200b-4f68-bcd9-e3fe2a7dfa72",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fcffb486-07a8-46bb-8e6c-3b4010a18f8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "6682158b-200b-4f68-bcd9-e3fe2a7dfa72",
        "cursor": {
          "ref": "91c31831-f922-4869-a969-b577690278b0",
          "length": 55,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d539c7e6-c625-4f0b-a257-3130bb4f59ff"
        },
        "item": {
          "id": "6682158b-200b-4f68-bcd9-e3fe2a7dfa72",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fcffb486-07a8-46bb-8e6c-3b4010a18f8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "cc8ff43d-202b-4411-8c72-e73a0f571794",
        "cursor": {
          "ref": "9f6908c4-0963-4e0c-8207-d069e34d41aa",
          "length": 55,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "91889ae8-022a-44d1-90aa-5dbdfa27a8e1"
        },
        "item": {
          "id": "cc8ff43d-202b-4411-8c72-e73a0f571794",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "608f2829-a8fa-4cfd-9c49-e3d03f4c26dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      }
    ]
  }
}