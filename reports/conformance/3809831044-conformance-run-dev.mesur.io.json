{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "724457e7-7648-442d-84b6-8b6b6f8583fd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "aba52b3f-8d7a-4605-b4fd-333b2899fcc3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29c252d8-7235-420f-a72f-2fc487c9aadb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "418d44ad-db54-42a0-8f64-a4127c9b6b12"
                }
              }
            ]
          },
          {
            "id": "7356cf7f-9f35-4bfc-951b-5a819652c68b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "328649cf-5963-48e4-b727-b97406f53248",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a788bc21-21d7-4016-ad78-4ef39cb2866d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "11eed293-6415-4b36-8ab5-663ddf4f35da",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f7ea6599-b67c-4ec4-8ba7-52ffb6d1291a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51a24e17-5a4d-4b1e-8775-664fb19e244e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1911454-50af-45c9-9eb0-33c02f2cae4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e7b00f8-eb33-4688-9314-da76c577aea0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "57ff866e-5ffe-4984-863b-65e31e0786eb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c7e2ab0e-e07d-4964-85b9-8501a32c96ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "20592b1e-d124-4100-aa3d-aee5a90d9b38",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ade44ed-c1ae-4912-915d-5a4fa075ff43"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e56d89f-4863-4867-919f-d6493dc4be8c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "75327d52-2dde-4390-aed0-e64c9d9ad4a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "403ceb7c-cdae-4000-b77c-078ebc742507",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1385fad5-c071-458b-bbb9-3eb7c44ba383"
            }
          }
        ]
      },
      {
        "id": "d40e8850-639c-4525-8588-21ca3f9a1440",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6531b92e-eaab-417b-8098-507ae9e098a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4a57b34-708d-42d8-ba1a-da7f1ec4e1b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "27956c82-138d-42a6-a4a4-06dec7fdff0c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0696c41c-c017-4cf3-99e0-18f5ecb69c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcd2702d-7055-4a85-ae21-48cf0e0060d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcfead8-3637-47d1-9876-f7f44a49a38b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8e0af4-4458-4fd3-87c1-d9d693c30843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf043be9-c01d-41b7-a37e-57a6d860ecf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7541017-5842-41c2-9074-cdbbe87c0147",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d82005-5548-4308-a13e-4eb0bb8ac168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c599168b-7c96-4273-9568-8062a13e5ff1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f24a2686-fb3b-4a74-b41d-6234ff6a5064",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d403616e-52b4-4209-a9a2-bd73199a3ba2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5fe6e0-c3d4-4370-b503-e551ff2219b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba947c18-8ae3-48dd-baba-179f800d8d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70550435-1ed1-491f-accb-a92ca32e2c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2c2215-0561-4205-a06e-7895c3f0d06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e1e288-2918-4771-95e7-b0854d0ef93e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8161e2b8-aaf2-471f-88a9-c72ac628488f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bc98451-9c44-46d2-9794-b9c7d5e9da2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e877d4b5-4d27-450f-8868-c86cc38384ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7bd93308-cf24-49ca-bcb7-24aed8e08897"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "62c2d9dd-a2a0-47cd-8916-ccc2e3e5d3d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cdab058f-49ce-4e77-a809-d7ff4870d713",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "662218c4-ebe9-4285-887b-71b6ab4d4a3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6bab2932-c36e-4922-a72c-02d1df69d1ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adf15205-cb5e-4983-9caa-43f0ffb44bad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "9c26f7ba-b4ee-4206-a0e3-15825cb41012"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d85302f8-55d2-4379-b9fc-8d243406a21e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4116672d-dbb7-4807-ab01-15f3cbbde610"
            }
          }
        ]
      },
      {
        "id": "66b3674d-ced9-4b91-bd60-953898bb726c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fbca5430-c93f-427a-8b8b-c6c8b27717ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee8098c7-c299-4c5d-8d9e-b89470421285",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "44e37628-95f5-452f-92ae-6c0b514c84f6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35833fee-40d6-4fd9-8623-a63104796d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4105c015-ebd7-40a4-aeeb-9bdcfe4438b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08fbef6-d2ec-495c-8ea8-b3886bc88c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "883499bd-53c5-4bfb-9008-f36514ee14ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21caa77e-4274-4213-aefb-321380699c3e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36856fe6-1f0c-49a9-801c-3296cbd57bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "addebbf0-7367-4297-bbbe-c30139425a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14c6b91-c97e-4c82-90a5-67c10dc5f20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad946a3f-e9fd-4c68-9d63-e2d4d07db6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c2c6af-8337-4a73-9473-1087f942198f",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc841c6-a702-48b9-be5c-4527064fd7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a913634-1f9f-4ab9-920c-1a4bcb3f5f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1aeea97-6251-46bd-94e7-5e44d4266511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ecd1eaf-0be3-41b2-bf96-4a7527a2a2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffce5487-a0b1-4899-8624-0d0c096b9c24",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14984e4-9c3a-41b1-a8f0-b2c82667cc23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022758e0-ba31-4f6d-9bc8-fe86cdec9faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86db2d8a-7b45-4397-b602-6d5756f11d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3b084fd-96cd-40c2-80cb-0a86fbde1bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e645ac-16ee-41e2-ba32-ab35b6a17545",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13a5a2e-5089-4c6d-b080-c0852a7c72ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90dfe8bb-5466-4332-b306-6ab2573c71ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bb1767-9860-4935-974e-d690663782d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8af749e-4700-40f8-9744-385f5d0c9153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7699ed9a-a891-49cf-83cb-69b8d0b96bb9",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b391d9d7-247c-497c-8d0a-c3c04acd68ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1cd5d1-17ec-4f37-bd33-88eba09afda3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d286bb5-6138-417d-b193-84993af01eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "355f231f-6cad-4546-aa3c-a1b81a3c0242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116f0bcb-3cd7-485e-9ab9-25fca65d8326",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8f83e5-7c85-4690-ba8d-5278f5c9b11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022343ed-68a2-4133-a61c-8b0331e03d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe56062-aec0-45fb-81a4-ffbaa51e396d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6005f2cd-a88b-4fa3-9fed-48f52ae24e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea5b1f7-4219-4560-9695-8fa84cb1a4cd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75f165e-b57a-4d6d-a50c-bc620382be69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cbb331-5283-43b5-a376-850ac2d6c452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da502a4-fd72-440a-b92c-4da8600e9a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dded960e-fb74-42e2-9f67-9af659059cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d09509b-f0ad-42a3-af90-3168964e6046",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6b11c8-c927-448e-9853-76ecf17bef64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a29e0e-3b4c-421b-a07b-4f2aeb3f143a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2a69a0-84b9-4c66-b86f-93ce94823ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2faec94a-f015-4088-8e97-2a14f6ead0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480c044e-bb3d-4448-b6de-05fb800b2832",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a537d0d4-e3a3-4370-ab66-2e48f79bacc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa80c32-7f6e-4adc-b47f-53f1f5e2df86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f19a2c-7535-41a4-987b-aae38b55420e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94ea4b7e-4711-4822-b6c2-a814fbbea79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75aa66c0-8b00-4c21-b4d1-3224eeb1ff96",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e03e6f0-025a-4856-ad18-8cce014ce532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07009828-40ee-4a02-b350-30187e6e1229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa906681-1654-49ea-9c65-8a85d3c4d927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b9186ef-005c-4d7f-b61d-0a8b4862af1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b249a8-8171-410e-937c-6c64a37000a1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0382a685-7f89-40ab-a480-8cb56fd33575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b0ea55-92c4-46d4-894c-53831475d4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d3cc40-5b70-4d33-a5d9-d623fbe0783a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae0b99b3-0125-4e4d-a9d6-0d950409055b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8395cca8-e48f-4cce-867f-305f2f1d4683",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345c8827-e5d5-4ed0-9929-a35e1f492c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bdb0e0-e8c5-4061-b7f5-47a09a8b0651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad69191f-58bf-4e5a-bdff-66edc4a57c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b85c0715-e506-4631-a210-479160cd97b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f796800-8eda-40dc-a7af-bf8fba2337d4",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5628565c-f7c8-4bb5-8a7e-f19a3cb14960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f605e253-9e69-4566-9128-6a44a85dfd9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5c5e2c-613a-443d-b93f-9718459ee063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "88f47147-97a4-4ccf-a68e-a1b1add63b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec395a8-ed93-4762-afe1-50fe0ca04f2e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2aab0ba-af5c-44a9-9137-c7e397e52017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cbc967-732b-46af-8c29-aefdca41b8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af710aac-5d67-4fcc-adf6-22235cfb25aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcd1855a-a7a1-487a-bd29-0c132f131766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66611120-776d-4d15-ad2e-080406da87dd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a845cc87-8a8b-47d3-bf34-d9e72818222c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5077cd52-b9af-444a-b68e-0864b61546b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c28119-f35a-4b67-9bd1-18e27766eff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "add85c98-5f19-4e29-bc09-cf06acba35f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ac7de6-a2ef-4d5d-a796-68eae42f983e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba4b6a8-2de4-4280-96aa-973a8fe6c814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf011c8-15e4-40b9-bb2c-d09174f6abd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf5294a-92ef-4c9c-a2b6-af2449711fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beab1cad-9409-4a1c-af98-ec4e85fe36bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d362ec9-aafc-4186-b8f1-7e05dc58fb47",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ef99d0-8ab5-4b01-a8a2-4279f24a6936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1a93f2-99a5-4586-85bf-d8e7f6ba41f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78ec735-25f4-470b-b08c-0a79275df4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46adf599-5bd5-4dfd-98c8-3ffd6b08caee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c344e5-00f0-4ffe-b25d-225e7b3e4dd5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df257d1-7180-4afb-8edc-eb05e9bcf56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02980e30-d62f-427c-a1c0-fca8643f81eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc314c93-3c31-464b-b5b7-e3f39a3d9292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6362202-0619-41b7-9a44-9afde323c877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779c15b5-7362-447b-85a2-090d1c2078eb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b12570b-c0e3-4a81-ab98-b42ae6bdef15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9843e57-ca2e-4ec9-8460-6f5a2e1fd1fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a32f37-2b7d-41eb-80a5-d3c86c25c18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b2cc4e-f273-438d-8682-6f4dc079fbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f022dd87-5bae-4eeb-a1fa-f0aedf756e6a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1ba14b-aaf9-423c-b411-9aada765031f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df4b3b2-d437-4bad-8622-5b8d6f63ab84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d443ac-44f0-4004-8198-801d690c96fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "061f0948-1290-4c59-81cc-c4fae2c4061b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fc2677-777b-4839-842b-3ef157608896",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f56d65-93c3-47d1-889a-cce697a4f98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099f8ba5-c55b-4f2f-997a-3244a3c3140f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330c0475-96c6-4ca5-b4a1-fa1083df3936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9381e6d-a92b-4d10-858f-2d4e203b94aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96e24ce-4435-4ee0-90f6-9d37b5e33fce",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95164d4-ff5b-48c3-bd04-85a41826db81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0b9bb4-bab0-4578-b1e6-4f51bf18801b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8787b7ec-8bdc-4646-a493-33fe53099ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a154128e-eb14-4a2d-aad5-f6130d965c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be376de-1aa4-4ae4-9f68-5b1e93824ad0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed35b7b4-7f6d-41a4-8ba8-1104b13f4bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faafcea7-1245-474d-951a-935d39289381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d688c384-03ce-496d-abd9-b8ac916b3b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d74fc796-ae7c-49c7-8d17-e39581a29949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a016b3-c3e7-4753-ac27-3b4acfa668ca",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60be71ca-217c-4f95-a624-bbff4ae0a4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bf9113-1efc-4f75-af05-aab95aeda171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68a5347-1e8a-4466-afc2-cba11d1e30d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d48a4e-116a-443f-baea-4915ab2f8387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bfc80e-27d5-46b4-9ab4-66595d1f623f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fe6905-71cf-452d-aa9e-513ef0e2cb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe75cd76-af3d-4955-b901-55d71ff8bf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b6085c-5d9c-45af-a058-c0dfe8df85e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5344a77-ccf6-4817-bcda-0eefc679fb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6194a573-1004-4bf6-a635-d109f4971956",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e66f46-6947-4fe1-8060-3eeefb1bb839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e44c80-3e9a-4ea3-901e-acd2489a3d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c63c42-750f-4156-8fce-66180b163948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb5bb67-ce97-4842-b930-5feec2893a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74013224-1031-4740-bb7f-bff7a9760d3a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efe6b00-1713-408b-baac-35044b51cb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8c29f0-f787-4cec-8d5a-69dedee8f213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecc36a5-5184-4dd4-915a-48921074b73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96030e70-3983-4dba-a752-e300cfa96f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a9fb9a-da99-443f-ab61-8df0a64a7935",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba98bef5-b4e9-49cd-941b-959a421b8abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96f60d7-44fc-4538-aa46-f581e926d59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15809f1-e38d-4798-a3bf-aa906e4d29ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace222d5-58c8-43f5-bf5f-b77a8761c901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5535b20a-7111-41a3-b5c0-fd191930594f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495b2227-81bb-4252-8f3a-b1f110627627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858ff6da-0955-4a13-bdb4-6d3c3545f4fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd645b0-d156-407a-a91d-87d03c5f3b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "117491ee-2174-4001-a9d2-5cca6c6b89c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af84a6c-887f-4bcc-843a-eb835d82f65c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a0b37d-7d68-4f93-ae93-8859671b34fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814b8c2c-d067-4e98-b70c-ec816144958b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337de6f2-2c36-44d2-b4fb-c93e83fa7bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "506431d3-4f75-418c-ab2d-3e5407958b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fbbaa2-1a2f-4638-952e-78f86173fcd1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b02d15-4ecd-49d5-8ec7-c9412cf49359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff01fc8-bfa2-4f30-95b3-5309bf086598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7b2d1f-0472-446e-8bd0-15931d58c20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b67ab639-d8b5-4551-9fec-9f077d417945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81c1f32-4531-4855-9c01-4cfff8c842a2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0179d0b3-cb95-407d-8a38-36b07d59ccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3926fd-69ac-4f7e-9000-c11b6ad3eed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31032a6f-ff7f-4d44-92f9-24fb30c66231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f582598-ef00-4d53-a4ae-6a3ab3e44e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb64c74f-9d72-4798-887f-669521c03e66",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2ef8b0-02d8-41e4-8368-febdcedcd2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5a00a3-9560-4d97-9baf-0197b7b567a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f8b012-c53b-49e9-b0b3-bf0b62c237f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1f3053-64d0-4594-9a4a-6b8f016ec087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0d5bba-c144-4b9f-afc1-8916de222535",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676afde8-dd57-4c50-aff1-00615fee9ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b62073-620c-448b-8dc9-534f3ad41aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf391c27-c2bb-46dd-aedb-7e35b68a50df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3748acf6-bc69-4922-8b14-5b85039c7a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d13953e-165b-46e5-82fb-f826766048a6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17bc6ad-3c7e-4742-9faf-6715b3baa387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca3492a-076c-474a-9b40-9dc8bb94c172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f62d73b-dad3-4876-8795-65bfe1def441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc462ef9-8d4f-4bf0-9413-5ada94e38cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d1c9df-9282-4d4c-be93-5679f7ec3f17",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8abcaa-c7f7-486c-89ff-224e7dd475de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20885f34-0c6c-4a8f-aafb-342171637e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c966173d-7e9c-46c6-b789-e432a45300de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "022d9fdb-101c-49a8-b5d7-120c2fb5e89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32146012-1862-44c4-8f18-941b22679bae",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb5c03a-4f32-4e83-9a50-f122de38df43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a81d6031-ce13-4a02-a8e0-4f6347c67173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3268e6a5-d86c-44d6-a113-cba34d4921ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdff7c33-2f0a-4b3b-9d2b-ab95465d7a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51c75ac-fa91-4303-a1f7-3bcb598a00a4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be7da4e-ee3a-4b6b-8aea-842341265249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0073efb4-332f-405e-be5c-d6a56c2854f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78829a2d-1c10-4908-a6bb-fa433f1faef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9d9c8c-9f5a-40bc-8207-127f9c687f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352cb87f-5dee-4d2c-a464-3f03c8caa2a7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bd620f-74da-414c-ae98-5ed5e76b270f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271e8be2-f8ea-423e-b0e5-0b531f6794c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2092c2b6-c09e-4bd6-a004-49274b598372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "27fc1512-cb4a-408d-b53b-629cb29d1bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677e72d3-cd60-4a51-b959-92caa1ae104a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830bd496-2a22-40ed-abc9-d81b717a514e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1511192-b167-4ae2-ad69-f4802162bf7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951ccd8e-5601-4495-9575-b05e27e284ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa45981-a54a-44fe-8af2-00d52d1e6f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583b8ed4-47c1-42a4-b883-eec3ea407a96",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509437ef-c4fa-45e0-9fce-f8437d54549f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a30e788-e7f2-430f-a626-45ddb1b7a620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95709f4-3377-4b99-aa6f-1f13b14851c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a77d960-b1c5-42d6-b6f1-246b76a3bfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba926601-fcc8-4763-a1a6-36df20db5e70",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0467d37-5e1c-496f-8d6e-23c18563ff03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e1a833-c445-486e-8c02-ccefd2a39f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0975c2-328a-4a2b-b1a5-fd4628fea6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "117b022e-0931-414b-a299-6e799990ff1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c83f83-acb1-464d-817c-0e69bbe41d6d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3d7b32-1564-44de-9a85-e42830647e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c3ccbc-2d8e-4591-97ba-781b333d7503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dbbcab-3fb9-4e09-8bbb-1b9641af6deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "07e041a5-198c-431a-b001-7bac6bdc448d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a957d2ee-6070-4790-b81b-c5870fee0639",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78de94ad-3424-4ea4-8bcd-ea43ced828f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956f3cc7-0908-4027-bffa-bc806cc7381c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2937b8-d2a6-46b7-bb07-c57d97130719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "622d59c8-6ace-4a8a-977d-2da1c2b74a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8984dd6d-de5d-4269-8d80-0a8ec42bbb11",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7271124a-013b-4413-bde3-f0783af37e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfc0f3b-abfe-4949-809a-ff8b0fc244fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e141d8f-abd3-43bc-8cb4-9d2b6ca7354e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a901036c-cec9-4139-ba69-d9033cec0f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7e6c62-c957-4e29-b1a9-5a6bad111179",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178ed86d-32d3-4199-b9a3-96dd6e3ff2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f4bbd2-58ce-4aac-93bb-70165ea928f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2af685a-9164-4e7c-838d-083684482b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f0e1fd-dac6-46cd-b350-1d6da4b1ed45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff312f1c-b4f3-41bb-b5d0-0dabc92822ec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bb8898-706c-44b6-9648-70ad03e7370b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0deff110-1627-4707-9304-d740eba31694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aad5811-9e52-4734-9156-1b3a343d7b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e35517ea-2275-4d6a-89d6-b12e6f6bc798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18aff711-aa98-4f75-9b51-19c90b6f0c13",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3541432f-e412-4b84-9b08-52a6cd554e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2633adb7-e8a5-4ab6-88da-00441afe1368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d4faa2-093c-4bb2-9479-7dca53b36b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32bcc24b-dba4-4953-975d-10a3a6e9a17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4bbbc3-0057-4090-aaef-610a84a6161f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810623ac-b164-47d7-aec7-f9268c307bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279805bb-2db6-451e-a8f8-44dc55054e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd12a8cf-19aa-4e81-ab72-83c714d1f40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28687678-232b-4720-8626-097f9176476d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31adff51-627a-468e-99e4-1e3490c70517",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45055bb6-821b-4907-94ec-aa524a7f837a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754c5cb9-16bd-45af-8286-3f8e6ae21518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a8e36c-e309-4499-8c87-7090c48f1914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69268f07-3107-4d54-bcfa-65ddf957fea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3509a3ab-8184-4d41-a5b9-8cdeb4ab7f2f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a5a577-b656-45fa-9eef-94b5b3bba51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18af7383-08ce-4e90-acb7-dc44eca739b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2575ec92-a1fa-4e45-8ab8-5ea3a07c397b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df1bf44f-584f-4701-9ab3-497474eb0e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eece2327-8979-4fd0-b3ee-314a1ea5e8dc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21632f2-e7fc-45bc-8a1f-8eb6a1bd7520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f1297e-484a-44fe-a7f6-0f0c5a9a4fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855162ff-5b07-4997-820e-519d1ab33efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "34cbbedb-7c07-4fe7-ac05-0fb62548d6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e5d116-8938-410e-b850-3b15f50e53c4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7bbae9-8014-4d98-8b8d-e52c4e1b6107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b5f5cc-43a2-4a31-b70b-d099dad148f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbb21a5-3b3f-46f4-99ed-bbe77641e246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "197e4c90-6920-40aa-844a-7931be5fee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555a611e-9f61-4821-bc83-8df327f006c7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066c281d-c18a-4fab-ba4c-9e3a00014b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412e3167-7874-4f5b-a11a-f23b83d6e3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4612e9f9-a4da-4fc1-9b3b-4e04b8e9d67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc82c684-5c1c-4d40-a111-05644f41b985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6dfec6d-995e-423a-939b-78c99cf93b51",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9fc65d-fc84-49ff-b23f-37b71e19fd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a0b940-7cfe-439a-a74e-72849ee3eac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f87ecf-f537-41d5-abb9-15070517947e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2a3a2e-946c-4309-bbd7-a453a1595fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7502f3-3c66-4651-af23-bf4b03c1f22a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e5df40-5b6b-4f9d-95ab-7c7632eebf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6c0ea9-dd48-4bb6-894f-b0b338cc3777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611434db-75cc-44a0-b738-9a3f86546693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4dec0c-6f2c-4c9e-951f-5194f802b208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90fe2f0-4730-4d79-8aa1-dff9f0dd773c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868a074e-11b7-452f-8713-52a6ddbac495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac04ae5-9195-4954-b9a7-d36df0fc99d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a188e3-953e-4aff-ae13-7fa2a2eb0b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb44d80-c94d-4914-8568-09dc413d2609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01351235-5c80-40f3-9de6-2e2912cd61ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2131f0-887b-4415-a049-46ef0e4ff958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b88dbcb-d522-4441-a81e-380d9f54d342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d94283-2545-4187-befa-5f0727af364b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "99260944-29fc-42d0-87cb-f5c0b148676c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bd9cfa-188a-4281-9d90-7697cb174b09",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74413c81-c94b-45b8-b7ee-53eaf8c26629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4fc409-79ca-453e-ba33-ffc84f70b1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1eb0cf2-e658-4b96-aada-b21685208432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "763e8975-2ebd-4a91-801b-2768d2682fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa8ac9a-8508-490d-81a4-1decc68be699",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcea8720-01a9-44ca-83d5-0dbf0b794f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802fe8c2-0a2e-4784-b7f0-a062eddc0a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187882b6-c561-4b18-a9e8-e8db38b17f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "93601871-d7cd-4c67-8951-1f79678bfc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6360fda6-d130-4418-a824-4a8d942c8223",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d359afa3-3784-47dc-a257-192b57c440b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bf8298-e4f7-4c90-b830-9a4209e641f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33a6d90-2e95-4b60-8ff7-defc44873d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "06f49776-1ed1-4128-a143-4c561b543de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f75aec-30b9-4012-a445-ac946c8757c8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bdcf69-0b89-459f-b1e5-aae6181d925d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c89e7f6-93a0-4165-80e1-31adc5ff5635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464f3f89-2d0e-484c-8fda-010da726c122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "caf6801a-7803-440c-9205-2dd050076919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab344c52-8acd-45f8-aa9e-b91a87ff502f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be91c7d-aa27-474e-b32e-f3777ad06142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf5d4be-67fc-4b1d-9d47-d05bc077b6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17f4036-a27e-4ab5-9348-797644b08acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "98b835bd-55f6-4066-82df-292b56b61093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f78701-69f4-41ad-850e-891340569412",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89af9944-2d4a-4fe6-ad2a-dd84fd61f62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f867bac0-7843-4360-abc4-07998de76f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe28cc4-7f3b-4a36-8c29-7310ec427e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a87664-1fd8-431c-8982-88611d510ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123824e4-237d-45c0-b032-4881c8134b57",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69e7521-1266-4207-bc5e-fea74a0e0fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ea3275-9778-40ba-87d2-476e0eaf47bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58147451-ff60-4966-9bc2-99f4b8164341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ddac2ac-7ff7-4405-9d28-0d7009b2731c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7718a7-0337-4e71-8a42-42f961faafd2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee53197f-863f-499a-bde1-595fdfa5cfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73097631-fb39-47f3-a32d-8caac7d016cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8544d8-eed9-4f77-828e-f9b833e7975b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb7372d-30d5-4b27-a7ca-683e95d9a3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c99e100-dc34-4bc9-b15c-ed9f288bd9ab",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922b00de-b225-4827-bb7a-42b1f9128cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f95c867-b799-4740-b386-e38bdcb968e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0485fd21-163b-47fe-9209-cdb1a96e02b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63bcb44e-704e-4c84-a472-34bd5f583d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0742b0-da6f-4f0a-9a4c-f01bdccbd781",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58325fbb-4d6d-4851-ac8b-48a696e49768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812b6aea-6414-47a8-b1f2-b582cd9593e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa824b5-015d-45b1-9f8c-67e4a212c848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18d900a5-ab86-47e2-82d4-d2ad4c7a27bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b65ccaf-1b7c-4d3c-a8bc-8a4cf1ddb301",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c30466-f6c1-4e7a-aafe-ab9d837ac198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac2db7a-1c60-4c2b-b0e2-622aaa792ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65e9687-5279-4090-b3a7-562ecbdea22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9433cab-2bc3-416a-9d45-22d882caeecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ff6d8a-0672-4de6-8b62-456e1ba6b618",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad640f3-3154-46e1-b9cc-b6f5b132ffed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbcb0791-66c0-494e-8968-1a5513bf6ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8384eeb-8bbd-49c9-9d07-acc34682ce36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4505755d-792f-4359-a748-2e173baec68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb305f2-c0f4-4885-8be4-d143af12b9b0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb3fc0a-a3e6-403a-8f1a-e27bcb7e508f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ffb2f3d-534f-4881-925a-717f5da2270c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eefb575-09c1-4d8c-90c2-676736fac775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98524bb3-094c-4e3f-b34a-75ba5083ca1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9b8764-058d-4508-8caf-1f70736a8934",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd896798-6b64-411f-b8a5-fb96206fb6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898b1544-99f4-4b9e-89cb-69f7a9b2bfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b4efbc-5f37-468f-b5a4-e38e563ce575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6551e4-7e03-4167-ad10-6b762d913741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36006ef0-4cfa-48f5-9183-d5f211674793",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7417476-be13-43d2-bc70-719fa59964de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500d5a5e-6196-45ab-a665-60ce7a91609e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de2c3a5-899b-4497-94fc-9b7ae8705a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3682f2-ef66-4c9f-a02d-c8e0f2db5e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d364aa-e860-4a74-89ca-32a04b858fed",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0159b356-0e5b-4056-8f2d-675d674f824d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f8aa5f-1900-4527-a156-9644eacfb54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f9d656-5b51-43f3-8271-2845ee6dc02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5d0310-8af0-48e4-802c-22326a9423f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7f0cc4-50c9-4813-8c5d-ec706aa676fb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7865d340-2e1c-44e3-9cd6-8cd2c3c52eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ab5d70-a2d4-4a21-ab70-956747d9b4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d728b3af-23cb-45ca-a089-c9eceafe13e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "177e55f0-ba9a-4530-bdee-433b45973d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6745d668-1a38-4d7b-86f9-b919d71e02c6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb3fad4-4e93-47c0-a7be-c92e512579c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25522eae-3246-4822-a68b-4e130bbd0357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd19fff-0adf-4afe-a566-f7a83d35047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5b3ad9-b807-460f-a778-a05f9ded6663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abf8b82-f8cd-472d-8091-9e4bacf8c4c3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c45af8-5ea9-42f0-af52-a877fce79e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895d83fd-f1e3-4ca2-bae2-61d9e39dd24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba1a1f6-409f-4edf-a3d2-5af8c10e1861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d6f041-2479-45a3-b842-792828bcbe5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe095bcc-f5be-4338-91b4-1264821a5cef",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59172b3e-c709-401f-8b37-7689fff134ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26773c86-b6b8-48c3-a786-d43cf559ffd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ccd539-9a44-44f8-b13a-c9bd4b32eefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55e01663-7c21-4927-b881-671e23c9afc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91daf69a-bbd3-4cd9-a42a-6f615decf2ef",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70022032-c1fe-42a4-b000-9f91833c5dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0952a78-727a-42d2-875b-aaef19b6e5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06f7521-ef0c-48d8-9b5d-6975c3f0c570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d29a11e3-4df5-4b34-9ba9-9c5473fa7e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfbebc2-7a1c-447f-8fe1-959a2d178905",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5c9787-7493-4b3f-ab81-cd79794db791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3016c147-92ff-4f7b-b5fc-090bb73571fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a043a1-f056-47d1-aac3-66b4fbe76ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92f30da4-135b-44a8-8b2b-406a4891fe63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15668bcb-2880-42cc-a36e-613ea47a8b98",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af45507e-774e-4b84-8d6e-119f6d1ec15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73cf31e-fcd5-4c46-8b81-ef1eaf188a1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbd72db-e0d1-4255-b848-b92d95733b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ccadbbf-b1ba-4027-b603-7ed13ed71aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238cc795-956f-4622-afa7-e27dffb3fd69",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa9dd9b-daa2-4324-9821-3fb5dc972697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "160fa2cb-890f-44ba-ac77-b9be3c2b6043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7d01a5-5977-4e7b-ae0c-543faacda23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce95fa6-1a13-43a7-a112-11249094d6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c349eeb9-f0f5-473c-8733-f575250d90f9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a672614b-cb2b-4375-b2ba-348e73862d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c607da4-8952-415d-b437-3807e3f813d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226416b4-6a8a-4ac7-95c6-e720fd72cd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c16e528-1976-406c-8388-2c6d1535fdee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c22d28-2a75-411e-b812-722c04193268",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa878220-b5e4-421b-8f14-3dee195a6e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bdcb67c-c7ab-43a2-a623-d83b525bbf57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c870dfb8-d8ed-40e7-9933-e4caca467d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e639140-aa0e-4898-8e8d-3de76df95503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f4fcaf-1072-4e3a-90a9-9edd9fa6bb2a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60b1637-859d-4540-ab95-567b5632db4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc3b0ba-38f8-4aa6-8213-963cd06397e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0067c380-8900-45e7-b577-2f47db5e9bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f011646-53e2-4e34-98a1-901945f92a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23ab89f-5693-44c9-9313-36a02ca0406b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccfee14-3d74-4022-ad19-7ec7dcce7939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b9a72b-230e-4c19-b730-36923f05b18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90878f47-5abf-4b7f-8dfe-e9d2e654b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f43fc6fe-7891-4f4d-ab80-a7f645f62636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63163ba-cc1c-49f8-b51f-6d0bb8f4b877",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402129bf-9bd7-4e60-bd63-e52487df109b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bbcd1c-eff3-4660-9651-76e3eddc7013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96cba0b3-918c-4077-8699-408966a4afb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b77cb0d1-d401-459e-8609-7091d6324e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a02763-0ba5-4de8-bd77-fd5f059abe83",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c215d65c-5d9f-48f6-bb54-e391bb610270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb808f2b-f05b-462e-99e7-2d26e65c6bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e0b105-1f76-4584-a06e-3c0e69a0561e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1df8d31b-2e97-4e88-b756-e2fabedc3693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489e1676-5055-4e55-a19c-5e4c55ac6f57",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f65ecea-0974-4d34-9c6f-fc21aea45b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ebe0e5-cdb0-4131-b58b-25f0da4e1673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05fe0ed-92f7-44ee-abf7-399e2e908f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa085c84-0309-46c1-8186-0337e9e1cc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6651f81-bfad-4cd7-b595-031a6cfa47a2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb542cb-6ed8-4506-bb0e-1ef595ec5073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a816550c-5075-410e-b533-4d8d2fae496d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3b40ec-88e1-4c37-a8a3-d4be269b225c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0028e8a-25e8-4897-a213-6f3b6b467cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8770c80f-685f-46e8-8150-012bda9235dc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8697a024-9ef2-4e6d-802f-22edf0876e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6521af09-1a30-4721-99c9-e76c93f8ef1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69011767-f1f8-40c2-b342-13f80743dd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c1037f-0d9a-4744-9a37-227bd5ca9781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71c82cc-d9d7-4e0a-bfdc-dc72bea083e9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa0dade-c18c-4938-a720-ef6374c6b7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d56913-672c-4af1-97be-eca73ed60dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70957cb-92c0-4d37-982e-df8c285c2afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "710b9d3e-a3a1-42c5-a5b7-8db3f65ee690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5501cd09-6b4f-4c0c-9420-a5e88838819b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d662b97-7122-4c3c-b379-8fb624fb1b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "091b1e7c-e032-4ea2-af49-7246fbbc65f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ba3c9a-9ddf-4687-851d-88b14ec57562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d90b5065-e2ab-415f-bc27-5083530f68d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d3301541-518c-4c7f-9551-9655e1c4801f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6336d75-3ef8-4c95-bd9c-56a1def8fc5c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaaed4c5-3921-4194-8f2c-a71bbdf962f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e417a321-4357-4651-b3f9-ce5f80960ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f2db19-1865-4569-9027-fe0e8256bdf5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fa32f5aa-c8e4-499f-b369-ad6bc21aa8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131ad5f7-12a9-41c0-a361-55aa9bef1a92",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c490a7-0b6d-4437-b8e1-710eb2de634b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de243d09-646e-4081-a2d6-fd9040acff23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854b3faa-a1bd-40a5-a2af-870142a40e5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1cf3fa5d-0c33-445e-8e50-58f22a0b05b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed1831d2-d462-4ad8-a09e-434f7b221294",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5840deb-4310-42b7-bdc1-0f1985eb41cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19f8b81e-1baf-4b5d-8467-a4d6c6310e20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac5fe65f-04c6-4569-9560-f84b18e45d33"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73332fd0-4464-414e-b6bc-11b83f92c839",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39c1870b-3b5e-4425-8086-6d41a00766e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bfba67bb-3163-4459-9e72-a211c5ec00ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ca0e376-810a-40ff-9694-2a66e3197e0f"
                }
              }
            ]
          },
          {
            "id": "233ad23c-3f03-40ca-a174-1ea7bd175d31",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b341a879-fee2-4f98-ae54-ef8eadfae5d1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98ee08ae-20f2-4cd1-ba8d-f8ed5408d4ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94faaf3d-4196-4fe0-a2ad-2c225d95fc67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bae38959-632b-461a-aa5d-03f75de6a23f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14e9a987-2128-4a90-a140-43255be8ee6c"
                    }
                  }
                ]
              },
              {
                "id": "1cdbc5f1-97c0-4e68-87fd-e0b1b9e442be",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7f369e7-616e-4af0-8b2a-a65f33b7cc17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef237619-343e-4ffe-a89d-2bef5622296b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a8ef2cc-cf56-4d73-bc23-2146855bdd3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "37142cfc-579d-4525-8bfc-df1c4ac45115"
                    }
                  }
                ]
              },
              {
                "id": "0a948150-4573-4b1d-867b-7696893876ef",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efcd547b-0eb1-4607-a30a-4dc733b5c9ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "29c0ecce-c431-4c24-b396-84917132c901"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f991bde7-7365-42d9-872d-ebdc1fb415f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6e623df3-17e7-41c1-8494-62d2597371dd"
                    }
                  }
                ]
              },
              {
                "id": "a60cb2e1-351b-47b9-898b-2f7c487283ba",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90b0b951-d2ba-4c88-ad20-0672683699db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e9fc4bb-57dc-4fef-9aa5-09b861812537"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4428bc00-9ae1-4e03-963f-8f79125acb3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6075f085-7cf2-49f7-8ee4-b5da89aba4c0"
                    }
                  }
                ]
              },
              {
                "id": "c5769b4b-333d-440f-80ab-5a446afed519",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87ab83a4-0516-4470-bf5e-dfff24eaf120",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c21977d4-a737-4b6f-80da-9fc36adc1576"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fd56344-98ce-43fe-aaa6-2d111ea61652",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d634cf3-adce-44b7-bf60-7acd7cba3228"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd15a4fc-645d-49e0-a152-9b25515f3739",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20faadd0-98c7-4cab-b432-1e3fa70b9394"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "34f42bce-2433-4203-a3a9-1176d52b0369",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8019feb9-cbc2-4324-af82-93c3b410c3be"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69eb3f81-591a-497d-ac6b-3d8e5be016db",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2ff74c6b-88fb-444b-abde-7f4bded8d28c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "700db612-30f6-48b0-a845-a639d11ae0d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "793abd6b-7cf7-4838-bb35-575737a120ae"
            }
          }
        ]
      },
      {
        "id": "15123554-ec3c-4caa-8dfd-7d4c6ecb484a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "45ebbbdd-ce5b-432d-b41f-8b92ecc3545f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbfd5d7e-5e10-4027-a4cf-112279b7b60c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d474b563-1562-493d-8f65-f5c4f97fd664",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a62e7a-2b28-424a-9a1e-0e15dd16aee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c48a390-5faf-403d-bf8e-cfeffc457859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e1fe43-0d8b-4d0d-abb6-0ff826a63594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "840dc91e-1755-49bd-a93f-1beab09c1316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069f3350-45a4-4700-9ab5-225beb4b21f7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8fce24-3fd4-4f84-8fe1-8eebc8c39145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9ae88e-2325-4b02-8e00-00e599997e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e0eb1c-02eb-43d7-9798-48c366ad58ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00373acf-8b25-4ccb-ace9-bb85eeaa6c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbbf52a-03ee-4cae-84b4-d79770624ec7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749d76ff-93a5-4aae-a451-f4241ee89157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f28b53-0272-4ede-a459-b3d17d92afb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb54463-467a-4562-909f-bdc83cfc4336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47e7c668-b452-44a3-980a-3c99b6f03709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb57113-024c-4209-a6d7-4eca2483df2f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200390bd-85ca-4f62-8aa4-6f0251d27529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032bbcd6-9ec7-4b87-a68e-16ddefe7576e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a896b0bd-ec6b-4bac-b1d4-a87b841d7569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9e9cae-17e5-443e-a237-2faf3b09b839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0c0caf-9671-4c9a-ae1f-0c0ace6c3618",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a43d497-80e0-4754-86ff-c18af3e3da77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208bab80-19ce-45fc-a976-00c70c31da95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f784742d-4ea2-41ba-a07e-dee5d351d26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1ca6aa-5522-4006-94cc-9d7db6acadbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2059faca-dc5e-45cd-9fcf-396312f36313",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb27a0aa-5c3f-4955-840f-bc5ec1f2861d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "805566a3-44a2-4591-b02d-5f56e32f048c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35f2965-5f71-4683-b48a-052a1be3157d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "822d186c-b3da-43ac-8df2-24a11a1f975e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15043235-be5b-4004-8015-f467d0ba2186",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "132dcc42-b15b-4553-ac92-cf8f006da90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a15cd2-7cce-424d-a3a5-12391b602f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bdf606-27cb-4b09-b298-01ef7a5fa077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed7c4b83-23a2-48ee-8db7-875d859b3c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646425ca-4a85-43b3-8af4-49b76d006fbf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8d20f3-6a8b-49d8-b854-f045cea7b7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a745f9-d700-4d3a-b1b7-6fae4d2a7a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbba50b-e670-4bcd-b6d1-bb7b9de9298f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94a48242-52c8-4d10-8634-7cec6c170338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c7fce6-d5bf-476c-b440-6d33b36dc1d3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abd9e97-9f74-402a-8bca-8d162f384876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6684b650-f654-4bc6-80fd-3c982408ceed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d77d3b3-a22e-45b6-be37-2b5a81d89eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09da761b-70f7-4e94-ae8b-a784fc167045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715db706-a58b-4a1e-9062-5a1bcfa5cb5a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390d511e-4b53-48c2-9b1d-549c3e7c1d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136d6cb7-5d05-45e2-b10a-828bfdf683c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f40e0d-3ec8-4030-9a5c-be22d24f8fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b346e110-29ff-41a6-9710-d72eac8fbeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52dc615b-8c6d-4f8c-95e6-2b00f98daf1e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43abba8-7d76-46c3-b649-d512450bae98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2046b54-3af5-4da2-bce7-66277ae0372b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b459bb7a-7644-4a51-a72e-f994701aa21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d3de7ab0-28b2-42dc-8d27-4c6cd67d4011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e48279-ed31-4f43-baa4-372a683f2093",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94afa570-aae5-4ad0-9ffe-2ec188a0ce76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473fe459-8187-4e29-9fcc-03501450c1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f827bbf8-c4ca-4ba2-80aa-cc2b4e89f89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "070ce9a2-524a-4503-8131-5a087acdc72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5431ad32-fe7a-42b5-8e3e-dac850c796bd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa9f0da-0337-4fa6-8d47-094c2cec5f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440f3f1a-fdc2-409b-a3bd-28dd73824775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91376610-2c21-4835-9f6d-98c1fa1c0cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d76a83f-51b6-4187-9d61-6f458c2fd8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3328e0e4-9374-4942-a77e-4d621f6b381c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5070fe-cd2d-4134-80e2-b7b312ef2fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6fd9e9-9154-4eac-b3b1-e4ed65023fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59408493-a74b-4eb5-b9ff-850bf139eae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0f774c-5751-4ff0-afc4-73a9ca38c5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d412e15-e646-4e80-93df-e83e11d366be",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f8dd33-6d8d-49a5-a108-a851c6259bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821ff3d7-7ab3-4057-bc34-542ff39cb311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96334dc-56e1-46c5-8512-539201b39afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "45623012-1398-4436-b565-9ede0a80e8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c151461-63fd-4c25-a3e8-46f4af06c40a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7356cdd-52b6-4faa-80f7-22a2ef6813be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be037c0-9561-4a34-be74-6298aa7096dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cffc40-a8ba-49d4-8d63-ccf72fd6f67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8168f289-0a91-4499-9741-0242f12dc11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f28a79-9704-4826-8f2c-0187cf46362b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70948a08-6950-4bb5-b66c-8dbd062e9123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4aac70-60ef-4733-8440-69e07555727d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56651dd-ad4b-4ad6-beec-dbeee46787d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "37f395c5-a9b2-40d5-95d3-169ebc7b3ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232c68c2-e6e2-434a-9871-e76293af3ccc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8389960e-3537-44ad-a63e-ce6acf47e04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26cbd1c0-8bc3-4933-bc1a-465034185f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d786ea3-11a4-4118-8175-8af93fb25dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "47e8ce3d-3124-48e4-ab8a-2890f7bb0596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0f7005-d57f-4ff6-bb6e-d17e13bad390",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7ea0dd-f197-475c-abd5-ba77e00bb1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c50bb00-ac02-4684-a6fd-e3f7f7d355c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a74f96c-b882-4a57-b5b3-7ebd1bd93a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2eba998-cd55-4514-9972-465021965ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4281e11c-fef7-456d-8ebf-6cce9e3e4da7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2341c881-e497-4400-9132-ef266c49df4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f444c183-fe4d-4323-bca2-c2cc690cf8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d9aa62-d893-4557-9bfe-979aca15d8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38b5ba88-599c-4e40-91a4-4d9a4d6c1348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ab70b7-d5a9-4d8f-b409-f1f759d3a527",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20eaeba-b619-418e-8d7e-87a044f4261d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b19323-0ef2-446f-83a0-1dadb1701cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea51fc7-14f9-4fbf-b435-c7cc2c2fe8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca820b37-f427-4eb0-845f-c15c5f25e3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ba80c8-45da-49c7-b81b-9b896d640b00",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93901a90-c9e8-4c10-b380-8cdf9c957675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614d5519-ef8c-4f36-a785-828f245c6189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c3030e-676f-458a-adbe-d57932dfed03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c25e590-1880-4584-bebe-44c361fefc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1a088a-2321-42c5-b806-1867e86b71ed",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c128721e-d17d-4d8a-bad8-bd815b3fb2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a91e4f-2ee9-4245-96c8-005d649d8c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2de9e2-f684-4c03-8b04-23abe15d3196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c318c85-78a6-48b1-bd70-695172efbeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17c9846-7342-4034-81db-287eec7a1fed",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ea8601-654c-4003-9456-eb9bc355a52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd875c5-e835-468e-aa0c-8b0c37507144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1142857-4581-46fb-8756-70c38a73ba4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e5451e-fa90-4f80-bd4d-f4f63be709bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d54daf-3d02-4d52-8998-d04ebb8ba6e2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4973377a-64da-48fa-be9a-afbbb984075e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a3bab2-1b1e-4cac-9c18-660d8478053e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d061565-f185-47c4-bafa-cf54c2de30c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2cfcf8-3cdc-4dea-9caa-d0e8ecb03bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846a40dd-6ca5-4411-a34d-29c920da797c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abab63e-7de3-4273-bc0f-8042a21b05e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d15e52c-ed72-44da-b6b1-98d61a1451d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c988b807-0ea2-4a73-b701-4a8b441ef6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42263c79-b4cb-456b-9508-ba00f24719e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bace2841-faa4-48e8-bc0d-33c19904377a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c09855-7170-4e08-a58b-65d04c745bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0d7a54-6339-4322-90ce-69020e132ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffcc0ce-549e-4f93-85e0-00ff1e7d990e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a37310-6a67-4043-81d6-7b9cfb45c3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d166d53a-f822-4d3f-af3c-e55aee463ce3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59349f53-0b94-4e8b-ad42-3a3b28abbb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98989515-b60c-4195-878d-352cb5f0ceef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c70ce75-8311-4dc1-b185-09bd17615c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "576245f8-54e8-490c-8b26-853f47ef0250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a22bc45-e454-425d-a344-6b9e3e939d61",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b19c67-efa4-46cb-a1fe-76683e8db31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eba9069-3326-4af6-ba75-7cd124673307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc1ac83-7cd8-43ae-881e-70a8e7569b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa0937a-95f5-4d8a-b787-199c3c00c60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93af2c09-7e45-444b-94b0-a2265642916f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f6b063-a174-4459-81f4-e077a217abdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c034664f-db22-4313-bb12-f51b1f55b88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee320fe-841d-4089-bb19-da8e03c88313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb839bf-f3bd-47a8-9c09-0ce557b2202e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5235ca-b671-4521-b74a-d6f73a1e138c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a973496-f593-4f23-9c97-9b4cdf766db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c284d2be-6f96-478b-b490-12fc0abe0405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d624175b-6f8b-436e-bdf9-337a9800eb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1350ac85-b6dc-473c-8df1-4acccd6a5921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491daa74-ad5d-44fa-9743-77d318fec33d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febea52d-dffd-4597-bf93-be5f13f364c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ccd6a6-a0b6-4afb-9193-be821bf00968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5bed3a-6d28-4571-8e56-63b217f4af1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6afd28-4f9a-4201-a060-9ce81bc810f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5395ad66-675a-474c-9bd3-8d0f83bf7df3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1802b81b-c9aa-4d54-ae29-e7f1d6427c62",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae99275-aa15-4416-a01d-2400e4451952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee645efe-f599-419a-9246-0cf541eaabac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7680eef8-53f9-45d7-b2d1-e6fcbe9e4475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fe94fae-2e03-4cfd-9117-c34b01e53cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a55aab-1b33-4782-94d5-199d6a1ac762",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64091487-2d0d-438c-a4ef-2c7f4a38f078",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "fae02695-356e-4cbd-800e-de92964fa245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4287169-8baa-45c2-ac07-747332cead2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b95e095d-fd3b-44b2-b316-8607d2dc7c22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e66e698-282b-4962-8bb7-e52816fc50c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a97835f7-d971-4803-a676-3c0286cc05bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17b19936-c077-48cb-9119-9eec8560f393",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "555120a9-c05f-4ae2-8f58-10f866081c64"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57b25b6b-bdcc-4c0b-a70f-345e34a711aa",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b4f65cb3-42da-4837-9491-4ab7e27c1c72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca0cc38e-87d3-4263-bb3d-b4a652c2d1c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2aa35593-cf71-4651-9204-6914e0cf3e55"
            }
          }
        ]
      },
      {
        "id": "b43c2bcc-3a6d-482a-89f9-fad9df60606e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5b17617d-8c1b-4533-870e-5ad113aa8af4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f008b38e-7cda-4fa9-9b71-d432717e18f3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "58bfc9c6-93ff-49b3-ba4c-83adf51af9dc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1def931d-d112-4e31-afeb-de395a94a733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d831f7d-6afb-487c-9198-80f14b8b1118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4699937-e420-42f5-9074-2216d0c746a4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1b91ac-9825-4188-8813-28b2655dbba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6906e090-5929-46c8-b017-f1fe7eeb37d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868544a0-611f-4d9d-a5bd-b2ed1f49e139",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0971c937-2b03-47b1-9da2-5e98de1c2dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456a511a-8a05-4078-91cd-0fe07ee2c4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39cbfef3-7572-40b9-a984-e238c5d0bfc3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497a50ad-e04f-49d7-9f31-651ebd903aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee85a3a-97ba-4469-a685-b9bc36f8de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc186b39-7689-4bad-99bc-bcaa010aa531",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a2f31f-4004-4478-b24e-9196acec5dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91dc9c8-1e84-43ac-87b2-7340da60c4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ba1147-f755-40fa-9891-083096003eac",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c6dd85-138e-4cef-a793-e1320daab76b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca14447-d0a5-47c2-bb44-e8b5e81720b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5ed2bd-fc23-40d1-926c-4ca434e22808",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f32e92b-5358-4e2e-a501-2b60fc05bc8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c3eb5b-41e7-4a33-be65-e0e2301f4d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486e8eff-4043-420f-9d72-8cde15d6e592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80746b0e-c9a0-4c7b-a6d7-92d332e88d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cde5c6-9d82-4be1-bb15-81f7fd43f302",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa212662-9658-4d78-8980-9f81a655adb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75dce002-6c37-4162-a956-ffefece04be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac788ea-e07f-4f89-97f9-3a6e60868360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b110cdd-34ad-4386-a9eb-92c52c82061c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53154da-89f2-4d30-b06d-9f001e1c2f05",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547fd622-fc80-495a-a94a-e78e6c0876f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4241a5b7-b4a0-4a5f-832c-c9cd8edd2aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f66772d-8511-4ef3-8445-49db1828348c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c48350d-a324-4ebc-8a96-07780cfbff75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a178f56-e721-4296-8e2a-30b03889de30",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3588c891-282f-416b-b62c-7fe47c0e6aef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90784874-6274-4825-82ef-c9795c021d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47599bdb-a97f-45bb-bcde-4f0e916a8e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267c704b-4238-463a-860c-5c765418b71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c3a7f5-4977-41a2-a0ec-aab6d893c47d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a28cb7-addb-41bc-9c31-b3aa65c97a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32345a42-c2a3-46e7-9061-506fde3b2509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ea4b30-ae9e-48a2-a5ec-09f3faf8829a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea6353a0-f5e9-44bb-ad37-6d80307a3b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6349b67-e6de-44c1-8657-d61334a85d07",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b8f85b-94a2-4038-8240-7b65e4714131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0026a982-2433-448e-ba30-530dd413c0b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "130294ba-0df5-4a9d-9e7e-a973ba7a26ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3578f39c-1960-4145-a001-b812f8d2984d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f251daf5-4c7d-4f46-9f79-2337053030ee",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea03957b-d958-4e7b-a288-93cbd086f716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d569967d-3892-44cd-8f40-7e2e54915712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9691233f-13a5-4542-87c8-ea56bab66c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912f3f56-8d5d-4702-a40f-3129d6b79fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3286f5bc-02db-4c1e-8aaf-c3328330f09b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51a7f74-ea37-412c-9adc-00c2e710e3b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b378456-d835-4932-bc1e-9dcc393f56f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4d2b94-b76b-4acb-bf59-dc4294514c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ff98c6-f56a-48b5-beda-e87d2546b455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07077f7d-eae8-45d3-9fbd-86ff72057df5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8dd832c-4be0-4b02-80bb-d4dc59629e97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e058c5f2-529e-4ae2-8465-07b325a1c566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a92c60-a072-4dda-a084-ae2e1bef8f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "087ac7ce-535b-4bc2-8dc7-262ff2cb58f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0e8a35-ddc4-46ba-89ed-7a90fc87e4a1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccb829a-6f4b-48de-a4c8-5dce8aea908d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94af76ad-faf4-4d63-9217-6ee79b75c0da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fb64b2-f611-47aa-8da0-3f561fd3befa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de46e291-87f7-4408-9ce7-961f3be3e26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce56a56b-16de-4a6b-8e69-17c19526977e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa693e7-e6c5-4c26-a580-f11555516588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06325ba0-899d-46cf-bd7c-5e60d375147f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f792fe7-e4ee-421a-b69a-0dba47de8e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5232a598-5c25-4cda-a6c5-78f6d51ef13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c931d87-4db3-433d-81a7-a418009a2fa2",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eec8f6b-d0ba-4bf4-9548-ede3c19f80de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f850f25-fe55-4131-8965-c2bbeb92bb64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3720ef4-f9b9-47c5-ad00-78889db9eac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43dd5f3c-0e6e-41a1-bd15-a6d4529854ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e7c9f8-b521-4027-b62b-852f8fdcd655",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5162262b-1d06-4916-8cad-056c1a756d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba27d4ba-934a-44d9-b068-3a275aa6d06c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc86f688-2b08-42ac-92a7-d838fec6233a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fce606d-355a-4df7-ba4e-0d06ccd5ba9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df001db-80e0-4971-b8da-dfd9870050da",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec992d25-d03e-482e-9746-3ca69485d8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a1ce5f-8cf7-4943-a8c7-19e62ac7f2c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04775618-022e-4cca-af42-f6121a2e18cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91f1bd1-1bd4-407c-906c-bd569a0929fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e6a16f-70d8-46ba-9461-47789ace52bc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315750be-4bb1-4c64-8967-506a698bcaff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864ccd46-a287-48a1-a387-32ccad5e4343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6edc0f-46c1-48b4-9641-ca6719f95ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60e5d62-1a76-43aa-a344-32616907b5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814c1d7c-60a4-4934-9628-ff33bf25985f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec81a0c1-c90f-4053-90a6-f9d558968600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c387ee4-d039-4be9-aaaa-4d7b84d7c008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf65de7-b98c-48a5-9b55-9b220fd929c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f49892-0f78-41cd-9704-7022a727c3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c14766-dc9d-4f83-a857-a7e14369f189",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b200be-d4bd-46a0-a912-4cc3653b0183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf11b556-400c-4980-8830-e33f480f85ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4d8615-f81c-47a6-8b18-64a58dfa5f08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a26d30-ab20-4c46-9e70-e06cf03abe30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e281ac2-e7a8-4f17-8eb0-07fcb4938874",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adf4110-c7a5-4f9b-b47a-d9d5be5248ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e9d043-4f67-4273-9d27-1f5ef479f419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72254e09-125d-43c1-ad1c-bdca258b319a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7e02eb-7b8d-4516-8743-d229c0de7390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fadb622-1e93-449b-8b90-517331c3e834",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06157c1-2b54-4d01-9b9a-31c46452ee8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "962cb1ac-8fb7-4b04-8368-48fa693c9325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaf0e6e-df52-4227-a516-6bcfe897797c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "423ecf31-daf6-4950-be64-c7eedc4873f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd1f1e7-6460-4638-89b1-68ee8dc586b9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b98e92c-b011-4582-b893-2fe1f1d35af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d2b4e7-7e42-459f-8ab9-8adca26f3d52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d355820d-388c-49bf-bdc4-6d35b485888d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a7e845-4fe4-446b-89cb-62f129c70e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c4b2c3-b39b-4a0b-8ef9-30c9ab403df1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc8a749-f691-4c7c-8cff-b6d63ffd3a1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38f049a7-c109-4e8b-b2cc-598e6978daa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64dac7e-12c4-4ed4-8942-e6823ff9935d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe0339f-23c8-4528-b0cb-e4d2676b12e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24bc07a-1263-4477-a1a6-da2156e8c5ff",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306cab5a-fc52-46c1-9321-ce576ecb4098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4967a436-1fec-434a-9707-8a4c14a82f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab3be2b-07a3-42c4-adfd-cbd779df413d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3965be0-645d-4068-9882-4826bcfbe36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2620acc6-72f6-49c1-859c-7f06c0ba3e90",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017e5339-bb71-4bcb-93fc-bf964e1cf3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08dbe8f-eb4f-45a8-a691-e629e301b603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dfb9db-cb45-4328-a40f-e957608c6983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11a298a-9a44-476c-b22d-e9d63fef8edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d3e9df-eab4-47f0-afb4-32abc966bf87",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70672b2-7ab1-415a-b1a2-ea2b70e2da45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b479585-6389-49c3-b33d-a59804b931e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0469ad9-4d84-4b8d-8437-ae01b8698f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7053fb75-c7c9-41e8-a14b-7146bd929b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d14c85-d18d-47e8-8e33-4f6bfd233c6e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1478d6-953d-49d5-a891-795f129502b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe504a95-7670-4de7-a763-5ac1a2652c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81688e5f-cebd-40dd-9685-3bb4310548fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a4e218-c6e7-4f12-9f8a-92a286c2ad90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83026caa-e68a-423c-9f54-0fe1faa34753",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8daa6556-1c74-4c8c-8a03-74ac7d03036a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92985845-afab-4174-97aa-1b8a88dcf524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9104ecc6-a121-4ee2-b079-bdb6838d5f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb18c7a-173a-4cfa-8bd6-b460a7017ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb7e742-230c-4c8b-b354-b52bddcff45b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2451e573-aa9a-4c6a-817f-bad3fdab1d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a73fba45-9bc1-4760-b210-68d5ad699896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5897190-b8da-45e7-8cb9-a2586d03a286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884cc132-dfa8-4dc9-b4cb-ca77dda3407f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fafd4b-a169-4fa4-8f24-8747bbcef095",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e276b46-847b-4c3d-8a71-9dd0d96a6946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4da9b00e-870a-4449-a50f-022cbe5af15d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3227ad71-062a-4d4d-85ca-34511bb56f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcfa7ed-e686-4f4a-92bc-0c1bc2875abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790c799f-2410-4289-94fa-c4c94ec28388",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569a5cf5-59f2-403d-92ce-db0f423c7977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed9157b5-7276-4eb2-89ee-bac6aac44d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b411be-8544-43eb-8ab8-01e2e636779d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551f7bf3-15ab-451c-b400-eb5ed02ec71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07236145-7ce6-46fc-bc10-e8a463729ba8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8491a0f-33c8-4fec-bda3-a3ff6392ea89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15943aa-a442-4d5b-ab3b-0ad066412941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7830566-dbf1-444b-a223-400d13a05767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc28c6fc-26cc-4f30-92bb-1d0d014ac153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f82574c-08fb-4aec-bbe6-8acbcfa30e6b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c44923-cfb1-4785-8934-4bb2f4c7521d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5b1617-3caf-4d7a-b602-5f787fb0e12c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ddfad7-c425-42f0-987e-610dd81a62a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43d8f3a-8e05-467d-9072-865823cffbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb34610-a034-41a7-bcd4-2c2e93ae97d7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04eae745-cf8e-432e-8494-0d556119c300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0d6d08-2c91-4a3c-a8f0-b50384ca1511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5189388f-9e89-4da6-9839-ab1e795aaa91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54d6264-4161-42dc-b33d-20583cac540e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960ea2dd-dbe5-4831-a4ce-3bf054072bc8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c95020-3596-401a-86b2-256621666195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335073d9-6253-4c32-af99-137fd2f0f812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d941adb1-370f-46f2-99ec-df10813bc0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc340a8f-d5a5-4995-8455-c4e9181df4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242b2e74-9dc9-45ab-a144-b5c0d84cad6b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8be2b5-c427-4540-92f4-4316e70a187e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7246b933-c876-477e-a8d9-20dd3dee4240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60849e56-c868-483a-8758-32e2e524e6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e4ff30-58ff-43cf-b03c-79bf2bce3b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e908be1-4749-479b-9c80-21c88ca26581",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6783f1b2-6201-4e9a-91d9-6f443f228f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb47e64-1368-434f-a711-885182160370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b882ea84-c2d9-4363-97f6-a9985a26cce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8ffff5-914c-4222-bb60-106080ce7d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc1c2b0-bb10-4afd-8764-4e9c44fb0e51",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd72d736-6a25-423c-b0f5-5b2809aaed12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a79f6d7-09c0-4802-9b57-ade9b5dedbf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b2098c-14c7-4913-af8c-adada5486927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3cde7e-e5fd-473c-ba8f-818572dd3d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db431524-88fb-4383-8889-04f871756169",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1029dbb5-0b07-4aac-a481-7bdb2c6f17c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83f0269-b612-4e32-81f8-5777abb773b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e65479-c8c3-4c73-9dbc-809626e90b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd1798d-e372-499a-aed6-ed21ef75b78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f38990-0095-4771-9947-c570abe3cd46",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8056bf4a-bf3d-48b4-8917-942477e4f216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813fb12c-ee4a-4c23-a9d5-a196105e9db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19390efd-ffe7-4441-a5ce-5c7c5e6a8855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22c449d-b7b8-4105-8869-655c1bec6281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b87ef90-1675-43e3-ba7d-56abb8fb1d4a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5211137e-d8d7-4d3f-b70b-c0e00fff6724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea1ee11-8108-4fca-b163-dfeea4b1ceb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175da8ea-6000-4be7-882d-b09492f41767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d66216-8910-45de-918e-7ac3e5f4f654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7579bd-5f5b-4d2e-be93-908ea026b318",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf3dd6b-ac9e-4cdf-ad57-ee9b62bf9e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcc95d0-61bd-4872-b31b-a8fb49210759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ece8d8b-9496-4441-9b2c-4b2673cc5658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316fb1fa-5aa0-488d-a834-03066c0e97d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fadb37-c036-474f-b707-099ef1fa7a74",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb430213-0835-4c38-af19-823a53805f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94121138-e756-4a6f-8054-2c221081e5d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d639f80-8218-4d5a-abb2-dd28cbc329d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613a37ee-de75-49cf-a76a-fe19f87caf50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c3540f-c74f-4480-8e6f-9c70d74b2353",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bd8fad-d827-4399-bd70-0f777b6158f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44977547-fa61-4709-b8b0-385454448f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6237769-dca9-4183-a73a-c3e9e9adf0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e4276d-7747-4906-afca-2c037625f8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258587d0-202e-467d-b41b-c0cfb453017c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad06991-9cc7-49d6-b199-ace3f606a2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d517dff6-37a1-476e-8aed-47c79d1ebc0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c94016f-5299-464f-a554-079bd3138f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78082bb9-b999-44c1-a117-40b923c040e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e947da77-df95-42b5-a416-f2b0768afb5a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6527a1ac-1b42-4335-a12d-e170c6bb217d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca2bf15-501a-41ba-ba3d-9e972511c0fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86203cb8-383f-4a2f-8b71-ce92072ae113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9322aa-0817-4de2-a1d9-dba71aea89cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb38c50-a061-4859-b09a-5e6f873f23cd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbce244-a0d0-4173-9737-9af93ee6fa37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02f4b53b-5dff-4093-b5cb-ebe68c2f319b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bd30b1-6470-438f-ac49-47478afc6f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267e4a87-6483-4263-b2e6-cdbb3ccb9b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d0223c-3767-4073-b749-c1d4c1e97045",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c523700c-8ed0-42c7-8ee0-f6e93f1a1ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47cfd7f2-b233-4b6f-8c83-7a4eed04b620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895c9bbc-1b24-465c-8e6f-aba9c7572624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9bc744-0e3b-49e2-a10b-c657d3d288ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dd5dbe-6f40-4e59-8356-fd33c42fe99f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5879d892-19c5-472f-bf25-8afe810efcaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9b0c57-4344-4f09-9abd-851021a5a6c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7eaa2d-4228-4040-b225-45b55543fab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e772995-667e-4182-8a5f-c81486952345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae984cd-83dc-45c2-bafe-44d6acd614fb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18075906-27ed-4aa0-8d65-fdc4d4a4cfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef96ccb-4813-44d9-a54c-36a096f39dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3526a02b-3440-4670-a3f0-08d943c9367d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5533db6d-a169-4e92-bc3a-b3b76c5c06a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ca6b04-0804-4565-aebc-e3da2dafc5e3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2a4206-e4d4-4a32-a0cb-79a7992dd212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f341f3d-0767-4299-8e1b-a0f07a5cb8a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f7e07e-b335-46a9-b72c-8df2128b2226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6754496-2243-4d07-a797-a0dcd41dfffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25676e49-d75e-4f63-b7fb-af87baf6afde",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d095aa3-9be6-406f-886f-5ceef4300e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bae5fce-fef7-439b-8c70-6a204dc7895c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674395c7-e3ca-49c8-814b-ab069aacb0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569fec81-a5a8-4c14-8f20-f127e7965e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0ea81b-c746-40b7-b6df-a6580b983d79",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5244f3f-c1bc-4112-9f11-0ace81ebf871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514fa543-e819-4f81-892f-aad454f073cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02032676-1e28-4c94-a055-de3761b19ec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483b2d12-7343-4158-b537-e5b404823d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1f7005-0e9b-43ea-9ac3-c867106e725e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8847fbcf-707d-470c-bc50-04a7836aa437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa81dcc-003c-490b-9ddf-b9831573a962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012e99b0-7b8a-4a42-95e6-e268e57f53d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59be05e0-139e-487f-99ae-2261e9949c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7720f3-f08c-41f7-99f6-504994988936",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddc1432-2ab1-41b6-a70d-d12a73ac9c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bfa7726-0244-41f3-b130-58e28b918642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcac668-a763-4073-b06d-909b53982ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a9809e-318d-46a3-a84d-ccd32799f467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1154cf-d2db-4059-a6f7-5fa49ff83159",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2a2f1a-9615-4250-a474-aa28b7e36dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff137015-ed61-4aaa-80b8-9b32de13204f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "858e4346-9746-49dd-9f41-73d942e7f90e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bcea275-f4e0-468f-8cbe-3ee257f7f0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a910b9-0e5b-41f4-b1f1-559a9790d77c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2551354f-9b4d-4866-991c-d73d040b000b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e1c1f68-097e-4ff8-9c32-cddd3d5d9c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d534df-ee5f-4bfb-8aad-ab63dec388c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5257f749-835c-48bb-9ec0-1b8a9a09c613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5180cfb7-e422-4d71-8992-52d88f724514",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcae1adb-cba0-4d77-ad2a-e1809f7573d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb4c48e-42d8-4eb2-ab00-a5273837d3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab07525-b119-4188-a3df-b31c3b03b249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551cf628-bb3e-4227-aa40-211f4a209e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6835df5a-55a9-4d40-aaf3-fef716ec38c2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc426fa-b03e-464d-98bf-ab12ac2c9ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d898dd79-4c51-4366-9977-9e6997a76701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4219eba0-3285-49ea-8c1a-e5f4bcd787f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908b59f0-053d-4e30-becd-53d12a1dbb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1de2df5-aa77-4d1c-995e-62ff7a3a6cec",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83bc1de-aa2d-4823-96e9-120949a0b33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99d5f71-e692-4ac1-95b3-29f33723baa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "837fcda1-13d1-4640-95af-c99ac50fda32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93861ae6-2508-43e1-86bc-37d587f51583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3fcd79-af7e-4301-9f66-02fbc4d559ef",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e98f892-5598-4a57-895d-20090ab2e100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28f9d04f-1fe1-48c1-8bc1-2a005db34266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e648f1-7e90-4ad5-9f1c-fdc4c0b63005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1b966d-f624-4226-b939-eb1a5e5c4095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af4b57a-5dd1-40b6-9495-b5ece8ac2e44",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40bf605c-2a1d-4997-9198-298d3afc989b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92d059d5-9db6-49de-a64e-9b3e61ae309b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26828640-3062-4523-a5ae-6b1bab874129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9f9bc1-2a7c-496e-9921-3e9c84ed3571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb35e5a-875d-48f4-9d5d-ac7d4fdf90ca",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490581b0-eae5-4320-8315-1b7fe95df8ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b7e52da-6abc-4dde-a163-0eaca459b8c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269ebd35-4bdf-4708-9994-e9334272b9b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77caff4d-01f2-4ea3-b217-dd100c9c7a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9cd8f0-70a8-4060-b4d7-7c23eff9eb65",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855326cc-08c3-4f2e-abf6-1df9c09c25da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a3228c-fea9-4806-9020-612be256279b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba67e08-91e6-4a21-bd77-6bf49676885d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351a34df-4685-4a52-9bb1-ae6423cef060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2aa0f8-faf3-41ef-a893-2b3dc639f9dc",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9732bc71-d6fe-4b8d-80de-890cc308d902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e766b2-8bb6-4e68-bf78-707631fb67fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8873814-f596-420a-b9f7-1ce56b27630f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47100bde-6eb4-4000-b894-3b50739f0cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37050ed9-05ad-49a4-aad9-2e38ae8cee6d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2cfd87-2f1f-4a8f-a351-3a63a934a2b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6a901de-ea8d-464d-b4c4-e14009294a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b07bf34-9376-464f-83c5-6f4620a1ec0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ef346d-6cf5-4dec-a521-bc0a833dfba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1247c93f-d65b-494f-a32e-d31bf55858e9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62552635-02d4-47d9-8737-c2ce31b7ef68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e054003-3f51-42a7-8bd0-080a4725827f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52872bf-42d8-436d-95bc-33ea1b0fd9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668c1c49-a2dd-439a-bde7-e856a1a10082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d82fd0-5b2b-4702-bbbc-a483bfcabb59",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154f8c1a-a5ce-44de-8dc9-dc7ef21c673b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35876dca-c857-40c6-b776-962059362301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2353af-479f-4db3-a08f-169fc5b22237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc31ef0b-37e6-4eba-a4bb-01af5f8d77ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263f59d1-5c4e-46c5-9536-5d8d888ea5b9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58291735-f4c4-46e2-8fba-f2711e9d22f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab36be60-3df9-4c0b-a542-38c7d7cb8efd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d54999-40e7-4f98-997c-be1e34e292d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a399a62b-ee81-448a-b9ef-43b51582e7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae95a3c-cb87-47ee-bf00-ba763412b013",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b823182a-6529-4dad-87f9-981e7b44d61c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e28393-17bb-4b99-9d07-d6616308537b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737d5706-059f-43d8-a188-6ba73b1047ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded74c0b-fff4-477b-ab40-2619e2d0c63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb1a380-27c7-4f68-a038-48a07adb3157",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca11ed4a-bf25-4748-840d-0ea5f3f4889c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a731a635-5bbc-4beb-b89e-fe0c81b63469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b15b4c-2dcd-4579-99e6-ba5548d35429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619baf2b-538a-4171-80ed-0164fb132435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bf287c-f673-4305-a79b-5cf00720c730",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e100e79d-27fb-49b6-a8aa-620c399d67f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c40d270f-3717-47d3-a47e-34d53cece4ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb5aedf-7cff-413e-ba2d-63331b44c375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8994e950-978f-47fe-9f0b-a9d3433c8e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd0f158-68eb-4dfc-8f65-d004c260016d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92097de8-ab3a-4698-92e3-ecf147389f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2245514-5a32-42e8-a7c4-12b76386a448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb52848a-798e-42ef-90a3-194c4eff1f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4280bc-01ce-4eb7-9652-52db0e37c6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a04e37-ee4c-46ea-aa16-28e674d4c847",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef2e4c8-1a99-4a52-ac6f-9ee23a80c1bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7830d9e-4e75-4469-bafe-68d74f2eb957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "367dbbde-f35a-4ebe-9545-3c50e87ea480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb2cc40-2ee4-441a-ad27-29a64cf309c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033101e0-5ab9-4d0c-a48c-dcd51fc4c7de",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8f8eaf-8787-4dd5-b9ed-fe44191b8640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "580c4b5a-2eb9-4c5c-8aab-d8aad1a7f572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "604aeb83-5fa9-46cc-9ba7-a3a842bb8323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95dcf307-4945-48ad-8871-c51d3721f8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038bcd66-3b3a-4bd9-a648-76de29f8a06d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fc0bb4-2ea1-4934-93c9-ecc31d1f8159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b072cf7a-8e4f-4424-ada2-5db99c4af09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a023a2c-fbdd-40d8-b1db-db8f054804c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d013c6f-6334-4ce0-8474-8111de2df77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad382a8f-7d7c-482d-92e3-336dfd4ca0c6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5e899c-95e9-4df1-946c-a7ae62122e37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "113906a5-427a-4fa9-8171-734e43ddcdcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065efd00-2018-4054-bb04-c7a427759a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3898e384-44c6-4e98-96e0-77ffb7259116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b41665-a86e-4424-b31d-ecc1e8312603",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6fc55c-f571-4727-8be8-788e150e6f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98354751-6468-4ca3-8430-94e588a66c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62317cc3-4617-48e2-9478-c75b7a6c562e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612df697-e826-4950-8706-70cb14d3147b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c3dca8-7534-45ea-bb33-8f7a7f82c29b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624216ef-5c8b-4034-b485-3e1affb08bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b120f5b5-babc-4637-a76b-a4e883704489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e494af-dc1d-4717-bee1-ac0d8ba0a87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205c8e3a-7535-47e8-af0f-82a1974d791e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0ae4e6-557e-4191-a251-5ae685dd5601",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ace29ec-0deb-4853-af27-643a6f57489d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a9b27c-173e-4579-96d5-046f6ae016d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc605d2b-e6c0-4d24-aaf8-18b0df0bdc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b7fa30-2cb2-4de4-92d4-84feb0c70122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178a3555-5dfd-4b63-a562-f737636b0342",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74f20f2-5bff-4924-a1f6-f0fcd15e322b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc94ff1c-68ff-4032-87de-242bc504e0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27181505-730c-43de-b927-05a1e6cbbafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcbf4fe6-a7eb-4538-ad9d-030c172998b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2d26be-330d-4d3b-9967-80788320acb3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecce90a-afec-462d-849f-8c58f174b061",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e050a88-e5f8-4386-adec-5d176d10da00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f05cda7-5357-4062-a971-3ef94cc2bf49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c45982-3496-47cf-8808-fc26479cf9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42ac93a-e84b-4fce-9381-4b7bfaf36f63",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0759c2-4c20-4f74-8bd4-8e5ee2976e2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c8e0d39-1c95-4376-aa62-12da64abd5e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "167a0cde-ddbc-4b83-b11f-335e22ab4828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64fdff0-5e1a-483c-8509-b78f0e5818f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3ba681-f012-489f-b12f-243e8de62935",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2d622c-f4c9-4bf7-be1e-d0b87e5e92e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eb72b0b-10b8-4d32-a898-f42dd2e7a211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af323c4-95ff-4640-8bc9-b95b54627811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d75874f-52d5-4441-9d9d-aa55cf7fb535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8302bd-f8da-4773-9b2e-332c789862c5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7f803f-d4aa-42cb-9637-a3396efecac0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ab1fb7-3c97-41a9-a761-c42e911ec17b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbfac6d-9c7e-47ca-b4fa-cbc552f0927d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8857b5d-9aec-4498-86b8-2ad8000b061b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774bbfd9-2243-410c-a343-737cad18ed56",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c4bf84-fdcb-4bef-9502-0683577b4063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba1cd917-539f-4370-a301-635235cbda5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6693fd-f826-4540-bc0d-9160ab2840a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b415a6c7-a721-41e0-bd0e-3fd01f8996a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a206c12-ffb5-4b60-b1f9-023d2184dd61",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc25248-3707-4bf6-8b78-45dc50865a4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cce5769-9405-4cd8-8beb-703cf56a336f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fc4299-c121-4c4f-a44a-83508361edf4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896b79b7-d75d-4992-b382-98acca2adba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26189a1-2dba-4297-870e-eccd4cabd33b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc051be1-0b07-4c46-9418-b0579d35bdc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "064d5d69-acb3-4144-ab28-e84be8e06bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d33a9e3-3bb4-452b-b39e-04bb872b1750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f261c791-0f54-41f8-b2fb-7558cb1acc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d60c1d0-3203-4a69-ac18-64968c4300ea",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409a7357-b9fe-4017-b08c-55bcf9df4959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc0db8c-b55d-466b-85d2-0a991230ba67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6adfa83-16c7-487b-9074-e19d1b85e2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b44d7b4-ef74-4da3-b3b1-c2be3a93f038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c153d80-8246-42b0-a24f-1c81fa327330",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5ac6ab-55ac-43e6-bf88-8c073358a9c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43ceca5f-c6e0-401f-bffc-ed844ab778bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f660c2c-a7b9-4286-998e-0d23f5828392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92fc3524-33af-4d55-9a24-a1b7db06a085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab23bcd-eab0-49c6-996e-fbe064fbb3d0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2891033a-840b-4b77-b124-3c24fc200d47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "633d7e14-6245-4f75-9a2d-f9cf03fff610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449e9809-c11a-45cc-b4b6-034e94b95cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc079951-6861-4186-bb39-229de09110a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc305e4-ea8f-4bdf-a0c8-c7cf1fae6160",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cef8c94-1d7c-4cd2-8c1e-f8d0509cd449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b79f3a3c-7e49-48db-9bac-87f42d976db0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29249f5-0b27-4b60-888f-54487d8acafe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87c600b-aa1b-48fa-abfc-b607c4c31266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fa6c51-7f00-471d-9ec2-67b1fedb635e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27629dd2-3021-4663-9eb0-03ff8158e4ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "016d5f16-31b7-4eaa-a244-f0de993b9e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4503837a-d429-401d-bfd0-a2f37bf6e05f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b8548f-9a35-4e6c-a622-d87b7ecae942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87c5ccd-3ac1-48f9-a4cf-d0fc6736ae94",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8a1aa7-7d7d-4caa-8a06-976b0567e317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03eb560e-8d32-434f-a876-9933bd911e8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288454b5-35b0-44d8-96af-5604902d35ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d90827-188f-4dbd-96c8-3ab39d571dd8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f987327-030f-44d3-942c-311b0ccb547e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a092a58-fc08-4ede-8c40-29f45355a98b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64bbc878-6498-46f8-b183-57f7d9360296",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3ee464f-cddb-46c7-aebd-223c695fcb7b"
                    }
                  }
                ]
              },
              {
                "id": "31c8de99-048c-41e0-b4e7-a3251f0ae3dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53c0511a-e9d9-409c-86ac-df49493d19a5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8755c29d-ab5b-45e0-91d1-b71b8b6cfd45",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "53503260-336b-4a1e-9f4d-de71815277eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f08d38-b975-406b-9633-f5e19c1a10a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a01c597-8304-4d9b-b253-270360d8d6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b333724f-d5c8-419f-81c0-54f0f265b21d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc7e676-3c7b-4ef1-8587-e7014fb08d22",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f6baff2c-d984-4242-95f1-08587e07b6a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2e7573-f395-497c-9bc8-6170bd78caa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1eaef8b8-0105-4ac3-8666-210ee9f2faf9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75308925-53d8-4025-b8e3-3f65f314a0d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cba799b-085e-44c9-9705-15f187083cb6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bde3b48-1502-4959-a8be-3ad5c69eb543",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7799f02d-f6c1-4ab0-8788-b3b4eb079920"
                    }
                  }
                ]
              },
              {
                "id": "9b60ce87-6eaf-4337-932e-ea3b17891628",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9dc9cdf0-0412-4b13-b3af-3571fd0d722c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eeb3761-9760-4c14-982b-85c47840048a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0f21b4c8-4bdc-4caf-a1c3-64db087f2107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a509cdc-b32c-450e-ab8c-18782f3b2d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d839db8-2888-4084-ac8a-bf50b80f5d1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9d384eec-5b05-41c8-b3fb-b38196c4be71",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cc1e7eb4-9451-4bc0-8ad8-8dcf1ac67c60",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b006c9d2-c835-4a43-ad8d-f4ccb4bf8b36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fb4d2347-a535-4e6e-b68a-2923ffcca34f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed5683a7-f34e-4031-9187-2975418fc07d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d01cf064-ddd3-4781-9f46-e7aae6d6a606"
                    }
                  }
                ]
              },
              {
                "id": "329eaab5-023c-46b8-b7b9-43d054602078",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad3dc627-44ba-48e4-8a32-7d6b6eaab4fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b02027f0-4b23-41ca-a7ca-0d5f1d889e50"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a86062ba-856d-4505-bd03-29f6c1af3a50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57ca7a1b-4691-4c45-b75d-fa75c6937278"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3bed680a-5555-4cf3-870b-8c95c1879007",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "766b6993-f984-48d3-8f83-b0e01fc74475"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f23e402a-02b9-4ad2-b967-ad579e8b0180",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38d19b67-c540-46f9-b06b-0b741f94ea0c"
            }
          }
        ]
      },
      {
        "id": "435ccaf0-22d4-4ca6-8640-38c35557afbc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c5b9fe43-fe8c-4044-986a-c3151f9d9699",
            "name": "Negative Testing",
            "item": [
              {
                "id": "628b3dab-8406-4408-b3f8-a8ede8cd99d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ebe8267-69e0-47f7-adcc-e8401c8fbf43",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28687c39-ab1e-4529-95ca-8cfae3363910",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dea50bdc-c70a-46b4-8dae-6f4b3003b308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44706a08-5baa-4bba-b264-6f794a933f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94871b60-2863-461b-807f-3c58ce34a56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4acfb1f3-e21d-42aa-9f26-829bf54d964c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf22885-6eae-4c36-8875-10c1317f11f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fa2aa971-d5b2-422e-b445-a597ef2215f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6114f4fc-6864-4988-985b-bec50ba07b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac02f82e-ae91-40a9-ac76-a56a232df48e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6849b584-4485-4dde-b724-fcf935ae6af5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dc8e80d-196f-496f-b159-1275d391b40e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5fe76bea-6660-4b27-bcd6-cbf6f8d98c96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "503da546-79aa-45b6-8d2d-d52da9e3484d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e7b0aba-7216-402e-b2b4-38cb0256d4a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "579b871d-7792-4804-9b09-2c3f9638e85e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc4f7902-89b1-4772-970d-439ffe5148dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "506ee5ad-210a-4e1b-beb9-46ba2e56a788"
            }
          }
        ]
      },
      {
        "id": "3ebce908-2682-415c-b710-a719fa7d4aab",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a499274b-e54c-4818-8424-b23caf672d66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a558c70c-11b6-485c-90b8-92b83c988e77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cfca95f-f795-4015-b54b-f2aa1b9c35be",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595f3366-7a46-43ae-8627-de6937ad8e35",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0620d644-c663-4cf1-b14c-f9e2f63b5d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9905fc65-2da5-481a-b3eb-94aaa26e4bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1e2c750-7bce-450a-9e43-22f1fc6fbc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cf1efd-4d9b-4aec-b31b-124d2f142c53",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b8749b-bd75-4fed-bc5a-c07d7d0ae148",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3766bfa1-0bb5-4543-9163-8904b18fa014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cf7592-9973-4190-9c0a-08d1361b64f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9568a47d-f42c-42ea-8ad3-4edbd189b97d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81c012dc-8b16-4cf9-bb51-ed018e4afe65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72086aab-fa9b-49e4-8929-51c616fe98f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1ce3634-d83c-4a5d-abc4-1368839f7e96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f417a83-9682-4d51-8f63-89dc52e7dfb4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea41077c-543b-43dc-8863-265463b036b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dad060a5-5d31-45eb-aee7-4e95e303fe2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a02ee6fd-6603-4821-842b-ed42d0b90d0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb4fed07-77bd-4bdb-80f8-1de361773597"
            }
          }
        ]
      },
      {
        "id": "44fe808d-3bea-4a56-83c2-ac1cd2024b34",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "faa6622f-2eb5-4076-903d-55b4eb71fadc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ae536c2-2988-4b5a-bb1c-9af83966d4f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f61604b-01c2-43ab-a7e4-8f5e11bdc755",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de70805b-f12d-4bff-a63d-fab6c0fc2187",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e4016ffa-f048-4ac3-950a-64e4e9881ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daebdd18-8c7d-40b4-8ee5-f8e959578ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e717f08-76a3-4147-9354-1f8005f8188a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85640e2f-7e63-4b84-adcb-9dd5e45fd864",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1691b43-c391-47fa-8735-09251ad03900",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b2bef6e1-3438-4274-9997-12c7542bb7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d761cd4-cece-4a50-9043-654403a4d85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "350a8ba5-e28a-4e23-8cef-1f6f6e101bcc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b1d7f6a-1f3e-49da-a11a-696f462d00dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb57361e-b10b-4bcb-9e83-e440ddafb362"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2396b39f-50da-4100-8ce8-bc6325c47f55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36b807e0-8442-464d-8a3e-0a59a16540f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6985c0f4-ab0f-4c88-98a7-7954c5bb5aa1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a998afaf-7ebc-4f1c-87fe-8c406ba475c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f4a8d6e-b156-4683-aaee-dde89e1dbf8b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6aef18f-2c3b-4521-86c7-ef63eb03e1be"
            }
          }
        ]
      },
      {
        "id": "edbd4bb1-e605-4e2a-8032-b38fb8461002",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75a9a3b5-c190-4349-96c3-21a883d25859",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71a1ff3a-93f0-474c-9b43-affc60fdef3d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4833dac7-dc0d-4ec5-8e21-96b0db2ef543",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "558ce63f-b368-40a5-9c00-429761cb34fa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84dac708-adb7-47b5-8c33-c93b9495d742",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 149.1564885496184,
      "responseMin": 7,
      "responseMax": 909,
      "responseSd": 170.6374061168759,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672447017387,
      "completed": 1672447070303
    },
    "executions": [
      {
        "id": "aba52b3f-8d7a-4605-b4fd-333b2899fcc3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e061debd-9ef7-4cdd-b6e6-cf5e40aa1a28",
          "httpRequestId": "fa323c7c-3159-4c10-95fc-86c0f8e0d227"
        },
        "item": {
          "id": "aba52b3f-8d7a-4605-b4fd-333b2899fcc3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0a3b2d55-866a-4b01-8968-72764565c236",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "7356cf7f-9f35-4bfc-951b-5a819652c68b",
        "cursor": {
          "ref": "f7314553-3179-4df6-98f0-62e70dbdef5f",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d391ce69-89bb-4ada-9910-4bb0f050aa85"
        },
        "item": {
          "id": "7356cf7f-9f35-4bfc-951b-5a819652c68b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "67fda8c8-6440-46cf-bb31-d92519ef8060",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "51a24e17-5a4d-4b1e-8775-664fb19e244e",
        "cursor": {
          "ref": "526acb32-9789-419c-b16f-87b90c9923fc",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "216c83b7-56a7-4718-925d-20daec8da768"
        },
        "item": {
          "id": "51a24e17-5a4d-4b1e-8775-664fb19e244e",
          "name": "did_json"
        },
        "response": {
          "id": "11ddca2d-4118-4c39-a35c-b47049785474",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27956c82-138d-42a6-a4a4-06dec7fdff0c",
        "cursor": {
          "ref": "4de57763-5773-44d7-a08e-0c328be045d3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a979815b-9e01-446d-9d0b-953c4182723e"
        },
        "item": {
          "id": "27956c82-138d-42a6-a4a4-06dec7fdff0c",
          "name": "did:invalid"
        },
        "response": {
          "id": "248f1a67-3ce9-4754-9570-3e1c6bfe6d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27956c82-138d-42a6-a4a4-06dec7fdff0c",
        "cursor": {
          "ref": "4de57763-5773-44d7-a08e-0c328be045d3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a979815b-9e01-446d-9d0b-953c4182723e"
        },
        "item": {
          "id": "27956c82-138d-42a6-a4a4-06dec7fdff0c",
          "name": "did:invalid"
        },
        "response": {
          "id": "248f1a67-3ce9-4754-9570-3e1c6bfe6d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fcfead8-3637-47d1-9876-f7f44a49a38b",
        "cursor": {
          "ref": "661e3a0d-2af2-47ea-8a8b-a1be81a9c618",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "627573e7-c4f8-4ca1-bc43-c880cde50062"
        },
        "item": {
          "id": "7fcfead8-3637-47d1-9876-f7f44a49a38b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "98314f88-5c8b-4f84-aef1-bcb1f3257510",
          "status": "Not Found",
          "code": 404,
          "responseTime": 101,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7541017-5842-41c2-9074-cdbbe87c0147",
        "cursor": {
          "ref": "f298d605-c16e-42ec-91e9-bad3d2ed717c",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bad85c96-9aad-4ff0-9b6e-a4dacafef22f"
        },
        "item": {
          "id": "c7541017-5842-41c2-9074-cdbbe87c0147",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5ef9a306-f4bb-410d-8d6a-4d79f56f634a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d403616e-52b4-4209-a9a2-bd73199a3ba2",
        "cursor": {
          "ref": "43574070-cbbd-4749-a5c1-faf9e3136d70",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cf99a558-435f-45b5-a247-62870c079245"
        },
        "item": {
          "id": "d403616e-52b4-4209-a9a2-bd73199a3ba2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "17413754-79dd-47dd-b6af-8b33c082389a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e1e288-2918-4771-95e7-b0854d0ef93e",
        "cursor": {
          "ref": "27840b7d-304f-46de-a8f1-29b181fabd70",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a2041577-b8c9-4281-b176-2a47798361c6"
        },
        "item": {
          "id": "b8e1e288-2918-4771-95e7-b0854d0ef93e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c5552aac-326c-4603-a052-bba096ecec53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e1e288-2918-4771-95e7-b0854d0ef93e",
        "cursor": {
          "ref": "27840b7d-304f-46de-a8f1-29b181fabd70",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a2041577-b8c9-4281-b176-2a47798361c6"
        },
        "item": {
          "id": "b8e1e288-2918-4771-95e7-b0854d0ef93e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c5552aac-326c-4603-a052-bba096ecec53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdab058f-49ce-4e77-a809-d7ff4870d713",
        "cursor": {
          "ref": "b19177be-1c83-421b-a9f2-c09f86c72ac1",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "34f6ba54-d07c-4807-8d49-d31a3ef8b91b"
        },
        "item": {
          "id": "cdab058f-49ce-4e77-a809-d7ff4870d713",
          "name": "identifiers"
        },
        "response": {
          "id": "90670cf6-77f2-4fed-a46a-6b190f5bf1f6",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e37628-95f5-452f-92ae-6c0b514c84f6",
        "cursor": {
          "ref": "e40bf159-aaf9-448c-911e-018828c620d7",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "798f7377-7f80-48db-a3b2-78f45536ecc8"
        },
        "item": {
          "id": "44e37628-95f5-452f-92ae-6c0b514c84f6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8da63c9c-47bf-4bcc-9220-7ebc5ac88cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e37628-95f5-452f-92ae-6c0b514c84f6",
        "cursor": {
          "ref": "e40bf159-aaf9-448c-911e-018828c620d7",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "798f7377-7f80-48db-a3b2-78f45536ecc8"
        },
        "item": {
          "id": "44e37628-95f5-452f-92ae-6c0b514c84f6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8da63c9c-47bf-4bcc-9220-7ebc5ac88cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21caa77e-4274-4213-aefb-321380699c3e",
        "cursor": {
          "ref": "9e9f53ad-b4f1-47c1-aac3-3db7ca5e6f48",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d144ae44-2a06-401f-81c4-56642687d3c7"
        },
        "item": {
          "id": "21caa77e-4274-4213-aefb-321380699c3e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4d5bae06-d6d0-4c76-bafa-992aa5e0bc6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c2c6af-8337-4a73-9473-1087f942198f",
        "cursor": {
          "ref": "3224f2fe-152f-4c5c-a931-380003c78398",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "90b49c22-0b9c-43de-8564-54b88b7ddf9a"
        },
        "item": {
          "id": "74c2c6af-8337-4a73-9473-1087f942198f",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "4753b19d-4382-4244-a711-f12c76544f3d",
          "status": "Created",
          "code": 201,
          "responseTime": 792,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "ffce5487-a0b1-4899-8624-0d0c096b9c24",
        "cursor": {
          "ref": "b21537cd-1a37-4bcd-89fa-4f2f7a703eea",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a6f9beb4-528d-4c2d-a5a8-10d1350819ca"
        },
        "item": {
          "id": "ffce5487-a0b1-4899-8624-0d0c096b9c24",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7c5882f2-de68-4d22-a70b-2516b421ea17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e645ac-16ee-41e2-ba32-ab35b6a17545",
        "cursor": {
          "ref": "2bda3642-9306-4823-b5d8-2f88933c908b",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4a553b74-0b48-42ec-afb2-53763f05dc99"
        },
        "item": {
          "id": "e6e645ac-16ee-41e2-ba32-ab35b6a17545",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "79b56f37-2900-4ed4-aba3-d557a6db9995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7699ed9a-a891-49cf-83cb-69b8d0b96bb9",
        "cursor": {
          "ref": "3289b8ba-ab39-46a9-8011-2877763d256d",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "edc12c00-5e0d-4ac5-b60b-84bc7b810b21"
        },
        "item": {
          "id": "7699ed9a-a891-49cf-83cb-69b8d0b96bb9",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8194fb8f-d870-4f07-98f9-86f1505d5117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116f0bcb-3cd7-485e-9ab9-25fca65d8326",
        "cursor": {
          "ref": "bf8c73d0-201f-47f3-afbb-a2e2f9ed9e1d",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fc0fe221-ac32-4010-80be-9311b56bb963"
        },
        "item": {
          "id": "116f0bcb-3cd7-485e-9ab9-25fca65d8326",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "96c8c1c3-fad3-4aee-9edd-faac74b47386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea5b1f7-4219-4560-9695-8fa84cb1a4cd",
        "cursor": {
          "ref": "54c384af-80d8-496a-89a9-bb7b78cf2808",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5aa36802-0731-4042-bf31-aa092cb5b6e5"
        },
        "item": {
          "id": "fea5b1f7-4219-4560-9695-8fa84cb1a4cd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6770cd6d-ef94-46f1-a999-5aac0b4bd06a",
          "status": "Created",
          "code": 201,
          "responseTime": 610,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "8d09509b-f0ad-42a3-af90-3168964e6046",
        "cursor": {
          "ref": "d9bc281a-bc3a-4fc1-ae68-d24c74ee7b7e",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c220ceb5-1ed5-4ccf-849b-eb4286712ea7"
        },
        "item": {
          "id": "8d09509b-f0ad-42a3-af90-3168964e6046",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4ce2f54c-b737-4da7-9c42-4637075ca946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480c044e-bb3d-4448-b6de-05fb800b2832",
        "cursor": {
          "ref": "8a07b44e-cf35-40ff-af82-57393a2b895c",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1f2ee77a-f3f5-4438-a96b-e8a58c0057e8"
        },
        "item": {
          "id": "480c044e-bb3d-4448-b6de-05fb800b2832",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6c3c2237-e3bb-4bb9-ab0f-e132445c1ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75aa66c0-8b00-4c21-b4d1-3224eeb1ff96",
        "cursor": {
          "ref": "46f85b3a-623c-4794-93ba-82498e3cc262",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1f27b89c-0886-4c4c-ac3c-4acf7dd4ab95"
        },
        "item": {
          "id": "75aa66c0-8b00-4c21-b4d1-3224eeb1ff96",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "477b1894-452e-4ef1-bfc0-40b18cb073fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b249a8-8171-410e-937c-6c64a37000a1",
        "cursor": {
          "ref": "8c0b80f0-76b2-4100-8a5b-dd1bb18cb329",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "63abd496-1f78-4936-8beb-1f7e8a9b3703"
        },
        "item": {
          "id": "e6b249a8-8171-410e-937c-6c64a37000a1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "65ccf424-1c76-4da9-8ad7-ef5c65f9dae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8395cca8-e48f-4cce-867f-305f2f1d4683",
        "cursor": {
          "ref": "9e903cb5-cfe4-4b6e-8812-d36c488ebc7d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "89f53b8a-05e2-49af-8fbc-32e7a5be0e30"
        },
        "item": {
          "id": "8395cca8-e48f-4cce-867f-305f2f1d4683",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cec5ac6c-3c73-4c9a-872e-f126adfe805a",
          "status": "Created",
          "code": 201,
          "responseTime": 547,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "2f796800-8eda-40dc-a7af-bf8fba2337d4",
        "cursor": {
          "ref": "650bf49d-ae75-429f-9d5f-3336e8f5bc55",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0d02911d-135e-4eb8-9e29-524fe62aa6dc"
        },
        "item": {
          "id": "2f796800-8eda-40dc-a7af-bf8fba2337d4",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "0f5d9108-b3b7-412f-b54e-319b014ff90c",
          "status": "Created",
          "code": 201,
          "responseTime": 909,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "fec395a8-ed93-4762-afe1-50fe0ca04f2e",
        "cursor": {
          "ref": "00828394-d940-4d86-aed8-a8f5fc6d2b28",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "22b23d5e-70ad-4d9c-8fb7-c05f9addcf99"
        },
        "item": {
          "id": "fec395a8-ed93-4762-afe1-50fe0ca04f2e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b67e0245-0130-47f7-8239-9b8f70dcb7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66611120-776d-4d15-ad2e-080406da87dd",
        "cursor": {
          "ref": "455e4de1-3dde-4076-b50b-2d91a7ec7791",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "771fd1b9-ee26-47c5-8175-e85200485afb"
        },
        "item": {
          "id": "66611120-776d-4d15-ad2e-080406da87dd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c10e273b-873e-4099-b7fa-4659664222b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ac7de6-a2ef-4d5d-a796-68eae42f983e",
        "cursor": {
          "ref": "e9d7f31d-0557-4103-80a5-022b58b1b942",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "86a1e80a-f239-4152-91b7-b90e01ae7c8f"
        },
        "item": {
          "id": "e7ac7de6-a2ef-4d5d-a796-68eae42f983e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5bb90222-51e9-4d0c-b17b-b34d333258e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d362ec9-aafc-4186-b8f1-7e05dc58fb47",
        "cursor": {
          "ref": "dbdb75d1-ad19-486f-a7c5-6323445a135d",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b38cdfa7-149f-4d91-b27e-5faa053eb8c1"
        },
        "item": {
          "id": "2d362ec9-aafc-4186-b8f1-7e05dc58fb47",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8d67e975-269d-4130-bdad-bc859a1417a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c344e5-00f0-4ffe-b25d-225e7b3e4dd5",
        "cursor": {
          "ref": "b253dc17-6aca-433d-ba28-34bf22fc057b",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "567cdeeb-2fad-4a9d-a8d9-b44160d9ecd2"
        },
        "item": {
          "id": "72c344e5-00f0-4ffe-b25d-225e7b3e4dd5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "923408b7-99a5-4826-92c9-5c71c38b3e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779c15b5-7362-447b-85a2-090d1c2078eb",
        "cursor": {
          "ref": "85056a19-ad24-4ef3-a803-2ddf306227f9",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6e1e3c36-b9e2-4ef3-8410-7f2b8a872e5f"
        },
        "item": {
          "id": "779c15b5-7362-447b-85a2-090d1c2078eb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fc43fa4f-faee-44e1-a455-9d96df3c0166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f022dd87-5bae-4eeb-a1fa-f0aedf756e6a",
        "cursor": {
          "ref": "cb4bd45c-0579-43c3-b764-4fd52ae05f68",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cb0297e5-d009-4393-8309-98d6629d8332"
        },
        "item": {
          "id": "f022dd87-5bae-4eeb-a1fa-f0aedf756e6a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5380bf0a-df65-4cad-b251-d4cd8b98b17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fc2677-777b-4839-842b-3ef157608896",
        "cursor": {
          "ref": "5822ef09-9f1e-42ba-9120-b29e46fd6529",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a626a94a-5488-434f-9f94-732a774da2fc"
        },
        "item": {
          "id": "e5fc2677-777b-4839-842b-3ef157608896",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "66548f70-9021-4080-b5fc-7bd22da6218b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96e24ce-4435-4ee0-90f6-9d37b5e33fce",
        "cursor": {
          "ref": "c9736898-3b0f-4172-ad4b-d5a46fba1bad",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7a8cbc8b-ec37-4e18-a590-3d4190308c20"
        },
        "item": {
          "id": "a96e24ce-4435-4ee0-90f6-9d37b5e33fce",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d483c0b7-c363-4988-99dd-be0c24537b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be376de-1aa4-4ae4-9f68-5b1e93824ad0",
        "cursor": {
          "ref": "1cc15458-d22d-4f04-9df8-a62653508583",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "31cac0be-7d16-485a-ae33-be1488718066"
        },
        "item": {
          "id": "9be376de-1aa4-4ae4-9f68-5b1e93824ad0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6ed8b0b6-5ed0-4b86-8572-b56839d528fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a016b3-c3e7-4753-ac27-3b4acfa668ca",
        "cursor": {
          "ref": "88bfb439-b498-4c69-9252-51c89b701026",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bcf72d8e-d95a-4f79-bca8-a26df823b82f"
        },
        "item": {
          "id": "18a016b3-c3e7-4753-ac27-3b4acfa668ca",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c0d0b920-be1b-4a5c-8c05-62a8820330d5",
          "status": "Created",
          "code": 201,
          "responseTime": 704,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "25bfc80e-27d5-46b4-9ab4-66595d1f623f",
        "cursor": {
          "ref": "f604390b-f100-4f65-bc8c-a4b3551ab676",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c3a92b35-ccd9-472c-bc3a-635f405a53a5"
        },
        "item": {
          "id": "25bfc80e-27d5-46b4-9ab4-66595d1f623f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c3a0a2a9-06b6-4082-884b-bba6afaaf9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6194a573-1004-4bf6-a635-d109f4971956",
        "cursor": {
          "ref": "4656c764-2925-4105-b387-f0acae3009f4",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d17ffca6-438a-498d-9a9c-9789f187c309"
        },
        "item": {
          "id": "6194a573-1004-4bf6-a635-d109f4971956",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1bda0707-e453-4bda-a1c4-2f57a3783930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74013224-1031-4740-bb7f-bff7a9760d3a",
        "cursor": {
          "ref": "3140414b-9c1e-4c6f-a3c5-a867a57f5955",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "845a6704-2ac6-4975-8ce3-32c34e4d90fd"
        },
        "item": {
          "id": "74013224-1031-4740-bb7f-bff7a9760d3a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2bc2a1f8-9893-4ad8-9226-f0490a8ff04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a9fb9a-da99-443f-ab61-8df0a64a7935",
        "cursor": {
          "ref": "e95c33f2-42aa-443f-ad5a-1e7307a13bad",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b8a7ab31-d3d9-47d6-923b-2f568d4d1807"
        },
        "item": {
          "id": "f1a9fb9a-da99-443f-ab61-8df0a64a7935",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "190fdeaf-3c9c-4a77-a70f-634cd6fbc1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5535b20a-7111-41a3-b5c0-fd191930594f",
        "cursor": {
          "ref": "fa24e63c-575f-4788-9ae1-89933968459c",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "903ad0a6-9fa8-4c93-8ec6-cc58a83580cf"
        },
        "item": {
          "id": "5535b20a-7111-41a3-b5c0-fd191930594f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "09b65c17-6b1d-4864-a4d9-07188580e891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af84a6c-887f-4bcc-843a-eb835d82f65c",
        "cursor": {
          "ref": "f5b27ee8-e5e6-441c-996f-abcd87fa6508",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "729b0fa7-ebac-47b4-baa7-36907c4691b6"
        },
        "item": {
          "id": "3af84a6c-887f-4bcc-843a-eb835d82f65c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "89782702-fd03-4e82-b0b1-57a9d769b3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fbbaa2-1a2f-4638-952e-78f86173fcd1",
        "cursor": {
          "ref": "13cec382-a7a1-494f-8687-15119418d7ad",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7fe9db47-e24b-4227-805f-6d4971058e3f"
        },
        "item": {
          "id": "28fbbaa2-1a2f-4638-952e-78f86173fcd1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "91642855-e50f-4f4b-ac90-f90cad133748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81c1f32-4531-4855-9c01-4cfff8c842a2",
        "cursor": {
          "ref": "82d8f62a-853b-4b3d-883f-714a99633569",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9c874aa4-14bb-49c4-b0b2-f9c08ddb4992"
        },
        "item": {
          "id": "b81c1f32-4531-4855-9c01-4cfff8c842a2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d67601c9-df14-4115-8346-afe73bf019b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb64c74f-9d72-4798-887f-669521c03e66",
        "cursor": {
          "ref": "40228f65-ff8e-4655-b5bc-2e2298de1f71",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "02168ac5-0ffa-42ce-bb1a-8dc40659d2a9"
        },
        "item": {
          "id": "cb64c74f-9d72-4798-887f-669521c03e66",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "62756d91-7eb8-4a6d-9919-36f9f79befd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0d5bba-c144-4b9f-afc1-8916de222535",
        "cursor": {
          "ref": "45d43bef-c7f1-4b8e-ae8b-d6b0a5c030c4",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0c4a1e5a-f3c0-4a61-adce-77f74dc6fd51"
        },
        "item": {
          "id": "3f0d5bba-c144-4b9f-afc1-8916de222535",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6c83657b-015f-47e5-9f2e-ec6707ed7241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d13953e-165b-46e5-82fb-f826766048a6",
        "cursor": {
          "ref": "f85db47a-24bf-4ccb-8480-1245a2e33dbe",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "57089d5f-bba8-4669-9984-87b4a6a37147"
        },
        "item": {
          "id": "4d13953e-165b-46e5-82fb-f826766048a6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "83254a79-9a8e-469f-82c5-2a94dfe3d296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d1c9df-9282-4d4c-be93-5679f7ec3f17",
        "cursor": {
          "ref": "d53cd108-f63d-4e6c-957c-d11bcbb15815",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "09df7d54-bef5-4eaf-9ccd-49515220f580"
        },
        "item": {
          "id": "c2d1c9df-9282-4d4c-be93-5679f7ec3f17",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bbe7492c-3e19-47eb-8b57-852b938beebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32146012-1862-44c4-8f18-941b22679bae",
        "cursor": {
          "ref": "db007021-8a77-4dd8-ad2c-0544c85f3044",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "431c244e-b54b-42b7-bad3-2cf8fdd17ccc"
        },
        "item": {
          "id": "32146012-1862-44c4-8f18-941b22679bae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "48cb0093-dd43-45ca-8981-1f19c024cd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 392,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d51c75ac-fa91-4303-a1f7-3bcb598a00a4",
        "cursor": {
          "ref": "dbd53cf4-8e03-4c69-8eba-fcffd46a586e",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7f6be946-66a2-4e8c-b930-f76df94bfa44"
        },
        "item": {
          "id": "d51c75ac-fa91-4303-a1f7-3bcb598a00a4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ba0f83ab-d519-42d9-b87c-a1e096be056e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352cb87f-5dee-4d2c-a464-3f03c8caa2a7",
        "cursor": {
          "ref": "52fbb00b-9a90-437b-87c2-f71c4d65120d",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a3da0531-40f2-462d-8f60-395e9ffaeac7"
        },
        "item": {
          "id": "352cb87f-5dee-4d2c-a464-3f03c8caa2a7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c3c48a37-7999-46c2-a270-1d52ec7644e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677e72d3-cd60-4a51-b959-92caa1ae104a",
        "cursor": {
          "ref": "c13fa8b6-df91-4617-878e-b949c83cc4ca",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ca2ec27e-de8f-4e2d-a6a1-638daa770f2d"
        },
        "item": {
          "id": "677e72d3-cd60-4a51-b959-92caa1ae104a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "52cab70d-a284-4fb0-a79e-8dd506ae3884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583b8ed4-47c1-42a4-b883-eec3ea407a96",
        "cursor": {
          "ref": "1f8d5e05-5b6b-4544-898b-dde3c4001225",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5e23e3f4-3239-4c80-b16c-9e982b619bb7"
        },
        "item": {
          "id": "583b8ed4-47c1-42a4-b883-eec3ea407a96",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "85eece8e-d1e2-47e4-9030-99fcc471c20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba926601-fcc8-4763-a1a6-36df20db5e70",
        "cursor": {
          "ref": "a3008dab-b72e-49fd-bbf1-1b07b8a7402f",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "042458ec-e18b-4382-96af-1e989d91354a"
        },
        "item": {
          "id": "ba926601-fcc8-4763-a1a6-36df20db5e70",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d53f073b-fe5b-4caa-a47c-abdb271008b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c83f83-acb1-464d-817c-0e69bbe41d6d",
        "cursor": {
          "ref": "8f76b198-6b66-4fca-86ca-4de2198ed0c2",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "93018e0f-6e85-48ce-b3f4-eb3324967043"
        },
        "item": {
          "id": "64c83f83-acb1-464d-817c-0e69bbe41d6d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "119d1586-2be3-4ea4-9ac5-a5f24bf83a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a957d2ee-6070-4790-b81b-c5870fee0639",
        "cursor": {
          "ref": "b0a9f598-e5f3-4fdd-bd54-35859bfb418c",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3edaa89a-51d2-4bfa-a3d0-1bdd204261b9"
        },
        "item": {
          "id": "a957d2ee-6070-4790-b81b-c5870fee0639",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9abf338b-c0cd-4ff7-8a8c-89a59a395460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "8984dd6d-de5d-4269-8d80-0a8ec42bbb11",
        "cursor": {
          "ref": "53f4d61d-4d14-4690-a78f-298395b81572",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "88559467-bfd9-45e1-ba2b-d1edbf98e608"
        },
        "item": {
          "id": "8984dd6d-de5d-4269-8d80-0a8ec42bbb11",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cf5dd74e-2451-4fad-a42b-994506a2f5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7e6c62-c957-4e29-b1a9-5a6bad111179",
        "cursor": {
          "ref": "3000bfdb-a24c-433e-9681-196fac1bd447",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "789214f8-b959-4c15-82fb-3b51351fd92c"
        },
        "item": {
          "id": "7d7e6c62-c957-4e29-b1a9-5a6bad111179",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "65f355e6-171b-49c8-b21e-3efe14e7a5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff312f1c-b4f3-41bb-b5d0-0dabc92822ec",
        "cursor": {
          "ref": "9dbf44a7-153b-4f45-86f8-3742ab32cc0c",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f2293cc8-0696-4494-b473-0d49d194b894"
        },
        "item": {
          "id": "ff312f1c-b4f3-41bb-b5d0-0dabc92822ec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2b628cd9-60f4-4027-b6f2-cf42a1391c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18aff711-aa98-4f75-9b51-19c90b6f0c13",
        "cursor": {
          "ref": "f41ffd67-0e09-463b-96e5-a854c8628174",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ee78e218-ad79-4bb6-953b-f077e4c85c97"
        },
        "item": {
          "id": "18aff711-aa98-4f75-9b51-19c90b6f0c13",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cc44b52c-1216-4139-9a65-179689320bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4bbbc3-0057-4090-aaef-610a84a6161f",
        "cursor": {
          "ref": "e5e4d050-ae1f-4b6b-a380-5b9a07957736",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2e0ae921-a641-4007-90a3-e42d2825ad4c"
        },
        "item": {
          "id": "6f4bbbc3-0057-4090-aaef-610a84a6161f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1d9f8e21-0e6d-4845-a8d4-cbfe3beb8824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31adff51-627a-468e-99e4-1e3490c70517",
        "cursor": {
          "ref": "1310d989-d0e7-487a-ab34-37ab09b517c9",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b4fb8e2e-6036-4bea-9081-99cc0e71c893"
        },
        "item": {
          "id": "31adff51-627a-468e-99e4-1e3490c70517",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e19c2b4b-aae4-4784-8f7b-1e2bfc4ad1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3509a3ab-8184-4d41-a5b9-8cdeb4ab7f2f",
        "cursor": {
          "ref": "f45c798a-5c13-4a12-9432-80ccba6e59cc",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b9992f87-3d06-496e-a83b-1506046d145d"
        },
        "item": {
          "id": "3509a3ab-8184-4d41-a5b9-8cdeb4ab7f2f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ef29cdbb-a93e-4c0f-8fe0-83561903b946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eece2327-8979-4fd0-b3ee-314a1ea5e8dc",
        "cursor": {
          "ref": "9842d94f-4d92-4734-a099-e6b8ad987bf9",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "503118ab-1343-4b52-a4c6-34e923a358bf"
        },
        "item": {
          "id": "eece2327-8979-4fd0-b3ee-314a1ea5e8dc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "db855df1-fb0c-4500-aab6-b97dd0931740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e5d116-8938-410e-b850-3b15f50e53c4",
        "cursor": {
          "ref": "771fe1f4-333b-4c8a-8895-37d2b29e8b97",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d8ad3d0b-59df-4ffb-ac93-398fc50b136a"
        },
        "item": {
          "id": "e1e5d116-8938-410e-b850-3b15f50e53c4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "eb00ae01-8eb0-464a-90a5-dd25b8392cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555a611e-9f61-4821-bc83-8df327f006c7",
        "cursor": {
          "ref": "cf41dee7-2800-48ae-9a7f-230ab4492581",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "06eff1eb-2130-4b63-9f95-f64809129ead"
        },
        "item": {
          "id": "555a611e-9f61-4821-bc83-8df327f006c7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2a53bcce-6495-442c-8edb-8a86208e3a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6dfec6d-995e-423a-939b-78c99cf93b51",
        "cursor": {
          "ref": "352b73a3-acba-42bd-82da-78ed31d48133",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2d536d89-9d29-471d-8aad-15fb454a279f"
        },
        "item": {
          "id": "d6dfec6d-995e-423a-939b-78c99cf93b51",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4dead3ac-802b-4a27-bf3f-cc4ae072a60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7502f3-3c66-4651-af23-bf4b03c1f22a",
        "cursor": {
          "ref": "ff54153a-bdec-4127-986d-94a9b78e906f",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8b0624e8-be16-4263-a671-d0e367241a49"
        },
        "item": {
          "id": "ab7502f3-3c66-4651-af23-bf4b03c1f22a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "65917df9-2a57-4370-9346-bd2f5e42408d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90fe2f0-4730-4d79-8aa1-dff9f0dd773c",
        "cursor": {
          "ref": "bcc6a0ca-08ef-44c2-a2b6-bd9707ec849f",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "0d5f1e83-0241-4fb2-be5f-b36be2206d3f"
        },
        "item": {
          "id": "a90fe2f0-4730-4d79-8aa1-dff9f0dd773c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b5d63390-c928-4685-84c6-f239c4fa43f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01351235-5c80-40f3-9de6-2e2912cd61ac",
        "cursor": {
          "ref": "3e3988bb-702c-41f8-b90c-d1f6f8b7a7d0",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8ab46ff3-6366-4256-b112-4f2b828af2c2"
        },
        "item": {
          "id": "01351235-5c80-40f3-9de6-2e2912cd61ac",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8af1544e-e0ec-4273-8165-bd99db4494a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82bd9cfa-188a-4281-9d90-7697cb174b09",
        "cursor": {
          "ref": "eb430c3d-86a1-49a6-a593-92a85127f664",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9e9ce09a-054b-4ae9-8e12-2bd7a0a53872"
        },
        "item": {
          "id": "82bd9cfa-188a-4281-9d90-7697cb174b09",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1910489a-499f-446e-ae7f-9e9c7149a226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa8ac9a-8508-490d-81a4-1decc68be699",
        "cursor": {
          "ref": "a17e89a6-7298-4a3f-8d05-9829c0e669ef",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "03dd2302-7cf8-428c-90fd-07c376858338"
        },
        "item": {
          "id": "4aa8ac9a-8508-490d-81a4-1decc68be699",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cdbbffa6-fe41-4262-a234-58e0d3dac25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6360fda6-d130-4418-a824-4a8d942c8223",
        "cursor": {
          "ref": "754a9c83-dcfa-4587-bcd3-e64dc31150b6",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "78202986-f597-404c-88c2-d68d1867c303"
        },
        "item": {
          "id": "6360fda6-d130-4418-a824-4a8d942c8223",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "383c0d41-5ad1-47d8-a189-afc454bceeda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f75aec-30b9-4012-a445-ac946c8757c8",
        "cursor": {
          "ref": "8dcef83c-3194-47df-91ec-8719274f592c",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9dd755ae-f09e-4723-bb2e-e34c2522b924"
        },
        "item": {
          "id": "b9f75aec-30b9-4012-a445-ac946c8757c8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5d96c119-4fd0-4ea6-a388-5566f98e8067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab344c52-8acd-45f8-aa9e-b91a87ff502f",
        "cursor": {
          "ref": "f7a8c167-a252-4450-9275-e85906965c0f",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b3182c07-e3c5-4440-89d6-cb41c6c3cdbd"
        },
        "item": {
          "id": "ab344c52-8acd-45f8-aa9e-b91a87ff502f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1de30a1c-35c3-4730-a95c-9bb4d1d3920a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f78701-69f4-41ad-850e-891340569412",
        "cursor": {
          "ref": "c1ec9d48-feed-4af4-a7ba-fac1a80d4a58",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b1a4ae3f-91e3-472a-a2eb-f8a81cf2f216"
        },
        "item": {
          "id": "91f78701-69f4-41ad-850e-891340569412",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b8201c30-0866-4c32-ad38-03f359a12ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123824e4-237d-45c0-b032-4881c8134b57",
        "cursor": {
          "ref": "53251ce9-9dc0-4cee-acb2-07da27597c4d",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4bfd58cd-02d0-4522-b1ee-74ff7bf67eba"
        },
        "item": {
          "id": "123824e4-237d-45c0-b032-4881c8134b57",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "66dc65c6-f1bd-4693-a696-0b6ce00a918b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7718a7-0337-4e71-8a42-42f961faafd2",
        "cursor": {
          "ref": "34d23f9d-8096-4eab-823f-d3abe02bd315",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f9110235-ddb7-4d21-83d9-93e57194d893"
        },
        "item": {
          "id": "aa7718a7-0337-4e71-8a42-42f961faafd2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6b6d9c77-a9c3-4e5b-a2bf-28bb5d81328e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c99e100-dc34-4bc9-b15c-ed9f288bd9ab",
        "cursor": {
          "ref": "aba7b24f-5581-433b-bc43-e55967d1b821",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "373580e4-6bc7-40a0-9ab9-db9039f056f8"
        },
        "item": {
          "id": "5c99e100-dc34-4bc9-b15c-ed9f288bd9ab",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "038c85e8-a9e6-4577-9cb7-461202bba2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0742b0-da6f-4f0a-9a4c-f01bdccbd781",
        "cursor": {
          "ref": "4f9a45af-6c69-4b7a-9719-b392ce4bae57",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5ca30de6-6ede-419a-b6f3-681c4d023a59"
        },
        "item": {
          "id": "cb0742b0-da6f-4f0a-9a4c-f01bdccbd781",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "33dabdb5-a1bc-4605-bfc7-f06c4c8f7a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b65ccaf-1b7c-4d3c-a8bc-8a4cf1ddb301",
        "cursor": {
          "ref": "afea8a13-45d8-4147-835a-343f4dbee058",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "65d42e5d-dc7f-4eed-b10b-b984631eeffa"
        },
        "item": {
          "id": "1b65ccaf-1b7c-4d3c-a8bc-8a4cf1ddb301",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0f0377ba-f614-49b6-b5cc-8e6fc95241f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ff6d8a-0672-4de6-8b62-456e1ba6b618",
        "cursor": {
          "ref": "89e878bb-40b4-4efe-86b7-f20b148f61bc",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8e177470-c817-4176-9d40-8ab6a22c0c75"
        },
        "item": {
          "id": "40ff6d8a-0672-4de6-8b62-456e1ba6b618",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "71763669-9070-4395-89d3-7e50cd47eacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb305f2-c0f4-4885-8be4-d143af12b9b0",
        "cursor": {
          "ref": "b16dcc5c-e171-4435-bb26-ed66e163809f",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a40734c3-4bfb-4475-8a04-3ada3a5a04ed"
        },
        "item": {
          "id": "bdb305f2-c0f4-4885-8be4-d143af12b9b0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "96189d9e-cb72-43f5-9ae7-f70d685f31b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9b8764-058d-4508-8caf-1f70736a8934",
        "cursor": {
          "ref": "37571461-30a9-4d61-a795-20ec0588ac80",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bea53833-7ad1-4fbd-8846-761580774d01"
        },
        "item": {
          "id": "ad9b8764-058d-4508-8caf-1f70736a8934",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "eabea726-1953-4c96-b0e1-fd98baa9ac42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36006ef0-4cfa-48f5-9183-d5f211674793",
        "cursor": {
          "ref": "3e64fb52-9d19-4c99-b545-d14cd7cd2d13",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "20b22fdf-93da-4a08-a4c8-4439e77ab42f"
        },
        "item": {
          "id": "36006ef0-4cfa-48f5-9183-d5f211674793",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "39dde7ad-57ec-4c72-904d-aea7558bdd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d364aa-e860-4a74-89ca-32a04b858fed",
        "cursor": {
          "ref": "f508ac27-0d0f-4947-9ca2-839f20344ca6",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3b70aefc-4f62-4f91-a0b9-45e17685f865"
        },
        "item": {
          "id": "30d364aa-e860-4a74-89ca-32a04b858fed",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ba975557-c27a-44b4-a892-f61cbd0bb355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7f0cc4-50c9-4813-8c5d-ec706aa676fb",
        "cursor": {
          "ref": "6942cfb1-7123-47b5-a16a-6425e5d4cc32",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "869c6912-ff91-42de-9fa2-92f7e510f2b7"
        },
        "item": {
          "id": "bf7f0cc4-50c9-4813-8c5d-ec706aa676fb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "75452fd8-8c11-4db4-bee7-b6daf66f569a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 438,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6745d668-1a38-4d7b-86f9-b919d71e02c6",
        "cursor": {
          "ref": "1c715dda-2635-4573-9246-32cafa0c64a3",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5ac67150-ff67-42dd-b181-07be5864e75b"
        },
        "item": {
          "id": "6745d668-1a38-4d7b-86f9-b919d71e02c6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8834d7c6-ec6b-4d75-97ac-c16851d4d427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3abf8b82-f8cd-472d-8091-9e4bacf8c4c3",
        "cursor": {
          "ref": "50de062c-1c1e-428e-b5c1-d862dfa83685",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9afb9e0d-6223-41ca-ad83-804de67d6e02"
        },
        "item": {
          "id": "3abf8b82-f8cd-472d-8091-9e4bacf8c4c3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fb785eab-6209-452b-bd5d-ed72f8197fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe095bcc-f5be-4338-91b4-1264821a5cef",
        "cursor": {
          "ref": "f2fb254f-7c4f-4aa4-849b-0dd870b6dc7c",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d8044607-f547-4a7c-8995-352adf662944"
        },
        "item": {
          "id": "fe095bcc-f5be-4338-91b4-1264821a5cef",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7c9d09aa-1106-4582-81d4-0174b2b8d721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91daf69a-bbd3-4cd9-a42a-6f615decf2ef",
        "cursor": {
          "ref": "b7d5eea0-f270-43b0-bdd9-de9627af9938",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1b38ccf3-82aa-419d-8b35-43c11efdb0f5"
        },
        "item": {
          "id": "91daf69a-bbd3-4cd9-a42a-6f615decf2ef",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "49da9823-a709-4a76-a65a-b44d475b257e",
          "status": "Created",
          "code": 201,
          "responseTime": 736,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "dbfbebc2-7a1c-447f-8fe1-959a2d178905",
        "cursor": {
          "ref": "47e60001-4a9c-4eb0-826f-c5e9c6617e90",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "72e1eee1-8d08-4c64-b1cf-dd8abe879a76"
        },
        "item": {
          "id": "dbfbebc2-7a1c-447f-8fe1-959a2d178905",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2fab5b47-989a-4107-a249-440532046f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15668bcb-2880-42cc-a36e-613ea47a8b98",
        "cursor": {
          "ref": "63c73561-6504-488a-b531-45391d92cc2d",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "61ff883d-2342-4676-9482-d5535055d1a0"
        },
        "item": {
          "id": "15668bcb-2880-42cc-a36e-613ea47a8b98",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "06ad0021-756f-4ab8-aef3-16edbdd7fe86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238cc795-956f-4622-afa7-e27dffb3fd69",
        "cursor": {
          "ref": "b5a7d340-d21f-4fef-a91c-fb8804a9edfb",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d96db7f7-e103-42cb-8d04-8100138783cd"
        },
        "item": {
          "id": "238cc795-956f-4622-afa7-e27dffb3fd69",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "439ce027-f445-4f9a-b23e-2a08473241d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c349eeb9-f0f5-473c-8733-f575250d90f9",
        "cursor": {
          "ref": "1e54c0ac-a9e7-4ae3-877b-bea0aa2dfcc3",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ea53f5fb-87cd-422b-9189-53adf5108b09"
        },
        "item": {
          "id": "c349eeb9-f0f5-473c-8733-f575250d90f9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3a9a029d-93be-4d3f-9387-59a59988cef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c22d28-2a75-411e-b812-722c04193268",
        "cursor": {
          "ref": "f49122ff-3ed4-49d7-9d64-4f8cf944e3c5",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8a55d02d-80de-4927-9bfd-382f16c566c6"
        },
        "item": {
          "id": "06c22d28-2a75-411e-b812-722c04193268",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2ffaaa5e-2786-453c-9d69-38ab00907a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f4fcaf-1072-4e3a-90a9-9edd9fa6bb2a",
        "cursor": {
          "ref": "448f851b-b87f-43a5-adab-3664fcb87d31",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "026deeea-3d12-4f25-b65b-bbd541839802"
        },
        "item": {
          "id": "e3f4fcaf-1072-4e3a-90a9-9edd9fa6bb2a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "878e0683-06de-4919-8e63-9c2fd5072b51",
          "status": "Created",
          "code": 201,
          "responseTime": 706,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a23ab89f-5693-44c9-9313-36a02ca0406b",
        "cursor": {
          "ref": "01634ef4-27b8-42d4-bd74-4919c9ed68ca",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "be53caac-2df6-47d2-8996-54af2aa38e35"
        },
        "item": {
          "id": "a23ab89f-5693-44c9-9313-36a02ca0406b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cb3c8bdc-3164-44ec-a5d4-af172e5bfa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63163ba-cc1c-49f8-b51f-6d0bb8f4b877",
        "cursor": {
          "ref": "79e096cc-21ba-46e9-bc68-755812791bee",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c01b3ecf-acfd-4b1d-b0bb-4323fb0cf010"
        },
        "item": {
          "id": "d63163ba-cc1c-49f8-b51f-6d0bb8f4b877",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9f8ff191-7d50-467c-8afd-9f961cdb2f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a02763-0ba5-4de8-bd77-fd5f059abe83",
        "cursor": {
          "ref": "06869df4-96f9-41fc-a5f7-e6f9cf369014",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6f41871a-8cba-4809-85e0-85e9929bf3b2"
        },
        "item": {
          "id": "b0a02763-0ba5-4de8-bd77-fd5f059abe83",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8ab18cc8-1709-45fc-98d2-0d4e4136b20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489e1676-5055-4e55-a19c-5e4c55ac6f57",
        "cursor": {
          "ref": "b5ea4927-cb05-4d86-bcdc-7a3f61000f0f",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8fc7eb2f-be28-4483-952d-37a9732dff63"
        },
        "item": {
          "id": "489e1676-5055-4e55-a19c-5e4c55ac6f57",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4d0b4288-ad7f-4126-9b93-514ba6cac71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6651f81-bfad-4cd7-b595-031a6cfa47a2",
        "cursor": {
          "ref": "8e08499f-890a-4236-bc4d-f8f3bae61024",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "32fc04dd-6027-4472-9ba6-53ef312b7450"
        },
        "item": {
          "id": "a6651f81-bfad-4cd7-b595-031a6cfa47a2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "75c7121f-a2fa-49c8-8c12-2db01721301b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8770c80f-685f-46e8-8150-012bda9235dc",
        "cursor": {
          "ref": "68f6550d-ac8e-4994-b87e-cdd5b581fea4",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "29c2bc3d-ec2b-473a-a885-4c4f159b3139"
        },
        "item": {
          "id": "8770c80f-685f-46e8-8150-012bda9235dc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "52e271a6-0172-40ec-912a-838b5ead9336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71c82cc-d9d7-4e0a-bfdc-dc72bea083e9",
        "cursor": {
          "ref": "893420ab-524c-441c-98c2-bd380923f862",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "259072d8-347b-4732-98fd-145af3e3ead3"
        },
        "item": {
          "id": "c71c82cc-d9d7-4e0a-bfdc-dc72bea083e9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8d604759-4b0f-4e64-8b51-ff6f345f3efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5501cd09-6b4f-4c0c-9420-a5e88838819b",
        "cursor": {
          "ref": "97095c93-b358-4b06-9c42-72ab4c274418",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6cdf4d5c-318b-4cdb-8858-2b6f8b71f955"
        },
        "item": {
          "id": "5501cd09-6b4f-4c0c-9420-a5e88838819b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "39971df1-4d0d-46ed-99bb-40e76fb2e542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6336d75-3ef8-4c95-bd9c-56a1def8fc5c",
        "cursor": {
          "ref": "4e491903-1051-47b9-9b74-e4adb0bdbaeb",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ba070fa5-2e8b-4b0f-918d-e6c1d8420938"
        },
        "item": {
          "id": "a6336d75-3ef8-4c95-bd9c-56a1def8fc5c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3d9c7fd9-57d1-4590-9826-25889e641c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "131ad5f7-12a9-41c0-a361-55aa9bef1a92",
        "cursor": {
          "ref": "f5681a77-50a1-4f0f-8cc1-8d5367c960a0",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7a7df5dc-ddf3-4699-aa08-f9e9d808d915"
        },
        "item": {
          "id": "131ad5f7-12a9-41c0-a361-55aa9bef1a92",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "fafbfac2-ac98-4670-92de-1d39f38d4717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "b341a879-fee2-4f98-ae54-ef8eadfae5d1",
        "cursor": {
          "ref": "4d3f4ceb-b6b9-4cf9-923c-55d345c218aa",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "312e9f4c-1a62-4de5-bbd7-9407c0509afe"
        },
        "item": {
          "id": "b341a879-fee2-4f98-ae54-ef8eadfae5d1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b30b4ac1-7002-451b-b2e0-6e56ff9d60f3",
          "status": "Created",
          "code": 201,
          "responseTime": 737,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cdbc5f1-97c0-4e68-87fd-e0b1b9e442be",
        "cursor": {
          "ref": "868d4fe9-711a-467f-9424-be8a1f989d0a",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e635bc04-dd0d-47d3-ada5-9c75eb7adb36"
        },
        "item": {
          "id": "1cdbc5f1-97c0-4e68-87fd-e0b1b9e442be",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c1db51c7-cd3e-4e41-8c98-1ec3abccdea0",
          "status": "Created",
          "code": 201,
          "responseTime": 731,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a948150-4573-4b1d-867b-7696893876ef",
        "cursor": {
          "ref": "d330e480-e233-4adb-a706-7a62e62fd36a",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c42dddff-ec1a-4224-9206-c1d33d806c3f"
        },
        "item": {
          "id": "0a948150-4573-4b1d-867b-7696893876ef",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ad32e142-8e59-48cf-86df-df8a822e4064",
          "status": "Created",
          "code": 201,
          "responseTime": 697,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60cb2e1-351b-47b9-898b-2f7c487283ba",
        "cursor": {
          "ref": "57c71eb7-09a2-4b78-88fb-1844b3c68b39",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8395c487-7666-47b8-bb18-e9a98fa2250b"
        },
        "item": {
          "id": "a60cb2e1-351b-47b9-898b-2f7c487283ba",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e0b588ab-daad-4a56-9fe8-d48fde8417fb",
          "status": "Created",
          "code": 201,
          "responseTime": 720,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5769b4b-333d-440f-80ab-5a446afed519",
        "cursor": {
          "ref": "d14856db-8fc8-4691-9b8a-c639651900ad",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0ad6f885-ac14-49fb-855e-d006e31369c9"
        },
        "item": {
          "id": "c5769b4b-333d-440f-80ab-5a446afed519",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "21bb48dd-f81f-491a-b13e-c3fb4ea1dd2a",
          "status": "Created",
          "code": 201,
          "responseTime": 694,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "d474b563-1562-493d-8f65-f5c4f97fd664",
        "cursor": {
          "ref": "6fe70936-0f9d-46b1-9562-260b82e9ef08",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "caf5464c-116f-4ee4-b5a6-4911ccf51981"
        },
        "item": {
          "id": "d474b563-1562-493d-8f65-f5c4f97fd664",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "04d86708-d9e4-404d-9fe4-68dd3127c8c9",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d474b563-1562-493d-8f65-f5c4f97fd664",
        "cursor": {
          "ref": "6fe70936-0f9d-46b1-9562-260b82e9ef08",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "caf5464c-116f-4ee4-b5a6-4911ccf51981"
        },
        "item": {
          "id": "d474b563-1562-493d-8f65-f5c4f97fd664",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "04d86708-d9e4-404d-9fe4-68dd3127c8c9",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "069f3350-45a4-4700-9ab5-225beb4b21f7",
        "cursor": {
          "ref": "0bb65400-44be-4e90-b41b-7cc8f3cf9fcd",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cf6dc22d-ef21-4c48-a923-f1123eb6df94"
        },
        "item": {
          "id": "069f3350-45a4-4700-9ab5-225beb4b21f7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d6da1fbf-6226-4dbd-9197-da48ec4858d5",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "cdbbf52a-03ee-4cae-84b4-d79770624ec7",
        "cursor": {
          "ref": "7fa95e83-d5a6-4c6f-b69f-007c2108b034",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "58b1b5ac-46d9-4393-a317-8b44d9d3bfb4"
        },
        "item": {
          "id": "cdbbf52a-03ee-4cae-84b4-d79770624ec7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "064c3a68-6f7d-4d50-9f93-ee9b30150ef8",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "0bb57113-024c-4209-a6d7-4eca2483df2f",
        "cursor": {
          "ref": "7e5193e7-a3f0-4f76-8a9c-c2dace5b5bcb",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "677cbb98-8896-41fe-b761-ff3bfcde9992"
        },
        "item": {
          "id": "0bb57113-024c-4209-a6d7-4eca2483df2f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b38083ac-7a4c-4b86-8b1a-aab4cf70504d",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "8c0c0caf-9671-4c9a-ae1f-0c0ace6c3618",
        "cursor": {
          "ref": "84af2bfe-c3d9-47a0-9657-4f7121f17912",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4476f38b-f4a3-45b0-9cef-041d8ee2a206"
        },
        "item": {
          "id": "8c0c0caf-9671-4c9a-ae1f-0c0ace6c3618",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b2f49c44-07de-487d-b2f8-853bda35c459",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "2059faca-dc5e-45cd-9fcf-396312f36313",
        "cursor": {
          "ref": "c2e97f5f-bc41-4d6f-89b0-dd529d3e62a3",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d6c0c27b-f22e-4877-83cf-2287d1480837"
        },
        "item": {
          "id": "2059faca-dc5e-45cd-9fcf-396312f36313",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "024a8740-6135-43f6-b245-6f54fc384565",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "15043235-be5b-4004-8015-f467d0ba2186",
        "cursor": {
          "ref": "0a922951-6a53-4eb5-9631-bba67f14a6d5",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dbc756ec-7f73-4b4b-94da-0802afcba674"
        },
        "item": {
          "id": "15043235-be5b-4004-8015-f467d0ba2186",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1ccf189c-f232-469c-b834-cce553b8ce8b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "646425ca-4a85-43b3-8af4-49b76d006fbf",
        "cursor": {
          "ref": "6df70390-12f6-4a9c-9f83-fa1481b2988e",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "974f1180-5c84-4b46-9f12-1ff1e9de600e"
        },
        "item": {
          "id": "646425ca-4a85-43b3-8af4-49b76d006fbf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "41e5ae46-2638-43d1-bdcc-5a7b5145b35c",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "19c7fce6-d5bf-476c-b440-6d33b36dc1d3",
        "cursor": {
          "ref": "26f0590a-6af7-4bb3-a500-345c4cb672de",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "670b2bf5-d790-4299-88f3-5c2e27f417d9"
        },
        "item": {
          "id": "19c7fce6-d5bf-476c-b440-6d33b36dc1d3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7793c3d3-e03f-40f4-add4-8d2ebf81e965",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "715db706-a58b-4a1e-9062-5a1bcfa5cb5a",
        "cursor": {
          "ref": "9d200e68-e94e-4de9-aa2e-df07926bc5bd",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a6b352e9-5fbf-4b49-8aff-88ba5b05aa67"
        },
        "item": {
          "id": "715db706-a58b-4a1e-9062-5a1bcfa5cb5a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dc5671bc-daac-475c-ae5d-2943a8d93778",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "52dc615b-8c6d-4f8c-95e6-2b00f98daf1e",
        "cursor": {
          "ref": "754a335e-a77e-47cb-97cc-07be6b4df438",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d2d11e8c-00b5-4ad7-9313-f2179c0c4f2d"
        },
        "item": {
          "id": "52dc615b-8c6d-4f8c-95e6-2b00f98daf1e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ed5d2abd-e676-44e4-9dee-55936ee95681",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "79e48279-ed31-4f43-baa4-372a683f2093",
        "cursor": {
          "ref": "202e09bb-fa96-4ad5-b73f-a44857117c18",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4a7f83ec-c8bc-49a3-ad9a-0870b9ed4d5d"
        },
        "item": {
          "id": "79e48279-ed31-4f43-baa4-372a683f2093",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d701b26e-0599-4984-865b-91fab8cad46d",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5431ad32-fe7a-42b5-8e3e-dac850c796bd",
        "cursor": {
          "ref": "874be3d9-c15b-4f14-8158-40f6cb0d9677",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b4246672-6d5c-4f12-9908-6102af0fb570"
        },
        "item": {
          "id": "5431ad32-fe7a-42b5-8e3e-dac850c796bd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "324ef68a-311b-40bf-b489-2b77ea7dad1b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3328e0e4-9374-4942-a77e-4d621f6b381c",
        "cursor": {
          "ref": "4f87dd90-ab43-46a3-815c-5710f09bc2ca",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d95e9ce6-abff-4611-9194-a15cdcc53ece"
        },
        "item": {
          "id": "3328e0e4-9374-4942-a77e-4d621f6b381c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9eeb3c55-de28-4491-a9d6-206690f27911",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "6d412e15-e646-4e80-93df-e83e11d366be",
        "cursor": {
          "ref": "59de1c2b-1695-4cde-a016-d807822ccda2",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "04b7178d-7d7a-4b98-b216-649991cac426"
        },
        "item": {
          "id": "6d412e15-e646-4e80-93df-e83e11d366be",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "499247a9-4617-4d65-9120-4af5e767c01b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "3c151461-63fd-4c25-a3e8-46f4af06c40a",
        "cursor": {
          "ref": "e8b554b7-119a-47d6-ab5e-f8e853bfb628",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "37df0235-4eee-4345-ab88-2298071768d6"
        },
        "item": {
          "id": "3c151461-63fd-4c25-a3e8-46f4af06c40a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b7c44eed-67a8-4d8d-8f81-dd8ffc61b642",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d2f28a79-9704-4826-8f2c-0187cf46362b",
        "cursor": {
          "ref": "02f2bc35-4d14-4f1d-9b42-405a71c02299",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ed4b3e4c-186d-4b81-a2cd-7b6a2b197869"
        },
        "item": {
          "id": "d2f28a79-9704-4826-8f2c-0187cf46362b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4c5fd07f-d892-478e-b76e-53a6983c4665",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "232c68c2-e6e2-434a-9871-e76293af3ccc",
        "cursor": {
          "ref": "609c7e3c-3648-46a9-974e-89f2e429a91d",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "31ae4e63-3e99-48e4-97a7-dd6c0eb540cc"
        },
        "item": {
          "id": "232c68c2-e6e2-434a-9871-e76293af3ccc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1f48e9e6-15a9-471a-bcac-cdb0e45e1d98",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8e0f7005-d57f-4ff6-bb6e-d17e13bad390",
        "cursor": {
          "ref": "51baba66-e52d-47f3-ae92-c591f4386213",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a3ed8afa-c00d-4b97-b89b-cd59286dc841"
        },
        "item": {
          "id": "8e0f7005-d57f-4ff6-bb6e-d17e13bad390",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "12743155-3b4a-424b-9174-b9c29a8e1933",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "4281e11c-fef7-456d-8ebf-6cce9e3e4da7",
        "cursor": {
          "ref": "21a334f8-6cd3-4d22-84c2-8f710048e9ad",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a7631570-0790-4ee3-8599-3752a77c4487"
        },
        "item": {
          "id": "4281e11c-fef7-456d-8ebf-6cce9e3e4da7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c0daf566-8281-47e1-94ec-381250c905c8",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "40ab70b7-d5a9-4d8f-b409-f1f759d3a527",
        "cursor": {
          "ref": "a3707f3b-2be3-4b6d-bae1-e230192761e8",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dd70e822-431e-47ae-80e8-81b615d75cf4"
        },
        "item": {
          "id": "40ab70b7-d5a9-4d8f-b409-f1f759d3a527",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b4fef09b-0eeb-41e3-afb1-6416a73adeb7",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "76ba80c8-45da-49c7-b81b-9b896d640b00",
        "cursor": {
          "ref": "982616ac-2ed2-4e30-9212-0695e3c2f6e1",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "13c27281-e467-4451-bb94-ca41d965ad3d"
        },
        "item": {
          "id": "76ba80c8-45da-49c7-b81b-9b896d640b00",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "de6dc010-ab32-4afc-9ddc-4b7cc64ab331",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ab1a088a-2321-42c5-b806-1867e86b71ed",
        "cursor": {
          "ref": "dd5f4db1-a61b-4afe-a423-985bca17c323",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "58fd2b71-9718-40e5-8714-c5dbdf5be0b9"
        },
        "item": {
          "id": "ab1a088a-2321-42c5-b806-1867e86b71ed",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "dea62692-d5dd-406d-8add-e3704f534cb7",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a17c9846-7342-4034-81db-287eec7a1fed",
        "cursor": {
          "ref": "1a15b8d4-84d6-4c7d-a783-4919bc163d6f",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "21bd9c15-09d5-4d10-a6a6-0c16ae17bb5f"
        },
        "item": {
          "id": "a17c9846-7342-4034-81db-287eec7a1fed",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "23927d55-24bc-4859-9981-9f203806f617",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "67d54daf-3d02-4d52-8998-d04ebb8ba6e2",
        "cursor": {
          "ref": "dd5723f4-c8b3-484d-a908-15b479681f2b",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b56b3152-d662-4918-93b3-0cd2dc37e091"
        },
        "item": {
          "id": "67d54daf-3d02-4d52-8998-d04ebb8ba6e2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a482229b-23e3-46d2-9900-2f366cf5f619",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "846a40dd-6ca5-4411-a34d-29c920da797c",
        "cursor": {
          "ref": "ec34b51c-6795-4d7d-9e51-5f8823d41ad3",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ecdb3e6d-628f-416a-ac35-4ceb4b70305f"
        },
        "item": {
          "id": "846a40dd-6ca5-4411-a34d-29c920da797c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fcf84006-281a-46d0-acee-a704e6369a1b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "bace2841-faa4-48e8-bc0d-33c19904377a",
        "cursor": {
          "ref": "c7784d57-43f0-4f7c-99ab-6ec9190bdc86",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9fd3833e-f791-4b74-b0c6-60fd08a4bcc2"
        },
        "item": {
          "id": "bace2841-faa4-48e8-bc0d-33c19904377a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c2ad8109-4ef3-4f96-a58e-d550bdd2ee3e",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d166d53a-f822-4d3f-af3c-e55aee463ce3",
        "cursor": {
          "ref": "70049e3c-4459-4918-a721-1f2b7f2185db",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a8785bcd-ac96-473b-ac3a-c8f320200e39"
        },
        "item": {
          "id": "d166d53a-f822-4d3f-af3c-e55aee463ce3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "24261b3d-bc56-4fb2-8c5e-eeb901ec50a1",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5a22bc45-e454-425d-a344-6b9e3e939d61",
        "cursor": {
          "ref": "84ee140c-07de-4849-9131-9a86cbea986f",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "58d78f03-135d-48e0-9cb9-227a2237d3b7"
        },
        "item": {
          "id": "5a22bc45-e454-425d-a344-6b9e3e939d61",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae87a1d8-0437-42f1-b329-a59cb6764be0",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "93af2c09-7e45-444b-94b0-a2265642916f",
        "cursor": {
          "ref": "87241029-8b25-4958-a9e8-6bada53792df",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e30d0dfb-64c5-4a95-b567-9882142cb14c"
        },
        "item": {
          "id": "93af2c09-7e45-444b-94b0-a2265642916f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4c538c3b-7ffb-4e57-b42b-fbb0f2edb0e6",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ee5235ca-b671-4521-b74a-d6f73a1e138c",
        "cursor": {
          "ref": "1fd41dd5-2c5c-4215-a365-c6ef9fcdbe63",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "75010fd3-6a17-4633-8266-ffce1aa67f1e"
        },
        "item": {
          "id": "ee5235ca-b671-4521-b74a-d6f73a1e138c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6541d461-809f-41c4-b518-83742ac6313b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "491daa74-ad5d-44fa-9743-77d318fec33d",
        "cursor": {
          "ref": "242562ff-9c02-40ab-9efe-11bd7892ff31",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "28a2c147-e6a7-434d-8074-8411ec46d6b1"
        },
        "item": {
          "id": "491daa74-ad5d-44fa-9743-77d318fec33d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7d7b27ae-0c32-4c51-880c-9aee3355ed5f",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1802b81b-c9aa-4d54-ae29-e7f1d6427c62",
        "cursor": {
          "ref": "1a2197ee-adb8-4e6f-8219-8db8a40fb160",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d17ec68b-7612-4fe4-8f25-215d236c48fc"
        },
        "item": {
          "id": "1802b81b-c9aa-4d54-ae29-e7f1d6427c62",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fa94d6f1-fe47-4ed8-ae00-8f0292974eb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a55aab-1b33-4782-94d5-199d6a1ac762",
        "cursor": {
          "ref": "21657232-02f1-4fb7-891d-989ba535b6cd",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "77edc50a-ddf1-4dfb-a66c-726410dfbf17"
        },
        "item": {
          "id": "d3a55aab-1b33-4782-94d5-199d6a1ac762",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5a7235a6-1cf9-4f23-9139-6bfd23197ca3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 73,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bfc9c6-93ff-49b3-ba4c-83adf51af9dc",
        "cursor": {
          "ref": "205db4f8-2837-432c-93b3-ebba466e9e96",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4530c992-3ba0-45cd-9803-65ccb34284aa"
        },
        "item": {
          "id": "58bfc9c6-93ff-49b3-ba4c-83adf51af9dc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "340ca234-5786-481e-b6c3-4ea6ec191ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bfc9c6-93ff-49b3-ba4c-83adf51af9dc",
        "cursor": {
          "ref": "205db4f8-2837-432c-93b3-ebba466e9e96",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4530c992-3ba0-45cd-9803-65ccb34284aa"
        },
        "item": {
          "id": "58bfc9c6-93ff-49b3-ba4c-83adf51af9dc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "340ca234-5786-481e-b6c3-4ea6ec191ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4699937-e420-42f5-9074-2216d0c746a4",
        "cursor": {
          "ref": "b24a88ac-4eab-4f60-8faf-ddd3d2621e90",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b188d52a-791d-4b06-b068-c27e60db862c"
        },
        "item": {
          "id": "a4699937-e420-42f5-9074-2216d0c746a4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ac361ac7-186c-42fb-ba86-0a0c3b03ebb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868544a0-611f-4d9d-a5bd-b2ed1f49e139",
        "cursor": {
          "ref": "84baeb7d-6a5a-4a94-a84e-9e61368a7d6c",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "84d907e9-f848-4934-86e9-cdac20a017f5"
        },
        "item": {
          "id": "868544a0-611f-4d9d-a5bd-b2ed1f49e139",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e5d86317-b965-4f44-88ce-2d828f8fc5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39cbfef3-7572-40b9-a984-e238c5d0bfc3",
        "cursor": {
          "ref": "d47de3e7-2d9d-4e5c-a08a-5ef31e339d62",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "00a87603-7219-466d-bff5-dcc7887927a4"
        },
        "item": {
          "id": "39cbfef3-7572-40b9-a984-e238c5d0bfc3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8c196414-98be-4cc4-8a5c-97d774d83f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc186b39-7689-4bad-99bc-bcaa010aa531",
        "cursor": {
          "ref": "fa27000b-9040-4250-83f3-822fed4e71e7",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0d657e67-eed7-4e1d-a8f5-8d20ce789cc5"
        },
        "item": {
          "id": "dc186b39-7689-4bad-99bc-bcaa010aa531",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e9ad5946-7da0-42cf-94d3-1eaa358b31f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ba1147-f755-40fa-9891-083096003eac",
        "cursor": {
          "ref": "1689b27d-c155-47d0-950a-4c0fbad7da97",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5dfa1594-be7b-4185-bab7-d5c1d62ebff2"
        },
        "item": {
          "id": "44ba1147-f755-40fa-9891-083096003eac",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "be57cf68-9062-496a-8c93-1337f1d71138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5ed2bd-fc23-40d1-926c-4ca434e22808",
        "cursor": {
          "ref": "e2357f50-9f26-4b0a-981e-4d3f1bc1b7d2",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "af285cc6-153a-4d5f-a37c-7f7b80fc7069"
        },
        "item": {
          "id": "fd5ed2bd-fc23-40d1-926c-4ca434e22808",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "85db6150-c474-4a04-84c3-5af98b25073f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 384,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cde5c6-9d82-4be1-bb15-81f7fd43f302",
        "cursor": {
          "ref": "6ce51495-4085-415d-ab1f-6113fb5c851a",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fb2a77d8-5843-40b7-b08d-cc470ac9f052"
        },
        "item": {
          "id": "47cde5c6-9d82-4be1-bb15-81f7fd43f302",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6dda89af-5192-4c49-9857-f7e0e9b46e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53154da-89f2-4d30-b06d-9f001e1c2f05",
        "cursor": {
          "ref": "766b3673-399e-4cb9-8b55-9033ac3d07d8",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ca971775-7697-4224-a0cc-7a3d333bd87a"
        },
        "item": {
          "id": "e53154da-89f2-4d30-b06d-9f001e1c2f05",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7892369d-6d26-4705-9bd3-ffba8e9ad6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a178f56-e721-4296-8e2a-30b03889de30",
        "cursor": {
          "ref": "d52c03d5-528d-4d68-a891-8042fcf87058",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e982e627-1e1c-49bf-9dc8-d9d403b80d2e"
        },
        "item": {
          "id": "5a178f56-e721-4296-8e2a-30b03889de30",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d26ce00c-1d43-490b-86cf-520c33fe4e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c3a7f5-4977-41a2-a0ec-aab6d893c47d",
        "cursor": {
          "ref": "60221ca3-155b-4004-9eb1-043c1762500a",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ca308563-b589-4ae0-b4d1-691596cf628a"
        },
        "item": {
          "id": "d1c3a7f5-4977-41a2-a0ec-aab6d893c47d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bcc1d487-5ef4-4725-a109-32d130da984d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6349b67-e6de-44c1-8657-d61334a85d07",
        "cursor": {
          "ref": "90c715a5-8cdc-46b7-a997-8bba66d65ee4",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ae44d7c6-7b27-4ab6-a018-5fd3ad2de3bb"
        },
        "item": {
          "id": "c6349b67-e6de-44c1-8657-d61334a85d07",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8ee02d51-c37b-4662-bbf3-a96d403efb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f251daf5-4c7d-4f46-9f79-2337053030ee",
        "cursor": {
          "ref": "bca76f1c-48f9-479e-93b6-4db9335fbe8a",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b6c4b416-bbe2-4203-9ae2-da902c287db6"
        },
        "item": {
          "id": "f251daf5-4c7d-4f46-9f79-2337053030ee",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bb9df5aa-4951-4d38-a873-d9e85e353399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3286f5bc-02db-4c1e-8aaf-c3328330f09b",
        "cursor": {
          "ref": "9a2cca2e-f0ba-4d22-85b3-f067bdbd2ad2",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "474d432c-d54d-4731-bd08-0dadac75cb71"
        },
        "item": {
          "id": "3286f5bc-02db-4c1e-8aaf-c3328330f09b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8870f98c-2423-48f0-b063-2028ccc5fb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07077f7d-eae8-45d3-9fbd-86ff72057df5",
        "cursor": {
          "ref": "bd3b5903-b47f-4af8-b984-51e7cf06ce5e",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b23c09fe-5433-412b-8d40-ab24b221278b"
        },
        "item": {
          "id": "07077f7d-eae8-45d3-9fbd-86ff72057df5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a49cb6ab-0ef9-49fd-b4fd-8074cce39f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0e8a35-ddc4-46ba-89ed-7a90fc87e4a1",
        "cursor": {
          "ref": "f298110f-8fb5-4a0d-8499-d9f8d10ffb65",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b6800202-c5c8-44cc-9a51-438a6b285d01"
        },
        "item": {
          "id": "ab0e8a35-ddc4-46ba-89ed-7a90fc87e4a1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "09559f2d-2d7d-401e-9a65-266f3d1863d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce56a56b-16de-4a6b-8e69-17c19526977e",
        "cursor": {
          "ref": "5cf59ea9-a407-413d-80fe-4739831b401f",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dbe3a754-5898-4e4d-bac5-3b94fc2ccbda"
        },
        "item": {
          "id": "ce56a56b-16de-4a6b-8e69-17c19526977e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b107a817-8055-4bf4-804e-6c4188317d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c931d87-4db3-433d-81a7-a418009a2fa2",
        "cursor": {
          "ref": "b70f7a06-6359-438b-9922-c88b4635a4cf",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "13f9513c-93c6-43fb-9f00-49fa40d4a4d2"
        },
        "item": {
          "id": "9c931d87-4db3-433d-81a7-a418009a2fa2",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "1e0536bf-6d43-4920-b45f-111c69d10ab3",
          "status": "OK",
          "code": 200,
          "responseTime": 670,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "49e7c9f8-b521-4027-b62b-852f8fdcd655",
        "cursor": {
          "ref": "577696e5-0c73-46a6-b498-7360eca381da",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1a8c50a7-e591-4491-ac06-656941134782"
        },
        "item": {
          "id": "49e7c9f8-b521-4027-b62b-852f8fdcd655",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "99505067-d0c4-432f-aba5-deeae77a2fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df001db-80e0-4971-b8da-dfd9870050da",
        "cursor": {
          "ref": "5ec96dae-334e-4969-8a12-b5ee9157eadd",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "06d90cc4-ae19-4347-8484-b497f1aeadf6"
        },
        "item": {
          "id": "3df001db-80e0-4971-b8da-dfd9870050da",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fd4ad2a4-db07-4bce-b7ff-fde9024c678b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e6a16f-70d8-46ba-9461-47789ace52bc",
        "cursor": {
          "ref": "3d2277ef-16e0-4e4f-bf9a-1d1645304c69",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0a1d8565-4edd-47a5-aa48-ad9e36ddeeff"
        },
        "item": {
          "id": "14e6a16f-70d8-46ba-9461-47789ace52bc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b1babb8e-7ef7-40a2-90e8-dd90f9ae1764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 335,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814c1d7c-60a4-4934-9628-ff33bf25985f",
        "cursor": {
          "ref": "6ea41922-b9c5-4ca9-9376-585464a615c4",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "02e86712-c4f1-4c99-971e-d32a83fa7e53"
        },
        "item": {
          "id": "814c1d7c-60a4-4934-9628-ff33bf25985f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6008ff73-60d2-482d-9a51-a6f468744e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c14766-dc9d-4f83-a857-a7e14369f189",
        "cursor": {
          "ref": "606bed7f-fbeb-4f4e-80dd-7d78d566bd51",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "39b37244-1a1b-4b85-8074-ecd8a31222fd"
        },
        "item": {
          "id": "18c14766-dc9d-4f83-a857-a7e14369f189",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6cdf6879-98e4-4676-a5ed-0cc4e08747db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e281ac2-e7a8-4f17-8eb0-07fcb4938874",
        "cursor": {
          "ref": "230f95bb-031b-4768-89fa-cde1d311b6f9",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "10863ca1-5c93-4b73-afe1-fc89ed8c380c"
        },
        "item": {
          "id": "9e281ac2-e7a8-4f17-8eb0-07fcb4938874",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "64e96914-989f-4a21-a53c-86c187338e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fadb622-1e93-449b-8b90-517331c3e834",
        "cursor": {
          "ref": "63cab1e3-47da-466d-940f-269a7c04deda",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1edfc07e-f3b6-4b9f-8944-61784e3fa7b6"
        },
        "item": {
          "id": "5fadb622-1e93-449b-8b90-517331c3e834",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "422ccdcb-d7d1-4292-92cd-c1ef7a2310d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd1f1e7-6460-4638-89b1-68ee8dc586b9",
        "cursor": {
          "ref": "e3f634b7-b773-41ff-aca1-48ed574a87ba",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7ae3e5ae-9a27-4158-9c42-432be494b19c"
        },
        "item": {
          "id": "7bd1f1e7-6460-4638-89b1-68ee8dc586b9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3c4245fb-2722-46c6-8607-13e624680e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c4b2c3-b39b-4a0b-8ef9-30c9ab403df1",
        "cursor": {
          "ref": "63129607-83df-4922-b88b-6ec5900869dd",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f91dca05-befc-472f-ae08-3281897afc1e"
        },
        "item": {
          "id": "d2c4b2c3-b39b-4a0b-8ef9-30c9ab403df1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "96bbcd46-e4a7-4b79-84da-100556f92889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24bc07a-1263-4477-a1a6-da2156e8c5ff",
        "cursor": {
          "ref": "f7ce1e35-ba3f-4b1d-8bd4-162099f56760",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1191e635-8d92-45ec-9f53-9cd451fca105"
        },
        "item": {
          "id": "b24bc07a-1263-4477-a1a6-da2156e8c5ff",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "06c214d2-99ff-4b03-a53c-6714710acef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2620acc6-72f6-49c1-859c-7f06c0ba3e90",
        "cursor": {
          "ref": "be4c2ed9-513d-4312-b016-40780db10671",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b8231595-a387-4903-8eb6-72ba876520d4"
        },
        "item": {
          "id": "2620acc6-72f6-49c1-859c-7f06c0ba3e90",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1c9e2cd8-9068-4a71-b4ac-0a29b5f83994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d3e9df-eab4-47f0-afb4-32abc966bf87",
        "cursor": {
          "ref": "1e22aacd-acea-44a2-8f16-da88e91f6f2f",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b18e4cb1-31ff-4f7b-a0a4-a5b46d94c83e"
        },
        "item": {
          "id": "81d3e9df-eab4-47f0-afb4-32abc966bf87",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "664b1f8b-ce53-45ff-847b-2168e7bb4954",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "57d14c85-d18d-47e8-8e33-4f6bfd233c6e",
        "cursor": {
          "ref": "7e79a7f1-e233-4a2d-8bba-cb23d4365ddf",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bd8f0f3b-f3d5-4413-aad7-b0fbd8b41678"
        },
        "item": {
          "id": "57d14c85-d18d-47e8-8e33-4f6bfd233c6e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6a4c361d-5abb-4579-88b6-8e52ff9363a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83026caa-e68a-423c-9f54-0fe1faa34753",
        "cursor": {
          "ref": "33410894-ca78-4172-86b8-43944e12b5cb",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8ca30381-f4ba-48b0-af11-229c5df38f2c"
        },
        "item": {
          "id": "83026caa-e68a-423c-9f54-0fe1faa34753",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "74b895c9-9979-492f-b3cd-56360787c2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb7e742-230c-4c8b-b354-b52bddcff45b",
        "cursor": {
          "ref": "81b5e18a-0d9c-455f-99b6-3b29f018f2da",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "97342e36-cbd1-4ecb-9d23-1622e90019bd"
        },
        "item": {
          "id": "0cb7e742-230c-4c8b-b354-b52bddcff45b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2bd4fd05-0d08-4bda-af39-769475a1d89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fafd4b-a169-4fa4-8f24-8747bbcef095",
        "cursor": {
          "ref": "8318f913-f0a6-444d-8d35-9d2cf1169b4e",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f60b6c60-0ba8-4ac9-b48c-1334604be000"
        },
        "item": {
          "id": "26fafd4b-a169-4fa4-8f24-8747bbcef095",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "278d3795-e8e6-4bb6-8b36-705762bdfac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 301,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790c799f-2410-4289-94fa-c4c94ec28388",
        "cursor": {
          "ref": "936f782f-1a65-4878-be9a-e330cae9f2d6",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2d24d240-5b9b-47bf-88ee-6c9217055cfa"
        },
        "item": {
          "id": "790c799f-2410-4289-94fa-c4c94ec28388",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9cd283ce-8f18-485f-9217-ba769298d317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07236145-7ce6-46fc-bc10-e8a463729ba8",
        "cursor": {
          "ref": "7edf42bf-f025-4e08-b476-e95e409a77d7",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d411af82-e987-4f0f-87e1-4023f79cb584"
        },
        "item": {
          "id": "07236145-7ce6-46fc-bc10-e8a463729ba8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "58f60e8a-dafc-4d0d-9d22-437610f85a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 357,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f82574c-08fb-4aec-bbe6-8acbcfa30e6b",
        "cursor": {
          "ref": "097565ac-0185-4967-8a74-3d690d2db4d4",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "19cf4746-4d9f-42f5-adee-0cf9c6b2cd12"
        },
        "item": {
          "id": "6f82574c-08fb-4aec-bbe6-8acbcfa30e6b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c1d3f8a4-fb62-41c7-8f9c-c628874f4b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb34610-a034-41a7-bcd4-2c2e93ae97d7",
        "cursor": {
          "ref": "9de7eb7b-c88d-44b4-a22e-7666f841b117",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "98a2cf5f-61fe-459c-bac9-d302df4a1f32"
        },
        "item": {
          "id": "cbb34610-a034-41a7-bcd4-2c2e93ae97d7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ccbdc812-ba48-4a2f-b210-3bc8bca4c371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960ea2dd-dbe5-4831-a4ce-3bf054072bc8",
        "cursor": {
          "ref": "2f74371e-569f-41d7-b54f-14c3e3ba8571",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e854f9e9-06f3-49db-8cb6-8cfe0aa76ad8"
        },
        "item": {
          "id": "960ea2dd-dbe5-4831-a4ce-3bf054072bc8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1c319700-4f58-4fa2-ad33-31a470a33b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242b2e74-9dc9-45ab-a144-b5c0d84cad6b",
        "cursor": {
          "ref": "d830aa60-4916-4bf1-a0fe-6944d1c77069",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4c85c5b4-3e1e-41db-95cc-a2cf8416abf4"
        },
        "item": {
          "id": "242b2e74-9dc9-45ab-a144-b5c0d84cad6b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4c34ebe4-d2fb-4bd7-8e93-e8d582dcb380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 384,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e908be1-4749-479b-9c80-21c88ca26581",
        "cursor": {
          "ref": "75558974-5176-427e-b7db-1c351d70e427",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c8bbb019-8492-4351-a8fb-f5196db26650"
        },
        "item": {
          "id": "5e908be1-4749-479b-9c80-21c88ca26581",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ad9ffabc-1d18-49cc-95a0-49928696af91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc1c2b0-bb10-4afd-8764-4e9c44fb0e51",
        "cursor": {
          "ref": "c5fb36e0-c20f-46ed-b78a-541a65f44b80",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "25b6ebbf-1587-410c-9221-cbb7d75bd813"
        },
        "item": {
          "id": "ebc1c2b0-bb10-4afd-8764-4e9c44fb0e51",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d8026407-76c3-418f-9f93-8ee3b567c296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db431524-88fb-4383-8889-04f871756169",
        "cursor": {
          "ref": "6a57c197-031c-48f2-8e43-95c6f824c500",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dd16da6f-15e5-4708-8438-fc48241ea8f7"
        },
        "item": {
          "id": "db431524-88fb-4383-8889-04f871756169",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ea18e23f-c3f9-4465-896e-78c428e48e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 373,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f38990-0095-4771-9947-c570abe3cd46",
        "cursor": {
          "ref": "63bf5458-7054-4554-ac98-6536d709fdda",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cdc8d7a6-f1e1-4947-84c6-59ef9c54e5a3"
        },
        "item": {
          "id": "c2f38990-0095-4771-9947-c570abe3cd46",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bfce1ce1-46e5-4dce-b9e4-f1ffdd1d8ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b87ef90-1675-43e3-ba7d-56abb8fb1d4a",
        "cursor": {
          "ref": "f72efd14-4662-4c79-9a08-3068fbada9d1",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "425efbf5-80c3-4fce-9e02-c6df031fa3ac"
        },
        "item": {
          "id": "9b87ef90-1675-43e3-ba7d-56abb8fb1d4a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "49f8278b-ac77-4750-a16a-5c199993ca78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7579bd-5f5b-4d2e-be93-908ea026b318",
        "cursor": {
          "ref": "51a8f856-3fd5-436d-9f9c-e01e0fa7424b",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b9a00e70-ca37-4b83-91c7-2a5d65dbc75f"
        },
        "item": {
          "id": "0b7579bd-5f5b-4d2e-be93-908ea026b318",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4fad4f70-192b-48f1-9d57-414a07b58cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fadb37-c036-474f-b707-099ef1fa7a74",
        "cursor": {
          "ref": "c78cdfc3-0ebe-4e08-8682-d401f4982f3c",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2e03d21b-4847-477b-85f1-797f827cae8c"
        },
        "item": {
          "id": "e0fadb37-c036-474f-b707-099ef1fa7a74",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "be760d8d-7f35-46d0-a61b-769eb53f2cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 343,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c3540f-c74f-4480-8e6f-9c70d74b2353",
        "cursor": {
          "ref": "16116bc8-22b5-445b-b298-a0eb608fead3",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "21bd0011-1fd2-4106-8ab4-ebc1100f5d59"
        },
        "item": {
          "id": "38c3540f-c74f-4480-8e6f-9c70d74b2353",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cea3e3ab-7887-4817-8eae-d049f5f2277a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258587d0-202e-467d-b41b-c0cfb453017c",
        "cursor": {
          "ref": "9b46a5c8-4a22-409a-98b1-fea5d4f25afc",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "15da7b7b-37c3-491d-890a-755bc749e401"
        },
        "item": {
          "id": "258587d0-202e-467d-b41b-c0cfb453017c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fa6cad49-f8b6-431b-8427-9e8b6f79cda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e947da77-df95-42b5-a416-f2b0768afb5a",
        "cursor": {
          "ref": "20ff6c11-f754-4401-95e7-07cafe19ec23",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0790ba7b-2621-4fad-b63d-535e774e4e25"
        },
        "item": {
          "id": "e947da77-df95-42b5-a416-f2b0768afb5a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "87515a2c-4a25-44a7-a162-81f45358d52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 493,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb38c50-a061-4859-b09a-5e6f873f23cd",
        "cursor": {
          "ref": "e7755af6-5811-4791-9561-c4f979b669b9",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e6318ae2-5f91-42e7-bb47-d1e5934106a1"
        },
        "item": {
          "id": "dbb38c50-a061-4859-b09a-5e6f873f23cd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f1da489a-5a7b-4f9f-8afa-d93dc3c426df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d0223c-3767-4073-b749-c1d4c1e97045",
        "cursor": {
          "ref": "53136752-55bf-4873-9049-ec24ef22f77d",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7bdc1f68-566f-4e02-88d1-ed4874e453de"
        },
        "item": {
          "id": "88d0223c-3767-4073-b749-c1d4c1e97045",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0bfc026b-ab3e-463c-a03b-45d8b20ed41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78dd5dbe-6f40-4e59-8356-fd33c42fe99f",
        "cursor": {
          "ref": "ae6f8091-256b-43f0-8f5c-7b7de3de772a",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "61e906f2-3604-48c2-9d27-4ce0a1319154"
        },
        "item": {
          "id": "78dd5dbe-6f40-4e59-8356-fd33c42fe99f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9b7a1979-9e7a-47aa-9737-d62935c42051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae984cd-83dc-45c2-bafe-44d6acd614fb",
        "cursor": {
          "ref": "12f04008-acdc-4d92-980b-87d4f8d3ffef",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2051367a-4302-4741-941c-b7f2d42d9e84"
        },
        "item": {
          "id": "7ae984cd-83dc-45c2-bafe-44d6acd614fb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "707e0a98-8f1a-49fe-a3b3-7c477b91126f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ca6b04-0804-4565-aebc-e3da2dafc5e3",
        "cursor": {
          "ref": "3cd24867-ba5f-439d-9f0c-8c606e51d76b",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9f0b2c97-d312-45bd-9f4d-f80ccb2fa0ca"
        },
        "item": {
          "id": "18ca6b04-0804-4565-aebc-e3da2dafc5e3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "607018bc-e5fd-47f9-9c1a-19b45ecbec6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25676e49-d75e-4f63-b7fb-af87baf6afde",
        "cursor": {
          "ref": "7e8f2bff-485e-46c8-99da-385d49d3f101",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "674f314b-f522-43bd-80e3-576d78bd3b32"
        },
        "item": {
          "id": "25676e49-d75e-4f63-b7fb-af87baf6afde",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c43e5b83-5e77-466c-ac64-617beaeb5241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0ea81b-c746-40b7-b6df-a6580b983d79",
        "cursor": {
          "ref": "a385efd1-a1eb-4464-8fa7-70c7172be406",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7dceb665-27d5-4f03-9578-a8b4af8fe6f0"
        },
        "item": {
          "id": "bf0ea81b-c746-40b7-b6df-a6580b983d79",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5d2a39fc-e155-4689-a780-e0c054651626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1f7005-0e9b-43ea-9ac3-c867106e725e",
        "cursor": {
          "ref": "8b146b37-303c-427e-9a5c-fd5a7989bbbd",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ce313952-35c5-49d2-9c32-731d07f606c7"
        },
        "item": {
          "id": "db1f7005-0e9b-43ea-9ac3-c867106e725e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "510d3b0b-8307-43e5-a1d6-d8cd73e94543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7720f3-f08c-41f7-99f6-504994988936",
        "cursor": {
          "ref": "342f5a92-2dac-407e-b66e-afcff3100e62",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8066c44c-de6a-4c55-9160-b37460702b6a"
        },
        "item": {
          "id": "7d7720f3-f08c-41f7-99f6-504994988936",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "eddc8982-553f-4215-9e6c-cd2d478f03cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1154cf-d2db-4059-a6f7-5fa49ff83159",
        "cursor": {
          "ref": "5c6e2d82-b24b-4d10-8c97-0fb44ccdb898",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c1c3b75e-bbfd-421f-9c39-7def2cc6f8d6"
        },
        "item": {
          "id": "6c1154cf-d2db-4059-a6f7-5fa49ff83159",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "004308ff-564b-46ac-ad4b-c720a85dfdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a910b9-0e5b-41f4-b1f1-559a9790d77c",
        "cursor": {
          "ref": "f155079e-2576-41e7-bf49-d970e77c2802",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e23d3bef-21c0-4226-aa1e-0d4c9d482929"
        },
        "item": {
          "id": "e7a910b9-0e5b-41f4-b1f1-559a9790d77c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cd57ec25-7444-4eb5-b868-f148a3d9db6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5180cfb7-e422-4d71-8992-52d88f724514",
        "cursor": {
          "ref": "ba12553e-a2f8-4e4b-af12-940aace96705",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5600a063-ba00-43f7-9314-39c9ed2ac3b9"
        },
        "item": {
          "id": "5180cfb7-e422-4d71-8992-52d88f724514",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "008fa4a6-25b1-4ebe-9b14-32e6950ce044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6835df5a-55a9-4d40-aaf3-fef716ec38c2",
        "cursor": {
          "ref": "75a61345-f77c-4b2d-bcde-0eed3dd202b4",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "dccce0f7-bc39-4cb6-b460-95605fc5f279"
        },
        "item": {
          "id": "6835df5a-55a9-4d40-aaf3-fef716ec38c2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2f5c144f-f5ae-452d-b337-45ce91614114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1de2df5-aa77-4d1c-995e-62ff7a3a6cec",
        "cursor": {
          "ref": "6c287260-39ab-4198-9ce0-78c3e21dcfad",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e9d2cc78-f50b-45e4-92b3-7125ed192b58"
        },
        "item": {
          "id": "a1de2df5-aa77-4d1c-995e-62ff7a3a6cec",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8bf820d2-50d8-4b95-a1b5-3bc058118af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3fcd79-af7e-4301-9f66-02fbc4d559ef",
        "cursor": {
          "ref": "ed4b496e-23c0-41e6-9f18-85d5897a65ab",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7a0082cd-4762-4ff3-be55-51d074454f70"
        },
        "item": {
          "id": "aa3fcd79-af7e-4301-9f66-02fbc4d559ef",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a2f268b3-0098-407f-b834-668a8a83b8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af4b57a-5dd1-40b6-9495-b5ece8ac2e44",
        "cursor": {
          "ref": "be507fdd-5003-4973-baa2-d2f364de3b90",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5db02601-ec11-4488-8b80-bc81865bdf13"
        },
        "item": {
          "id": "1af4b57a-5dd1-40b6-9495-b5ece8ac2e44",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "89257944-d4f9-47f1-a7b1-0e6075795c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb35e5a-875d-48f4-9d5d-ac7d4fdf90ca",
        "cursor": {
          "ref": "ab01e344-8dc9-41a2-b0e3-b97103e36c49",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5d32625f-fbf6-40cb-9182-3da9859c7243"
        },
        "item": {
          "id": "7bb35e5a-875d-48f4-9d5d-ac7d4fdf90ca",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "17c613ef-7a99-4120-b3c1-1940c7855bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9cd8f0-70a8-4060-b4d7-7c23eff9eb65",
        "cursor": {
          "ref": "188e68f9-c5a8-4766-8e62-0903273821d7",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "21b3ee85-9c38-40e7-b074-860e9ecaeffe"
        },
        "item": {
          "id": "1b9cd8f0-70a8-4060-b4d7-7c23eff9eb65",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3c3ded9d-3170-40c8-9708-e7d7806682ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2aa0f8-faf3-41ef-a893-2b3dc639f9dc",
        "cursor": {
          "ref": "a5193d30-6bca-442c-aad5-e21f26ee72d8",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5d7e3c96-c0be-42d8-8721-c08a4723563f"
        },
        "item": {
          "id": "ec2aa0f8-faf3-41ef-a893-2b3dc639f9dc",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8547fe49-caca-4d18-91e3-790d92a32cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37050ed9-05ad-49a4-aad9-2e38ae8cee6d",
        "cursor": {
          "ref": "6486ef03-cc2a-455e-9e8b-cfdf326e9b08",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3ad504d0-6a15-41c6-b285-0dd6f81a01c3"
        },
        "item": {
          "id": "37050ed9-05ad-49a4-aad9-2e38ae8cee6d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ba409cd1-e569-4123-b9a9-b63e315ddedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1247c93f-d65b-494f-a32e-d31bf55858e9",
        "cursor": {
          "ref": "432199f9-e795-4114-a800-656e6458795f",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "81d3828d-52e3-4219-ae8b-528a9ac36278"
        },
        "item": {
          "id": "1247c93f-d65b-494f-a32e-d31bf55858e9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a98dad0b-2296-4872-953c-c0566c9a1134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d82fd0-5b2b-4702-bbbc-a483bfcabb59",
        "cursor": {
          "ref": "08d2c099-1595-485b-a3db-fed16bb6814e",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5656b260-e8cd-4131-9acd-4b79bffb78fe"
        },
        "item": {
          "id": "41d82fd0-5b2b-4702-bbbc-a483bfcabb59",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "37e0285f-19dd-4c8e-bc5e-ef959142bff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263f59d1-5c4e-46c5-9536-5d8d888ea5b9",
        "cursor": {
          "ref": "2b228266-07bd-4e59-9ec3-b59e7e5e6f48",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5bd3e4a6-0d4b-4e77-8c56-b8b69ebd918d"
        },
        "item": {
          "id": "263f59d1-5c4e-46c5-9536-5d8d888ea5b9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d9744bd6-726a-40d1-bc14-7320b1cc6883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae95a3c-cb87-47ee-bf00-ba763412b013",
        "cursor": {
          "ref": "f84b2348-ba58-4802-bf19-40499345feb7",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "878b7356-00f3-4613-be55-1b0e7b2a36d9"
        },
        "item": {
          "id": "fae95a3c-cb87-47ee-bf00-ba763412b013",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "065b28fc-707a-4a12-94e8-4e162fc0ea60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb1a380-27c7-4f68-a038-48a07adb3157",
        "cursor": {
          "ref": "363c5f18-a7b5-4ffb-a5ce-2788a1346765",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d976ac61-5683-49ea-b94c-1dff97c4b4d4"
        },
        "item": {
          "id": "cbb1a380-27c7-4f68-a038-48a07adb3157",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e8f53dab-5a7c-405f-a0fd-75abeaa9bdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bf287c-f673-4305-a79b-5cf00720c730",
        "cursor": {
          "ref": "fa163eb1-55b6-41e0-a9b9-a11ccbfa653b",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "46702dc8-0727-40b4-a8b0-fd893d854e64"
        },
        "item": {
          "id": "35bf287c-f673-4305-a79b-5cf00720c730",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d4be47a6-21da-44b5-9178-772bc4cb1feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd0f158-68eb-4dfc-8f65-d004c260016d",
        "cursor": {
          "ref": "9aec435d-c720-4ec2-8974-439d4f3c82d7",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d0556acc-f31d-4025-be00-78b66fe5c78d"
        },
        "item": {
          "id": "cdd0f158-68eb-4dfc-8f65-d004c260016d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1c3dcccd-7040-4ae4-b93a-1c27c99eac56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a04e37-ee4c-46ea-aa16-28e674d4c847",
        "cursor": {
          "ref": "1ea9000e-87ae-4d91-91d9-f9fca63155bf",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2048a5ff-9e21-4001-9e55-8184de2b0a0e"
        },
        "item": {
          "id": "05a04e37-ee4c-46ea-aa16-28e674d4c847",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0e7bd139-cfca-46d0-a4df-87ec7398685f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033101e0-5ab9-4d0c-a48c-dcd51fc4c7de",
        "cursor": {
          "ref": "2593a18d-0f35-441b-a51f-c1e6e31826df",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8de59a16-02dc-4d5c-9361-cd28cb5d035f"
        },
        "item": {
          "id": "033101e0-5ab9-4d0c-a48c-dcd51fc4c7de",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e3848e08-648b-4dbb-99aa-f37401b54eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038bcd66-3b3a-4bd9-a648-76de29f8a06d",
        "cursor": {
          "ref": "cb347fa6-475f-4ae6-90b5-8c3063eb5a37",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ac344a70-3fa9-4851-a8e4-34015ab360f6"
        },
        "item": {
          "id": "038bcd66-3b3a-4bd9-a648-76de29f8a06d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d9572623-de87-4c06-8de7-7d04a827a4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad382a8f-7d7c-482d-92e3-336dfd4ca0c6",
        "cursor": {
          "ref": "a1e91942-3a84-49f5-a88c-7c2fd5e370a9",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1952c86c-8cae-4ed6-8cbe-701cdee319e5"
        },
        "item": {
          "id": "ad382a8f-7d7c-482d-92e3-336dfd4ca0c6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0486eae4-e8bf-431f-8801-6ab5abd8a692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b41665-a86e-4424-b31d-ecc1e8312603",
        "cursor": {
          "ref": "5f5fa645-4bc1-4ea1-8a52-2f34b365381d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9f7fc836-044f-4431-920d-7fe289ea86a6"
        },
        "item": {
          "id": "96b41665-a86e-4424-b31d-ecc1e8312603",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c18f4ee9-186e-4591-b3fa-85a3046194c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c3dca8-7534-45ea-bb33-8f7a7f82c29b",
        "cursor": {
          "ref": "879d527c-8223-4730-bfbe-ca893699f2d3",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "706ac5ca-fdc1-41af-9638-239cc6ec5192"
        },
        "item": {
          "id": "33c3dca8-7534-45ea-bb33-8f7a7f82c29b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "71264399-d89d-453f-8fd6-8e1f241f22ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0ae4e6-557e-4191-a251-5ae685dd5601",
        "cursor": {
          "ref": "6cca6419-4c69-4656-88d2-61942e7b0973",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "25fbc5ae-5be3-4e06-a580-37dba712031b"
        },
        "item": {
          "id": "ba0ae4e6-557e-4191-a251-5ae685dd5601",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "14ef4e59-b523-400e-8f0c-e08cc75da3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178a3555-5dfd-4b63-a562-f737636b0342",
        "cursor": {
          "ref": "981e90e9-52dc-4ba6-a84d-5a9975b3dc59",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4bb7c29f-c300-4c79-9021-eb428d596427"
        },
        "item": {
          "id": "178a3555-5dfd-4b63-a562-f737636b0342",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "61c9204a-2c23-421b-a354-614142ffb081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2d26be-330d-4d3b-9967-80788320acb3",
        "cursor": {
          "ref": "b57eef61-b0e6-4ec3-8890-e8d3f2a1955f",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dfc8e383-04d6-4195-860d-fe8e31f59424"
        },
        "item": {
          "id": "dd2d26be-330d-4d3b-9967-80788320acb3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "12cba384-24d3-4050-a7e4-92e41d14bb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42ac93a-e84b-4fce-9381-4b7bfaf36f63",
        "cursor": {
          "ref": "a775f643-cf21-4299-b1a3-f4eaaf30f7ae",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1535bbc6-8284-4305-a2d5-506adc98a954"
        },
        "item": {
          "id": "b42ac93a-e84b-4fce-9381-4b7bfaf36f63",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2c83afea-32b1-494d-bc46-c2e5fa71ee83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3ba681-f012-489f-b12f-243e8de62935",
        "cursor": {
          "ref": "745c79dd-dcfa-4dab-886d-2d5aadaee726",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6575a1f9-5821-4c7b-95d8-91bb6bcf009f"
        },
        "item": {
          "id": "2f3ba681-f012-489f-b12f-243e8de62935",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9e2b87ea-f38a-447e-a8ee-8fbee3da662c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8302bd-f8da-4773-9b2e-332c789862c5",
        "cursor": {
          "ref": "3f3bc055-e28a-475f-956f-2caa8aadf2ba",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e25d83eb-0714-4001-8051-b5535f91946a"
        },
        "item": {
          "id": "8a8302bd-f8da-4773-9b2e-332c789862c5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8d6b8b2b-9c43-41c7-99fa-35337964e4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774bbfd9-2243-410c-a343-737cad18ed56",
        "cursor": {
          "ref": "9d461773-ce83-4550-824a-8e12b91c4b44",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "32776a4a-9431-4a31-8069-8747794f4971"
        },
        "item": {
          "id": "774bbfd9-2243-410c-a343-737cad18ed56",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cf266fb3-685b-4fe3-b12a-f2b53232f85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a206c12-ffb5-4b60-b1f9-023d2184dd61",
        "cursor": {
          "ref": "a37e3631-1f4e-4682-9467-c203261f845c",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0b1bb268-8772-407b-985a-7073af71622d"
        },
        "item": {
          "id": "3a206c12-ffb5-4b60-b1f9-023d2184dd61",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6e2c4fc5-75de-410d-bbac-bbeaf25200a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26189a1-2dba-4297-870e-eccd4cabd33b",
        "cursor": {
          "ref": "95608601-420b-46d3-8c9c-5831332226a7",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "321a0c5d-e410-4725-80f3-84dc12b49f22"
        },
        "item": {
          "id": "b26189a1-2dba-4297-870e-eccd4cabd33b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9c137dc1-0688-47d7-8794-4935a4983655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d60c1d0-3203-4a69-ac18-64968c4300ea",
        "cursor": {
          "ref": "5c0256ce-a837-494e-88de-dfed3a4f833f",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1803163f-c250-40ae-b355-3e89d5512bc5"
        },
        "item": {
          "id": "2d60c1d0-3203-4a69-ac18-64968c4300ea",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d654965b-a78d-4df4-b706-a23a3b071e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c153d80-8246-42b0-a24f-1c81fa327330",
        "cursor": {
          "ref": "dd8f64b2-b0ae-41f8-a819-cd5fbff20561",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fb05ab2d-686f-4005-ba0d-c710247e2785"
        },
        "item": {
          "id": "7c153d80-8246-42b0-a24f-1c81fa327330",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "beef5510-c202-41e0-b377-8eb705facad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab23bcd-eab0-49c6-996e-fbe064fbb3d0",
        "cursor": {
          "ref": "3b021e0f-477b-49aa-b426-505bd2ec6955",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "458a3c9f-0bdc-4727-b798-c7ddada7d16a"
        },
        "item": {
          "id": "6ab23bcd-eab0-49c6-996e-fbe064fbb3d0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5949d632-5b5b-41b1-853f-95de20249e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc305e4-ea8f-4bdf-a0c8-c7cf1fae6160",
        "cursor": {
          "ref": "d8e0d80e-7a72-4645-bc55-64c7f4e98620",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6c2a0229-64d7-4808-86c0-2b6f54b8c78d"
        },
        "item": {
          "id": "9fc305e4-ea8f-4bdf-a0c8-c7cf1fae6160",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a109416c-530f-41a8-8095-52cd1b8ca7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fa6c51-7f00-471d-9ec2-67b1fedb635e",
        "cursor": {
          "ref": "8d85dc91-75a9-49fe-9a0d-04535fa03f40",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7207cc89-e94b-4660-b3cb-4bd8fbf7bad9"
        },
        "item": {
          "id": "59fa6c51-7f00-471d-9ec2-67b1fedb635e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2b67bd9d-584c-4927-bdea-0456c178a4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87c5ccd-3ac1-48f9-a4cf-d0fc6736ae94",
        "cursor": {
          "ref": "677187fc-536e-48aa-ac4a-44867bb83a2c",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "485716cf-1d8a-4c23-bf0c-9306e324319c"
        },
        "item": {
          "id": "c87c5ccd-3ac1-48f9-a4cf-d0fc6736ae94",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "55d989c4-9e79-4337-9f6d-52a1fce4a146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c0511a-e9d9-409c-86ac-df49493d19a5",
        "cursor": {
          "ref": "12a0bf16-f7f8-49a7-b486-32777e600993",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5e64e0c1-0a09-4972-a2d1-b060b7dd43ae"
        },
        "item": {
          "id": "53c0511a-e9d9-409c-86ac-df49493d19a5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8452f82c-0ba7-4ca0-8d7d-315a68d08f04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b333724f-d5c8-419f-81c0-54f0f265b21d",
        "cursor": {
          "ref": "3d1a7f25-0748-4429-a7aa-acb5d8eb4b38",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ac92cdb2-e3b2-4dfe-8d16-3da18e125dc6"
        },
        "item": {
          "id": "b333724f-d5c8-419f-81c0-54f0f265b21d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b6bb133f-86a2-4b2c-b626-1944429cc5db",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc9cdf0-0412-4b13-b3af-3571fd0d722c",
        "cursor": {
          "ref": "9135d977-32e1-4b2d-b0b6-c3732f49fa6d",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "911d0400-e2ee-44f0-adce-8176c739402a"
        },
        "item": {
          "id": "9dc9cdf0-0412-4b13-b3af-3571fd0d722c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a1e8bfb5-99e8-4242-ba4b-615730c1a5fa",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1e7eb4-9451-4bc0-8ad8-8dcf1ac67c60",
        "cursor": {
          "ref": "afc6aa70-e9c1-4caf-ac40-7915b6a66aa7",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "337ebd0b-84f5-4d4a-bd9f-bd007d3a8033"
        },
        "item": {
          "id": "cc1e7eb4-9451-4bc0-8ad8-8dcf1ac67c60",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4d6716db-28ff-4830-b5da-c1d1bba66caf",
          "status": "OK",
          "code": 200,
          "responseTime": 634,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "329eaab5-023c-46b8-b7b9-43d054602078",
        "cursor": {
          "ref": "574ec9b1-7b77-4bf0-8fc4-228b028f8727",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fe4c179e-2d5d-41a3-ac30-901fbecaf018"
        },
        "item": {
          "id": "329eaab5-023c-46b8-b7b9-43d054602078",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4485e4cc-e4cc-4347-8451-67b0a224b2f5",
          "status": "OK",
          "code": 200,
          "responseTime": 635,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebe8267-69e0-47f7-adcc-e8401c8fbf43",
        "cursor": {
          "ref": "2af62a8f-360f-4def-9b67-76638f3bb688",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a9934833-d678-4fd8-b834-b86330b61857"
        },
        "item": {
          "id": "6ebe8267-69e0-47f7-adcc-e8401c8fbf43",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8adead71-d6ce-424b-95be-f7cc6e6dfbdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebe8267-69e0-47f7-adcc-e8401c8fbf43",
        "cursor": {
          "ref": "2af62a8f-360f-4def-9b67-76638f3bb688",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a9934833-d678-4fd8-b834-b86330b61857"
        },
        "item": {
          "id": "6ebe8267-69e0-47f7-adcc-e8401c8fbf43",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8adead71-d6ce-424b-95be-f7cc6e6dfbdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebe8267-69e0-47f7-adcc-e8401c8fbf43",
        "cursor": {
          "ref": "2af62a8f-360f-4def-9b67-76638f3bb688",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a9934833-d678-4fd8-b834-b86330b61857"
        },
        "item": {
          "id": "6ebe8267-69e0-47f7-adcc-e8401c8fbf43",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8adead71-d6ce-424b-95be-f7cc6e6dfbdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4acfb1f3-e21d-42aa-9f26-829bf54d964c",
        "cursor": {
          "ref": "97e5693c-b028-4a86-bef0-ba5e038ee7d1",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "08d39898-6efd-4a08-bd58-a8ff91793c6f"
        },
        "item": {
          "id": "4acfb1f3-e21d-42aa-9f26-829bf54d964c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "164c3813-a9ae-4abc-958d-0d8d3cac63f8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfca95f-f795-4015-b54b-f2aa1b9c35be",
        "cursor": {
          "ref": "fdda4a66-b3c9-445c-932a-ad8535cab7b0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a6d7553b-5c89-47b6-a845-cea9ccb1a4a5"
        },
        "item": {
          "id": "7cfca95f-f795-4015-b54b-f2aa1b9c35be",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fb5cd7ce-9b91-4724-b5ee-e0275dc0bc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "7cfca95f-f795-4015-b54b-f2aa1b9c35be",
        "cursor": {
          "ref": "fdda4a66-b3c9-445c-932a-ad8535cab7b0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a6d7553b-5c89-47b6-a845-cea9ccb1a4a5"
        },
        "item": {
          "id": "7cfca95f-f795-4015-b54b-f2aa1b9c35be",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fb5cd7ce-9b91-4724-b5ee-e0275dc0bc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a1cf1efd-4d9b-4aec-b31b-124d2f142c53",
        "cursor": {
          "ref": "1c02e5a9-8b84-412c-bbcf-cdfbcc3533c5",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c7089dd5-cdac-4620-9fb2-6dc8cf46e139"
        },
        "item": {
          "id": "a1cf1efd-4d9b-4aec-b31b-124d2f142c53",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "10c809a5-1f05-4315-9dcf-79987af08f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "6f61604b-01c2-43ab-a7e4-8f5e11bdc755",
        "cursor": {
          "ref": "21b46261-2d45-4435-95b2-5b35a4f6fbab",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b327b007-3299-45b4-8b9e-4f322e9c7be7"
        },
        "item": {
          "id": "6f61604b-01c2-43ab-a7e4-8f5e11bdc755",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0a012b4d-6f41-448e-a9ed-51722766e6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "6f61604b-01c2-43ab-a7e4-8f5e11bdc755",
        "cursor": {
          "ref": "21b46261-2d45-4435-95b2-5b35a4f6fbab",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b327b007-3299-45b4-8b9e-4f322e9c7be7"
        },
        "item": {
          "id": "6f61604b-01c2-43ab-a7e4-8f5e11bdc755",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0a012b4d-6f41-448e-a9ed-51722766e6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "85640e2f-7e63-4b84-adcb-9dd5e45fd864",
        "cursor": {
          "ref": "fa858943-2aa2-4ab9-8666-74f8001f6012",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5f86e8f0-26eb-430e-84cc-5eb6f8cd2444"
        },
        "item": {
          "id": "85640e2f-7e63-4b84-adcb-9dd5e45fd864",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "43ebdb27-618d-4ac8-8c19-bf8b9a48285b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}