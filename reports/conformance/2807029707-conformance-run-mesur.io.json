{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2173caf6-5f8b-457b-9584-f1135c0fa708",
        "name": "API Configuration",
        "item": [
          {
            "id": "ccbdb6cc-535d-4ff6-abc9-cb63dd426aba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c7317e80-e526-400e-a552-e3a3eaf70360",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8762e87-1066-45fa-96ec-d96e09ed6f35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11ed3909-4f0f-4cd0-9038-c6d336667d51"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "473ad20b-50ff-442c-ae8f-6adddd6eca2a",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "5d3d7e2b-4e1e-4df7-90b1-a3454430dd6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7408c24c-6396-4666-8f3a-f2e2ed942bb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6fa2c8a-3707-448e-b4c4-2947ac09012e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d169218-4d42-444c-a558-5ccea9b0892e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fc418f2-96f3-4124-abfa-7e4383149f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d3ab92-aba9-46bb-b0c1-1fa602cb1407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9fd50fa-4826-4ae5-bb7f-e5a5037fdf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5977df90-6dc9-45a1-a32b-1a08a81aece8",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf214571-fafd-4698-8d34-e10a10757c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b35b8d9b-d3aa-44c1-ac0d-2574ce9915e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e8d3f7-a4a4-449d-b5b2-b4e5a62c98e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "687790b0-98b4-490a-9417-6248632fd98f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eca4dcb3-ed51-4bdf-93b7-48134204765b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cdec61b3-e1c8-4c9d-a256-d341f860d2e0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c560162-f8ee-4cca-8fde-d673833ecd17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "43ca44fe-6e9e-4997-96ac-45cb4624fb94"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38541068-18f9-4b29-8901-bc12c7d3edd3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "f0d73ef0-9c9b-4bca-b779-a26bc23bfc91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1ef9542-0de1-4d55-ae2a-2aef3dd92fc0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18d2f6f3-e5f3-4ec5-8e55-97deaf1dacda"
            }
          }
        ]
      },
      {
        "id": "d0d1197e-564c-4858-86fe-e791b083ef63",
        "name": "Issue Credential",
        "item": [
          {
            "id": "456774a6-26bf-4424-a48a-18e65d81fdb5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eaf7db30-482d-4416-8a4a-a224f73599ea",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "255b84e2-a41e-46af-a0e1-dd7238c77a0c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38db00c-b735-4b39-ab26-baf77d7da285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534940a6-e40a-41ea-b734-29f31b7c47cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ccf398-1184-4c22-a09b-5d8f919d38a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "329d03a8-4f1a-4b26-b35e-4e6466665131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417a39a2-e195-4879-b1dc-f9cdecaf7c93",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e69a1d0-1599-4c71-8400-5a8de6c24d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a315e9ef-7020-433a-9c95-be13fd2615b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355cf4fb-49b9-4eb6-9ded-520077a30d6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "246a4b40-9cfc-49d8-b000-3bec981f5f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a044b710-48f1-4917-a67b-89617b15c5d7",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104f8c30-0814-4f91-a4c9-e00225e0fa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332eed92-de47-43fe-936d-3fcc7c93d772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d62e965-3122-46e4-9a73-b91e47a12f20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb09bb88-1884-4ee8-932a-5c71783cdea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fb06d9-53a9-4be8-8e12-367a54501f09",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d51f083-6c10-42a6-9c6d-233cc5b3a86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59fd8b9-277a-4f30-b881-c4466bff6224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30356526-b9bb-47b0-aaae-f4d9d9570e36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ded533d9-a38a-4a0e-b515-84851f26ab49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed8254a-4d84-468a-8e36-f9f2d6453f16",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4b4964-43df-4088-bc76-950a022ba858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c22334f-7a20-4b1a-8c5d-b9044d334b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4039e4d4-2efb-40b6-b7ff-0ac900d44511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "066f3b46-8716-44c3-8635-e67d98d93578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6c0be6-f10d-4a0a-85f0-543bd44a0404",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abaaa691-8995-456c-aa62-596c6bc17726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4079d8fd-cd9a-4108-a88c-377969c2f1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462daa62-2e71-4ec8-b970-243e82c6e5bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c861c16-3ac3-4fb7-bc2e-3fa696fb26b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a45d7b-da5a-498b-91f6-312b76cc3b27",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c1bcea-8cc1-4f32-84a1-ffe1f6796ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850b51ef-646d-4737-bc14-7a952f391adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6eb9cb2-7c92-4326-821a-0cdf57b65059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76a5c314-42b9-4ed4-aeb3-f0e80e2f802c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549319eb-367e-491d-96a6-852d83a356c5",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316f1769-1b9f-4b0c-abec-0825c6075cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8232e617-d60b-4e9e-a389-dd2c9e5db79d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e5432f-a56f-4718-8084-5a3f3bef2bc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7334070-83a0-4fde-bb82-de3e5b093c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e73472-1827-427f-895d-acfbfc019088",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8034acb-dd4a-4992-879a-3860e11f48c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650e20a6-e494-4e07-a97a-406ec0bce5fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb2bf8e-5745-47dc-9034-a1ec8a6ec3d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "826f4c8e-2b95-4944-ae6e-bf2c7c44e50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1df0e2d-b341-44ff-86a2-eec7067fba80",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7083f4cd-2c28-483a-ae8f-46fcef9b1afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f2fb7e-f4d4-4a1c-9906-dc68765789d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4658f7d6-008a-44b5-8b6e-6324820e31d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c834f42a-51d3-4e66-99f4-212dd852ce89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82194703-0126-42ff-b642-f91793a52c87",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f1b85c-d32d-404d-a94b-d765bbde5a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6074d9e-d3df-44c2-9b5c-a1e051934701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bc987a-b788-444d-ac6a-a3740bffe9b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "4f9f2732-7093-42b3-88f8-d54804820290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf5b09b-da1c-4f5b-9aa8-e64e3d301c47",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0746f45d-5ee6-40aa-9a63-8325f9d41082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f6aece-6b99-42e6-b14e-5b74f37876d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f02e91-ac18-4e7f-a0cb-de22df339ef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f54504d-5b4f-476d-a977-04cb6d8b68ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca09495-468a-440e-a54f-9155acc0dc49",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fae5a2-2083-4fc9-9f72-6d00031906be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2caba8e0-63fc-49fe-8a2f-e029041514af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493107ce-bc60-4e7e-ab77-ae68235e0f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "9c8023c4-7bd5-48ff-9fac-c8f6476a368b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca0fe14-8a82-441c-800e-7bf0f3b6fd47",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1a1111-20e7-44b9-8aac-44e0c94dfdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8354f9a9-90f4-43fc-be8c-8c708bbaa315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c737f9-e2ad-4c1a-be6a-dc515dfff6b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc49101d-16a3-41ac-b106-995c03a941b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0b8242-d222-41c3-a598-48cdd31c3639",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b472181-e446-43be-8602-72b14cf28da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca82d6e-674d-4c12-a431-c31188bb6fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c3f97a-fed5-4f70-b9c8-81232750a3ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bbae7dd-b308-44cb-8384-0433dbeb6336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd178b4-7b0a-4d3d-bc29-a44530f647f9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b161ac-53fc-4920-b7c6-62a7084a171a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0cb3fe-c64b-45e2-b585-38796bf01d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c24c590-59c7-4778-891b-8aaf6421223e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49c2a828-fba3-46ca-9613-8b65c6675740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1032e711-a14c-482b-bafe-4df3084394fe",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ac8509-ec19-45b6-9360-0776c15b5a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1777c68-821a-480b-adf6-3207571da1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed5f8de-4f6a-4b9b-9ca7-264665f0ae52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a3c559a-1b71-4426-9fcd-f06313bd442c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561be7ca-3d96-4819-af21-8a9684ae4995",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfb58be-242e-42d0-a0e3-e82f71b426fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b81b47f-1d7c-494e-a795-90513844c33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb0a852-fb5a-463e-bb0a-0330852c6893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f22dbcd9-a3e2-4eb3-b7b5-c0a93b2eb9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39446b81-67da-4eda-8a0d-cf20d6ea2c7b",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8fafbd-3be5-4fc9-bb59-4d2b882d659b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0c4b51-27cc-4821-9149-78ff91d20a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6339a578-a31d-464a-9946-6477e066a352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64046c73-5248-4670-94f0-a328d947d607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bd715c-a88e-40c5-b18a-2862a57d8b17",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "534d1a74-ff4a-41dc-8f6f-3d6f32d8e5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ab8291-fbff-4e7e-97c1-3d8aa8ac0d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4074b571-29bb-43f8-9c45-799ed91718e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b493a46-c800-4add-a1dd-d373d717a9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508369f5-6416-45ca-8bfe-03c2193ef21c",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73167998-cbea-4454-95dd-a807ecd2af3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41778225-4280-445c-9050-7e545eb2c38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22a9367-f5c4-4ca2-933d-ce6fa6c48d4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19c1e632-4440-4894-b233-dd90b8819168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10510c37-56a5-4656-b1ea-58100b52edb6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab22edd-1129-44b1-8b39-2d5c8582469b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d986d36-6b73-4afb-b4ab-c7b3dde4e8ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58227c86-6ba3-4042-b296-568d257bdba4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d76af063-898e-458f-8f50-8fe7fb306101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e5be35-267e-497f-b249-1f7848226d7b",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a32d47e-3b8b-46f3-bef1-df760470f95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e368c6-5f61-4fdb-9c3b-1286837ac9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f98d762-9119-42b1-ae07-96280f431e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ff38c3-9fce-47a0-abc1-0e261e57c7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126546ee-450a-4f61-b11f-241b57fed2ca",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0fa4c8-2eff-41c6-bb38-e6a1eeef25b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec2541be-9663-437b-999b-5246666b4c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa50399-8625-47ec-b2f1-12c5fa67b943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516b601e-aea7-477a-b13b-bf602cc7c424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11657ab-4ca1-4941-b83e-928e5c390805",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a6feca-f853-46ff-b437-fc31377d5e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b381bb-fe6b-421a-8fad-886748462fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ed5dad-707f-45e4-bbeb-49b2d28e75cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dba08d11-88a5-4e76-a797-15ea254c66f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141a8f16-4889-46a7-9e22-b5dab0dd8058",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805c0311-830b-4ced-b4a5-1b7311eaa4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d687bea9-432e-48c1-b2df-95437fa329df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8547ae-0d8c-4078-9f86-ed6635844ef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e50bab83-76da-4aa2-b3a9-77a6f7728374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f92661-324e-4290-aa29-58c83ee6d5fd",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24042f9b-413d-41c2-9e86-ae403db9ecff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffce2afc-d648-4cc4-9cc9-0823d29d33b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2a979c-e271-41a9-9bd8-a24899a3893a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcfc569b-ae4b-45d2-ae41-00413cace71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8dcfbc-abe9-4274-99b6-d2cf0eccb6cc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797b9c14-3f3c-409f-9115-3832c28e51be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "76e3a1db-c9bb-42ab-bed5-02c06aa6ad40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a818ea-ec26-4c6c-967d-f9bb2f9688e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ea6dccb-9d71-4e32-a740-947a37c0e844"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9bdfb181-bbfa-40de-8f30-d37717ae525f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "820d62c1-310e-49ba-9d35-a89f8e2a6cfb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18b3476-0be2-4615-9831-ea9cab0d6a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8418e865-9777-43ea-9da9-1d08219e5c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbb878d-57f8-432f-b453-d89430097725",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5a5acbad-7379-4a99-b01c-a058d9bb42e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529cabad-f7a0-4ba3-9ad1-70c3337d1ed7",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfbc42f-a871-4a45-94c1-ac156ec90d45",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c017503a-9df0-4786-9047-5f0a6d88e2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ce510a-0872-408a-b7f9-8ab78f048fac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b0ec4fb9-6749-4498-a68a-010c98eb3fd4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d3ed71a-a8ad-4207-8d62-016b3558c7a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "956c6c78-297d-483f-be1e-cbbe17d58e7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa8e00c7-5582-4cdf-a9b8-b3c89ecac93f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e13120d4-f64d-45f6-b340-c566ce984247"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b677e762-8cf4-4dd2-aded-de3221a0eebf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f82fee6-00c1-48b1-ad7b-ee9a856fca68"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b30013c8-a7cf-4f99-9784-df66f6585ed2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4571799b-1227-42e5-b2e5-e76860061d27"
                }
              }
            ]
          },
          {
            "id": "7551b318-a718-409b-bc86-6210dd63a556",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16d69afb-47e5-4de6-a747-e77847b686c7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ca063f6-845a-4c44-910f-f318cafc807f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbf064be-fcb2-4b85-b468-866aed612a75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f67ba926-1c90-4d62-bda3-0c4742067ebf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "4a500756-3073-4ed8-b514-709eb6bc612b"
                    }
                  }
                ]
              },
              {
                "id": "3fea04a3-578f-454f-a242-6b2fc799a3c0",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab783954-1707-4beb-af18-80485a476bcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1e742e2-f7a2-4c8d-ace1-e7baebaacb17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78487a55-25e8-4752-98fe-91b77d850969",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "961ead78-0f6c-4973-a2e8-ea85bffd20e7"
                    }
                  }
                ]
              },
              {
                "id": "3da3febc-fa3c-4e41-899e-4170490c8622",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b5edae9-5941-4361-8c9f-cfae3247f0f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9de57379-32f1-4450-a87c-50e8257f1033"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e11b6b2-3c0e-4b54-adbf-1879cb024fcb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "f2c00535-9c49-4cb5-b77d-c247cbe91c00"
                    }
                  }
                ]
              },
              {
                "id": "3b312be0-a710-494a-a402-b52545764a0d",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f862c03-62d5-4924-bbb0-ae8814bf1156",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "654e37c5-eebf-4328-8ffb-77a2176eeb00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8514111d-2c81-4ee3-8937-b6a140558a23",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "1a565a49-c5ac-408d-9e08-1a483d100008"
                    }
                  }
                ]
              },
              {
                "id": "6751771c-fd04-4b52-aa2b-7e5045df8ba9",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1482cba-a764-45d9-b838-8801594b6590",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "daf05a4b-7e1f-4b95-9d92-8534b697ccd2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e74d0ed-88e2-4eb1-a0a4-275ac5a46f46",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "dacc2451-3b14-44ca-8e21-90f9a1c949ff"
                    }
                  }
                ]
              },
              {
                "id": "b656f449-08bb-49ec-98f8-fbea6626b583",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e4a3a20-1468-4c22-9a64-268adbe0b850",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99747079-a947-4757-87d9-9b48c4edffbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcf764a5-1f68-4357-bb5d-6606d6e465b6",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "4a7e35bf-630b-4679-bd71-167aabc9a2e7"
                    }
                  }
                ]
              },
              {
                "id": "5c8534de-ddb4-403f-9a9e-ea94f337b6ec",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3383e2dc-13bf-4610-8b5d-4b66ffa2e64e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6705228-af36-4ca0-86e3-40b84e4d6219"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63f3ce33-b2aa-4c76-bffc-a13c11310f0d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "607b7b7b-e371-418d-89db-3ca267438170"
                    }
                  }
                ]
              },
              {
                "id": "bd03cf38-0088-47d1-93d6-2d76a6ef051c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d13d13d5-bb1c-418e-8449-1410430fee28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdc29763-0d24-44a7-952d-9ef597abe866"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec814e17-ba73-4850-865a-e9b992028564",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "22e7e752-abc7-45e6-a0ce-dd7ea989d02d"
                    }
                  }
                ]
              },
              {
                "id": "1a5ffbbc-282e-4ed6-a55c-9e50116bbfa5",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2335e6b2-8ca5-4ccb-9967-fe76fc247fdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "261c349b-a175-4e45-85ba-8d51f69736b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e479e246-804a-4b47-93cb-1612d2fb59c5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "5ca3f5c2-60f9-4cb1-adb3-8131f6a7494d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "011de6eb-76ba-41e1-97e7-68e398cedfd6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1fc4302-bddd-4a51-933b-fe766c260526"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ecae417b-46e1-434c-b770-6724712c82fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eafa47ac-a35c-4e39-87d9-c418248d126f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7dfdf0d5-c472-4c25-a6a6-47c9862788ab",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "1585fff7-be27-4fdd-9c66-987a90a05c28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "adcd21eb-b149-4950-88c8-4afcb507d0f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dba99e7f-1082-4069-bb0f-24ec22cc9d8f"
            }
          }
        ]
      },
      {
        "id": "15f8bb30-768a-453a-a531-06d36a5a9f4d",
        "name": "Credentials Status",
        "item": [
          {
            "id": "4ff1358d-8a77-4a9c-aada-f7241d6fbbde",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16979edc-2a31-468b-828a-58659774626a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99a486b5-3649-43b4-a318-0024178de7a4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73f68bb-793c-4903-a8cb-0a5261a41a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fcdd2c1-594a-4dfd-a4f2-4b8662b4f6f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2902da-11c6-419d-a031-448ca4aa3f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c2a0ca3-5795-4d0c-9b8a-922c4a0f2012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c402009-55eb-490a-bb94-0cf05292cf23",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0690c9-1784-4828-b560-c2d7277ccb9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e73b6b78-d6b4-4c59-97ec-ea7eb79c40c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca411d14-3b1e-4f2d-a4c7-2531de49e493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "647dc8b9-e0f5-493a-a4ba-d55462187538"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2274361-30cb-46d3-a51c-5d898d37a0ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9d7f5b9-9cc0-4b24-8037-4fb65fb84cc3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5c251f5-993a-44ce-b7ed-af5ab8f4eaef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a6a5123-c4ab-489f-a1a6-68aa8a5c9f62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8e51a42-2f1e-4cfa-b2d6-a2f8e61802ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "15a1c9b5-a1a6-4d19-8693-01f5aa7380f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b11da14b-097d-4e41-b12c-04761862c6fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d076946-6f93-49ef-9cca-ba7ba98c1021"
            }
          }
        ]
      },
      {
        "id": "b88af4a6-6c0b-4888-89e9-8e4b3f1ac693",
        "name": "Presentations",
        "item": [
          {
            "id": "ff3f59ce-7ad1-459b-9a8d-3274b197abb0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f83a1492-f56c-4bd5-88e5-325f7c426c8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d81ceb3-6984-46c7-825c-523f859f4b2e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba13a647-4f67-470b-9441-c9c80a8282c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e1edbc-a6b3-4244-8bdb-d7f06185c643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecc78cf-a098-4ef2-80aa-f5a9087f90a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50f4badb-3406-4b5a-b3a3-d4ebac1b07c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be526c7-850a-4a62-8a7f-f07085b55f83",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2abc88e-ab46-47ed-9348-4012ac74b908",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c38f8fad-ca20-48ec-814c-a7b69e77ed67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad195e06-56cf-4649-9f87-f65c0a9db8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c34678c7-3a21-4eba-99e0-872566848c68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9694c9d4-dc18-421c-9748-9b3e31b6ad22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84cb254b-12e4-4ce1-90d9-5dce593ff8b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14985c09-5241-4e34-9208-e3902b1544e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1d70249-ba86-45f7-b594-1d9ea92eee26"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80b708c4-11f4-4e98-bc35-88e356c14ece",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "699f9393-c853-4897-9d7d-e111f8026355"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fcd4d28-fb66-4116-94df-cdff8708c5aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52f61886-7f99-424c-baf0-3106c798bb6d"
            }
          }
        ]
      },
      {
        "id": "57683f37-2ffd-4438-8d85-795de21aa918",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "a2e75898-46c7-41ab-908e-f47749206ddb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0f19d19-b5ef-4faf-9dda-3df17a67a5be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a741fbce-d55d-4765-8703-c84d150fc32d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42dc1f60-061d-43c2-b8c8-ad5abc8bc330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ee86c3-2786-4ef3-ad70-ce11bb83e368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce80197-e168-4781-a243-9126666b0ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56448104-fa5a-43d2-bb0c-e6d711bdd914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d40ad96-fcf1-450c-89a3-bb04c05cc7aa",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df5250f-01c4-4982-a6bd-bbff7db7a0e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ddbd793-89c0-4f56-a511-6f643b4a39f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd504f27-73d4-43fe-9364-68636cf2d4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57670450-ef5f-4964-8a36-26b6901710de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5be94835-aace-4293-8649-9b6777d807ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d14e83aa-9254-4ffd-ac7b-af8c1f0bb5c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48ec3a18-3009-4517-805e-b56ac3eeb26b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4338dd21-8d12-41ce-a6ae-9ff35845c2dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4457cdc-ecfa-4072-b930-39700089079f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "f2780e7b-e2c7-4f9e-8e8b-dcb7498cd045"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f1ffe92-4285-4f6c-935d-595e6b2f83e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e94f19a5-f7f9-4383-9a92-37d9f35777e4"
            }
          }
        ]
      },
      {
        "id": "299d0622-a5f5-4853-948b-3c89006af524",
        "name": "Presentations Prove",
        "item": [
          {
            "id": "f9a78004-fa35-493c-9f62-217cd34b0e1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c637c38-1808-4c15-a625-d9f55e0e5beb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "078ca995-7bd0-47ad-b930-b89c2e8e60e8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccce83d-2751-4ada-b568-521237863044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f4526b-4f7b-46cc-b062-4a7116a3171f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e64132-8e40-4544-819c-0e297f37545d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cd15179-e281-43a7-8a45-fb3a97d00d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5827b1d-b816-426e-b560-ddf9cff896d6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0a1f48-aa06-44a2-8fa9-7f72224a4349",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "527f8e01-57c3-490a-a099-ae9c90a1f7e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5328c651-4643-40c9-88fd-597ba85677fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67540a25-e76b-465e-8111-d9f3afaedb71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b17cf96d-477a-42a5-a185-5f1b7a5f4995",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01f054aa-d162-484c-820c-6978e9f540ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d055680d-824d-4787-81b4-7aadbc02eadc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65deb1cc-8a76-4796-b1cc-3302b35d411f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2138370-899d-4b51-84d8-b450e15caaad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('prove:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "2d5bd684-bba5-4e7f-a1f2-848a409a8727"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9af90ec5-3286-45a4-9ae0-e66c342245fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f369f8b-dee2-4dc2-80ac-b9f896a29282"
            }
          }
        ]
      },
      {
        "id": "77c1b2f2-a6c7-41b4-ae66-81da20bc0804",
        "name": "Presentations Verify",
        "item": [
          {
            "id": "ca27761a-5807-4314-aed3-630b309554c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf65b6d9-581d-4077-be43-1293ff74f8b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4262a661-9cce-4c3b-96c8-dfa55d41cb8f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b12a09-3fb5-47d4-872a-9aee479aa76d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "813ea041-e14a-4d72-b1ed-ae8f2a657e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7202d0a0-50e1-4049-8970-71aa34de6b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23dd7935-aa1f-4568-86f3-2744376a5f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580c5967-d4ca-4e87-bc9a-ef47c641ed6d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5665970-051f-4b60-bc50-4f72f6d14b95",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22834809-274e-40b7-8e81-0f1697bf43ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e81c39-d5e0-46cd-982e-75027326ad52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fee2676d-910e-4341-ba29-ffa9873c5f1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1fa3bfc-700e-45da-9b0b-87d464dfd42d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6172bc47-2574-4f02-ab12-bbfb553849e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50c8f37d-8bb4-41c4-897d-57941034a4a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b3b6a1c-dc5d-4fd4-a51a-704767035269"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "306bee76-2092-40f8-af3f-da32045e7717",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "f290beed-a9e2-4009-81ca-f032f6c127c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83cbb707-6ddc-4e77-be06-1924e4e8cc4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "efdd0b34-ba78-4dcc-a140-56334330046e"
            }
          }
        ]
      },
      {
        "id": "a5d6e05a-3007-4316-b221-7131a10f6aa3",
        "name": "Presentations Available",
        "item": [],
        "event": []
      },
      {
        "id": "c1930605-b27d-4e9f-bebf-25f813de488c",
        "name": "Presentations Submissions",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 416,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 61,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 106,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 209,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 207,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.93442622950818,
      "responseMin": 5,
      "responseMax": 463,
      "responseSd": 94.62434249115765,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1659746574316,
      "completed": 1659746580913
    },
    "executions": [
      {
        "id": "c7317e80-e526-400e-a552-e3a3eaf70360",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 53,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1ec7aead-ae97-4a93-912c-50861bb5b93c",
          "httpRequestId": "e68064de-eb44-4fe8-8095-4e23071ed457"
        },
        "item": {
          "id": "c7317e80-e526-400e-a552-e3a3eaf70360",
          "name": "did_json"
        },
        "response": {
          "id": "8d4015b3-aea4-4737-9419-3b0014ededaa",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fa2c8a-3707-448e-b4c4-2947ac09012e",
        "cursor": {
          "ref": "e0519fa8-d808-4705-9f04-0796a30f9c5e",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a1fb005f-cbf8-457c-b048-2f7f33ad4796"
        },
        "item": {
          "id": "e6fa2c8a-3707-448e-b4c4-2947ac09012e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "16f01229-b6c8-4771-9e4f-4c18c098fc58",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "e6fa2c8a-3707-448e-b4c4-2947ac09012e",
        "cursor": {
          "ref": "e0519fa8-d808-4705-9f04-0796a30f9c5e",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a1fb005f-cbf8-457c-b048-2f7f33ad4796"
        },
        "item": {
          "id": "e6fa2c8a-3707-448e-b4c4-2947ac09012e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "16f01229-b6c8-4771-9e4f-4c18c098fc58",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "5977df90-6dc9-45a1-a32b-1a08a81aece8",
        "cursor": {
          "ref": "04eee7ef-108c-4201-a63b-f896bc5b9c45",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3235d279-73ad-4b49-a4e7-5c35cf6bd021"
        },
        "item": {
          "id": "5977df90-6dc9-45a1-a32b-1a08a81aece8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f34c2f63-86ae-4d50-a0f6-19d5baa2aa94",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "5977df90-6dc9-45a1-a32b-1a08a81aece8",
        "cursor": {
          "ref": "04eee7ef-108c-4201-a63b-f896bc5b9c45",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3235d279-73ad-4b49-a4e7-5c35cf6bd021"
        },
        "item": {
          "id": "5977df90-6dc9-45a1-a32b-1a08a81aece8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "f34c2f63-86ae-4d50-a0f6-19d5baa2aa94",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "cdec61b3-e1c8-4c9d-a256-d341f860d2e0",
        "cursor": {
          "ref": "a1a538a8-bb95-4142-a204-4b93831373aa",
          "length": 53,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "393caad8-6463-4c2c-aaac-046f5eddf6b3"
        },
        "item": {
          "id": "cdec61b3-e1c8-4c9d-a256-d341f860d2e0",
          "name": "identifiers"
        },
        "response": {
          "id": "8e4e2dca-3297-47b3-86a9-ed196db62120",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255b84e2-a41e-46af-a0e1-dd7238c77a0c",
        "cursor": {
          "ref": "80818062-d67a-4a35-b40f-485181d0c3ca",
          "length": 53,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "be510f7f-582e-4c18-956b-06337e1ccddb"
        },
        "item": {
          "id": "255b84e2-a41e-46af-a0e1-dd7238c77a0c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "566f2c22-34ce-462e-954c-9cc9e19e018e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 387,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "417a39a2-e195-4879-b1dc-f9cdecaf7c93",
        "cursor": {
          "ref": "7c9d5378-a372-42a3-9565-9a52d7ddbda6",
          "length": 53,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f37a00d1-ecd5-44c6-a895-323f9baad9eb"
        },
        "item": {
          "id": "417a39a2-e195-4879-b1dc-f9cdecaf7c93",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "25edf968-9365-4789-9bc0-1afaf19d1f7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "a044b710-48f1-4917-a67b-89617b15c5d7",
        "cursor": {
          "ref": "5b977aa9-fcce-4816-ad99-e30c77d98bc6",
          "length": 53,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "25d94df2-eff7-45bf-877e-dbaa024380dc"
        },
        "item": {
          "id": "a044b710-48f1-4917-a67b-89617b15c5d7",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "59c0d9b5-46a9-4c7f-9581-1a9b09dabad9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "46fb06d9-53a9-4be8-8e12-367a54501f09",
        "cursor": {
          "ref": "ffd0fcc9-23c8-4701-a1f2-e1ab41bd50c8",
          "length": 53,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "49933d78-3622-4904-8cc3-839a53e9a627"
        },
        "item": {
          "id": "46fb06d9-53a9-4be8-8e12-367a54501f09",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "6aadf19e-0135-4517-9109-4161be13017f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5ed8254a-4d84-468a-8e36-f9f2d6453f16",
        "cursor": {
          "ref": "41df243e-ebc8-4496-b060-69b7f2e1553c",
          "length": 53,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "14f95b05-d22d-4f46-bccd-6ffe88b2e7e3"
        },
        "item": {
          "id": "5ed8254a-4d84-468a-8e36-f9f2d6453f16",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "d18cb642-64ea-4c39-a545-05cd36745916",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "5d6c0be6-f10d-4a0a-85f0-543bd44a0404",
        "cursor": {
          "ref": "72042740-55b1-41b4-90b8-d82260d2b893",
          "length": 53,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "73d8e48f-8430-4e9f-979e-6f6562ae3016"
        },
        "item": {
          "id": "5d6c0be6-f10d-4a0a-85f0-543bd44a0404",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bf78f70f-ed8e-44ea-9729-e6dad57576d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "76a45d7b-da5a-498b-91f6-312b76cc3b27",
        "cursor": {
          "ref": "c3e1eb5f-bb58-4018-928d-b7ae793fd8d8",
          "length": 53,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b1dbadcc-9042-466e-8a5c-80af5a55a017"
        },
        "item": {
          "id": "76a45d7b-da5a-498b-91f6-312b76cc3b27",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "9a9cf533-99ea-447c-91c2-d93bd12085fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "549319eb-367e-491d-96a6-852d83a356c5",
        "cursor": {
          "ref": "19f9d29b-0b21-4ca2-ad46-a60058d4847e",
          "length": 53,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "973a3b30-762b-471c-a416-7f5a38a9edc9"
        },
        "item": {
          "id": "549319eb-367e-491d-96a6-852d83a356c5",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "99530eb8-6dae-4830-9143-42673029557b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "a7e73472-1827-427f-895d-acfbfc019088",
        "cursor": {
          "ref": "8a8498db-e2ca-40fa-9c72-9004ced848e7",
          "length": 53,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f886e5bd-b028-4886-a28f-a24c98ae47cd"
        },
        "item": {
          "id": "a7e73472-1827-427f-895d-acfbfc019088",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c7a9921a-0c95-49a4-b24d-cf8e6500cde2",
          "status": "Created",
          "code": 201,
          "responseTime": 32,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "d1df0e2d-b341-44ff-86a2-eec7067fba80",
        "cursor": {
          "ref": "e3467130-085d-4f91-812d-ab9ea3efbc38",
          "length": 53,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8c45ceb4-428b-4420-a14d-68ee0d1c612e"
        },
        "item": {
          "id": "d1df0e2d-b341-44ff-86a2-eec7067fba80",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "4c05fcb0-f990-4d71-9530-a7d391d8bead",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "82194703-0126-42ff-b642-f91793a52c87",
        "cursor": {
          "ref": "0c5c9b8a-680d-4901-8576-d0ec0a6cabc1",
          "length": 53,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0c9b5455-833c-42a6-9dea-76bcfbc47c09"
        },
        "item": {
          "id": "82194703-0126-42ff-b642-f91793a52c87",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "64fcae2d-a125-4960-89c4-98a875e47613",
          "status": "Created",
          "code": 201,
          "responseTime": 120,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "fdf5b09b-da1c-4f5b-9aa8-e64e3d301c47",
        "cursor": {
          "ref": "2c049cc6-fc9d-4bbd-b406-7afc8fc2cdfd",
          "length": 53,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "214241f6-1206-454e-b2a5-824e493ab4dc"
        },
        "item": {
          "id": "fdf5b09b-da1c-4f5b-9aa8-e64e3d301c47",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "23b0e0bf-0848-45f4-a375-d14573348d49",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "dca09495-468a-440e-a54f-9155acc0dc49",
        "cursor": {
          "ref": "9bc83f5e-72c3-4b38-a6a9-ab4c985fb97a",
          "length": 53,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8368475c-08f5-4d2b-b9d5-f6b780f3be26"
        },
        "item": {
          "id": "dca09495-468a-440e-a54f-9155acc0dc49",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "cac87878-e804-4a13-95e2-b8a0354a3c57",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "8ca0fe14-8a82-441c-800e-7bf0f3b6fd47",
        "cursor": {
          "ref": "d1be0b6c-1eca-4701-87b8-7c324a06382f",
          "length": 53,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "90bcb7d2-b927-4107-812b-ac1e62f494ab"
        },
        "item": {
          "id": "8ca0fe14-8a82-441c-800e-7bf0f3b6fd47",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5028abfa-e220-431e-bf7e-90e805833375",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2c0b8242-d222-41c3-a598-48cdd31c3639",
        "cursor": {
          "ref": "9ade7bd5-8f3b-4392-91f7-3bfe7ff1e832",
          "length": 53,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f960f738-aa56-4876-b0d5-be9cbad107a7"
        },
        "item": {
          "id": "2c0b8242-d222-41c3-a598-48cdd31c3639",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "1ae14dc1-d85d-415f-94cb-3c1f1e7c95ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ffd178b4-7b0a-4d3d-bc29-a44530f647f9",
        "cursor": {
          "ref": "bb29d389-78db-45e4-9915-132f47347315",
          "length": 53,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "973bbb28-6879-4acd-8408-8ea7b3e7b876"
        },
        "item": {
          "id": "ffd178b4-7b0a-4d3d-bc29-a44530f647f9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8572d515-3891-4d68-9fbe-d352e4792438",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "1032e711-a14c-482b-bafe-4df3084394fe",
        "cursor": {
          "ref": "e6bef03f-fe25-4226-a42c-beba3aef8f03",
          "length": 53,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "99f7a35b-583f-4191-b8d9-8d8a6ffa940a"
        },
        "item": {
          "id": "1032e711-a14c-482b-bafe-4df3084394fe",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "71a1fd3f-f7ea-4938-8939-d5d13dac516e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "561be7ca-3d96-4819-af21-8a9684ae4995",
        "cursor": {
          "ref": "cfedb548-4b61-4116-91ef-6737f1c435ca",
          "length": 53,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8f4d54fa-7ee8-4350-9fc6-46590a93ff17"
        },
        "item": {
          "id": "561be7ca-3d96-4819-af21-8a9684ae4995",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "4fc7d814-99b6-4215-b956-c9d79f92c31d",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "39446b81-67da-4eda-8a0d-cf20d6ea2c7b",
        "cursor": {
          "ref": "9aefda19-db83-42fd-91bf-4278b7f09f85",
          "length": 53,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4e6c652f-280d-4a56-a186-cc319d1bae25"
        },
        "item": {
          "id": "39446b81-67da-4eda-8a0d-cf20d6ea2c7b",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "953bce18-49c2-49c0-b184-5a3d0a14c60c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "71bd715c-a88e-40c5-b18a-2862a57d8b17",
        "cursor": {
          "ref": "2df905c3-cbaa-4e2c-bad5-295fa0eccb1f",
          "length": 53,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cc527bff-0588-41e6-abf7-fee3e7ce26e8"
        },
        "item": {
          "id": "71bd715c-a88e-40c5-b18a-2862a57d8b17",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6367f82f-6676-4dc6-bd4a-f6befae0dd37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 7,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "508369f5-6416-45ca-8bfe-03c2193ef21c",
        "cursor": {
          "ref": "8cc9e0f1-ca4d-4e9a-97bb-c6b6c6e6c057",
          "length": 53,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dcd81e46-ca72-4b46-ab8b-36c060d377aa"
        },
        "item": {
          "id": "508369f5-6416-45ca-8bfe-03c2193ef21c",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "cf32b4d7-dbcd-4b6f-93dc-a8c3305a62c4",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "10510c37-56a5-4656-b1ea-58100b52edb6",
        "cursor": {
          "ref": "76050bca-7aa7-453b-a18d-3ed4c1efa944",
          "length": 53,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4a06b3f7-3912-419e-8ea3-5a0b55ffc6bf"
        },
        "item": {
          "id": "10510c37-56a5-4656-b1ea-58100b52edb6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dbb353c9-2a8c-4421-b612-22b859316cba",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "d9e5be35-267e-497f-b249-1f7848226d7b",
        "cursor": {
          "ref": "f0acbbd8-94f1-48cc-bfe2-a21429bedeb7",
          "length": 53,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e17e3a7d-b4f5-40cd-abe5-8cc022d26e9d"
        },
        "item": {
          "id": "d9e5be35-267e-497f-b249-1f7848226d7b",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c84c7fb2-f8db-458a-a738-860231029601",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "126546ee-450a-4f61-b11f-241b57fed2ca",
        "cursor": {
          "ref": "7e332d66-043e-4381-93e4-2c1278be1825",
          "length": 53,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cf5d91fb-0aa5-4191-82ac-a9ab181e6835"
        },
        "item": {
          "id": "126546ee-450a-4f61-b11f-241b57fed2ca",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1d276961-2c4c-4f8e-92a6-e83b2a1c663a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "a11657ab-4ca1-4941-b83e-928e5c390805",
        "cursor": {
          "ref": "bbb2fb66-dba4-452c-9796-9ccf766cc24e",
          "length": 53,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ae3aa3c8-8d96-4c87-a06c-9aad531f0e88"
        },
        "item": {
          "id": "a11657ab-4ca1-4941-b83e-928e5c390805",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "f815af56-5ca8-491f-a600-7e80bdf22a04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "141a8f16-4889-46a7-9e22-b5dab0dd8058",
        "cursor": {
          "ref": "289b8e90-9dfe-4309-9989-cec36c8f1835",
          "length": 53,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "30ff32f7-64fe-402d-be8f-add512f33116"
        },
        "item": {
          "id": "141a8f16-4889-46a7-9e22-b5dab0dd8058",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "6965e087-5338-4e42-a107-4c0cd7b6c8d1",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c4f92661-324e-4290-aa29-58c83ee6d5fd",
        "cursor": {
          "ref": "04aaf5d8-5b2e-4288-a6eb-15e3e4e23f94",
          "length": 53,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "95f982f6-34c0-4a29-9156-92d8706e1c97"
        },
        "item": {
          "id": "c4f92661-324e-4290-aa29-58c83ee6d5fd",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "fcd1dd6a-0d17-4645-8b6a-ac18c69bbd64",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "0d8dcfbc-abe9-4274-99b6-d2cf0eccb6cc",
        "cursor": {
          "ref": "05b57d18-105d-4f1b-87ed-3a8b7d7be028",
          "length": 53,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "eb82b115-c4c0-4c88-b804-4c8e9d0bb237"
        },
        "item": {
          "id": "0d8dcfbc-abe9-4274-99b6-d2cf0eccb6cc",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "2b45285a-01b0-447e-9c7f-f631a35d2566",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "820d62c1-310e-49ba-9d35-a89f8e2a6cfb",
        "cursor": {
          "ref": "1b1a48a6-920b-47a6-9b36-98733ba902b8",
          "length": 53,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a10b54f3-1869-4c90-a0bd-b7859c150655"
        },
        "item": {
          "id": "820d62c1-310e-49ba-9d35-a89f8e2a6cfb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b2bdca6f-a2b3-4f54-8030-f6074c076f0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "529cabad-f7a0-4ba3-9ad1-70c3337d1ed7",
        "cursor": {
          "ref": "f531e027-b2d5-423c-83c4-83a4fe44b268",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0266d818-df06-4573-962f-a7e59256c13c"
        },
        "item": {
          "id": "529cabad-f7a0-4ba3-9ad1-70c3337d1ed7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b1bbeb7d-34fc-486e-9696-6bfe40fe31aa",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "529cabad-f7a0-4ba3-9ad1-70c3337d1ed7",
        "cursor": {
          "ref": "f531e027-b2d5-423c-83c4-83a4fe44b268",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0266d818-df06-4573-962f-a7e59256c13c"
        },
        "item": {
          "id": "529cabad-f7a0-4ba3-9ad1-70c3337d1ed7",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b1bbeb7d-34fc-486e-9696-6bfe40fe31aa",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "16d69afb-47e5-4de6-a747-e77847b686c7",
        "cursor": {
          "ref": "54cd2f65-e566-4470-bfd2-ab80b6cdf2c5",
          "length": 53,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0d22832f-b8d0-4cb1-ade1-bb1eae0ea7da"
        },
        "item": {
          "id": "16d69afb-47e5-4de6-a747-e77847b686c7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "380cb336-1b86-401b-8316-2f0d38f446f8",
          "status": "Created",
          "code": 201,
          "responseTime": 34,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "3fea04a3-578f-454f-a242-6b2fc799a3c0",
        "cursor": {
          "ref": "b1637b55-abcb-4d86-82e2-94078000bb3a",
          "length": 53,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c44b3a7b-2017-4b2b-8d02-67887d1b0b41"
        },
        "item": {
          "id": "3fea04a3-578f-454f-a242-6b2fc799a3c0",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "ab37cc4a-bc17-4ae3-8b7c-1d8129580385",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "3da3febc-fa3c-4e41-899e-4170490c8622",
        "cursor": {
          "ref": "c14b551a-2a80-4bb2-beca-8af309887b66",
          "length": 53,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ad1d94dd-e8be-4e32-abf4-a41153921aa6"
        },
        "item": {
          "id": "3da3febc-fa3c-4e41-899e-4170490c8622",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {
          "id": "cef73bb1-0a76-46dd-83c0-facd9d9993e5",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "3b312be0-a710-494a-a402-b52545764a0d",
        "cursor": {
          "ref": "1ae87b50-2fde-441f-b6b4-f4734a0d2be6",
          "length": 53,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "43a17fa9-af3a-4a18-a6cd-0b2e867935e9"
        },
        "item": {
          "id": "3b312be0-a710-494a-a402-b52545764a0d",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {
          "id": "ce73c751-a6d4-4e51-9973-107ad498991e",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "6751771c-fd04-4b52-aa2b-7e5045df8ba9",
        "cursor": {
          "ref": "26f3dd94-cbc0-4704-ba6d-cfa20f4ebe9f",
          "length": 53,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "aa47becb-aa41-4e29-9ca9-e00451d1d655"
        },
        "item": {
          "id": "6751771c-fd04-4b52-aa2b-7e5045df8ba9",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "9b21000f-8cac-463b-8a3d-6697208f1adf",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b656f449-08bb-49ec-98f8-fbea6626b583",
        "cursor": {
          "ref": "30e7946c-f2b8-4b33-8739-141745b5dde9",
          "length": 53,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "96e515a3-f5df-4be4-ba81-5e26e6a39d59"
        },
        "item": {
          "id": "b656f449-08bb-49ec-98f8-fbea6626b583",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bc269fdf-7e60-4b94-a523-1436c74ad18a",
          "status": "Created",
          "code": 201,
          "responseTime": 30,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5c8534de-ddb4-403f-9a9e-ea94f337b6ec",
        "cursor": {
          "ref": "4cc45076-b85d-4eb2-92b5-0b0b0c3623ba",
          "length": 53,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ae31fa36-92c1-4f97-9dba-8a7e00c0fda2"
        },
        "item": {
          "id": "5c8534de-ddb4-403f-9a9e-ea94f337b6ec",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "12bbd9dc-a142-44b8-80cc-71d7be3efd76",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bd03cf38-0088-47d1-93d6-2d76a6ef051c",
        "cursor": {
          "ref": "6266acfb-3323-4e77-9cb5-cdc6e4e92ae0",
          "length": 53,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "73c1cb61-da6c-481a-b9b3-79ff4b62d857"
        },
        "item": {
          "id": "bd03cf38-0088-47d1-93d6-2d76a6ef051c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e1015217-70cc-4e3d-bab2-4f6df6602aef",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "1a5ffbbc-282e-4ed6-a55c-9e50116bbfa5",
        "cursor": {
          "ref": "e91ab4f0-98ad-485d-8dd7-f3f3745ff1b7",
          "length": 53,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5185f70a-dbb2-4a99-8678-52238ffc2909"
        },
        "item": {
          "id": "1a5ffbbc-282e-4ed6-a55c-9e50116bbfa5",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "bd682e96-8012-47ef-838b-af9d2b963491",
          "status": "Created",
          "code": 201,
          "responseTime": 29,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "99a486b5-3649-43b4-a318-0024178de7a4",
        "cursor": {
          "ref": "05adbee8-de0b-4d40-8bf1-bea2fb8082c2",
          "length": 53,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aa95768e-e4e3-4842-8a05-b7369b0173f4"
        },
        "item": {
          "id": "99a486b5-3649-43b4-a318-0024178de7a4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fce8be60-1d0d-451c-878c-bad24a4ad715",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3c402009-55eb-490a-bb94-0cf05292cf23",
        "cursor": {
          "ref": "2de0b51b-ae7e-4df8-a689-ad9661e39661",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b571645f-f475-4294-bf37-4e3a98814b39"
        },
        "item": {
          "id": "3c402009-55eb-490a-bb94-0cf05292cf23",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6693d2cc-c800-4d4e-b6a3-86b6d2f8697b",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 7,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3c402009-55eb-490a-bb94-0cf05292cf23",
        "cursor": {
          "ref": "2de0b51b-ae7e-4df8-a689-ad9661e39661",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b571645f-f475-4294-bf37-4e3a98814b39"
        },
        "item": {
          "id": "3c402009-55eb-490a-bb94-0cf05292cf23",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6693d2cc-c800-4d4e-b6a3-86b6d2f8697b",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 7,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8d81ceb3-6984-46c7-825c-523f859f4b2e",
        "cursor": {
          "ref": "1a149327-aaa4-4242-befd-2fbfa0d63f48",
          "length": 53,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fbc43c34-b18e-4bfb-9af6-bd356a32440a"
        },
        "item": {
          "id": "8d81ceb3-6984-46c7-825c-523f859f4b2e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "faea67fe-9e05-4a86-80ce-a6e7da186f77",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7be526c7-850a-4a62-8a7f-f07085b55f83",
        "cursor": {
          "ref": "7ec69a25-d85e-4e34-94f7-97687477df9f",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fa49041a-6930-4ad2-8f16-2285c2932ea3"
        },
        "item": {
          "id": "7be526c7-850a-4a62-8a7f-f07085b55f83",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "59b88298-fa16-4d51-90de-594830c2d042",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7be526c7-850a-4a62-8a7f-f07085b55f83",
        "cursor": {
          "ref": "7ec69a25-d85e-4e34-94f7-97687477df9f",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fa49041a-6930-4ad2-8f16-2285c2932ea3"
        },
        "item": {
          "id": "7be526c7-850a-4a62-8a7f-f07085b55f83",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "59b88298-fa16-4d51-90de-594830c2d042",
          "status": "Not Found",
          "code": 404,
          "responseTime": 8,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a741fbce-d55d-4765-8703-c84d150fc32d",
        "cursor": {
          "ref": "10383394-c7f6-4e9c-9eae-4f08d366f6a7",
          "length": 53,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5edf71b1-5519-47c2-b04d-c55d764d0e62"
        },
        "item": {
          "id": "a741fbce-d55d-4765-8703-c84d150fc32d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c7399d3c-fff1-40f8-b9b4-f975947fef56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7d40ad96-fcf1-450c-89a3-bb04c05cc7aa",
        "cursor": {
          "ref": "c0a868f8-baa2-43bd-b3f6-4b6299a4937c",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c728e701-a288-4275-80ec-d147b7a1e10d"
        },
        "item": {
          "id": "7d40ad96-fcf1-450c-89a3-bb04c05cc7aa",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f50e2b03-6e72-4c32-aedf-1fa8130d1220",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7d40ad96-fcf1-450c-89a3-bb04c05cc7aa",
        "cursor": {
          "ref": "c0a868f8-baa2-43bd-b3f6-4b6299a4937c",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c728e701-a288-4275-80ec-d147b7a1e10d"
        },
        "item": {
          "id": "7d40ad96-fcf1-450c-89a3-bb04c05cc7aa",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f50e2b03-6e72-4c32-aedf-1fa8130d1220",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "078ca995-7bd0-47ad-b930-b89c2e8e60e8",
        "cursor": {
          "ref": "01cc208a-c39b-4459-83c0-8dabef2f23b1",
          "length": 53,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8245e716-d0a7-4ee3-8422-6e862a691c24"
        },
        "item": {
          "id": "078ca995-7bd0-47ad-b930-b89c2e8e60e8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dcd82e0d-e770-4bec-9e4d-04bafb1cf383",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c5827b1d-b816-426e-b560-ddf9cff896d6",
        "cursor": {
          "ref": "2cb33fd9-b11e-4011-aa40-5e21f7eeddf8",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "099ad9e5-09ae-4536-8b2f-1043fa383a03"
        },
        "item": {
          "id": "c5827b1d-b816-426e-b560-ddf9cff896d6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8879a41e-2c81-470e-be88-51726aa3ba84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c5827b1d-b816-426e-b560-ddf9cff896d6",
        "cursor": {
          "ref": "2cb33fd9-b11e-4011-aa40-5e21f7eeddf8",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "099ad9e5-09ae-4536-8b2f-1043fa383a03"
        },
        "item": {
          "id": "c5827b1d-b816-426e-b560-ddf9cff896d6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8879a41e-2c81-470e-be88-51726aa3ba84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4262a661-9cce-4c3b-96c8-dfa55d41cb8f",
        "cursor": {
          "ref": "9dab1b18-ac0d-401b-8560-68719ae705b0",
          "length": 53,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dd5cafc6-5084-4283-b061-a2176ade9721"
        },
        "item": {
          "id": "4262a661-9cce-4c3b-96c8-dfa55d41cb8f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2aa7713e-7596-4409-86f1-a35eddd49d0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "580c5967-d4ca-4e87-bc9a-ef47c641ed6d",
        "cursor": {
          "ref": "0674620b-2236-4c7b-aa68-d2a150bbe672",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8943a67d-3831-4980-acb1-24cb7350f049"
        },
        "item": {
          "id": "580c5967-d4ca-4e87-bc9a-ef47c641ed6d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2bdf7d4d-7242-42be-aa00-51d1e0109551",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "580c5967-d4ca-4e87-bc9a-ef47c641ed6d",
        "cursor": {
          "ref": "0674620b-2236-4c7b-aa68-d2a150bbe672",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8943a67d-3831-4980-acb1-24cb7350f049"
        },
        "item": {
          "id": "580c5967-d4ca-4e87-bc9a-ef47c641ed6d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2bdf7d4d-7242-42be-aa00-51d1e0109551",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      }
    ]
  }
}